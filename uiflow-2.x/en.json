{
    "BACK_TO_ALPHA": "Back to Alpha Version",
    "USER_GUIDE": "User Guide",
    "DOCS": "Product Docs",
    "API_DOCS": "API Docs",
    "FORUM": "Community",
    "UPDATE_LOG": "Update Log",
    "CONTRIBUTOR": "Contributor",
    "DEVICE_FILE_MANAGER": "Device File Manager",
    "FILE": "Project Files",
    "MY_PROJECTS": "My Projects",
    "FAVORITE_PROJECTS": "Favorite Projects",
    "CREATE_NEW_PROJECT": "New Project",
    "RENAME": "Rename",
    "DELETE": "Delete",
    "SHARED": "Shared",
    "PRIVATE": "Private",
    "CREATE_PROJECT": "Create New Project",
    "SAVE_NEW_PROJECT": "Save New Project",
    "SAVE_AS_NEW_PROJECT": "Save as New Project",
    "CHANGE_PROJECT_PROFILE": "Change Project Profile",
    "PROJECT_NAME": "Name",
    "PROJECT_REMARK": "Description",
    "PROJECT_COVER_IMAGE": "Cover Image",
    "PROJECT_DEVICE": "Device",
    "PROJECT_NAME_TIPS": "To better share your project, please consider assigning it a unique name. The current default name does not support sharing functionality. We believe an attractive name can better showcase your project.",
    "PROJECT_REMARK_TIPS": "Before sharing your project, please remember to enhance the project description. A well-crafted description not only attracts more attention but is also key to showcasing your project's strengths. Make your project stand out with a compelling description.",
    "PROJECT_ZONE": "Project Zone",
    "EZDATA_MANAGER": "EzData Manager",
    "WECHAT_TITLE": "Set up WeChat message notifications",
    "WECHAT_OPERATION_DESC1": "1. Follow M5STACK's official account on WeChat.",
    "WECHAT_OPERATION_DESC2": "2. Scan the QR code to bind it with EzData.",
    "FILE_TOO_LARGE": "If the file is too large, it is recommended to use an SD card for storage.",
    "VERSION": "Version Comparison",
    "GOTO_UIFLOW1": "Go to UIFlow1.0",
    "GET_STARTED": "Get started",
    "INCOMPATIBLE_WARNING": "Attention: UIFlow2.0 and UIFlow1.0 are incompatible.",
    "NEW_PROJECT": "New Project",
    "OPEN_PROJECT": "Import",
    "SAVE_PROJECT": "Save",
    "SAVE_AS": "Save as...",
    "OPEN_FROM_COMPUTER": "Import project from local file",
    "SAVE_TO_COMPUTER": "Export project to local file",
    "LOGOUT": "Log Out",
    "RUN": "Run",
    "RUN_TIPS": "Run the program.",
    "DOWNLOAD": "Download",
    "DOWNLOAD_TIPS": "Download the program to device.",
    "LOGIN": "Log in",
    "EMAIL": "Email",
    "PASSWORD": "Password",
    "FORGOT_PW": "Forgot password ?",
    "RESOURCE": "Resources",
    "ALL": "All",
    "OFFICIAL": "Official",
    "NON_OFFICIAL": "Non-official",
    "MODULE_CATEGORY_WIRELESS": "Wireless",
    "MODULE_CATEGORY_DRIVER": "Driver",
    "MODULE_CATEGORY_EXTENSION": "Extension",
    "MODULE_CATEGORY_BASE": "Base",
    "MODULE_CATEGORY_MEASURE": "Measure",
    "SELECT_DEVICE": "Select Device",
    "CREATE_GUIDE": "Create a guide line",
    "SETTING": "Setting",
    "LANGUAGE": "Language",
    "DARK_MODE": "Dark Mode",
    "DISABLE": "Disable",
    "ENABLE": "Enable",
    "ADD_NEW_DEVICE": "Add a new device",
    "DEVICE_INFO": "Device Info",
    "PUBLIC_DEVICE": "Public",
    "TOKEN_DEVICE": "Token Required",
    "PRIVATE_DEVICE": "Private",
    "MY_DEVICE": "My Device",
    "OTHER_DEVICE": "Shared Device",
    "USB_DEVICE": "USB Device",
    "OFFICIAL_DEVICE": "Official",
    "THIRD_PARTY_DEVICE": "Third Party",
    "NICKNAME": "Nickname",
    "PERMISSIONS": "Permissions",
    "REMOVE_DEVICE": "Remove Device",
    "UNREGISTER_DEVICE": "Unregister Device",
    "DEVICE": "Device",
    "ENGINE_USED_TIPS": "GFX and LVGL cannot be used together!",
    "TERMINAL": "Terminal",
    "CONFIRM": "Confirm",
    "CANCEL": "Cancel",
    "id": "id",
    "name": "Name",
    "color": "Color",
    "borderColor": "Border Color",
    "backgroundColor": "Background Color",
    "bodyFillColor": "Body Fill Color",
    "text": "Text",
    "textOffset": "Text Offset",
    "layer": "Layer",
    "createTime": "createTime",
    "rotation": "Rotation",
    "dataSource": "Data Source (URL)",
    "interval": "Interval (ms)",
    "is_update": "Auto-update",
    "use_json": "Use Json",
    "json_key": "Json Key",
    "error_msg": "Error Msg",
    "error_msg_color": "Error Msg Color",
    "errorImagePath": "Error Image",
    "type": "type",
    "x": "X",
    "y": "Y",
    "x1": "X1",
    "y1": "Y1",
    "x2": "X2",
    "y2": "Y2",
    "x3": "X3",
    "y3": "Y3",
    "font": "Font",
    "width": "Width",
    "height": "Height",
    "radius": "Radius",
    "imagePath": "Image Name",
    "imageSize": "Size of output image",
    "imagePixelFormat": "Format of pixel data",
    "frameBufferNumber": "Number of frame buffers",
    "frameBufferWhere": "Where frame buffer",
    "imageWidth": "Image Width",
    "imageHeight": "Image Height",
    "lineWidth": "Line Width",
    "visibility": "Visibility",
    "scaleX": "Scale X",
    "scaleY": "Scale Y",
    "FIRMWARE_VERSION": "Firmware version >=",
    "INIT": "Init",
    "READ": "Read/Get",
    "WRITE": "Write/Set",
    "CONSTANTS": "Constants",
    "COMMON": "Common",
    "ADVANCED": "Advanced",
    "SUPPORT": "Support",
    "RECEIVE": "Receive",
    "SEND": "Send",
    "GET_CONFIG": "Get Config",
    "CONFIG_SETTING": "Config Setting",
    "GET_STATUS": "Get Status",
    "CONTROL_SETTING": "Control Setting",
    "MODE": "Mode",
    "ENCODER_4_MOTOR_NORMAL": "Normal",
    "ENCODER_4_MOTOR_POSITION": "Position",
    "ENCODER_4_MOTOR_SPEED": "Speed",
    "ENCODER_4_MOTOR_SUPPORT": "Only supported by 4EncoderMotor with firmware version v3 or later",
    "UNIT_EXTIO2_SUPPORT": "Only supported by EXT.IO2 with firmware version v3 or later",
    "UNIT_PBHUB_SUPPORT": "Only supported by PbHub v1.1 with firmware version v2 or later",
    "DRAW_TEXT": "Draw Text",
    "DRAW_GRAPHICS": "Draw Graphics",
    "DRAW_IMAGE": "Draw Image",
    "I2C_COMMAND_MAP": "I2C Command Map",
    "EVENT": "Event",
    "SYSTEM": "System",
    "UI": "UI",
    "UICOLOR": "UI Color",
    "UI_LCD": "LCD",
    "TITLE": "Title",
    "LABEL": "Label",
    "LABEL_PLUS": "Label+",
    "RECT": "Rect",
    "CIRCLE": "Circle",
    "IMAGE": "Image",
    "IMAGE_PLUS": "Image+",
    "CAMERA_IMAGE": "Camera Image",
    "TRIANGLE": "Triangle",
    "LINE": "Line",
    "SCREEN": "Screen",
    "HARDWARE": "Hardware",
    "MODULE": "Module",
    "BASE": "Base",
    "SOFTWARE": "Software",
    "UNIT": "Unit",
    "HAT": "Hat",
    "STAMP": "Stamp",
    "CUSTOM": "Custom",
    "EZDATA": "EzData2.0",
    "VARIABLES": "Variables",
    "MATH": "Math",
    "TEXT": "Text",
    "LOOPS": "Loops",
    "LOGIC": "Logic",
    "LISTS": "Lists",
    "GRAPHIC": "Graphic",
    "EMOJI": "Emoji",
    "FUNCTIONS": "Functions",
    "MAP": "Map",
    "JSON": "JSON",
    "BYTE_ARRAY": "Bytearray",
    "BYTES": "Bytes",
    "POWER": "Power",
    "AUDIO": "Audio",
    "PLAYER": "Player",
    "RECORDER": "Recorder",
    "TIME": "Time",
    "BLE": "BLE",
    "BLE_UART": "BLE UART",
    "BLE_UART_SERVER": "BLE UART Server",
    "BLE_UART_CLIENT": "BLE UART Client",
    "MQTT": "MQTT",
    "HTTP": "HTTP",
    "UDP": "UDP",
    "UDP_SERVER": "UDP Server",
    "UDP_CLIENT": "UDP Client",
    "TCP": "TCP",
    "TCP_SERVER": "TCP Server",
    "TCP_CLIENT": "TCP Client",
    "FILEIO": "FileIO",
    "MODBUS": "Modbus",
    "MODBUS_RTU_MASTER": "Modbus RTU Master",
    "MODBUS_RTU_SLAVE": "Modbus RTU Slave",
    "MODBUS_TCP_SERVER": "Modbus TCP Server",
    "MODBUS_TCP_CLIENT": "Modbus TCP Client",
    "WLAN": "WLAN",
    "WLAN_STA": "WLAN STA",
    "WLAN_AP": "WLAN AP",
    "ESPNOW": "ESP-NOW",
    "NVS": "NVS",
    "PIN": "Pin",
    "PWM": "PWM",
    "ADC": "ADC",
    "DAC": "DAC",
    "BUTTON": "Button",
    "PIN_BUTTON": "Pin Button",
    "UART": "UART",
    "RGB": "RGB",
    "IMU": "IMU",
    "I2C": "I2C",
    "SPEAKER": "Speaker",
    "TIMER": "Timer",
    "DISPLAY": "User Display Panel",
    "TOUCH": "Touch",
    "ALS": "ALS",
    "WDT": "Watch Dog Timer",
    "RTC": "RTC",
    "I2S": "I2S",
    "SPI": "SPI",
    "SDCARD": "SDCard",
    "ROTARY": "Rotary",
    "MATRIX_KEYBOARD": "Matrix Keyboard",
    "MICROPHONE": "Microphone",
    "SCD40": "SCD40",
    "SEN55": "SEN55",
    "HARDWARE_PLCIO": "PLC IO",
    "HARDWARE_RELAY": "Relay",
    "DIGITAL_INPUT": "Digital Input",
    "HARDWARE_PWR485": "PWR485",
    "EASY_IO": "Easy I/O",
    "DUAL_KMETER": "DualKmeter",
    "RELAY4": "4Relay",
    "ENCODER_4_MOTOR": "4EncoderMotor",
    "PPS": "PPS",
    "MODULE_DISPLAY": "Display",
    "RCA": "RCA",
    "IOT_BASE_CATM": "IoT BASE CatM",
    "AIN4_20MA": "AIN4-20mA",
    "MODULE_HMI": "HMI",
    "MODULE_PLUS": "Plus",
    "MODULE_LAN": "LAN",
    "MODULE_RS232": "RS232",
    "MODULE_RS232F": "RS232F",
    "MODULE_RS232M": "RS232M",
    "MODULE_LORA433": "LoRa433",
    "MODULE_LORA433V11": "LoRa433 v1.1",
    "MODULE_LORA868": "LoRa868",
    "MODULE_LORA868V11": "LoRa868 v1.1",
    "MODULE_LORA868V12": "LoRa868 v1.2",
    "MODULE_4IN8OUT": "4IN8OUT",
    "MODULE_STEP_MOTOR_DRIVER": "StepMotor Driver",
    "MODULE_STEP_MOTOR_DRIVER_V11": "StepMotor Driver v1.1",
    "MODULE_COM_NBIOT": "COMX NB-IoT",
    "MODULE_COM_NBIOT_CN": "COMX NB-IoT CN",
    "MODULE_COM_LORAWAN470": "COMX LoRaWAN 470",
    "MODULE_COM_LORAWAN868": "COMX LoRaWAN 868",
    "MODULE_COM_LORAWAN868V2": "COMX LoRaWAN 868 v2.0",
    "MODULE_COM_LORAWAN915": "COMX LoRaWAN 915",
    "MODULE_GRBL": "GRBL",
    "MODULE_LLM": "LLM",
    "MODULE_GNSS": "GNSS",
    "MODULE_SERVO2": "Servo2",
    "MODULE_STEPMOTOR": "StepMotor",
    "MODULE_GPS": "GPS",
    "MODULE_GPSV2": "GPS v2.0",
    "MODULE_COM_GPS": "COMX GPS",
    "MODULE_GOPLUS2": "GoPlus2",
    "MODULE_PM25": "PM2.5",
    "MODULE_PM25_SHT20": "PM2.5 (SHT20)",
    "MODULE_PM25_SHT30": "PM2.5 (SHT30)",
    "MODULE_ODRIVE": "ODrive",
    "MODULE_DMX": "DMX",
    "MODULE_COM_ZIGBEE": "COMX Zigbee",
    "MODULE_PWRCAN": "PwrCAN",
    "MODULE_USB": "USB",
    "MODULE_USB_V12": "USB v1.2",
    "MODULE_BALA2": "Bala2",
    "MODULE_COM_LTE": "COMX LTE",
    "MODULE_COM_LTE_DATA": "COMX LTE-Data",
    "MODULE_FAN_V11": "Fan v1.1",
    "MODULE_COMMU": "COMMU",
    "ATOM_SOCKET": "ATOM Socket",
    "BASE_MOTION": "Motion",
    "BASE_CAN": "CAN",
    "BASE_SPK": "Speaker",
    "BASE_ECHO": "Echo",
    "BASE_RS232": "RS232",
    "BASE_RS485": "RS485",
    "BASE_DISPLAY": "Display",
    "BASE_GPS": "GPS",
    "BASE_PWM": "PWM",
    "BASE_HDRIVER": "HDriver",
    "BASE_STEPMOTOR": "Stepmotor",
    "BASE_LORAWAN470": "DTU LoRaWAN470",
    "BASE_LORAWAN868": "DTU LoRaWAN868",
    "BASE_LORAWAN915": "DTU LoRaWAN915",
    "BASE_QRCODE": "QRCode v1.1",
    "BASE_QRCODE2": "QRCode2",
    "BASE_TFCARD": "TFCard",
    "ENV": "ENV",
    "ENV2": "ENV II",
    "ENV3": "ENV III",
    "ENV4": "ENV IV",
    "ENV_PRO": "ENV Pro",
    "PAHUB": "Pa.HUB",
    "COLOR": "COLOR",
    "TOF": "ToF",
    "EXTIO": "EXT.IO",
    "EXTIO2": "EXT.IO2",
    "EARTH": "EARTH",
    "ANGLE": "ANGLE",
    "FINGER": "FINGER",
    "IR": "IR",
    "PIR": "PIR",
    "DUAL_BUTTON": "Dual-BUTTON",
    "NCIR": "NCIR",
    "NCIR2": "NCIR2",
    "RELAY": "Relay",
    "RELAY2": "2Relay",
    "LIGHT": "LIGHT",
    "DLIGHT": "Dlight",
    "CARDKB": "CardKB",
    "CARDKB1": "CardKB v1.1",
    "ENCODER8": "8Encoder",
    "LORAWAN470": "LoRaWAN470",
    "LORAWAN868": "LoRaWAN868",
    "LORAWAN915": "LoRaWAN915",
    "GPS": "GPS",
    "GPS_V11": "GPS v1.1",
    "GPS_SMA": "GPS SMA",
    "HBRIDGE": "Hbridge",
    "PBHUB": "Pb.HUB",
    "UWB": "UWB",
    "AC_MEASURE": "AC Measure",
    "RS485": "RS485",
    "ISO485": "ISO RS485",
    "ULTRASONIC": "Ultrasonic",
    "SONIC_IO": "SONIC IO",
    "LIMIT": "Limit",
    "OP": "OP",
    "OP90": "OP.90",
    "OP180": "OP.180",
    "LORAE220": "LoRaE220",
    "LORAE220433": "LoRaE220-433",
    "RFID": "RFID",
    "WEIGHT": "Weight",
    "WEIGHT_I2C": "Weight I2C",
    "SCALES": "Scales",
    "GESTURE": "Gesture",
    "THERMAL": "Thermal",
    "THERMAL2": "Thermal2",
    "MINISCALES": "MiniScales",
    "SYNTH": "Synth",
    "SERVOS8": "8Servos",
    "VMETER": "VMeter",
    "AMETER": "AMeter",
    "KMETER": "KMeter",
    "KMETERISO": "KMeterISO",
    "TOF4M": "ToF4M",
    "ANGLE8": "8Angle",
    "CO2": "CO2",
    "CO2L": "CO2L",
    "CAN": "CAN",
    "MINI_CAN": "Mini CAN",
    "CATM": "CatM",
    "CATM_GNSS": "CatM+GNSS",
    "FADER": "Fader",
    "FAN": "Fan",
    "LASER_RX": "Laser.Rx",
    "LASER_TX": "Laser.Tx",
    "SSR": "SSR",
    "ENCODER": "Encoder",
    "UNIT_BUTTON": "BUTTON",
    "BLDC_DRIVER": "BLDC Driver",
    "REFLECTIVE_IR": "Reflective IR",
    "HALL_EFFECT": "Hall Effect",
    "BUZZER": "Buzzer",
    "ADC_V11": "ADC V1.1",
    "EXTENCODER": "ExtEncoder",
    "ACCEL": "ACCEL",
    "DDS": "DDS",
    "DIGI_CLOCK": "Digi-Clock",
    "FLASH_LIGHT": "FlashLight",
    "GROVE2GROVE": "Grove2Grove",
    "KEY": "Key",
    "TUBE_PRESSURE": "Tube Pressure",
    "NECO": "Neco",
    "TVOC": "TVOC/eCO2",
    "CATCH": "Catch",
    "JOYSTICK": "Joystick",
    "JOYSTICK2": "Joystick2",
    "WATERING": "Watering",
    "MQTT_POE": "MQTT PoE",
    "HEART": "Heart",
    "ACSSR": "ACSSR",
    "DCSSR": "DCSSR",
    "NBIOT": "NB-IoT",
    "NBIOT2": "NB-IoT2",
    "QRCODE": "QRCode",
    "IMUPRO": "IMU Pro",
    "GLASS": "Glass",
    "GLASS2": "Glass2",
    "OLED": "OLED",
    "MINIOLED": "MiniOLED",
    "LCD": "LCD",
    "ZIGBEE": "Zigbee",
    "TMOS": "TMOS",
    "BPS": "BPS",
    "UNIT_SCROLL": "Scroll",
    "UNIT_ID": "ID",
    "UNIT_DMX": "DMX",
    "MIDI": "MIDI",
    "ROLLER485": "Roller485",
    "ROLLERCAN": "RollerCAN",
    "UHFRFID": "UHF-RFID",
    "TIMERPWR": "TimerPWR",
    "PUZZLE": "Puzzle",
    "BYTEBUTTON": "ByteButton",
    "BYTESWITCH": "ByteSwitch",
    "LORAWANCN470": "LoRaWAN CN470",
    "LORAWANEU868": "LoRaWAN EU868",
    "LORAWANUS915": "LoRaWAN US915",
    "LORAWANAS923": "LoRaWAN AS923",
    "UNIT_ASR": "ASR",
    "UNIT_PDM": "PDM",
    "VIBRATOR": "Vibrator",
    "YUN": "Yun",
    "HAT_SERVOS8_V11": "8Servos v1.1",
    "MINI_ENCODERC": "MiniEncoderC",
    "NEOFLASH": "Neoflash",
    "JOYC": "JoyC",
    "MINIJOYC": "MiniJoyC",
    "SERVO": "Servo",
    "HAT_SPK": "Speaker",
    "OPENMV": "OpenMV",
    "OPENMV_SENSOR": "Sensor",
    "OPENMV_IMAGE": "Image",
    "OPENMV_CAMERA": "Camera",
    "OPENMV_ESPDL": "ESP-DL",
    "OPENMV_CODE_SCANNER": "Code Scanner",
    "OPENMV_JPG": "JPG",
    "ADVANCED_USB": "USB Device",
    "ADVANCED_USB_KEYBOARD": "Keyboard",
    "ADVANCED_USB_MOUSE": "Mouse",
    "ENTER_DOWNLOAD_MODE": "Please enter download mode",
    "WELCOME_TO": "Welcome to UIFlow2.0!",
    "QUICKLY_LEARN": "Here you can quickly learn about the features of UIFlow2.0 and learn how to program it.",
    "START_LEARN": "Start",
    "SKIP": "Skip",
    "DONT_SHOW_AGAIN": "Don't show this again.",
    "INTERFACE_NAVIGATION": "Interface navigation",
    "LOGIN_ACCOUNT": "Login account",
    "FIRMWARE_BURNING": "Firmware burning",
    "DEVELOP": "Develop",
    "INTERFACE_INTRO": "The UIFlow2.0 interface includes: the top menu bar [1], UI editing area [2], resource panel [3], Block toolbox [4], programming area [5], and bottom function bar [6].",
    "TOP_BAR": "Top menu bar",
    "UI_EDITING_AREA": "UI editing area",
    "RESOURCE_AND_BLOCK_PANEL": "Resource panel and Block toolbox",
    "PROGRAMMING_AREA": "Programming area",
    "BOTTOM_BAR": "Bottom function bar",
    "TOP_SETTING_INTRO": "Set language, dark mode, etc.",
    "TOP_HELP": "Help",
    "TOP_HELP_INTRO": "Under the Help menu you can open user guide, documents, forums, update log, etc.",
    "TOP_FILE": "File",
    "TOP_FILE_INTRO": "Under the File menu you can create, open, or save a project.",
    "TOP_PROJECT_ZONE": "Project Zone",
    "TOP_PROJECT_ZONE_INTRO": "There are official projects and user-shared projects here.",
    "TOP_WORKSPACE_SWITCH": "Switch programming area",
    "TOP_WORKSPACE_SWITCH_INTRO": "Switch to Blocks or Python or Split.",
    "TOP_PROJECT_NAME": "Project name",
    "TOP_PROJECT_NAME_INTRO": "The name of the current project.",
    "TOP_SAVE": "Save",
    "TOP_SAVE_INTRO": "Save project.",
    "TOP_MY_PROJECT": "Cloud Project",
    "TOP_MY_PROJECT_INTRO": "My projects and favorite projects.",
    "TOP_LOGIN": "Log in",
    "TOP_LOGIN_INTRO": "Log in to M5stack account.",
    "UI_EDITING_AREA_DESC": "Drag and drop UI elements onto the simulation screen.You can enter UI editor by clicking the top right button for more settings.",
    "UI_EDITOR_DESC": "The UI editor interface includes: component library [1], function bar [2], operating area [3], list of UI elements [4], properties panel [5].",
    "RESOURCE_PANEL_DESC": "Add Software, Hardware, Unit, and other resources. You can see the corresponding blocks in the Block Toolbox.",
    "PROGRAMMING_AREA_DESC": "Drag blocks from the Block toolbox into the workspace. Snap blocks together to build your program.",
    "BOTTOM_WEBTERMINAL_INTRO": "Connect devices using USB mode.",
    "BOTTOM_WEBBURNER_INTRO": "Firmware burning (only ESP32-S3 series is supported, download M5Burner if you need more features).",
    "BOTTOM_EZDATA_MANAGER_INTRO": "Manage data in EzData.",
    "BOTTOM_DEVICE_FILE_MANAGER_INTRO": "Manage files (images, certificates, etc.) in the device.",
    "BOTTOM_SELECT_DEVICE": "Select device",
    "BOTTOM_SELECT_DEVICE_INTRO": "Click the button to open the device management panel. Select a device you will be using.",
    "BOTTOM_RUN_INTRO": "Run the project on the device using Cloud mode.",
    "BOTTOM_DOWNLOAD_INTRO": "Download the project to the device using Cloud mode.",
    "REGISTER_AND_LOGIN": "Register and log in to your account",
    "LOGIN_DESC": "After logging into your account, you can manage and share devices and use services such as EzData.",
    "LOGIN_DESC_point1": "Click the login button on the right side of the top menu bar.",
    "LOGIN_DESC_point2": "Follow the interface prompts to register/log in to your account.",
    "LOGIN_DESC_point3": "After logging in, you can manage the device.",
    "MY_DEVICE_DESC": "Devices bound to your account. You can use Cloud mode.",
    "OTHER_DEVICE_DESC": "You can add devices shared by others. You can use Cloud mode.",
    "USB_DEVICE_DESC": "Select USB device, you can use USB mode.",
    "DEVICE_CONNECTION_STATE": "Device connection status",
    "RED_STATUS": "Red",
    "GREEN_STATUS": "Green",
    "DEVICE_OFFLINE": "Device offline.",
    "DEVICE_ONLINE": "Device online.",
    "DEVICE_USAGE_PERMISSION": "Device usage permission",
    "PRIVATE_DEVICE_DESC": "Only you can use it.",
    "TOKEN_DEVICE_DESC": "Those who have the device token can use it.",
    "PUBLIC_DEVICE_DESC": "Those who have the device mac can use it.",
    "USE_BURNING_TOOL": "Burn the UIFlow 2.0 firmware and bind the device.",
    "BURNING_WAYS": "Burning tools are WebBurner and M5Burner.",
    "SET_DEVICE_TO_DOWNLOAD_MODE": "Set the device to download mode",
    "DEVICE_ESP32S3": "(Devices for the ESP32-S3 chip)",
    "PRESS_AND_HOLD": "Please press and hold ",
    "RESET_BUTTON": "RESET BUTTON",
    "UNTIL_THE": " until the",
    "INTERNAL_LIGHT": "LED LIGHT",
    "TURNS_GREEN": " turns green.",
    "BUTTON_OF_STAMPS3": "BUTTON of StampS3",
    "INSERT_THE_USB_PORT": " when insert the USB port.",
    "BURNING_TOOL": "Burning tool",
    "IDE_WEBBURNER": "WebBurner in the IDE",
    "CLICK_COM_SELECT": "Click the connect button for COM select.",
    "CLICK_FIRMWARE_SELECT": "Click the burn button for firmware select.",
    "BIND_DEVICE": "Bind the device to your account.",
    "CONFIGURE_WIFI": "Configure wifi and other settings.",
    "LOGIN_YOUR_ACCOUNT": "Login your account.",
    "SELECT_FIRMWARE": "Select the firmware of UIFlow2.0 and download it.",
    "CLICK_BURN_SELECT": "Click the burn button, select COM, click the start button.",
    "BURNING_FIRMWARE": "Firmware burning.",
    "CHECK_NETWORK": "Check network",
    "SEE_BOUND_DEVICE": "After the device is successfully networked, it will be visible in the IDE Device Management panel.",
    "CONNECTION_STATUS": "WIFI connection status",
    "CONNECTING": "Connecting",
    "CONNECTION_SUCCESSFUL": "Successful",
    "CONNECTION_FAILURE": "Failed",
    "CONNECT_MODE": "There are Cloud and USB modes for connecting devices.",
    "CLOUD_MODE": "Cloud mode",
    "USB_MODE": "USB mode",
    "SELECT_CLOUD_DEVICE": "Select my device or shared device.",
    "SELECT_USB_DEVICE": "Select USB device.",
    "PROGRAM_DESC": "Program projects by drag-and-drop blocks or custom editing code.",
    "CLICK_RUN_DOWNLOAD": "Click the run button or download button in the bottom function bar.",
    "RUN_BTN_DESC": "Run the project (run once).",
    "DOWNLOAD_BTN_DESC": "Download the project (run always).",
    "OPEN_WEBTERMINAL": "Open WebTerminal, click the connect button to connect the device and click the run or download button.",
    "WEBTERMINAL_CONNECT": "Connect",
    "WEBTERMINAL_CONNECT_DESC": "Click the button to select COM and connect the device.",
    "WEBTERMINAL_CLEAR": "Clear",
    "WEBTERMINAL_CLEAR_DESC": "Clear the screen.",
    "WEBTERMINAL_FILE": "File",
    "WEBTERMINAL_FILE_DESC": "File Manager, read, write, and delete files.",
    "WEBTERMINAL_ROW_COL": "Row and col",
    "WEBTERMINAL_ROW_COL_DESC": "Change the width and height of the WebTerminal.",
    "BUF_DESC": "\"buf\" must support the buffer protocol, such as bytearray or array.",
    "EXPORT_THIS_BLOCK_TO_IMG": "Export this block to image",
    "EXPORT_THIS_BLOCK_TO_SVG": "Export this block to svg image",
    "EXPORT_ALL_BLOCK_TO_IMG": "Export all block to image",
    "EXPORT_ALL_BLOCK_TO_SVG": "Export all block to svg image",
    "EXPORT_ALL_TOOLBOX_BLOCK_TO_SVG": "Export all blocks in this toolbox to svg images",
    "EXPORT_ALL_TOOLBOX_BLOCK_TO_IMAGE": "Export all blocks in this toolbox to images",
    "BLOCK_CATEGORY": "Category: ",
    "NAME_ALREADY_EXISTS": "The name already exists.",
    "NAME_EXISTS_FOR_ANOTHER_TYPE": "The name is already in use for another type.",
    "FILE_SIZE_ERROR": "File must be less than %1.",
    "FILE_NAME_ERROR": "Filename must be less than 30 letters.",
    "VARIABLES_DEFAULT_NAME": "item",
    "TODAY": "Today",
    "DUPLICATE_BLOCK": "Duplicate",
    "ADD_COMMENT": "Add Comment",
    "REMOVE_COMMENT": "Remove Comment",
    "EXTERNAL_INPUTS": "External Inputs",
    "INLINE_INPUTS": "Inline Inputs",
    "DELETE_BLOCK": "Delete Block",
    "DELETE_X_BLOCKS": "Delete %1 Blocks",
    "DELETE_ALL_BLOCKS": "Delete all %1 blocks?",
    "CLEAN_UP": "Clean up Blocks",
    "COLLAPSE_BLOCK": "Collapse Block",
    "COLLAPSE_ALL": "Collapse Blocks",
    "EXPAND_BLOCK": "Expand Block",
    "EXPAND_ALL": "Expand Blocks",
    "DISABLE_BLOCK": "Disable Block",
    "ENABLE_BLOCK": "Enable Block",
    "HELP": "Help",
    "UNDO": "Undo",
    "REDO": "Redo",
    "PLEASE_INIT_A": "Please init a",
    "PLEASE_DRAG_AN_EVENT_BLOCK": "Please drag an event block",
    "CHANGE_VALUE_TITLE": "Change value:",
    "RENAME_VARIABLE": "Rename variable...",
    "RENAME_VARIABLE_TITLE": "Rename all '%1' variables to:",
    "NEW_VARIABLE": "Create variable...",
    "NEW_STRING_VARIABLE": "Create string variable...",
    "NEW_NUMBER_VARIABLE": "Create number variable...",
    "NEW_COLOUR_VARIABLE": "Create colour variable...",
    "NEW_VARIABLE_TYPE_TITLE": "New variable type:",
    "NEW_VARIABLE_TITLE": "New variable name:",
    "VARIABLE_ALREADY_EXISTS": "A variable named '%1' already exists.",
    "VARIABLE_ALREADY_EXISTS_FOR_ANOTHER_TYPE": "A variable named '%1' already exists for another type: '%2'.",
    "DELETE_VARIABLE_CONFIRMATION": "Delete %1 uses of the '%2' variable?",
    "CANNOT_DELETE_VARIABLE_PROCEDURE": "Can't delete the variable '%1' because it's part of the definition of the function '%2'",
    "DELETE_VARIABLE": "Delete the '%1' variable",
    "COLOUR_PICKER_HELPURL": "https://en.wikipedia.org/wiki/Color",
    "COLOUR_PICKER_TOOLTIP": "Choose a colour from the palette.",
    "COLOUR_RANDOM_HELPURL": "http://randomcolour.com",
    "COLOUR_RANDOM_TITLE": "random colour",
    "COLOUR_RANDOM_TOOLTIP": "Choose a colour at random.",
    "COLOUR_RGB_HELPURL": "http://www.december.com/html/spec/colorper.html",
    "COLOUR_RGB_TITLE": "colour with",
    "COLOUR_RGB_RED": "red",
    "COLOUR_RGB_GREEN": "green",
    "COLOUR_RGB_BLUE": "blue",
    "COLOUR_RGB_TOOLTIP": "Create a colour with the specified amount of red, green, and blue. All values must be between 0 and 100.",
    "COLOUR_BLEND_HELPURL": "http://meyerweb.com/eric/tools/color-blend/",
    "COLOUR_BLEND_TITLE": "blend",
    "COLOUR_BLEND_COLOUR1": "colour 1",
    "COLOUR_BLEND_COLOUR2": "colour 2",
    "COLOUR_BLEND_RATIO": "ratio",
    "COLOUR_BLEND_TOOLTIP": "Blends two colours together with a given ratio (0.0 - 1.0).",
    "CONTROLS_REPEAT_HELPURL": "https://en.wikipedia.org/wiki/For_loop",
    "CONTROLS_REPEAT_TITLE": "repeat %1 times",
    "CONTROLS_REPEAT_INPUT_DO": "do",
    "CONTROLS_REPEAT_TOOLTIP": "Do some statements several times.",
    "CONTROLS_WHILEUNTIL_HELPURL": "https://github.com/google/blockly/wiki/Loops#repeat",
    "CONTROLS_WHILEUNTIL_OPERATOR_WHILE": "repeat while",
    "CONTROLS_WHILEUNTIL_OPERATOR_UNTIL": "repeat until",
    "CONTROLS_WHILEUNTIL_TOOLTIP_WHILE": "While a value is true, then do some statements.",
    "CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL": "While a value is false, then do some statements.",
    "CONTROLS_FOR_HELPURL": "https://github.com/google/blockly/wiki/Loops#count-with",
    "CONTROLS_FOR_TOOLTIP": "Have the variable '%1' take on the values from the start number to the end number, counting by the specified interval, and do the specified blocks.",
    "CONTROLS_FOR_TITLE": "count with %1 from %2 to %3 by %4",
    "CONTROLS_FOREACH_HELPURL": "https://github.com/google/blockly/wiki/Loops#for-each",
    "CONTROLS_FOREACH_TITLE": "for each item %1 in list %2",
    "CONTROLS_FOREACH_TOOLTIP": "For each item in a list, set the variable '%1' to the item, and then do some statements.",
    "CONTROLS_FLOW_STATEMENTS_HELPURL": "https://github.com/google/blockly/wiki/Loops#loop-termination-blocks",
    "CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK": "break out of loop",
    "CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE": "continue with next iteration of loop",
    "CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK": "Break out of the containing loop.",
    "CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE": "Skip the rest of this loop, and continue with the next iteration.",
    "CONTROLS_FLOW_STATEMENTS_WARNING": "Warning: This block may only be used within a loop.",
    "CONTROLS_IF_HELPURL": "https://github.com/google/blockly/wiki/IfElse",
    "CONTROLS_IF_TOOLTIP_1": "If a value is true, then do some statements.",
    "CONTROLS_IF_TOOLTIP_2": "If a value is true, then do the first block of statements. Otherwise, do the second block of statements.",
    "CONTROLS_IF_TOOLTIP_3": "If the first value is true, then do the first block of statements. Otherwise, if the second value is true, do the second block of statements.",
    "CONTROLS_IF_TOOLTIP_4": "If the first value is true, then do the first block of statements. Otherwise, if the second value is true, do the second block of statements. If none of the values are true, do the last block of statements.",
    "CONTROLS_IF_MSG_IF": "if",
    "CONTROLS_IF_MSG_ELSEIF": "else if",
    "CONTROLS_IF_MSG_ELSE": "else",
    "CONTROLS_IF_IF_TOOLTIP": "Add, remove, or reorder sections to reconfigure this if block.",
    "CONTROLS_IF_ELSEIF_TOOLTIP": "Add a condition to the if block.",
    "CONTROLS_IF_ELSE_TOOLTIP": "Add a final, catch-all condition to the if block.",
    "IOS_OK": "OK",
    "IOS_CANCEL": "Cancel",
    "IOS_ERROR": "Error",
    "IOS_PROCEDURES_INPUTS": "INPUTS",
    "IOS_PROCEDURES_ADD_INPUT": "+ Add Input",
    "IOS_PROCEDURES_ALLOW_STATEMENTS": "Allow statements",
    "IOS_PROCEDURES_DUPLICATE_INPUTS_ERROR": "This function has duplicate inputs.",
    "IOS_VARIABLES_ADD_VARIABLE": "+ Add Variable",
    "IOS_VARIABLES_ADD_BUTTON": "Add",
    "IOS_VARIABLES_RENAME_BUTTON": "Rename",
    "IOS_VARIABLES_DELETE_BUTTON": "Delete",
    "IOS_VARIABLES_VARIABLE_NAME": "Variable name",
    "IOS_VARIABLES_EMPTY_NAME_ERROR": "You can't use an empty variable name.",
    "LOGIC_COMPARE_HELPURL": "https://en.wikipedia.org/wiki/Inequality_(mathematics)",
    "LOGIC_COMPARE_TOOLTIP_EQ": "Return true if both inputs equal each other.",
    "LOGIC_COMPARE_TOOLTIP_NEQ": "Return true if both inputs are not equal to each other.",
    "LOGIC_COMPARE_TOOLTIP_LT": "Return true if the first input is smaller than the second input.",
    "LOGIC_COMPARE_TOOLTIP_LTE": "Return true if the first input is smaller than or equal to the second input.",
    "LOGIC_COMPARE_TOOLTIP_GT": "Return true if the first input is greater than the second input.",
    "LOGIC_COMPARE_TOOLTIP_GTE": "Return true if the first input is greater than or equal to the second input.",
    "LOGIC_OPERATION_HELPURL": "https://github.com/google/blockly/wiki/Logic#logical-operations",
    "LOGIC_OPERATION_TOOLTIP_AND": "Return true if both inputs are true.",
    "LOGIC_OPERATION_AND": "and",
    "LOGIC_OPERATION_TOOLTIP_OR": "Return true if at least one of the inputs is true.",
    "LOGIC_OPERATION_OR": "or",
    "LOGIC_NEGATE_HELPURL": "https://github.com/google/blockly/wiki/Logic#not",
    "LOGIC_NEGATE_TITLE": "not %1",
    "LOGIC_NEGATE_TOOLTIP": "Returns true if the input is false. Returns false if the input is true.",
    "LOGIC_BOOLEAN_HELPURL": "https://github.com/google/blockly/wiki/Logic#values",
    "LOGIC_BOOLEAN_TRUE": "true",
    "LOGIC_BOOLEAN_FALSE": "false",
    "LOGIC_BOOLEAN_TOOLTIP": "Returns either true or false.",
    "LOGIC_NULL_HELPURL": "https://en.wikipedia.org/wiki/Nullable_type",
    "LOGIC_NULL": "null",
    "LOGIC_NULL_TOOLTIP": "Returns null.",
    "LOGIC_TERNARY_HELPURL": "https://en.wikipedia.org/wiki/%3F:",
    "LOGIC_TERNARY_CONDITION": "test",
    "LOGIC_TERNARY_IF_TRUE": "if true",
    "LOGIC_TERNARY_IF_FALSE": "if false",
    "LOGIC_TERNARY_TOOLTIP": "Check the condition in 'test'. If the condition is true, returns the 'if true' value, otherwise returns the 'if false' value.",
    "MATH_NUMBER_HELPURL": "https://en.wikipedia.org/wiki/Number",
    "MATH_NUMBER_TOOLTIP": "A number (The prefix '0b' or '0x' is supported).",
    "MATH_ADDITION_SYMBOL": "+",
    "MATH_SUBTRACTION_SYMBOL": "-",
    "MATH_DIVISION_SYMBOL": "÷",
    "MATH_MULTIPLICATION_SYMBOL": "×",
    "MATH_POWER_SYMBOL": "^",
    "MATH_TRIG_SIN": "sin",
    "MATH_TRIG_COS": "cos",
    "MATH_TRIG_TAN": "tan",
    "MATH_TRIG_ASIN": "asin",
    "MATH_TRIG_ACOS": "acos",
    "MATH_TRIG_ATAN": "atan",
    "MATH_ARITHMETIC_HELPURL": "https://en.wikipedia.org/wiki/Arithmetic",
    "MATH_ARITHMETIC_TOOLTIP_ADD": "Return the sum of the two numbers.",
    "MATH_ARITHMETIC_TOOLTIP_MINUS": "Return the difference of the two numbers.",
    "MATH_ARITHMETIC_TOOLTIP_MULTIPLY": "Return the product of the two numbers.",
    "MATH_ARITHMETIC_TOOLTIP_DIVIDE": "Return the quotient of the two numbers.",
    "MATH_ARITHMETIC_TOOLTIP_POWER": "Return the first number raised to the power of the second number.",
    "MATH_SINGLE_HELPURL": "https://en.wikipedia.org/wiki/Square_root",
    "MATH_SINGLE_OP_ROOT": "square root",
    "MATH_SINGLE_TOOLTIP_ROOT": "Return the square root of a number.",
    "MATH_SINGLE_OP_ABSOLUTE": "absolute",
    "MATH_SINGLE_TOOLTIP_ABS": "Return the absolute value of a number.",
    "MATH_SINGLE_TOOLTIP_NEG": "Return the negation of a number.",
    "MATH_SINGLE_TOOLTIP_LN": "Return the natural logarithm of a number.",
    "MATH_SINGLE_TOOLTIP_LOG10": "Return the base 10 logarithm of a number.",
    "MATH_SINGLE_TOOLTIP_EXP": "Return e to the power of a number.",
    "MATH_SINGLE_TOOLTIP_POW10": "Return 10 to the power of a number.",
    "MATH_TRIG_HELPURL": "https://en.wikipedia.org/wiki/Trigonometric_functions",
    "MATH_TRIG_TOOLTIP_SIN": "Return the sine of a degree (not radian).",
    "MATH_TRIG_TOOLTIP_COS": "Return the cosine of a degree (not radian).",
    "MATH_TRIG_TOOLTIP_TAN": "Return the tangent of a degree (not radian).",
    "MATH_TRIG_TOOLTIP_ASIN": "Return the arcsine of a number.",
    "MATH_TRIG_TOOLTIP_ACOS": "Return the arccosine of a number.",
    "MATH_TRIG_TOOLTIP_ATAN": "Return the arctangent of a number.",
    "MATH_CONSTANT_HELPURL": "https://en.wikipedia.org/wiki/Mathematical_constant",
    "MATH_CONSTANT_TOOLTIP": "Return one of the common constants: π (3.141…), e (2.718…), φ (1.618…), sqrt(2) (1.414…), sqrt(½) (0.707…), or ∞ (infinity).",
    "MATH_IS_EVEN": "is even",
    "MATH_IS_ODD": "is odd",
    "MATH_IS_PRIME": "is prime",
    "MATH_IS_WHOLE": "is whole",
    "MATH_IS_POSITIVE": "is positive",
    "MATH_IS_NEGATIVE": "is negative",
    "MATH_IS_DIVISIBLE_BY": "is divisible by",
    "MATH_IS_TOOLTIP": "Check if a number is an even, odd, prime, whole, positive, negative, or if it is divisible by certain number. Returns true or false.",
    "MATH_CHANGE_HELPURL": "https://en.wikipedia.org/wiki/Programming_idiom#Incrementing_a_counter",
    "MATH_CHANGE_TITLE": "change %1 by %2",
    "MATH_CHANGE_TOOLTIP": "Add a number to variable '%1'.",
    "MATH_ROUND_HELPURL": "https://en.wikipedia.org/wiki/Rounding",
    "MATH_ROUND_TOOLTIP": "Round a number up or down.",
    "MATH_ROUND_OPERATOR_ROUND": "round",
    "MATH_ROUND_OPERATOR_ROUNDUP": "round up",
    "MATH_ROUND_OPERATOR_ROUNDDOWN": "round down",
    "MATH_ONLIST_HELPURL": "",
    "MATH_ONLIST_OPERATOR_SUM": "sum of list",
    "MATH_ONLIST_TOOLTIP_SUM": "Return the sum of all the numbers in the list.",
    "MATH_ONLIST_OPERATOR_MIN": "min of list",
    "MATH_ONLIST_TOOLTIP_MIN": "Return the smallest number in the list.",
    "MATH_ONLIST_OPERATOR_MAX": "max of list",
    "MATH_ONLIST_TOOLTIP_MAX": "Return the largest number in the list.",
    "MATH_ONLIST_OPERATOR_AVERAGE": "average of list",
    "MATH_ONLIST_TOOLTIP_AVERAGE": "Return the average (arithmetic mean) of the numeric values in the list.",
    "MATH_ONLIST_OPERATOR_MEDIAN": "median of list",
    "MATH_ONLIST_TOOLTIP_MEDIAN": "Return the median number in the list.",
    "MATH_ONLIST_OPERATOR_MODE": "modes of list",
    "MATH_ONLIST_TOOLTIP_MODE": "Return a list of the most common item(s) in the list.",
    "MATH_ONLIST_OPERATOR_STD_DEV": "standard deviation of list",
    "MATH_ONLIST_TOOLTIP_STD_DEV": "Return the standard deviation of the list.",
    "MATH_ONLIST_OPERATOR_RANDOM": "random item of list",
    "MATH_ONLIST_TOOLTIP_RANDOM": "Return a random element from the list.",
    "MATH_MODULO_HELPURL": "https://en.wikipedia.org/wiki/Modulo_operation",
    "MATH_MODULO_TITLE": "remainder of %1 ÷ %2",
    "MATH_MODULO_TOOLTIP": "Return the remainder from dividing the two numbers.",
    "MATH_CONSTRAIN_HELPURL": "https://en.wikipedia.org/wiki/Clamping_(graphics)",
    "MATH_CONSTRAIN_TITLE": "constrain %1 min %2 max %3",
    "MATH_CONSTRAIN_TOOLTIP": "Constrain a number to be between the specified limits (inclusive).",
    "MATH_RANDOM_INT_HELPURL": "https://en.wikipedia.org/wiki/Random_number_generation",
    "MATH_RANDOM_INT_TITLE": "random integer from %1 to %2",
    "MATH_RANDOM_INT_TOOLTIP": "Return a random integer between the two specified limits, inclusive.",
    "MATH_RANDOM_FLOAT_HELPURL": "https://en.wikipedia.org/wiki/Random_number_generation",
    "MATH_RANDOM_FLOAT_TITLE_RANDOM": "random fraction",
    "MATH_RANDOM_FLOAT_TOOLTIP": "Return a random fraction between 0.0 (inclusive) and 1.0 (exclusive).",
    "MATH_GET_BIT": "Get %1 bit %2",
    "MATH_SET_BIT": "Set %1 bit %2",
    "MATH_CLEAR_BIT": "Clear %1 bit %2",
    "MATH_REVERSE_BIT": "Reverse %1 bit %2",
    "MATH_BIT_OPERATION": "%1 %2 %3",
    "MATH_INT_FROM_BYTES": "int from bytes %1 %2",
    "TEXT_TEXT_HELPURL": "https://en.wikipedia.org/wiki/String_(computer_science)",
    "TEXT_TEXT_TOOLTIP": "A letter, word, or line of text.",
    "TEXT_JOIN_HELPURL": "https://github.com/google/blockly/wiki/Text#text-creation",
    "TEXT_JOIN_TITLE_CREATEWITH": "create text with",
    "TEXT_JOIN_TOOLTIP": "Create a piece of text by joining together any number of items.",
    "TEXT_CREATE_JOIN_TITLE_JOIN": "join",
    "TEXT_CREATE_JOIN_TOOLTIP": "Add, remove, or reorder sections to reconfigure this text block.",
    "TEXT_CREATE_JOIN_ITEM_TOOLTIP": "Add an item to the text.",
    "TEXT_APPEND_HELPURL": "https://github.com/google/blockly/wiki/Text#text-modification",
    "TEXT_APPEND_TITLE": "to %1 append text %2",
    "TEXT_APPEND_TOOLTIP": "Append some text to variable '%1'.",
    "TEXT_LENGTH_HELPURL": "https://github.com/google/blockly/wiki/Text#text-modification",
    "TEXT_LENGTH_TITLE": "length of %1",
    "TEXT_LENGTH_TOOLTIP": "Returns the number of letters (including spaces) in the provided text.",
    "TEXT_ISEMPTY_HELPURL": "https://github.com/google/blockly/wiki/Text#checking-for-empty-text",
    "TEXT_ISEMPTY_TITLE": "%1 is empty",
    "TEXT_ISEMPTY_TOOLTIP": "Returns true if the provided text is empty.",
    "TEXT_INDEXOF_HELPURL": "https://github.com/google/blockly/wiki/Text#finding-text",
    "TEXT_INDEXOF_TOOLTIP": "Returns the index of the first/last occurrence of the first text in the second text. Returns %1 if text is not found.",
    "TEXT_INDEXOF_TITLE": "in text %1 %2 %3",
    "TEXT_INDEXOF_OPERATOR_FIRST": "find first occurrence of text",
    "TEXT_INDEXOF_OPERATOR_LAST": "find last occurrence of text",
    "TEXT_CHARAT_HELPURL": "https://github.com/google/blockly/wiki/Text#extracting-text",
    "TEXT_CHARAT_TITLE": "in text %1 %2",
    "TEXT_CHARAT_FROM_START": "get letter #",
    "TEXT_CHARAT_FROM_END": "get letter # from end",
    "TEXT_CHARAT_FIRST": "get first letter",
    "TEXT_CHARAT_LAST": "get last letter",
    "TEXT_CHARAT_RANDOM": "get random letter",
    "TEXT_CHARAT_TAIL": "",
    "TEXT_CHARAT_TOOLTIP": "Returns the letter at the specified position.",
    "TEXT_GET_SUBSTRING_TOOLTIP": "Returns a specified portion of the text.",
    "TEXT_GET_SUBSTRING_HELPURL": "https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text",
    "TEXT_GET_SUBSTRING_INPUT_IN_TEXT": "in text",
    "TEXT_GET_SUBSTRING_START_FROM_START": "get substring from letter #",
    "TEXT_GET_SUBSTRING_START_FROM_END": "get substring from letter # from end",
    "TEXT_GET_SUBSTRING_START_FIRST": "get substring from first letter",
    "TEXT_GET_SUBSTRING_END_FROM_START": "to letter #",
    "TEXT_GET_SUBSTRING_END_FROM_END": "to letter # from end",
    "TEXT_GET_SUBSTRING_END_LAST": "to last letter",
    "TEXT_GET_SUBSTRING_TAIL": "",
    "TEXT_CHANGECASE_HELPURL": "https://github.com/google/blockly/wiki/Text#adjusting-text-case",
    "TEXT_CHANGECASE_TOOLTIP": "Return a copy of the text in a different case.",
    "TEXT_CHANGECASE_OPERATOR_UPPERCASE": "to UPPER CASE",
    "TEXT_CHANGECASE_OPERATOR_LOWERCASE": "to lower case",
    "TEXT_CHANGECASE_OPERATOR_TITLECASE": "to Title Case",
    "TEXT_TRIM_HELPURL": "https://github.com/google/blockly/wiki/Text#trimming-removing-spaces",
    "TEXT_TRIM_TOOLTIP": "Return a copy of the text with spaces removed from one or both ends.",
    "TEXT_TRIM_OPERATOR_BOTH": "trim spaces from both sides of",
    "TEXT_TRIM_OPERATOR_LEFT": "trim spaces from left side of",
    "TEXT_TRIM_OPERATOR_RIGHT": "trim spaces from right side of",
    "TEXT_PRINT_HELPURL": "https://github.com/google/blockly/wiki/Text#printing-text",
    "TEXT_PRINT_TITLE": "print %1",
    "TEXT_PRINT_TOOLTIP": "Print the specified text, number or other value.",
    "TEXT_PROMPT_HELPURL": "https://github.com/google/blockly/wiki/Text#getting-input-from-the-user",
    "TEXT_PROMPT_TYPE_TEXT": "prompt for text with message",
    "TEXT_PROMPT_TYPE_NUMBER": "prompt for number with message",
    "TEXT_PROMPT_TOOLTIP_NUMBER": "Prompt for user for a number.",
    "TEXT_PROMPT_TOOLTIP_TEXT": "Prompt for user for some text.",
    "TEXT_COUNT_MESSAGE0": "count %1 in %2",
    "TEXT_COUNT_HELPURL": "https://github.com/google/blockly/wiki/Text#counting-substrings",
    "TEXT_COUNT_TOOLTIP": "Count how many times some text occurs within some other text.",
    "TEXT_REPLACE_MESSAGE0": "replace %1 with %2 in %3",
    "TEXT_REPLACE_HELPURL": "https://github.com/google/blockly/wiki/Text#replacing-substrings",
    "TEXT_REPLACE_TOOLTIP": "Replace all occurrences of some text within some other text.",
    "TEXT_REVERSE_MESSAGE0": "reverse %1",
    "TEXT_REVERSE_HELPURL": "https://github.com/google/blockly/wiki/Text#reversing-text",
    "TEXT_REVERSE_TOOLTIP": "Reverses the order of the characters in the text.",
    "LISTS_CREATE_EMPTY_HELPURL": "https://github.com/google/blockly/wiki/Lists#create-empty-list",
    "LISTS_CREATE_EMPTY_TITLE": "create empty list",
    "LISTS_CREATE_EMPTY_TOOLTIP": "Returns a list, of length 0, containing no data records",
    "LISTS_CREATE_WITH_HELPURL": "https://github.com/google/blockly/wiki/Lists#create-list-with",
    "LISTS_CREATE_WITH_TOOLTIP": "Create a list with any number of items.",
    "LISTS_CREATE_WITH_INPUT_WITH": "create list with",
    "LISTS_CREATE_WITH_CONTAINER_TITLE_ADD": "list",
    "LISTS_CREATE_WITH_CONTAINER_TOOLTIP": "Add, remove, or reorder sections to reconfigure this list block.",
    "LISTS_CREATE_WITH_ITEM_TOOLTIP": "Add an item to the list.",
    "LISTS_REPEAT_HELPURL": "https://github.com/google/blockly/wiki/Lists#create-list-with",
    "LISTS_REPEAT_TOOLTIP": "Creates a list consisting of the given value repeated the specified number of times.",
    "LISTS_REPEAT_TITLE": "create list with item %1 repeated %2 times",
    "LISTS_LENGTH_HELPURL": "https://github.com/google/blockly/wiki/Lists#length-of",
    "LISTS_LENGTH_TITLE": "length of %1",
    "LISTS_LENGTH_TOOLTIP": "Returns the length of a list.",
    "LISTS_ISEMPTY_HELPURL": "https://github.com/google/blockly/wiki/Lists#is-empty",
    "LISTS_ISEMPTY_TITLE": "%1 is empty",
    "LISTS_ISEMPTY_TOOLTIP": "Returns true if the list is empty.",
    "LISTS_INLIST": "in list",
    "LISTS_INDEX_OF_HELPURL": "https://github.com/google/blockly/wiki/Lists#getting-items-from-a-list",
    "LISTS_INDEX_OF_FIRST": "find first occurrence of item",
    "LISTS_INDEX_OF_LAST": "find last occurrence of item",
    "LISTS_INDEX_OF_TOOLTIP": "Returns the index of the first/last occurrence of the item in the list. Returns %1 if item is not found.",
    "LISTS_GET_INDEX_GET": "get",
    "LISTS_GET_INDEX_GET_REMOVE": "get and remove",
    "LISTS_GET_INDEX_REMOVE": "remove",
    "LISTS_GET_INDEX_FROM_START": "#",
    "LISTS_GET_INDEX_FROM_END": "# from end",
    "LISTS_GET_INDEX_FIRST": "first",
    "LISTS_GET_INDEX_LAST": "last",
    "LISTS_GET_INDEX_RANDOM": "random",
    "LISTS_GET_INDEX_TAIL": "",
    "LISTS_INDEX_FROM_START_TOOLTIP": "%1 is the first item.",
    "LISTS_INDEX_FROM_END_TOOLTIP": "%1 is the last item.",
    "LISTS_GET_INDEX_TOOLTIP_GET_FROM": "Returns the item at the specified position in a list.",
    "LISTS_GET_INDEX_TOOLTIP_GET_FIRST": "Returns the first item in a list.",
    "LISTS_GET_INDEX_TOOLTIP_GET_LAST": "Returns the last item in a list.",
    "LISTS_GET_INDEX_TOOLTIP_GET_RANDOM": "Returns a random item in a list.",
    "LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM": "Removes and returns the item at the specified position in a list.",
    "LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST": "Removes and returns the first item in a list.",
    "LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST": "Removes and returns the last item in a list.",
    "LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM": "Removes and returns a random item in a list.",
    "LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM": "Removes the item at the specified position in a list.",
    "LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST": "Removes the first item in a list.",
    "LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST": "Removes the last item in a list.",
    "LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM": "Removes a random item in a list.",
    "LISTS_SET_INDEX_HELPURL": "https://github.com/google/blockly/wiki/Lists#in-list--set",
    "LISTS_SET_INDEX_SET": "set",
    "LISTS_SET_INDEX_INSERT": "insert at",
    "LISTS_SET_INDEX_INPUT_TO": "as",
    "LISTS_SET_INDEX_TOOLTIP_SET_FROM": "Sets the item at the specified position in a list.",
    "LISTS_SET_INDEX_TOOLTIP_SET_FIRST": "Sets the first item in a list.",
    "LISTS_SET_INDEX_TOOLTIP_SET_LAST": "Sets the last item in a list.",
    "LISTS_SET_INDEX_TOOLTIP_SET_RANDOM": "Sets a random item in a list.",
    "LISTS_SET_INDEX_TOOLTIP_INSERT_FROM": "Inserts the item at the specified position in a list.",
    "LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST": "Inserts the item at the start of a list.",
    "LISTS_SET_INDEX_TOOLTIP_INSERT_LAST": "Append the item to the end of a list.",
    "LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM": "Inserts the item randomly in a list.",
    "LISTS_GET_SUBLIST_HELPURL": "https://github.com/google/blockly/wiki/Lists#getting-a-sublist",
    "LISTS_GET_SUBLIST_START_FROM_START": "get sub-list from #",
    "LISTS_GET_SUBLIST_START_FROM_END": "get sub-list from # from end",
    "LISTS_GET_SUBLIST_START_FIRST": "get sub-list from first",
    "LISTS_GET_SUBLIST_END_FROM_START": "to #",
    "LISTS_GET_SUBLIST_END_FROM_END": "to # from end",
    "LISTS_GET_SUBLIST_END_LAST": "to last",
    "LISTS_GET_SUBLIST_TAIL": "",
    "LISTS_GET_SUBLIST_TOOLTIP": "Creates a copy of the specified portion of a list.",
    "LISTS_SORT_HELPURL": "https://github.com/google/blockly/wiki/Lists#sorting-a-list",
    "LISTS_SORT_TITLE": "sort %1 %2 %3",
    "LISTS_SORT_TOOLTIP": "Sort a copy of a list.",
    "LISTS_SORT_ORDER_ASCENDING": "ascending",
    "LISTS_SORT_ORDER_DESCENDING": "descending",
    "LISTS_SORT_TYPE_NUMERIC": "numeric",
    "LISTS_SORT_TYPE_TEXT": "alphabetic",
    "LISTS_SORT_TYPE_IGNORECASE": "alphabetic, ignore case",
    "LISTS_SPLIT_HELPURL": "https://github.com/google/blockly/wiki/Lists#splitting-strings-and-joining-lists",
    "LISTS_SPLIT_LIST_FROM_TEXT": "make list from text",
    "LISTS_SPLIT_TEXT_FROM_LIST": "make text from list",
    "LISTS_SPLIT_WITH_DELIMITER": "with delimiter",
    "LISTS_SPLIT_TOOLTIP_SPLIT": "Split text into a list of texts, breaking at each delimiter.",
    "LISTS_SPLIT_TOOLTIP_JOIN": "Join a list of texts into one text, separated by a delimiter.",
    "LISTS_REVERSE_HELPURL": "https://github.com/google/blockly/wiki/Lists#reversing-a-list",
    "LISTS_REVERSE_MESSAGE0": "reverse %1",
    "LISTS_REVERSE_TOOLTIP": "Reverse a copy of a list.",
    "ORDINAL_NUMBER_SUFFIX": "",
    "VARIABLES_GET_HELPURL": "https://github.com/google/blockly/wiki/Variables#get",
    "VARIABLES_GET_TOOLTIP": "Returns the value of this variable.",
    "VARIABLES_GET_CREATE_SET": "Create 'set %1'",
    "VARIABLES_SET_HELPURL": "https://github.com/google/blockly/wiki/Variables#set",
    "VARIABLES_SET": "set %1 to %2",
    "VARIABLES_SET_TOOLTIP": "Sets this variable to be equal to the input.",
    "VARIABLES_SET_CREATE_GET": "Create 'get %1'",
    "PROCEDURES_DEFNORETURN_HELPURL": "https://en.wikipedia.org/wiki/Subroutine",
    "PROCEDURES_DEFNORETURN_TITLE": "to",
    "PROCEDURES_DEFNORETURN_PROCEDURE": "dosomething",
    "PROCEDURES_BEFORE_PARAMS": "with:",
    "PROCEDURES_CALL_BEFORE_PARAMS": "with:",
    "PROCEDURES_DEFNORETURN_DO": "",
    "PROCEDURES_DEFNORETURN_TOOLTIP": "Creates a function with no output.",
    "PROCEDURES_DEFNORETURN_COMMENT": "Describe this function...",
    "PROCEDURES_DEFRETURN_HELPURL": "https://en.wikipedia.org/wiki/Subroutine",
    "PROCEDURES_DEFRETURN_RETURN": "return",
    "PROCEDURES_DEFRETURN_TOOLTIP": "Creates a function with an output.",
    "PROCEDURES_ALLOW_STATEMENTS": "allow statements",
    "PROCEDURES_DEF_DUPLICATE_WARNING": "Warning: This function has duplicate parameters.",
    "PROCEDURES_CALLNORETURN_HELPURL": "https://en.wikipedia.org/wiki/Subroutine",
    "PROCEDURES_CALLNORETURN_TOOLTIP": "Run the user-defined function '%1'.",
    "PROCEDURES_CALLRETURN_HELPURL": "https://en.wikipedia.org/wiki/Subroutine",
    "PROCEDURES_CALLRETURN_TOOLTIP": "Run the user-defined function '%1' and use its output.",
    "PROCEDURES_MUTATORCONTAINER_TITLE": "inputs",
    "PROCEDURES_MUTATORCONTAINER_TOOLTIP": "Add, remove, or reorder inputs to this function.",
    "PROCEDURES_MUTATORARG_TITLE": "input name:",
    "PROCEDURES_MUTATORARG_TOOLTIP": "Add an input to the function.",
    "PROCEDURES_HIGHLIGHT_DEF": "Highlight function definition",
    "PROCEDURES_CREATE_DO": "Create '%1'",
    "PROCEDURES_IFRETURN_TOOLTIP": "If a value is true, then return a second value.",
    "PROCEDURES_IFRETURN_HELPURL": "http://c2.com/cgi/wiki?GuardClause",
    "PROCEDURES_IFRETURN_WARNING": "Warning: This block may be used only within a function definition.",
    "PROCEDURES_DEFRETURN_TITLE": "to",
    "CONTROLS_IF_IF_TITLE_IF": "if",
    "CONTROLS_WHILEUNTIL_INPUT_DO": "do",
    "CONTROLS_IF_MSG_THEN": "do",
    "CONTROLS_IF_ELSE_TITLE_ELSE": "else",
    "PROCEDURES_DEFRETURN_PROCEDURE": "dosomething",
    "LISTS_GET_SUBLIST_INPUT_IN_LIST": "in list",
    "LISTS_GET_INDEX_INPUT_IN_LIST": "in list",
    "MATH_CHANGE_TITLE_ITEM": "item",
    "PROCEDURES_DEFRETURN_DO": "",
    "CONTROLS_IF_ELSEIF_TITLE_ELSEIF": "else if",
    "LISTS_GET_INDEX_HELPURL": "https://github.com/google/blockly/wiki/Lists#getting-items-from-a-list",
    "CONTROLS_FOREACH_INPUT_DO": "do",
    "LISTS_SET_INDEX_INPUT_IN_LIST": "in list",
    "CONTROLS_FOR_INPUT_DO": "do",
    "LISTS_CREATE_WITH_ITEM_TITLE": "item",
    "TEXT_APPEND_VARIABLE": "item",
    "TEXT_CREATE_JOIN_ITEM_TITLE_ITEM": "item",
    "LISTS_INDEX_OF_INPUT_IN_LIST": "in list",
    "PROCEDURES_DEFRETURN_COMMENT": "Describe this function...",
    "TEXT_ADD": "%1 + %2",
    "DECODE_STR": "decode %1 ",
    "ENCODE_STR": "encode %1 ",
    "LOGIC_TRY": "try  %1",
    "LOGIC_EXCEPT": "except %1",
    "LOGIC_SWITCH": "switch %1",
    "LOGIC_CASE": "case",
    "LOGIC_DEFAULT": "default",
    "DUMPS_JSON": "dumps %1 to json",
    "LOADS_JSON": "loads json %1",
    "MAP_ON_LOOP": "create map",
    "MAP_ON_func": "%1",
    "MAP_CLEAR": " map clear %1",
    "GET_MAP_IN": "map %1 contain key %2",
    "CREATE_MAP_KEY": "key %1 value %2",
    "GET_MAP_KEY": "get key %1 in map %2",
    "ADD_MAP_KEY": "in map %1 add key %2 value %3",
    "SET_MAP_KEY": "in map %1 set key %2 value %3",
    "DELETE_MAP_KEY": "in map %1 delete key %2",
    "LORAWAN470_MODE_OPTION_MSG0": "OTAA mode",
    "LORAWAN470_MODE_OPTION_MSG1": "ABP mode",
    "LORAWAN470_FREQ_MODE_OPTION_MSG0": "same frequency mode",
    "LORAWAN470_FREQ_MODE_OPTION_MSG1": "inter-frequency mode",
    "LORAWAN470_CONFIRM_OPTION_MSG0": "unconfirm",
    "LORAWAN470_CONFIRM_OPTION_MSG1": "confirm",
    "TEMPLATE_DISPLAY_MSG0": "Show",
    "TEMPLATE_DISPLAY_MSG1": "Delete",
    "TEMPLATE_DISPLAY_MSG2": "Create",
    "SYSTEM_M5_BEGIN_MSG0": "Init built-in hardware at beginning",
    "SYSTEM_M5_UPDATE_MSG0": "Update button,touch,etc. in loop",
    "EXECUTE_CODE_MSG0": "Execute mpy code",
    "EXECUTE_CODE_IMPORT_MSG0": "Execute mpy code (e.g. import ...)",
    "SYSTEM_BOOT_GET_OPTION_MSG0": "get Boot option (return 0 or 1 or 2)",
    "SYSTEM_BOOT_SET_OPTION_MSG0": "Boot option set to",
    "SYSTEM_GET_FIRMWARE_VERSION_MSG0": "get firmware version (return string)",
    "TIME_GET_UTC_TIME_MSG0": "get UTC time (return tuple)",
    "TIME_GET_LOCAL_TIME_STAMP_MSG0": "get local time stamp since Jan 1, 1970",
    "TIME_GET_LOCAL_TIME_MSG0": "get local time (return tuple)",
    "TIME_GET_TIME_STAMP_MSG0": "get time stamp since",
    "TIME_GET_TIME_STAMP_MSG1": "year",
    "TIME_GET_TIME_STAMP_MSG2": "month",
    "TIME_GET_TIME_STAMP_MSG3": "mday",
    "TIME_GET_TIME_STAMP_MSG4": "hour",
    "TIME_GET_TIME_STAMP_MSG5": "minute",
    "TIME_GET_TIME_STAMP_MSG6": "second",
    "TIME_GET_TIME_STAMP_MSG7": "weekday",
    "TIME_GET_TIME_STAMP_MSG8": "yearday",
    "TIME_SLEEP_SECOND_MSG0": "Sleep",
    "TIME_SLEEP_SECOND_MSG1": "seconds",
    "TIME_SLEEP_MILLISECOND_MSG0": "Sleep",
    "TIME_SLEEP_MILLISECOND_MSG1": "milliseconds",
    "TIME_SLEEP_MICROSECOND_MSG0": "Sleep",
    "TIME_SLEEP_MICROSECOND_MSG1": "microseconds",
    "TIME_GET_TICKS_MS_MSG0": "get ticks in milliseconds",
    "TIME_GET_TICKS_US_MSG0": "get ticks in microseconds",
    "TIME_GET_TICKS_CPU_MSG0": "get CPU ticks count",
    "TIME_GET_TICKS_ADD_MSG0": "ticks",
    "TIME_GET_TICKS_ADD_MSG1": "add delta",
    "TIME_GET_TICKS_DIFF_MSG0": "ticks diff",
    "TIME_GET_SYSTEM_TIME_MSG0": "get system uptime in seconds",
    "TIME_GET_TIMEZONE_MSG0": "get timezone (return string)",
    "TIME_SET_TIMEZONE_MSG0": "Set timezone",
    "BLE_UART_SERVER_INIT_MSG0": "Init BLE Uart server",
    "BLE_UART_SERVER_INIT_MSG1": "name",
    "BLE_UART_SERVER_DEINIT_MSG0": "BLE Uart server deinit",
    "BLE_UART_SERVER_AVAILABLE_CHAR_MSG0": "BLE Uart server count of available",
    "BLE_UART_SERVER_READ_ALL_MSG0": "BLE Uart server read all",
    "BLE_UART_SERVER_READ_BYTES_MSG0": "BLE Uart server read",
    "BLE_UART_SERVER_READ_BYTES_MSG1": "bytes",
    "BLE_UART_SERVER_READ_LINE_MSG0": "BLE Uart server read line",
    "BLE_UART_SERVER_READ_RAW_DATA_MSG0": "BLE Uart server read a raw data (return 0 ~ 255)",
    "BLE_UART_SERVER_CLOSE_MSG0": "BLE Uart server close",
    "BLE_UART_SERVER_WRITE_MSG0": "BLE Uart server write",
    "BLE_UART_SERVER_WRITE_LINE_MSG0": "BLE Uart server write line",
    "BLE_UART_SERVER_WRITE_VAR_MSG0": "BLE Uart server write",
    "BLE_UART_SERVER_WRITE_LIST_TUPLE_MSG0": "BLE Uart server write list or tuple",
    "BLE_UART_SERVER_WRITE_LIST_MSG0": "BLE Uart server write raw data",
    "BLE_UART_CLIENT_INIT_MSG0": "Init BLE Uart client",
    "BLE_UART_CLIENT_DEINIT_MSG0": "BLE Uart client deinit",
    "BLE_UART_CLIENT_IS_CONNECTED_MSG0": "BLE Uart client is connected",
    "BLE_UART_CLIENT_AVAILABLE_CHAR_MSG0": "BLE Uart client count of available",
    "BLE_UART_CLIENT_READ_ALL_MSG0": "BLE Uart client read all",
    "BLE_UART_CLIENT_READ_BYTES_MSG0": "BLE Uart client read",
    "BLE_UART_CLIENT_READ_BYTES_MSG1": "bytes",
    "BLE_UART_CLIENT_READ_LINE_MSG0": "BLE Uart client read line",
    "BLE_UART_CLIENT_READ_RAW_DATA_MSG0": "BLE Uart client read a raw data (return 0 ~ 255)",
    "BLE_UART_CLIENT_CONNECT_MSG0": "BLE Uart client connect to",
    "BLE_UART_CLIENT_CONNECT_MSG1": "timeout",
    "BLE_UART_CLIENT_CLOSE_MSG0": "BLE Uart client close",
    "BLE_UART_CLIENT_WRITE_MSG0": "BLE Uart client write",
    "BLE_UART_CLIENT_WRITE_LINE_MSG0": "BLE Uart client write line",
    "BLE_UART_CLIENT_WRITE_VAR_MSG0": "BLE Uart client write",
    "BLE_UART_CLIENT_WRITE_LIST_TUPLE_MSG0": "BLE Uart client write list or tuple",
    "BLE_UART_CLIENT_WRITE_LIST_MSG0": "BLE Uart client write raw data",
    "BLE_UART_CLIENT_SCAN_CALLBACK_MSG0": "When BLE Uart client scan to",
    "BLE_UART_CLIENT_SCAN_CALLBACK_MSG1": "addr type",
    "BLE_UART_CLIENT_SCAN_CALLBACK_MSG2": "addr",
    "BLE_UART_CLIENT_SCAN_CALLBACK_MSG3": "name",
    "BLE_UART_INIT_MSG0": "Init BLE Uart",
    "BLE_UART_DEINIT_MSG0": "deinit",
    "BLE_UART_IS_CONNECTED_MSG0": "is connected",
    "BLE_UART_AVAILABLE_CHAR_MSG0": "count of available",
    "BLE_UART_READ_ALL_MSG0": "read all",
    "BLE_UART_READ_BYTES_MSG0": "read",
    "BLE_UART_READ_BYTES_MSG1": "bytes",
    "BLE_UART_READ_LINE_MSG0": "read line",
    "BLE_UART_READ_RAW_DATA_MSG0": "read a raw data (return 0 ~ 255)",
    "BLE_UART_CONNECT_MSG0": "connect",
    "BLE_UART_CLOSE_MSG0": "close",
    "BLE_UART_WRITE_MSG0": "write",
    "BLE_UART_WRITE_LINE_MSG0": "write line",
    "BLE_UART_WRITE_VAR_MSG0": "write",
    "BLE_UART_WRITE_LIST_TUPLE_MSG0": "write list or tuple",
    "BLE_UART_WRITE_LIST_MSG0": "write raw data",
    "BLE_UART_SCAN_CALLBACK_MSG0": "When",
    "BLE_UART_SCAN_CALLBACK_MSG1": "addr type",
    "BLE_UART_SCAN_CALLBACK_MSG2": "addr",
    "BLE_UART_SCAN_CALLBACK_MSG3": "name",
    "WLAN_STA_INIT_MSG0": "Init WLAN STA",
    "WLAN_STA_SET_ACTIVE_MSG0": "WLAN STA active",
    "WLAN_STA_CONNECT_MSG0": "WLAN STA connect to SSID",
    "WLAN_STA_CONNECT_MSG1": "password",
    "WLAN_STA_DISCONNECT_MSG0": "WLAN STA disconnect",
    "WLAN_STA_GET_RSSI_MSG0": "WLAN STA get RSSI",
    "WLAN_STA_GET_STATUS_MSG0": "WLAN STA get connect status",
    "WLAN_STA_STATUS_MSG0": "connect status",
    "WLAN_STA_IS_CONNECTED_MSG0": "WLAN STA is connected",
    "WLAN_STA_GET_LOCALIP_MSG0": "WLAN STA get local IP",
    "WLAN_STA_GET_SUBNET_MSG0": "WLAN STA get subnet",
    "WLAN_STA_GET_GATEWAY_MSG0": "WLAN STA get gateway",
    "WLAN_STA_GET_DNS_MSG0": "WLAN STA get DNS",
    "WLAN_STA_GET_MAC_MSG0": "WLAN STA get MAC address",
    "WLAN_STA_GET_DHCP_HOSTNAME_MSG0": "WLAN STA get DHCP hostname",
    "WLAN_STA_SET_DHCP_HOSTNAME_MSG0": "WLAN STA set DHCP hostname to",
    "WLAN_STA_GET_RECONNECTS_MSG0": "WLAN STA get reconnects (return int)",
    "WLAN_STA_SET_RECONNECTS_MSG0": "WLAN STA set reconnects to",
    "WLAN_STA_GET_TXPOWER_MSG0": "WLAN STA get tx power (return float)",
    "WLAN_STA_SET_TXPOWER_MSG0": "WLAN STA set tx power to",
    "WLAN_STA_SCAN_FOR_EACH_MSG0": "for each item",
    "WLAN_STA_SCAN_FOR_EACH_MSG1": "in list WLAN STA scan",
    "WLAN_STA_SCAN_FOR_EACH_MSG2": "do",
    "WLAN_STA_SCAN_GET_VALUE_MSG0": "get",
    "WLAN_STA_SCAN_GET_VALUE_MSG1": "AP",
    "WLAN_AP_INIT_MSG0": "Init WLAN AP",
    "WLAN_AP_SET_ACTIVE_MSG0": "WLAN AP active",
    "WLAN_AP_IS_CONNECTED_MSG0": "WLAN AP is connected",
    "WLAN_AP_GET_SSID_MSG0": "WLAN AP get SSID",
    "WLAN_AP_SET_SSID_MSG0": "WLAN AP set SSID to",
    "WLAN_AP_GET_PASSWORD_MSG0": "WLAN AP get password",
    "WLAN_AP_SET_PASSWORD_MSG0": "WLAN AP set password to",
    "WLAN_AP_GET_LOCALIP_MSG0": "WLAN AP get local IP",
    "WLAN_AP_GET_SUBNET_MSG0": "WLAN AP get subnet",
    "WLAN_AP_GET_GATEWAY_MSG0": "WLAN AP get gateway",
    "WLAN_AP_GET_DNS_MSG0": "WLAN AP get DNS",
    "WLAN_AP_GET_MAC_MSG0": "WLAN AP get MAC address",
    "WLAN_AP_GET_HIDDEN_MSG0": "WLAN AP get hidden status",
    "WLAN_AP_SET_HIDDEN_MSG0": "WLAN AP set hidden status",
    "WLAN_AP_GET_AUTHMODE_MSG0": "WLAN AP get auth mode (return int)",
    "WLAN_AP_SET_AUTHMODE_MSG0": "WLAN AP set auth mode to",
    "WLAN_AP_AUTHMODE_VALUE_MSG0": "auth mode",
    "WLAN_AP_GET_CHANNEL_MSG0": "WLAN AP get channel",
    "WLAN_AP_SET_CHANNEL_MSG0": "WLAN AP set channel to",
    "WLAN_AP_SET_CHANNEL_MSG1": "(1 ~ 13)",
    "WLAN_AP_GET_DHCP_HOSTNAME_MSG0": "WLAN AP get DHCP hostname",
    "WLAN_AP_SET_DHCP_HOSTNAME_MSG0": "WLAN AP set DHCP hostname to",
    "WLAN_AP_GET_MAX_CLIENTS_MSG0": "WLAN AP get max client num",
    "WLAN_AP_SET_MAX_CLIENTS_MSG0": "WLAN AP set max client num to",
    "WLAN_AP_SET_MAX_CLIENTS_MSG1": "(1 ~ 10)",
    "WLAN_AP_GET_TXPOWER_MSG0": "WLAN AP get tx power",
    "WLAN_AP_SET_TXPOWER_MSG0": "WLAN AP set tx power to",
    "WLAN_AP_SCAN_FOR_EACH_MSG0": "for each item",
    "WLAN_AP_SCAN_FOR_EACH_MSG1": "in list WLAN AP get stations",
    "WLAN_AP_SCAN_FOR_EACH_MSG2": "do",
    "WLAN_AP_SCAN_GET_VALUE_MSG0": "get",
    "WLAN_AP_SCAN_GET_VALUE_MSG1": "MAC address",
    "ESPNOW_INIT_WLAN_MSG0": "Init ESP-NOW WLAN mode %1",
    "ESPNOW_WLAN_ACTIVE_MSG0": "ESP-NOW WLAN active %1",
    "ESPNOW_WLAN_DISCONNECT_MSG0": "ESP-NOW WLAN disconnect",
    "ESPNOW_WLAN_GET_MAC_MSG0": "ESP-NOW WLAN get MAC address (return bytes)",
    "ESPNOW_INIT_MSG0": "Init ESP-NOW",
    "ESPNOW_ACTIVE_MSG0": "ESP-NOW active %1",
    "ESPNOW_CONFIG_MSG0": "Config ESP-NOW %1 RX buffer size %2 timeout (ms) %3 TX speed bit rate (0x00 ~ 0x2A) %4",
    "ESPNOW_GET_STATUS_MSG0": "ESP-NOW get communication status (return tuple)",
    "ESPNOW_GET_PEER_COUNT_MSG0": "ESP-NOW get number of registered peers (return tuple)",
    "ESPNOW_GET_PEERS_MSG0": "ESP-NOW get number of peers device info (return tuple)",
    "ESPNOW_ADD_PEER_MSG0": "ESP-NOW add peer MAC address %1 (bytes)",
    "ESPNOW_DELETE_PEER_MSG0": "ESP-NOW delete peer MAC address %1 (bytes)",
    "ESPNOW_SET_PMK_MSG0": "ESP-NOW set pmk encryption key %1 (string or bytes)",
    "ESPNOW_SEND_PEER_MSG0": "ESP-NOW send payload peer address %1 (bytes) data %2 (string or bytes)",
    "ESPNOW_GET_PEER_INFO_MSG0": "ESP-NOW get peered mac %1 device info (return tuple)",
    "ESPNOW_GET_ANY_MSG0": "ESP-NOW number of bytes available (return int)",
    "ESPNOW_GET_PEERS_TABLE_MSG0": "ESP-NOW get peers device info table (return dict)",
    "ESPNOW_GET_IRECV_MSG0": "ESP-NOW receive payload timeout %1 ms (return list)",
    "ESPNOW_SET_CALLBACK_MSG0": "ESP-NOW set IRQ callback",
    "ESPNOW_RECV_CALLBACK_MSG0": "When ESP-NOW received data %1 byte list %2",
    "ESPNOW_GET_FROM_BYTES_MSG0": "ESP-NOW get %1 %2 to bytes (return bytes)",
    "ESPNOW_GET_LIST_TO_BYTES_MSG0": "ESP-NOW get list %1 to bytes (return bytes)",
    "ESPNOW_GET_BYTES_TO_HEX_STR_MSG0": "ESP-NOW get bytes string %1 to hex string (return string)",
    "ESPNOW_GET_HEX_STR_TO_BYTES_MSG0": "ESP-NOW get hex string %1 to bytes string (return bytes)",
    "ESPNOW_GET_BYTES_TO_MSG0": "ESP-NOW get bytes %1 to %2 value (return int or float)",
    "ESPNOW_INIT_WIFI_CHANNEL_MSG0": "Init ESP-NOW wifi channel %1 (0 ~ 14)",
    "ESPNOW_DEINIT_MSG0": "ESP-NOW deinit",
    "ESPNOW_GET_MAC_MSG0": "ESP-NOW get %1 MAC address (return bytes)",
    "ESPNOW_GET_REMOTE_MAC_MSG0": "ESP-NOW get remote %1 address thru remote SSID %2 (return bytes)",
    "ESPNOW_SET_ADD_PEER_MSG0": "ESP-NOW add peer MAC address %1 peer ID (1~20) %2 ifidx %3",
    "ESPNOW_SET_ADD_PEER_MSG1": "encrypt",
    "ESPNOW_SET_ADD_PEER_MSG2": "local master key",
    "ESPNOW_SET_DELETE_PEER_MSG0": "ESP-NOW delete peered ID %1 (1 ~ 20)",
    "ESPNOW_SEND_DATA_MSG0": "ESP-NOW send data peer ID %1 (1 ~ 20)  data %2",
    "ESPNOW_SEND_BROADCAST_DATA_MSG0": "ESP-NOW send broadcast data %1",
    "ESPNOW_SET_PMK_ENCRYPT_MSG0": "ESP-NOW set pmk encryption key %1 (16 bytes)",
    "ESPNOW_GET_PEER_LIST_MSG0": "ESP-NOW get %1 peered device MAC list (return list)",
    "ESPNOW_RECEIVE_DATA_CALLBACK_MSG0": "When ESP-NOW receive data %1 MAC %2 data %3",
    "ESPNOW_GET_TO_BYTES_MSG0": "ESP-NOW get %1 (int or float or list) to bytes (return bytes)",
    "ESPNOW_SET_AP_SSID_MSG0": "ESP-NOW set AP mode ssid %1",
    "ESPNOW_STATS_MSG0": "ESP-NOW get status (return tuple)",
    "NVS_OPEN_MSG0": "open",
    "NVS_OPEN_MSG1": "namespace",
    "NVS_GET_I8_MSG0": "get INT8 value for key",
    "NVS_GET_I8_MSG1": "(return -128 ~ 127)",
    "NVS_SET_I8_MSG0": "set key",
    "NVS_SET_I8_MSG1": "to INT8 value",
    "NVS_SET_I8_MSG2": "(-128 ~ 127)",
    "NVS_GET_I32_MSG0": "get INT32 value for key",
    "NVS_GET_I32_MSG1": "(return -2,147,483,648 ~ 2,147,483,647)",
    "NVS_SET_I32_MSG0": "set key",
    "NVS_SET_I32_MSG1": "to INT32 value",
    "NVS_SET_I32_MSG2": "(-2,147,483,648 ~ 2,147,483,647)",
    "NVS_GET_U8_MSG0": "get UINT8 value for key",
    "NVS_GET_U8_MSG1": "(return 0 ~ 255)",
    "NVS_SET_U8_MSG0": "set key",
    "NVS_SET_U8_MSG1": "to UINT8 value",
    "NVS_SET_U8_MSG2": "(0 ~ 255)",
    "NVS_GET_U16_MSG0": "get UINT16 value for key",
    "NVS_GET_U16_MSG1": "(return 0 ~ 65535)",
    "NVS_SET_U16_MSG0": "set key",
    "NVS_SET_U16_MSG1": "to UINT16 value",
    "NVS_SET_U16_MSG2": "(0 ~ 65535)",
    "NVS_GET_U32_MSG0": "get UINT32 value for key",
    "NVS_GET_U32_MSG1": "(return 0 ~ 4,294,967,295)",
    "NVS_SET_U32_MSG0": "set key",
    "NVS_SET_U32_MSG1": "to UINT32 value",
    "NVS_SET_U32_MSG2": "(0 ~ 4,294,967,295)",
    "NVS_GET_STR_MSG0": "get str value for key",
    "NVS_SET_STR_MSG0": "set key",
    "NVS_SET_STR_MSG1": "to str value",
    "NVS_GET_BLOB_MSG0": "get binary blob value for key",
    "NVS_SET_BLOB_MSG0": "set key",
    "NVS_SET_BLOB_MSG1": "to binary blob value",
    "NVS_COMMIT_MSG0": "commits changes to flash",
    "NVS_ERASE_KEY_MSG0": "erase key",
    "POWER_SET_EXT_OUTPUT_MSG0": "Set external port power to",
    "POWER_SET_EXT_OUTPUT_MSG1": "mode",
    "POWER_SET_EXT_OUTPUT_PORT_MSG0": "Set port",
    "POWER_SET_EXT_OUTPUT_PORT_MSG1": "power output",
    "POWER_GET_EXT_OUTPUT_MSG0": "is external port in output mode (return True or False)",
    "POWER_SET_USB_OUTPUT_MSG0": "Set USB port power to",
    "POWER_SET_USB_OUTPUT_MSG1": "mode",
    "POWER_GET_USB_OUTPUT_MSG0": "is USB port in output mode (return True or False)",
    "POWER_SET_LED_BRIGHTNESS_MSG0": "Set power LED brightness",
    "POWER_SET_LED_BRIGHTNESS_MSG1": "(0 ~ 255)",
    "POWER_SHUT_DOWN_MSG0": "Turn off the device",
    "POWER_SET_TIMER_SLEEP_SECOND_MSG0": "Turn off the device and wakeup after",
    "POWER_SET_TIMER_SLEEP_SECOND_MSG1": "(1 ~ 15300) seconds",
    "POWER_SET_TIMER_SLEEP_HOUR_MSG0": "Turn off the device and set it to wakeup at",
    "POWER_SET_TIMER_SLEEP_HOUR_MSG1": "hours (0 ~ 23)",
    "POWER_SET_TIMER_SLEEP_HOUR_MSG2": "minutes (0 ~ 59)",
    "POWER_SET_TIMER_SLEEP_HOUR_MSG3": "every day",
    "POWER_SET_TIMER_SLEEP_DAY_MSG0": "Turn off the device and schedule it to wakeup on",
    "POWER_SET_TIMER_SLEEP_DAY_MSG1": "weekday (0 ~ 6)",
    "POWER_SET_TIMER_SLEEP_DAY_MSG2": "date (1 ~ 31)",
    "POWER_SET_TIMER_SLEEP_DAY_MSG3": "hours (0 ~ 23)",
    "POWER_SET_TIMER_SLEEP_DAY_MSG4": "minutes (0 ~ 59)",
    "POWER_SET_DEEP_SLEEP_MSG0": "Enter deep sleep mode and wakeup after",
    "POWER_SET_DEEP_SLEEP_MSG1": "microseconds, with <touch/click> wakeup",
    "POWER_SET_LIGHT_SLEEP_MSG0": "Enter light sleep mode and wakeup after",
    "POWER_SET_LIGHT_SLEEP_MSG1": "microseconds, with <touch/click> wakeup",
    "POWER_GET_BATTERY_LEVEL_MSG0": "get battery capacity percentage (return int)",
    "POWER_SET_BATTERY_CHARGE_MSG0": "Turn battery charge",
    "POWER_SET_CHARGE_CURRENT_MSG0": "Set battery charge current",
    "POWER_SET_CHARGE_CURRENT_MSG1": "(0 ~ 2000) mA",
    "POWER_SET_CHARGE_VOLTAGE_MSG0": "Set battery charge voltage",
    "POWER_SET_CHARGE_VOLTAGE_MSG1": "(4100 ~ 4600) mV",
    "POWER_IS_CHARGING_MSG0": "is battery charging (return True or False)",
    "POWER_GET_BATTERY_VOLTAGE_MSG0": "get battery voltage in millivolt (return int)",
    "POWER_GET_BATTERY_CURRENT_MSG0": "Power get battery current (return int)",
    "POWER_GET_KEY_STATE_MSG0": "get power key state (return int)",
    "POWER_SET_VIBRATION_MSG0": "Set vibration strength",
    "POWER_SET_VIBRATION_MSG1": "(0 ~ 255)",
    "POWER_GET_PORT_VBUS_MSG0": "get port",
    "POWER_GET_PORT_VBUS_MSG1": "Vbus in Volt (return float)",
    "POWER_GET_PORT_CURRENT_MSG0": "get port",
    "POWER_GET_PORT_CURRENT_MSG1": "current in mA (return float)",
    "M5BLE_INIT_MSG0": "Init BLE name %1",
    "M5BLE_GET_MTU_MSG0": "BLE get mtu",
    "M5BLE_DEINIT_MSG0": "BLE deinit",
    "M5BLE_CLIENT_GET_SERVICES_MSG0": "BLE client get services (return list)",
    "M5BLE_CLIENT_GET_CHARACTERISTICS_MSG0": "BLE client get characteristics with service UUID",
    "M5BLE_CLIENT_GET_CHARACTERISTICS_MSG1": "(return list)",
    "M5BLE_CLIENT_GET_AVAILABLE_CHAR_MSG0": "BLE client number of bytes available",
    "M5BLE_CLIENT_GET_AVAILABLE_CHAR_MSG1": "characteristic UUID",
    "M5BLE_CLIENT_GET_AVAILABLE_CHAR_MSG2": "service UUID",
    "M5BLE_CLIENT_READ_MSG0": "BLE client read",
    "M5BLE_CLIENT_READ_MSG1": "characteristic UUID",
    "M5BLE_CLIENT_READ_MSG2": "service UUID",
    "M5BLE_CLIENT_READ_MSG3": "bytes",
    "M5BLE_CLIENT_READ_ALL_MSG0": "BLE client read all",
    "M5BLE_CLIENT_READ_ALL_MSG1": "characteristic UUID",
    "M5BLE_CLIENT_READ_ALL_MSG2": "service UUID",
    "M5BLE_CLIENT_SET_MTU_MSG0": "BLE client set the maximum transmission unit",
    "M5BLE_CLIENT_SET_CURRENT_SERVICE_UUID_MSG0": "BLE client set current service UUID",
    "M5BLE_CLIENT_SCAN_MSG0": "BLE client connect on found",
    "M5BLE_CLIENT_SCAN_MSG1": "timeout (ms)",
    "M5BLE_CLIENT_SCAN_MSG2": "automatically connect",
    "M5BLE_CLIENT_SCAN_MSG3": "name prefix",
    "M5BLE_CLIENT_CONNECT_MSG0": "BLE client connect",
    "M5BLE_CLIENT_CONNECT_MSG1": "address type",
    "M5BLE_CLIENT_CONNECT_MSG2": "address",
    "M5BLE_CLIENT_WRITE_MSG0": "BLE client write data",
    "M5BLE_CLIENT_WRITE_MSG1": "characteristic UUID",
    "M5BLE_CLIENT_WRITE_MSG2": "service UUID",
    "M5BLE_CLIENT_CLOSE_MSG0": "BLE client close",
    "M5BLE_CLIENT_ON_CONNECTED_MSG0": "When BLE client on connected",
    "M5BLE_CLIENT_ON_CONNECTED_MSG1": "client",
    "M5BLE_CLIENT_ON_DISCONNECTED_MSG0": "When BLE client on disconnected",
    "M5BLE_CLIENT_ON_DISCONNECTED_MSG1": "client",
    "M5BLE_CLIENT_ON_DISCONNECTED_MSG2": "conn handle",
    "M5BLE_CLIENT_ON_DISCONNECTED_MSG3": "addr type",
    "M5BLE_CLIENT_ON_DISCONNECTED_MSG4": "addr",
    "M5BLE_CLIENT_ON_SERVER_FOUND_MSG0": "When BLE client on server found",
    "M5BLE_CLIENT_ON_SERVER_FOUND_MSG1": "client",
    "M5BLE_CLIENT_ON_SERVER_FOUND_MSG2": "name",
    "M5BLE_CLIENT_ON_SERVER_FOUND_MSG3": "addr type",
    "M5BLE_CLIENT_ON_SERVER_FOUND_MSG4": "addr",
    "M5BLE_CLIENT_ON_SERVER_FOUND_MSG5": "adv type",
    "M5BLE_CLIENT_ON_SERVER_FOUND_MSG6": "rssi",
    "M5BLE_CLIENT_ON_SERVER_FOUND_MSG7": "adv data",
    "M5BLE_CLIENT_ON_SCAN_FINISHED_MSG0": "When BLE client on scan finished",
    "M5BLE_CLIENT_ON_SCAN_FINISHED_MSG1": "client",
    "M5BLE_CLIENT_ON_SCAN_FINISHED_MSG2": "scan result",
    "M5BLE_CLIENT_ON_READ_COMPLETE_MSG0": "When BLE client on read complete",
    "M5BLE_CLIENT_ON_READ_COMPLETE_MSG1": "client",
    "M5BLE_CLIENT_ON_READ_COMPLETE_MSG2": "conn handle",
    "M5BLE_CLIENT_ON_READ_COMPLETE_MSG3": "value handle",
    "M5BLE_CLIENT_ON_READ_COMPLETE_MSG4": "char data",
    "M5BLE_CLIENT_ON_NOTIFY_MSG0": "When BLE client on notify",
    "M5BLE_CLIENT_ON_NOTIFY_MSG1": "client",
    "M5BLE_SERVER_CLEAR_SERVICES_MSG0": "BLE server clear services",
    "M5BLE_SERVER_ADD_SERVICE_MSG0": "BLE server add service",
    "M5BLE_SERVER_ADD_SERVICE_MSG1": "service UUID",
    "M5BLE_SERVER_ADD_SERVICE_MSG2": "characteristics",
    "M5BLE_SERVER_CREATE_CHARACTERISTIC_MSG0": "BLE server create characteristics",
    "M5BLE_SERVER_CREATE_CHARACTERISTIC_MSG1": "characteristic UUID",
    "M5BLE_SERVER_CREATE_CHARACTERISTIC_MSG2": "is readable",
    "M5BLE_SERVER_CREATE_CHARACTERISTIC_MSG3": "can notify",
    "M5BLE_SERVER_CREATE_CHARACTERISTIC_MSG4": "is writable",
    "M5BLE_SERVER_START_MSG0": "BLE server start service interval",
    "M5BLE_SERVER_START_MSG1": "us",
    "M5BLE_SERVER_GET_CLIENT_MSG0": "BLE server get client with index",
    "M5BLE_SERVER_GET_CLIENT_LIST_MSG0": "BLE server get clients (return list)",
    "M5BLE_SERVER_ON_RECEIVE_MSG0": "When BLE server received data",
    "M5BLE_SERVER_ON_RECEIVE_MSG1": "server",
    "M5BLE_SERVER_ON_RECEIVE_MSG2": "connected client handle",
    "M5BLE_SERVER_ON_CONNECTED_MSG0": "When client connected to server",
    "M5BLE_SERVER_ON_CONNECTED_MSG1": "server",
    "M5BLE_SERVER_ON_CONNECTED_MSG2": "connected client handle",
    "M5BLE_SERVER_ON_DISCONNECTED_MSG0": "When client disconnected from server",
    "M5BLE_SERVER_ON_DISCONNECTED_MSG1": "server",
    "M5BLE_SERVER_ON_DISCONNECTED_MSG2": "connected client handle",
    "M5BLE_HANDLE_GET_AVAILABLE_CHAR_MSG0": "number of bytes available with char UUID",
    "M5BLE_HANDLE_CLOSE_MSG0": "close",
    "M5BLE_HANDLE_READ_MSG0": "read",
    "M5BLE_HANDLE_READ_MSG1": "bytes with characteristic UUID",
    "M5BLE_HANDLE_READ_ALL_MSG0": "read all with characteristic UUID",
    "M5BLE_HANDLE_WRITE_MSG0": "write data",
    "M5BLE_HANDLE_WRITE_MSG1": "with characteristic UUID",
    "PLAYER_INIT_MSG0": "Init Player",
    "PLAYER_GET_VOLUME_MSG0": "get Player volume (return 0 ~ 100)",
    "PLAYER_GET_POSITION_MSG0": "get Player current position (return int)",
    "PLAYER_PAUSE_MSG0": "Player pause",
    "PLAYER_STOP_MSG0": "Player stop",
    "PLAYER_RESUME_MSG0": "Player resume",
    "PLAYER_SET_VOLUME_MSG0": "Player set volume %1 (-1 ~ 100)",
    "PLAYER_PLAY_RAW_DATA_MSG0": "Player raw data (bytearray / bytes) %1 sample rate (Hz) %2 stereo %3 bits %4 start playing position (byte) %5 volume (-1 ~ 100) %6 sync %7",
    "PLAYER_PLAY_TONE_MSG0": "Player play tone %1 freq %2 time (second,float) %3 volume (-1 ~ 100) %4 sync %5",
    "PLAYER_PLAY_LOCAL_FILE_MSG0": "Player play local file %1 start playing position (byte) %2 volume (-1 ~ 100) %3 sync %4",
    "PLAYER_PLAY_SDCARD_FILE_MSG0": "Player play SDcard file %1 start playing position (byte) %2 volume (-1 ~ 100) %3 sync %4",
    "PLAYER_PLAY_CLOUD_FILE_MSG0": "Player play cloud file %1 start playing position (byte) %2 volume (-1 ~ 100) %3 sync %4",
    "PLAYER_PLAY_CLOUD_FILE_MSG1": "SSL",
    "PLAYER_PLAY_CLOUD_FILE_MSG2": "cert file",
    "RECORDER_INIT_MSG0": "Init Recorder with %1 sample (8000 ~ 96000 Hz) %2 bits %3 stereo %4",
    "RECORDER_PAUSE_MSG0": "Recorder pause",
    "RECORDER_STOP_MSG0": "Recorder stop",
    "RECORDER_RESUME_MSG0": "Recorder resume",
    "RECORDER_GET_VOLUME_MSG0": "get Recorder volume (return 0 ~ 100)",
    "RECORDER_IS_RECORDING_MSG0": "Recorder is recording (return True or False)",
    "RECORDER_GET_RMS_MSG0": "get Recorder root mean square (dB, return float)",
    "RECORDER_CONFIG_MSG0": "Configure Recorder %1 sample (8000 ~ 96000 Hz) %2 bits %3 stereo %4",
    "RECORDER_RECORD_INTO_MSG0": "Recorder record into buf %1 sync %2",
    "RECORDER_RECORD_LOCAL_FILE_MSG0": "Recorder record local file (amr or wav) %1 time (second) %2 sync %3",
    "RECORDER_RECORD_SDCARD_FILE_MSG0": "Recorder record SDcard file (amr or wav) %1 time (second) %2 sync %3",
    "RECORDER_CREATE_PCM_BUF_MSG0": "create Recorder pcm buf with time %1 (second)",
    "JSON_DUMSP_TO_JSON_MSG0": "dumps",
    "JSON_DUMSP_TO_JSON_MSG1": "to json",
    "JSON_LOADS_JSON_MSG0": "loads json",
    "MAP_CLEAR_MSG0": "map clear",
    "MAP_GET_IN_MSG0": "map",
    "MAP_GET_IN_MSG1": "contain key",
    "MAP_GET_KEY_MSG0": "get key",
    "MAP_GET_KEY_MSG1": "in map",
    "MAP_ADD_KEY_VALUE_MSG0": "in map",
    "MAP_ADD_KEY_VALUE_MSG1": "add key",
    "MAP_ADD_KEY_VALUE_MSG2": "value",
    "MAP_SET_KEY_VALUE_MSG0": "in map",
    "MAP_SET_KEY_VALUE_MSG1": "set key",
    "MAP_SET_KEY_VALUE_MSG2": "value",
    "MAP_DEL_KEY_MSG0": "in map",
    "MAP_DEL_KEY_MSG1": "delete key",
    "TEXT_CONVERT_STR_MSG0": "convert to str",
    "TEXT_ADD_STR_MSG0": "+",
    "TEXT_DECODE_STR_MSG0": "decode",
    "TEXT_ENCODE_STR_MSG0": "encode",
    "TEXT_REDUCE_FLOAT_MSG0": "reduce",
    "TEXT_REDUCE_FLOAT_MSG1": "to",
    "TEXT_REDUCE_FLOAT_MSG2": "decimal places",
    "TEXT_CHR_MSG0": "convert %1 to characters",
    "TEXT_ORD_MSG0": "convert %1 to Unicode",
    "BYTEARRAY_CREATE_EMPTY_MSG0": "create empty bytearray with length",
    "BYTEARRAY_APPEND_MSG0": "Bytearray",
    "BYTEARRAY_APPEND_MSG1": "append",
    "BYTEARRAY_EXTEND_MSG0": "Bytearray",
    "BYTEARRAY_EXTEND_MSG1": "extend",
    "BYTEARRAY_DECODE_MSG0": "bytearray",
    "BYTEARRAY_DECODE_MSG1": "decode",
    "BYTES_LIST_TO_BYTES_MSG0": "create bytes with ",
    "BYTES_LIST_TO_BYTES_MSG1": "create empty bytes",
    "BYTES_DECODE_MSG0": "bytes %1 decode %2",
    "MATH_CONVENT_INT_MSG0": "convert to int",
    "MATH_CONVENT_FLOAT_MSG0": "convert to float",
    "MATH_GET_BIT_MSG0": "get",
    "MATH_GET_BIT_MSG1": "bit",
    "MATH_SET_BIT_MSG0": "set",
    "MATH_SET_BIT_MSG1": "bit",
    "MATH_CLEAR_BIT_MSG0": "clear",
    "MATH_CLEAR_BIT_MSG1": "bit",
    "MATH_REVERSE_BIT_MSG0": "reverse",
    "MATH_REVERSE_BIT_MSG1": "bit",
    "MATH_INT_FROM_BYTES_MSG0": "int from bytes",
    "MATH_GET_MAP_MSG0": "remap %1 from low %2 from high %3 to low %4 to high %5",
    "MATH_ROUND_DECIMAL_PLACE_MSG0": "round %1 to %2 decimal place",
    "LOGIC_TRY_EXCEPT_MSG0": "try",
    "LOGIC_TRY_EXCEPT_MSG1": "except",
    "LOGIC_SWITCH_MSG0": "switch                ",
    "LOGIC_SWITCH_MSG1": "case",
    "LOGIC_SWITCH_MSG2": "default",
    "LOGIC_WHEN_MSG0": "When",
    "LOGIC_WHEN_MSG1": "is change",
    "LOGIC_WHEN_MSG2": "do",
    "LOGIC_WHEN_MSG3": "else",
    "CONTROLS_FOR_RANGE_MSG0": "for %1 in range %2",
    "EZDATA_INIT_MSG0": "Init",
    "EZDATA_INIT_MSG1": "device token",
    "EZDATA_INIT_MSG2": "key",
    "EZDATA_INIT_DATASET_KEY_MSG0": "Init",
    "EZDATA_INIT_DATASET_KEY_MSG1": "dataset",
    "EZDATA_INIT_DATASET_KEY_MSG2": "key",
    "EZDATA_INIT_DATA_TOKEN_MSG0": "Init",
    "EZDATA_INIT_DATA_TOKEN_MSG1": "data token",
    "EZDATA_GET_VALUE_MSG0": "get value",
    "EZDATA_GET_HISTORY_MSG0": "get history record (return list)",
    "EZDATA_SET_VALUE_MSG0": "set value",
    "EZDATA_SET_VALUE_FILE_MSG0": "set value (file)",
    "EZDATA_SAVE_FILE_MSG0": "save file to",
    "EZDATA_DELETE_KEY_MSG0": "delete key",
    "EZDATA_GET_UPDATE_TIME_MSG0": "get update time (return Unix timestamp)",
    "EZDATA_HAS_NEW_DATA_MSG0": "has new data (return True or False)",
    "EZDATA_FOR_EACH_LIST_MSG0": "for each item",
    "EZDATA_FOR_EACH_LIST_MSG1": "in EzData list of device",
    "EZDATA_FOR_EACH_LIST_MSG2": "do",
    "EZDATA_FOR_EACH_GET_KEY_MSG0": "get",
    "EZDATA_FOR_EACH_GET_KEY_MSG1": "key",
    "EZDATA_FOR_EACH_GET_VALUE_MSG0": "get",
    "EZDATA_FOR_EACH_GET_VALUE_MSG1": "value",
    "UI_LCD_SHOW_IMAGE_MSG0": "LCD show image %1 with %2 x %3 y %4 width %5 height %6",
    "UI_LCD_GET_WIDTH_MSG0": "get LCD width (return int)",
    "UI_LCD_GET_HEIGHT_MSG0": "get LCD height (return int)",
    "UI_LCD_GET_ROTATION_MSG0": "get LCD current rotation (return int)",
    "UI_LCD_GET_ROTATION_MSG1": "0° rotation",
    "UI_LCD_GET_ROTATION_MSG2": "90° rotation",
    "UI_LCD_GET_ROTATION_MSG3": "180° rotation",
    "UI_LCD_GET_ROTATION_MSG4": "270° rotation",
    "UI_LCD_GET_COLOR_DEPTH_MSG0": "get LCD color depth (return int)",
    "UI_LCD_SET_ROTATION_MSG0": "Set LCD current rotation to %1",
    "UI_LCD_SET_COLOR_DEPTH_MSG0": "Set LCD color depth to %1",
    "UI_LCD_SET_COLOR_DEPTH_MSG1": "Notes: For CoreS3 devices, the color depth is fixed at 16 bits, and this method has no effect.",
    "UI_LCD_SET_FONT_MSG0": "Set LCD font to %1",
    "UI_LCD_SET_TEXT_COLOR_MSG0": "Set LCD text color to %1 background color to %2",
    "UI_LCD_SET_TEXT_SCROLL_MSG0": "Set LCD text scrolling to %1",
    "UI_LCD_SET_TEXT_SIZE_MSG0": "Set LCD text size to %1",
    "UI_LCD_SET_CURSOR_MSG0": "Set LCD cursor x %1 y %2",
    "UI_LCD_DRAW_PIXEL_MSG0": "LCD draw pixel with x %1 y %2 color %3",
    "UI_LCD_DRAW_CIRCLE_MSG0": "LCD %1 circle with x %2 y %3 radius %4 color %5",
    "UI_LCD_DRAW_ELLIPSE_MSG0": "LCD %1 ellipse with x %2 y %3 horizontal semi-axis %4 vertical semi-axis %5 color %6",
    "UI_LCD_DRAW_LINE_MSG0": "LCD draw line with x0 %1 y0 %2 x1 %3 y1 %4 color %5",
    "UI_LCD_DRAW_RECT_MSG0": "LCD %1 rect with x %2 y %3 width %4 height %5 color %6",
    "UI_LCD_DRAW_ROUND_RECT_MSG0": "LCD %1 round rect with x %2 y %3 width %4 height %5 radius %6 color %7",
    "UI_LCD_DRAW_TRIANGLE_MSG0": "LCD %1 triangle with x0 %2 y0 %3 x1 %4 y1 %5 x2 %6 y2 %7 color %8",
    "UI_LCD_DRAW_ARC_MSG0": "LCD %1 arc with %2 coordinate %3 inner radius %4 outer radius %5 angle %6 color %7",
    "UI_LCD_DRAW_ELLIPTICAL_ARC_MSG0": "LCD %1 elliptical arc with %2 coordinate %3 inner radius %4 outer radius %5 angle %6 color %7",
    "UI_LCD_CONFIG_COORDINATE_MSG0": "x",
    "UI_LCD_CONFIG_COORDINATE_MSG1": "y",
    "UI_LCD_CONFIG_SIZE_MSG0": "width",
    "UI_LCD_CONFIG_SIZE_MSG1": "height",
    "UI_LCD_CONFIG_H_V_MSG0": "horizontal",
    "UI_LCD_CONFIG_H_V_MSG1": "vertical",
    "UI_LCD_CONFIG_ANGLE_MSG0": "start",
    "UI_LCD_CONFIG_ANGLE_MSG1": "end",
    "UI_LCD_FILL_SCREEN_MSG0": "LCD fill color %1",
    "UI_LCD_CLEAR_MSG0": "LCD clear with color %1",
    "UI_LCD_START_WRITE_MSG0": "LCD start writing",
    "UI_LCD_END_WRITE_MSG0": "LCD end writing",
    "UI_LCD_PRINT_MSG0": "LCD display string %1 with color %2",
    "UI_LCD_PRINTF_MSG0": "LCD display formatted string %1",
    "UI_LCD_DRAW_QR_MSG0": "LCD draw QR code with text %1 x %2 y %3 width %4 version %5",
    "UI_LCD_DRAW_PNG_MSG0": "LCD draw png with image %1 coordinate %2 max size %3 offset %4 scale %5",
    "UI_LCD_DRAW_IMAGE_MSG0": "LCD draw image with image %1 coordinate %2 max size %3 offset %4",
    "UI_LCD_DRAW_RAW_BUF_MSG0": "LCD draw image with raw buffer data %1 coordinate %2 size %3 image data length %4 inverted %5",
    "UI_LCD_CREATE_CANVAS_MSG0": "LCD create canvas with width %1 height %2 color depth %3 use PSRAM %4",
    "UI_LCD_DRAW_OPTION_MSG0": "draw",
    "UI_LCD_DRAW_OPTION_MSG1": "fill",
    "SET_SCREEN_COLOR_MSG0": "Set screen background color",
    "SET_SCREEN_ROTATION_MSG0": "Set screen rotation",
    "SET_SCREEN_BRIGHTNESS_MSG0": "Set screen brightness",
    "SET_SCREEN_BRIGHTNESS_MSG1": "(0 ~ 255)",
    "SET_SCREEN_COLOR_MULTIPLE_MSG0": "Set screen background color",
    "TITLE_SET_COLOR_MSG0": "Set",
    "TITLE_SET_COLOR_MSG1": "text color",
    "TITLE_SET_COLOR_MSG2": "background color",
    "TITLE_SET_TEXT_MSG0": "Set",
    "TITLE_SET_TEXT_MSG1": "text",
    "TITLE_SET_TEXT_POSITION_MSG0": "Set",
    "TITLE_SET_TEXT_POSITION_MSG1": "text x position",
    "TITLE_SET_VISIBLE_MSG0": "Set",
    "TITLE_SET_COLOR_MULTIPLE_MSG0": "Set",
    "TITLE_SET_COLOR_MULTIPLE_MSG1": "text color",
    "TITLE_SET_COLOR_MULTIPLE_MSG2": "background color",
    "LABEL_SET_SIZE_MSG0": "Set",
    "LABEL_SET_SIZE_MSG1": "size",
    "LABEL_SET_TEXT_MSG0": "Set",
    "LABEL_SET_TEXT_MSG1": "text",
    "LABEL_SET_COLOR_MSG0": "Set",
    "LABEL_SET_COLOR_MSG1": "color",
    "LABEL_SET_POSITION_MSG0": "Set",
    "LABEL_SET_POSITION_MSG1": "x",
    "LABEL_SET_POSITION_MSG2": "y",
    "LABEL_SET_VISIBLE_MSG0": "Set",
    "LABEL_SET_FONT_MSG0": "Set",
    "LABEL_SET_FONT_MSG1": "font",
    "LABEL_SET_COLOR_MULTIPLE_MSG0": "Set",
    "LABEL_SET_COLOR_MULTIPLE_MSG1": "text color",
    "LABEL_SET_COLOR_MULTIPLE_MSG2": "background color",
    "LABEL_PLUS_SET_SIZE_MSG0": "Set",
    "LABEL_PLUS_SET_SIZE_MSG1": "size",
    "LABEL_PLUS_SET_TEXT_MSG0": "Set",
    "LABEL_PLUS_SET_TEXT_MSG1": "text",
    "LABEL_PLUS_SET_POSITION_MSG0": "Set",
    "LABEL_PLUS_SET_POSITION_MSG1": "x",
    "LABEL_PLUS_SET_POSITION_MSG2": "y",
    "LABEL_PLUS_SET_VISIBLE_MSG0": "Set",
    "LABEL_PLUS_SET_FONT_MSG0": "Set",
    "LABEL_PLUS_SET_FONT_MSG1": "font",
    "LABEL_PLUS_SET_COLOR_MULTIPLE_MSG0": "Set",
    "LABEL_PLUS_SET_COLOR_MULTIPLE_MSG1": "text color",
    "LABEL_PLUS_SET_COLOR_MULTIPLE_MSG2": "background color",
    "LABEL_PLUS_UPDATE_ENABLE_MSG0": "Set",
    "LABEL_PLUS_UPDATE_ENABLE_MSG1": "update enable",
    "LABEL_PLUS_UPDATE_PERIOD_MSG0": "Set",
    "LABEL_PLUS_UPDATE_PERIOD_MSG1": "update interval",
    "LABEL_PLUS_IS_VALID_DATA_MSG0": "is",
    "LABEL_PLUS_IS_VALID_DATA_MSG1": "valid data",
    "LABEL_PLUS_GET_DATA_MSG0": "get",
    "LABEL_PLUS_GET_DATA_MSG1": "display data",
    "RECT_SET_COLOR_MSG0": "Set",
    "RECT_SET_COLOR_MSG1": "border color",
    "RECT_SET_COLOR_MSG2": "background color",
    "RECT_SET_POSITION_MSG0": "Set",
    "RECT_SET_POSITION_MSG1": "x",
    "RECT_SET_POSITION_MSG2": "y",
    "RECT_SET_SIZE_MSG0": "Set",
    "RECT_SET_SIZE_MSG1": "width",
    "RECT_SET_SIZE_MSG2": "height",
    "RECT_SET_VISIBLE_MSG0": "Set",
    "RECT_SET_COLOR_MULTIPLE_MSG0": "Set",
    "RECT_SET_COLOR_MULTIPLE_MSG1": "border color",
    "RECT_SET_COLOR_MULTIPLE_MSG2": "body fill color",
    "CIRCLE_SET_COLOR_MSG0": "Set",
    "CIRCLE_SET_COLOR_MSG1": "border color",
    "CIRCLE_SET_COLOR_MSG2": "background color",
    "CIRCLE_SET_POSITION_MSG0": "Set",
    "CIRCLE_SET_POSITION_MSG1": "x",
    "CIRCLE_SET_POSITION_MSG2": "y",
    "CIRCLE_SET_RADIUS_MSG0": "Set",
    "CIRCLE_SET_RADIUS_MSG1": "radius",
    "CIRCLE_SET_VISIBLE_MSG0": "Set",
    "CIRCLE_SET_COLOR_MULTIPLE_MSG0": "Set",
    "CIRCLE_SET_COLOR_MULTIPLE_MSG1": "border color",
    "CIRCLE_SET_COLOR_MULTIPLE_MSG2": "body fill color",
    "IMAGE_SET_POSITION_MSG0": "Set",
    "IMAGE_SET_POSITION_MSG1": "x",
    "IMAGE_SET_POSITION_MSG2": "y",
    "IMAGE_SET_FILE_PATH_MSG0": "Set",
    "IMAGE_SET_FILE_PATH_MSG1": "image",
    "IMAGE_SET_VISIBLE_MSG0": "Set",
    "IMAGE_SET_FILE_NAME_MSG0": "Set",
    "IMAGE_SET_FILE_NAME_MSG1": "image",
    "IMAGE_SET_SCALE_MSG0": "Set %1 scale x %2 (0.1~10.0) and scale y %3 (0.1~10.0)",
    "IMAGE_PLUS_SET_POSITION_MSG0": "Set",
    "IMAGE_PLUS_SET_POSITION_MSG1": "x",
    "IMAGE_PLUS_SET_POSITION_MSG2": "y",
    "IMAGE_PLUS_SET_VISIBLE_MSG0": "Set",
    "IMAGE_PLUS_UPDATE_ENABLE_MSG0": "Set",
    "IMAGE_PLUS_UPDATE_ENABLE_MSG1": "update enable",
    "IMAGE_PLUS_UPDATE_PERIOD_MSG0": "Set",
    "IMAGE_PLUS_UPDATE_PERIOD_MSG1": "update interval",
    "IMAGE_PLUS_IS_VALID_IMAGE_MSG0": "is",
    "IMAGE_PLUS_IS_VALID_IMAGE_MSG1": "valid image",
    "CAMERA_IMAGE_DISP_TO_LCD_MSG0": "camera display to screen",
    "CAMERA_IMAGE_CAPTURE_TO_JPG_MSG0": "get quality",
    "CAMERA_IMAGE_CAPTURE_TO_JPG_MSG1": "(1 ~ 100) camera jpg image (return bytes)",
    "CAMERA_IMAGE_CAPTURE_TO_BMP_MSG0": "get camera bmp image (return bytes)",
    "CAMERA_IMAGE_DEINIT_MSG0": "camera deinit",
    "CAMERA_IMAGE_SET_CONTRAST_MSG0": "camera set contrast",
    "CAMERA_IMAGE_SET_CONTRAST_MSG1": "(-2 ~ 2)",
    "CAMERA_IMAGE_SET_HMIRROR_MSG0": "camera set horizontal mirror",
    "CAMERA_IMAGE_SET_GLOBAL_GAIN_MSG0": "camera set global gain",
    "CAMERA_IMAGE_SET_GLOBAL_GAIN_MSG1": "(0x0 ~ 0x3F)",
    "CAMERA_IMAGE_SET_VFLIP_MSG0": "camera set vertical flip",
    "CAMERA_IMAGE_SET_COLORBAR_MSG0": "camera set colorbar",
    "CAMERA_IMAGE_SET_POSITION_MSG0": "camera set",
    "CAMERA_IMAGE_SET_POSITION_MSG1": "x",
    "CAMERA_IMAGE_SET_POSITION_MSG2": "y",
    "CAMERA_IMAGE_SET_POSITION_MSG3": "max width",
    "CAMERA_IMAGE_SET_POSITION_MSG4": "max height",
    "CAMERA_IMAGE_SET_VISIBLE_MSG0": "camera",
    "TRIANGLE_SET_COLOR_MSG0": "Set",
    "TRIANGLE_SET_COLOR_MSG1": "border color",
    "TRIANGLE_SET_COLOR_MSG2": "background color",
    "TRIANGLE_SET_VISIBLE_MSG0": "Set",
    "TRIANGLE_SET_POINTS_MSG0": "Set",
    "TRIANGLE_SET_POINTS_MSG1": "x0",
    "TRIANGLE_SET_POINTS_MSG2": "y0",
    "TRIANGLE_SET_POINTS_MSG3": "x1",
    "TRIANGLE_SET_POINTS_MSG4": "y1",
    "TRIANGLE_SET_POINTS_MSG5": "x2",
    "TRIANGLE_SET_POINTS_MSG6": "y2",
    "TRIANGLE_SET_COLOR_MULTIPLE_MSG0": "Set",
    "TRIANGLE_SET_COLOR_MULTIPLE_MSG1": "border color",
    "TRIANGLE_SET_COLOR_MULTIPLE_MSG2": "body fill color",
    "LINE_SET_COLOR_MSG0": "Set",
    "LINE_SET_COLOR_MSG1": "color",
    "LINE_SET_VISIBLE_MSG0": "Set",
    "LINE_SET_POINTS_MSG0": "Set",
    "LINE_SET_POINTS_MSG1": "x0",
    "LINE_SET_POINTS_MSG2": "y0",
    "LINE_SET_POINTS_MSG3": "x1",
    "LINE_SET_POINTS_MSG4": "y1",
    "LINE_SET_COLOR_MULTIPLE_MSG0": "Set",
    "LINE_SET_COLOR_MULTIPLE_MSG1": "color",
    "PIN_INIT_MSG0": "Init",
    "PIN_INIT_MSG1": "mode",
    "PIN_INIT_MSG2": "pull",
    "PIN_ON_MSG0": "on",
    "PIN_OFF_MSG0": "off",
    "PIN_SET_VALUE_MSG0": "Set",
    "PIN_SET_VALUE_MSG1": "value",
    "PIN_SET_VALUE_MSG2": "(0 or 1)",
    "PIN_GET_VALUE_MSG0": "get",
    "PIN_GET_VALUE_MSG1": "value",
    "PIN_INIT_INPUT_MSG0": "Init Pin",
    "PIN_UNUSED_MSG0": "Pin unused",
    "ADC_INIT_MSG0": "Init",
    "ADC_INIT_MSG1": "attenuation",
    "ADC_SET_ATTEN_MSG0": "Set",
    "ADC_SET_ATTEN_MSG1": "atten",
    "ADC_SET_WIDTH_MSG0": "Set",
    "ADC_SET_WIDTH_MSG1": "width",
    "ADC_READ_MSG0": "read",
    "ADC_READ_U16_MSG0": "read",
    "ADC_READ_U16_MSG1": "u16",
    "ADC_READ_UV_MSG0": "read",
    "ADC_READ_UV_MSG1": "microvolts",
    "ADC_INIT_INPUT_MSG0": "Init Pin",
    "PWM_INIT_MSG0": "Init",
    "PWM_INIT_MSG1": "freq",
    "PWM_SET_DUTY_MSG0": "Set",
    "PWM_SET_DUTY_MSG1": "duty",
    "PWM_SET_DUTY_MSG2": "(0 ~ 1023)",
    "PWM_SET_DUTY_U16_MSG0": "Set",
    "PWM_SET_DUTY_U16_MSG1": "duty u16",
    "PWM_SET_DUTY_U16_MSG2": "(0 ~ 65536)",
    "PWM_SET_FREQ_MSG0": "Set",
    "PWM_SET_FREQ_MSG1": "freq",
    "PWM_SET_FREQ_MSG2": "Hz (1 ~ 40000000)",
    "PWM_GET_FREQ_MSG0": "get",
    "PWM_GET_FREQ_MSG1": "freq",
    "PWM_GET_DUTY_MSG0": "get",
    "PWM_GET_DUTY_MSG1": "duty",
    "PWM_GET_DUTY_U16_MSG0": "get",
    "PWM_GET_DUTY_U16_MSG1": "duty u16",
    "PWM_DEINIT_MSG0": "deinit",
    "PWM_INIT_INPUT_MSG0": "Init Pin",
    "PWM_INIT_INPUT_MSG1": "freq",
    "PWM_INIT_INPUT_MSG2": "Hz (1 ~ 40000000)",
    "PWM_INIT_INPUT_MSG3": "(0 ~ 1023)",
    "PWM_INIT_INPUT_MSG4": "(0 ~ 65536)",
    "BUTTON_IS_HOLDING_MSG0": "is holding",
    "BUTTON_IS_PRESSED_MSG0": "is pressed",
    "BUTTON_IS_RELEASED_MSG0": "is released",
    "BUTTON_WAS_CLICKED_MSG0": "was clicked",
    "BUTTON_WAS_DOUBLE_CLICKED_MSG0": "was double clicked",
    "BUTTON_WAS_HOLD_MSG0": "was hold",
    "BUTTON_WAS_PRESSED_MSG0": "was pressed",
    "BUTTON_WAS_RELEASED_MSG0": "was released",
    "BUTTON_WAS_SINGLE_CLICKED_MSG0": "was single clicked",
    "BUTTON_CALLBACK_MSG0": "When button",
    "BUTTON_CALLBACK_MSG1": "was",
    "BUTTON_INIT_MSG0": "Init button (pin)",
    "BUTTON_INIT_MSG1": "mode",
    "BUTTON_INIT_MSG2": "pull",
    "BUTTON_TICK_MSG0": "update in loop",
    "PIN_BUTTON_IS_HOLDING_MSG0": "is holding",
    "PIN_BUTTON_IS_PRESSED_MSG0": "is pressed",
    "PIN_BUTTON_IS_RELEASED_MSG0": "is released",
    "PIN_BUTTON_WAS_CLICKED_MSG0": "is clicked",
    "PIN_BUTTON_WAS_DOUBLE_CLICKED_MSG0": "is double clicked",
    "PIN_BUTTON_CALLBACK_MSG0": "When button",
    "PIN_BUTTON_CALLBACK_MSG1": "was",
    "PIN_BUTTON_INIT_MSG0": "Init button (pin)",
    "PIN_BUTTON_INIT_MSG1": "mode",
    "PIN_BUTTON_INIT_MSG2": "pull",
    "PIN_BUTTON_TICK_MSG0": "update in loop",
    "PIN_BUTTON_WAS_HOLD_MSG0": "was hold",
    "PIN_BUTTON_WAS_PRESSED_MSG0": "was pressed",
    "PIN_BUTTON_WAS_RELEASED_MSG0": "was released",
    "PIN_BUTTON_WAS_SINGLE_CLICKED_MSG0": "was single clicked",
    "UART_INIT_MSG0": "Init UART",
    "UART_INIT_MSG1": "with",
    "UART_INIT_MSG2": "baudrate",
    "UART_INIT_MSG3": "bits",
    "UART_INIT_MSG4": "parity",
    "UART_INIT_MSG5": "stop",
    "UART_INIT_MSG6": "TX",
    "UART_INIT_MSG7": "RX",
    "UART_INIT_MSG8": "RTS",
    "UART_INIT_MSG9": "CTS",
    "UART_INIT_MSG10": "TX buffer",
    "UART_INIT_MSG11": "RX buffer",
    "UART_INIT_MSG12": "timeout",
    "UART_INIT_MSG13": "timeout char",
    "UART_INIT_MSG14": "invert",
    "UART_INIT_MSG15": "flow",
    "UART_INIT_MSG16": "mode",
    "UART_INIT_SETUP_MSG0": "UART",
    "UART_INIT_SETUP_MSG1": "setup",
    "UART_DEINIT_MSG0": "UART",
    "UART_DEINIT_MSG1": "deinit",
    "UART_AVAILABLE_CHAR_MSG0": "UART",
    "UART_AVAILABLE_CHAR_MSG1": "count of available",
    "UART_READ_ALL_MSG0": "UART",
    "UART_READ_ALL_MSG1": "read all bytes (return bytes)",
    "UART_READ_BYTES_MSG0": "UART",
    "UART_READ_BYTES_MSG1": "read",
    "UART_READ_BYTES_MSG2": "bytes (return bytes)",
    "UART_READ_LINE_MSG0": "UART",
    "UART_READ_LINE_MSG1": "read line (return bytes)",
    "UART_READ_RAW_DATA_MSG0": "UART",
    "UART_READ_RAW_DATA_MSG1": "read a raw data (return 0 ~ 255)",
    "UART_WRITE_MSG0": "UART",
    "UART_WRITE_MSG1": "write",
    "UART_WRITE_LINE_MSG0": "UART",
    "UART_WRITE_LINE_MSG1": "write line",
    "UART_WRITE_VAR_MSG0": "UART",
    "UART_WRITE_VAR_MSG1": "write",
    "UART_WRITE_LIST_TUPLE_MSG0": "UART",
    "UART_WRITE_LIST_TUPLE_MSG1": "write list or tuple",
    "UART_WRITE_LIST_MSG0": "UART",
    "UART_WRITE_LIST_MSG1": "write raw data",
    "UART_READ_INTO_MSG0": "UART",
    "UART_READ_INTO_MSG1": "read into buf",
    "UART_READ_BYTES_INTO_MSG0": "UART",
    "UART_READ_BYTES_INTO_MSG1": "read",
    "UART_READ_BYTES_INTO_MSG2": "bytes into buf",
    "UART_SET_READ_INTO_MSG0": "UART",
    "UART_SET_READ_INTO_MSG1": "read into buf",
    "UART_SET_READ_BYTES_INTO_MSG0": "UART",
    "UART_SET_READ_BYTES_INTO_MSG1": "read",
    "UART_SET_READ_BYTES_INTO_MSG2": "bytes into buf",
    "UART_SEND_BREAK_MSG0": "UART %1 send break single",
    "UART_FLUSH_MSG0": "UART %1 flush",
    "UART_TXDONE_MSG0": "UART %1 is transfer done (return True or False)",
    "IMU_GET_ACCEL_MSG0": "IMU get accel (return tuple)",
    "IMU_GET_GYRO_MSG0": "IMU get gyro (return tuple)",
    "IMU_GET_MAG_MSG0": "IMU get mag (return tuple)",
    "IMU_GET_ACCEL_VAR_MSG0": "IMU get X",
    "IMU_GET_ACCEL_VAR_MSG1": "Y",
    "IMU_GET_ACCEL_VAR_MSG2": "Z",
    "IMU_GET_ACCEL_VAR_MSG3": "of accel",
    "IMU_GET_GYRO_VAR_MSG0": "IMU get X",
    "IMU_GET_GYRO_VAR_MSG1": "Y",
    "IMU_GET_GYRO_VAR_MSG2": "Z",
    "IMU_GET_GYRO_VAR_MSG3": "of gyro",
    "IMU_GET_MAG_VAR_MSG0": "IMU get X",
    "IMU_GET_MAG_VAR_MSG1": "Y",
    "IMU_GET_MAG_VAR_MSG2": "Z",
    "IMU_GET_MAG_VAR_MSG3": "of mag",
    "RGB_INIT_MSG0": "RGB init",
    "RGB_SET_INDEX_COLOR_MSG0": "set index",
    "RGB_SET_INDEX_COLOR_MSG1": "color",
    "RGB_FILL_COLOR_MSG0": "fill color",
    "RGB_SET_BRIGHTNESS_MSG0": "set brightness",
    "RGB_SET_BRIGHTNESS_MSG1": "% (0 ~ 100)",
    "RGB_SET_PORT_COLOR_MSG0": "set",
    "RGB_SET_PORT_COLOR_MSG1": "LED color",
    "RGB_ATOM_MATRIX_COLOR_MSG0": "set Atom Matrix",
    "I2C_INIT_MSG0": "Init",
    "I2C_INIT_MSG1": "SCL",
    "I2C_INIT_MSG2": "SDA",
    "I2C_INIT_MSG3": "freq",
    "I2C_SCAN_MSG0": "scan device (return 7-bit address list)",
    "I2C_START_MSG0": "generate START condition",
    "I2C_STOP_MSG0": "generate STOP condition",
    "I2C_READINTO_MSG0": "read into buf",
    "I2C_READINTO_MSG1": "NACK",
    "I2C_READFROM_MSG0": "read from addr",
    "I2C_READFROM_MSG1": "nbytes",
    "I2C_READFROM_MSG2": "STOP",
    "I2C_READFROM_MSG3": "(return bytes)",
    "I2C_READFROM_INTO_MSG0": "read from addr",
    "I2C_READFROM_INTO_MSG1": "into buf",
    "I2C_READFROM_INTO_MSG2": "STOP",
    "I2C_READFROM_MEM_MSG0": "read from addr",
    "I2C_READFROM_MEM_MSG1": "memory addr",
    "I2C_READFROM_MEM_MSG2": "nbytes",
    "I2C_READFROM_MEM_MSG3": "(return bytes)",
    "I2C_READFROM_MEM_INTO_MSG0": "read from addr",
    "I2C_READFROM_MEM_INTO_MSG1": "memory addr",
    "I2C_READFROM_MEM_INTO_MSG2": "into buf",
    "I2C_WRITE_RETURN_MSG0": "write buf",
    "I2C_WRITE_RETURN_MSG1": "(return nbytes written)",
    "I2C_WRITE_MSG0": "write buf",
    "I2C_WRITETO_MSG0": "write buf",
    "I2C_WRITETO_MSG1": "to addr",
    "I2C_WRITETO_MSG2": "STOP",
    "I2C_WRITETO_RETURN_MSG0": "write buf",
    "I2C_WRITETO_RETURN_MSG1": "to addr",
    "I2C_WRITETO_RETURN_MSG2": "STOP",
    "I2C_WRITETO_RETURN_MSG3": "(return nbytes written)",
    "I2C_WRITETO_MEM_MSG0": "write buf",
    "I2C_WRITETO_MEM_MSG1": "to addr",
    "I2C_WRITETO_MEM_MSG2": "memory addr",
    "SPEAKER_STOP_MSG0": "Speaker play stop",
    "SPEAKER_TONE_MSG0": "Speaker play tone freq",
    "SPEAKER_TONE_MSG1": "millisecond",
    "SPEAKER_PLAYWAV_MSG0": "Speaker play WAV (bytearray / bytes)",
    "SPEAKER_GET_VOLUME_MSG0": "Speaker get volume (return 0~255)",
    "SPEAKER_SET_VOLUME_MSG0": "Speaker set volume",
    "SPEAKER_SET_VOLUME_MSG1": "(0 ~ 255)",
    "SPEAKER_GET_CONFIG_MSG0": "Speaker get config",
    "SPEAKER_GET_CONFIG_MSG1": "(return int)",
    "SPEAKER_GET_CONFIG_RETURN_BOOLEAN_MSG0": "Speaker get config",
    "SPEAKER_GET_CONFIG_RETURN_BOOLEAN_MSG1": "(return True or False)",
    "SPEAKER_SET_CONFIG_MSG0": "Speaker config",
    "SPEAKER_SET_CONFIG_MSG1": "to",
    "SPEAKER_SET_CONFIG_BOOLEAN_MSG0": "Speaker config",
    "SPEAKER_SET_CONFIG_BOOLEAN_MSG1": "to",
    "SPEAKER_USER_CONFIG_MSG0": "Speaker config",
    "SPEAKER_USER_CONFIG_MSG1": "Data pin",
    "SPEAKER_USER_CONFIG_MSG2": "Data pin",
    "SPEAKER_USER_CONFIG_MSG3": "BCK pin",
    "SPEAKER_USER_CONFIG_MSG4": "WS pin",
    "SPEAKER_USER_CONFIG_MSG5": "Sample rate (Hz)",
    "SPEAKER_USER_CONFIG_MSG6": "Stereo",
    "SPEAKER_USER_CONFIG_MSG7": "DMA buf length",
    "SPEAKER_USER_CONFIG_MSG8": "DMA buf count",
    "SPEAKER_USER_CONFIG_MSG9": "Task priority",
    "SPEAKER_USER_CONFIG_MSG10": "Task pinned core",
    "SPEAKER_USER_CONFIG_MSG11": "I2S port",
    "SPEAKER_BEGIN_MSG0": "Speaker begin",
    "SPEAKER_BEGIN_RETURN_MSG0": "Speaker begin (return True or False)",
    "SPEAKER_END_MSG0": "Speaker end",
    "SPEAKER_IS_RUNNING_MSG0": "Speaker is running",
    "SPEAKER_IS_ENABLED_MSG0": "Speaker is enabled",
    "SPEAKER_IS_PLAYING_MSG0": "Speaker is playing",
    "SPEAKER_GET_PLAYING_CHANNELS_MSG0": "Speaker get playing channels (return int)",
    "SPEAKER_SET_VOLUME_PERCENTAGE_MSG0": "Speaker set volume",
    "SPEAKER_SET_VOLUME_PERCENTAGE_MSG1": "%",
    "SPEAKER_GET_VOLUME_PERCENTAGE_MSG0": "Speaker get volume percentage (return float)",
    "SPEAKER_SET_ALL_CHANNEL_VOLUME_MSG0": "Speaker set all channel volume",
    "SPEAKER_SET_ALL_CHANNEL_VOLUME_MSG1": "(0 ~ 255)",
    "SPEAKER_SET_CHANNEL_VOLUME_MSG0": "Speaker set channel",
    "SPEAKER_SET_CHANNEL_VOLUME_MSG1": "volume",
    "SPEAKER_SET_CHANNEL_VOLUME_MSG2": "(0 ~ 255)",
    "SPEAKER_GET_CHANNEL_VOLUME_MSG0": "Speaker get channel",
    "SPEAKER_GET_CHANNEL_VOLUME_MSG1": "volume (return int)",
    "SPEAKER_PLAY_RAW_MSG0": "Speaker play PCM (bytearray / bytes)",
    "SPEAKER_PLAY_RAW_MSG1": "sample rate (Hz)",
    "SPEAKER_PLAY_RAW_RETURN_MSG0": "Speaker play PCM (bytearray / bytes)",
    "SPEAKER_PLAY_RAW_RETURN_MSG1": "sample rate (Hz)",
    "SPEAKER_PLAY_RAW_RETURN_MSG2": "(return True or False)",
    "SPEAKER_PLAYWAV_FILE_MSG0": "Speaker play WAV file %1 %2",
    "TIMER_INIT_MSG0": "New",
    "TIMER_SET_MODE_MSG0": "mode",
    "TIMER_SET_MODE_MSG1": "period",
    "TIMER_SET_MODE_MSG2": "milliseconds",
    "TIMER_DEINIT_MSG0": "deinit",
    "TIMER_CALLBACK_MSG0": "callback",
    "DISPLAY_CONFIG_MSG0": "User Display config",
    "DISPLAY_CONFIG_MSG1": "type",
    "DISPLAY_CONFIG_MSG2": "resolution",
    "DISPLAY_CONFIG_MSG3": "color",
    "DISPLAY_CONFIG_MSG4": "SPI Bus",
    "DISPLAY_CONFIG_MSG5": "pin config",
    "DISPLAY_CONFIG_MSG6": "backlight",
    "DISPLAY_CONFIG_RESOLUTION_MSG0": "width",
    "DISPLAY_CONFIG_RESOLUTION_MSG1": "height",
    "DISPLAY_CONFIG_RESOLUTION_MSG2": "offset x",
    "DISPLAY_CONFIG_RESOLUTION_MSG3": "offset y",
    "DISPLAY_CONFIG_COLOR_ORDER_MSG0": "invert",
    "DISPLAY_CONFIG_COLOR_ORDER_MSG1": "RGB order",
    "DISPLAY_CONFIG_SPI_BUS_MSG0": "SPI host ID",
    "DISPLAY_CONFIG_SPI_BUS_MSG1": "SPI freq",
    "DISPLAY_CONFIG_SPI_BUS_MSG2": "sclk",
    "DISPLAY_CONFIG_SPI_BUS_MSG3": "mosi",
    "DISPLAY_CONFIG_SPI_BUS_MSG4": "miso",
    "DISPLAY_CONFIG_SPI_BUS_MSG5": "dc",
    "DISPLAY_CONFIG_SPI_BUS_MSG6": "cs",
    "DISPLAY_CONFIG_SPI_BUS_MSG7": "rst",
    "DISPLAY_CONFIG_SPI_BUS_MSG8": "busy",
    "DISPLAY_CONFIG_BACKLIGHT_MSG0": "Pin",
    "DISPLAY_CONFIG_BACKLIGHT_MSG1": "invert",
    "DISPLAY_CONFIG_BACKLIGHT_MSG2": "PWM freq",
    "DISPLAY_CONFIG_BACKLIGHT_MSG3": "PWM channel",
    "TOUCH_GET_COUNT_MSG0": "get touch count (return int)",
    "TOUCH_GET_X_MSG0": "get touch coordinate X (return int)",
    "TOUCH_GET_Y_MSG0": "get touch coordinate Y (return int)",
    "TOUCH_GET_POINT_MSG0": "get touch point Raw (return tuple)",
    "TOUCH_GET_POINT_VAR_MSG0": "get X",
    "TOUCH_GET_POINT_VAR_MSG1": "Y",
    "TOUCH_GET_POINT_VAR_MSG2": "of point",
    "ALS_GET_LUS_MSG0": "get lux (return int)",
    "WDT_INIT_MSG0": "Init WDT timeout",
    "WDT_INIT_MSG1": "milliseconds",
    "WDT_FEED_MSG0": "WDT feed",
    "RTC_INIT_MSG0": "Init RTC",
    "RTC_SET_UTC_TIME_MSG0": "Set UTC time",
    "RTC_SET_UTC_TIME_MSG1": "year",
    "RTC_SET_UTC_TIME_MSG2": "month",
    "RTC_SET_UTC_TIME_MSG3": "mday",
    "RTC_SET_UTC_TIME_MSG4": "hour",
    "RTC_SET_UTC_TIME_MSG5": "minute",
    "RTC_SET_UTC_TIME_MSG6": "second",
    "RTC_SET_UTC_TIME_MSG7": "microsecond",
    "RTC_GET_UTC_TIME_MSG0": "get UTC time (return tuple)",
    "RTC_GET_LOCAL_TIME_MSG0": "get local time (return tuple)",
    "RTC_GET_TIMEZONE_MSG0": "get timezone (return string)",
    "RTC_SET_TIMEZONE_MSG0": "Set timezone",
    "I2S_INIT_MSG0": "Init",
    "I2S_INIT_MSG1": "SCK",
    "I2S_INIT_MSG2": "WS",
    "I2S_INIT_MSG3": "SD",
    "I2S_INIT_MSG4": "mode",
    "I2S_INIT_MSG5": "bits",
    "I2S_INIT_MSG6": "format",
    "I2S_INIT_MSG7": "rate",
    "I2S_INIT_MSG8": "ibuf",
    "I2S_DEINIT_MSG0": "deinit",
    "I2S_READINTO_MSG0": "read into buf",
    "I2S_READINTO_MSG1": "(return length)",
    "I2S_WRITE_MSG0": "write buf",
    "SPI_INIT_MSG0": "Init",
    "SPI_INIT_MSG1": "baudrate",
    "SPI_INIT_MSG2": "SCK",
    "SPI_INIT_MSG3": "MISO",
    "SPI_INIT_MSG4": "MOSI",
    "SPI_INIT_MSG5": "firstbit",
    "SPI_INIT_MSG6": "mode",
    "SPI_DEINIT_MSG0": "deinit",
    "SPI_READINTO_MSG0": "read into buf",
    "SPI_READ_MSG0": "read nbytes",
    "SPI_READ_MSG1": "(return bytes)",
    "SPI_WRITE_MSG0": "write buf",
    "SPI_WRITE_READINTO_MSG0": "write buf",
    "SPI_WRITE_READINTO_MSG1": "read buf",
    "SDCARD_INIT_MSG0": "Init SDCard with",
    "SDCARD_INIT_MSG1": "slot",
    "SDCARD_INIT_MSG2": "SCK",
    "SDCARD_INIT_MSG3": "MISO",
    "SDCARD_INIT_MSG4": "MOSI",
    "SDCARD_INIT_MSG5": "CS",
    "SDCARD_INIT_MSG6": "freq",
    "SDCARD_CHDIR_MSG0": "SDCard change current dir",
    "SDCARD_GET_CWD_MSG0": "SDCard get current dir",
    "SDCARD_LISTDIR_MSG0": "SDCard listdir",
    "SDCARD_MKDIR_MSG0": "SDCard mkdir",
    "SDCARD_REMOVE_MSG0": "SDCard remove",
    "SDCARD_RMDIR_MSG0": "SDCard rmdir",
    "SDCARD_RENAME_MSG0": "SDCard rename",
    "SDCARD_RENAME_MSG1": "to",
    "SDCARD_IS_FILE_MSG0": "is file",
    "SDCARD_IS_DIRECTORY_MSG0": "is directory",
    "SDCARD_IS_EXIST_MSG0": "is exist in",
    "IR_INIT_MSG0": "Init IR",
    "IR_SEND_DATA_MSG0": "IR send addr",
    "IR_SEND_DATA_MSG1": "data",
    "ROTARY_INIT_MSG0": "Rotary init",
    "ROTARY_GET_STATUS_MSG0": "had rotated (return True or False)",
    "ROTARY_GET_VALUE_MSG0": "get value (return int)",
    "ROTARY_GET_INCREMENTS_MSG0": "get increments (return int)",
    "ROTARY_SET_VALUE_MSG0": "set value",
    "ROTARY_RESET_VALUE_MSG0": "reset value",
    "RFID_INIT_MSG0": "RFID init",
    "RFID_IS_NEW_CARD_PRESENT_MSG0": "is new card present (return True or False)",
    "RFID_READ_CARD_UID_MSG0": "read card uid (return bytearray)",
    "RFID_READ_MSG0": "read from addr",
    "RFID_READ_MSG1": "(return bytearray)",
    "RFID_WRITE_MSG0": "write buffer",
    "RFID_WRITE_MSG1": "to addr",
    "RFID_WRITE_RETURN_MSG0": "write buffer",
    "RFID_WRITE_RETURN_MSG1": "to addr",
    "RFID_WRITE_RETURN_MSG2": "(return int)",
    "RFID_CLOSE_MSG0": "close",
    "MATRIXKEYBOARD_INIT_MSG0": "Init keyboard",
    "MATRIXKEYBOARD_GET_KEY_MSG0": "get keyboard key value (return int)",
    "MATRIXKEYBOARD_GET_STRING_MSG0": "get keyboard key string (return string)",
    "MATRIXKEYBOARD_IS_PRESSED_MSG0": "has keyboard pressed (return True or False)",
    "MATRIXKEYBOARD_KEYCODE_MSG0": "KeyCode",
    "MATRIXKEYBOARD_CALLBACK_MSG0": "When keyboard was pressed",
    "MATRIXKEYBOARD_TICK_MSG0": "Keyboard update in loop",
    "HARDWARE_CAN_INIT_BAUDRATE_MSG0": "Init CAN with",
    "HARDWARE_CAN_INIT_BAUDRATE_MSG1": "ID",
    "HARDWARE_CAN_INIT_BAUDRATE_MSG2": "mode",
    "HARDWARE_CAN_INIT_BAUDRATE_MSG3": "TX",
    "HARDWARE_CAN_INIT_BAUDRATE_MSG4": "RX",
    "HARDWARE_CAN_INIT_BAUDRATE_MSG5": "baudrate",
    "HARDWARE_CAN_INIT_MSG0": "Init CAN with",
    "HARDWARE_CAN_INIT_MSG1": "mode",
    "HARDWARE_CAN_INIT_MSG2": "TX",
    "HARDWARE_CAN_INIT_MSG3": "RX",
    "HARDWARE_CAN_INIT_MSG4": "prescaler",
    "HARDWARE_CAN_INIT_MSG5": "sjw",
    "HARDWARE_CAN_INIT_MSG6": "bs1",
    "HARDWARE_CAN_INIT_MSG7": "bs2",
    "HARDWARE_CAN_INIT_MSG8": "triple sampling",
    "HARDWARE_CAN_INIT_MSG9": "ID",
    "HARDWARE_CAN_DEINIT_MSG0": "CAN deinit",
    "HARDWARE_CAN_RESTART_MSG0": "CAN restart",
    "HARDWARE_CAN_GET_STATE_MSG0": "CAN get state (return int)",
    "HARDWARE_CAN_GET_INFO_MSG0": "CAN get error status information",
    "HARDWARE_CAN_ANY_MSG0": "CAN count of available (return True or False)",
    "HARDWARE_CAN_RECV_MESSAGE_MSG0": "CAN read message timeout",
    "HARDWARE_CAN_RECV_MESSAGE_MSG1": "(return tuple)",
    "HARDWARE_CAN_RECV_MESSAGE_INFO_MSG0": "CAN read message into",
    "HARDWARE_CAN_RECV_MESSAGE_INFO_MSG1": "timeout",
    "HARDWARE_CAN_SEND_DATA_MSG0": "CAN send",
    "HARDWARE_CAN_SEND_DATA_MSG1": "id",
    "HARDWARE_CAN_SEND_DATA_MSG2": "timeout",
    "HARDWARE_CAN_SEND_DATA_MSG3": "rtr",
    "HARDWARE_CAN_SEND_DATA_MSG4": "extframe",
    "MIC_SET_CONFIG_INT_MSG0": "Mic config %1 to %2",
    "MIC_SET_CONFIG_BOOLEAN_MSG0": "Mic config %1 to %2",
    "MIC_GET_CONFIG_INT_MSG0": "Mic get config %1 (return int)",
    "MIC_GET_CONFIG_BOOLEAN_MSG0": "Mic get config %1 (return True or False)",
    "MIC_BEGIN_MSG0": "Mic begin",
    "MIC_END_MSG0": "Mic end",
    "MIC_IS_RUNNING_MSG0": "Mic is running (return True or False)",
    "MIC_IS_ENABLED_MSG0": "Mic is enabled (return True or False)",
    "MIC_IS_RECORDING_MSG0": "Mic is recording (return int)",
    "MIC_SET_SAMPLE_RATE_MSG0": "Mic set sampling rate %1",
    "MIC_SET_RECORD_MSG0": "Mic record into buf %1 rate %2 stereo %3",
    "MIC_CONFIG_OPTION_MSG0": "pin_data_in",
    "MIC_CONFIG_OPTION_MSG1": "pin_bck",
    "MIC_CONFIG_OPTION_MSG2": "pin_mck",
    "MIC_CONFIG_OPTION_MSG3": "pin_ws",
    "MIC_CONFIG_OPTION_MSG4": "sample_rate",
    "MIC_CONFIG_OPTION_MSG5": "over_sampling",
    "MIC_CONFIG_OPTION_MSG6": "magnification",
    "MIC_CONFIG_OPTION_MSG7": "noise_filter_level",
    "MIC_CONFIG_OPTION_MSG8": "dma_buf_len",
    "MIC_CONFIG_OPTION_MSG9": "dma_buf_count",
    "MIC_CONFIG_OPTION_MSG10": "task_priority",
    "MIC_CONFIG_OPTION_MSG11": "task_pinned_core",
    "MIC_CONFIG_OPTION_MSG12": "i2s_port",
    "MIC_CONFIG_OPTION_MSG13": "stereo",
    "MIC_CONFIG_OPTION_MSG14": "use_adc",
    "MIC_IS_RECORDING_MSG1": "not recording",
    "MIC_IS_RECORDING_MSG2": "recording (There's room in the queue)",
    "MIC_IS_RECORDING_MSG3": "recording (There's no room in the queue)",
    "MIC_RECORD_WAV_FILE_MSG0": "Mic record WAV file %1 %2 sample rate %3 time (second) %4 stereo %5",
    "HARDWARE_SCD40_INIT_MSG0": "Init SCD40",
    "HARDWARE_SCD40_IS_DATA_READY_MSG0": "SCD40 is sensor data ready (return True or False)",
    "HARDWARE_SCD40_GET_VALUE_MSG0": "SCD40 get value in ppm (return int, 400 ~ 2000)",
    "HARDWARE_SCD40_GET_TEMPERATURE_MSG0": "SCD40 get temperature in °C (return float, -10 ~ 60)",
    "HARDWARE_SCD40_GET_HUMIDITY_MSG0": "SCD40 get humidity in RH% (return float, 0 ~ 100)",
    "HARDWARE_SCD40_GET_TEMPERATURE_OFFSET_MSG0": "SCD40 get temperature offset in °C (return float)",
    "HARDWARE_SCD40_GET_SENSOR_ALTITUDE_MSG0": "SCD40 get sensor altitude in meters (return int)",
    "HARDWARE_SCD40_GET_CALIBRATION_ENABLED_MSG0": "SCD40 get automatic self calibration enabled (return True or False)",
    "HARDWARE_SCD40_GET_SERIAL_NUMBER_MSG0": "SCD40 get serial number (return tuple)",
    "HARDWARE_SCD40_SET_START_PERIODIC_MEASUREMENT_MSG0": "SCD40 set start periodic measurement",
    "HARDWARE_SCD40_SET_STOP_PERIODIC_MEASUREMENT_MSG0": "SCD40 set stop periodic measurement",
    "HARDWARE_SCD40_SET_TEMPERATURE_OFFSET_MSG0": "SCD40 set temperature offset %1 in °C",
    "HARDWARE_SCD40_SET_SENSOR_ALTITUDE_MSG0": "SCD40 set sensor altitude %1 in meters",
    "HARDWARE_SCD40_SET_AMBIENT_PRESSURE_MSG0": "SCD40 set ambient pressure %1 in hPa",
    "HARDWARE_SCD40_SET_FORCE_CALIBRATION_MSG0": "SCD40 set perform force calibration in co2 value %1",
    "HARDWARE_SCD40_SET_CALIBRATION_ENABLED_MSG0": "SCD40 set automatic self calibration %1",
    "HARDWARE_SCD40_SET_START_LOW_PERIODIC_MEASUREMENT_MSG0": "SCD40 set start low periodic measurement",
    "HARDWARE_SCD40_SAVE_TO_EEPROM_MSG0": "SCD40 save current configure settings to eeprom",
    "HARDWARE_SCD40_SET_SELF_TEST_MSG0": "SCD40 set perform self test",
    "HARDWARE_SCD40_SET_FACTORY_RESET_MSG0": "SCD40 set perform factory reset",
    "HARDWARE_SCD40_REINIT_MSG0": "SCD40 set sensor reinitializes",
    "HARDWARE_SEN55_INIT_MSG0": "Init SEN55",
    "HARDWARE_SEN55_GET_POWER_STATE_MSG0": "SEN55 get current power state of the sensor (return True or False)",
    "HARDWARE_SEN55_GET_DATA_READY_FLAG_MSG0": "SEN55 get sensor data ready flag and refresh data",
    "HARDWARE_SEN55_GET_PM1_0_MSG0": "SEN55 get PM1.0 concentration (µg/m³, return float)",
    "HARDWARE_SEN55_GET_PM2_5_MSG0": "SEN55 get PM2.5 concentration (µg/m³, return float)",
    "HARDWARE_SEN55_GET_PM4_0_MSG0": "SEN55 get PM4.0 concentration (µg/m³, return float)",
    "HARDWARE_SEN55_GET_PM10_0_MSG0": "SEN55 get PM10.0 concentration (µg/m³, return float)",
    "HARDWARE_SEN55_GET_HUMIDITY_MSG0": "SEN55 get humidity (RH%, return float)",
    "HARDWARE_SEN55_GET_TEMPERATURE_MSG0": "SEN55 get temperature (°C, return float)",
    "HARDWARE_SEN55_GET_VOC_MSG0": "SEN55 get VOC concentration (PPb, return float)",
    "HARDWARE_SEN55_GET_NOX_MSG0": "SEN55 get NOx concentration (PPb, return float)",
    "HARDWARE_SEN55_SET_POWER_STATE_MSG0": "SEN55 set sensor power state to %1",
    "HARDWARE_SEN55_SET_WORK_MODE_MSG0": "SEN55 set sensor work mode to %1",
    "HARDWARE_RELAY_INIT_MSG0": "Init Relay %1 with ID %2 (1~4)",
    "HARDWARE_RELAY_ON_MSG0": "%1 on",
    "HARDWARE_RELAY_OFF_MSG0": "%1 off",
    "HARDWARE_RELAY_GET_VALUE_MSG0": "get %1 output value (return 0 or 1)",
    "HARDWARE_RELAY_SET_VALUE_MSG0": "Set %1 output value to %2 (0 or 1)",
    "HARDWARE_RELAY_GET_STATUS_MSG0": "get %1 output status (return True or False)",
    "HARDWARE_RELAY_SET_STATUS_MSG0": "Set %1 output status to %2",
    "HARDWARE_DIGITALINPUT_INIT_MSG0": "Init DigitalInput %1 with ID %2 (1~8)",
    "HARDWARE_DIGITALINPUT_GET_VALUE_MSG0": "get %1 input value (return 0 or 1)",
    "HARDWARE_DIGITALINPUT_GET_STATUS_MSG0": "get %1 input status (return True or False)",
    "HARDWARE_DIGITALINPUT_EVENT_MSG0": "When %1 %2",
    "HARDWARE_DIGITALINPUT_EVENT_OPTION_MSG0": "FALLING",
    "HARDWARE_DIGITALINPUT_EVENT_OPTION_MSG1": "RISING",
    "HARDWARE_PWR485_INIT_MSG0": "Init PWR485 %1 with %2 UART %3 baudrate %4 bits %5 parity %6 stop %7 TX %8 RX %9",
    "HARDWARE_PWR485_INIT_MSG1": "RTS",
    "HARDWARE_PWR485_INIT_MSG2": "CTS",
    "HARDWARE_PWR485_INIT_MSG3": "TX buffer",
    "HARDWARE_PWR485_INIT_MSG4": "RX buffer",
    "HARDWARE_PWR485_INIT_MSG5": "timeout",
    "HARDWARE_PWR485_INIT_MSG6": "timeout char",
    "HARDWARE_PWR485_INIT_MSG7": "invert",
    "HARDWARE_PWR485_INIT_MSG8": "flow",
    "HARDWARE_PWR485_INIT_MSG9": "mode",
    "HARDWARE_PWR485_SETUP_MSG0": "%1 setup %2 baudrate %3 bits %4 parity %5 stop %6 TX %7 RX %8",
    "HARDWARE_PWR485_DEINIT_MSG0": "%1 deinit",
    "HARDWARE_PWR485_AVAILABLE_CHAR_MSG0": "%1 count of available",
    "HARDWARE_PWR485_READ_ALL_MSG0": "%1 read all bytes (return bytes)",
    "HARDWARE_PWR485_READ_BYTES_MSG0": "%1 read %2 bytes (return bytes)",
    "HARDWARE_PWR485_READ_LINE_MSG0": "%1 read line (return bytes)",
    "HARDWARE_PWR485_READ_RAW_DATA_MSG0": "%1 read a raw data (return 0 ~ 255)",
    "HARDWARE_PWR485_WRITE_MSG0": "%1 write %2",
    "HARDWARE_PWR485_WRITE_LINE_MSG0": "%1 write line %2",
    "HARDWARE_PWR485_WRITE_LIST_MSG0": "%1 write list or tuple %2",
    "HARDWARE_PWR485_WRITE_RAW_DATA_MSG0": "%1 write raw data %2",
    "HARDWARE_PWR485_READ_INTO_BUF_MSG0": "%1 read into buf %2",
    "HARDWARE_PWR485_SEND_BREAK_MSG0": "%1 send break single",
    "HARDWARE_PWR485_FLUSH_MSG0": "%1 flush",
    "HARDWARE_PWR485_TXDONE_MSG0": "%1 is transfer done (return True or False)",
    "MQTT_SET_CLIENT_MSG0": "Set MQTT client id",
    "MQTT_SET_CLIENT_MSG1": "server",
    "MQTT_SET_CLIENT_MSG2": "port",
    "MQTT_SET_CLIENT_MSG3": "user",
    "MQTT_SET_CLIENT_MSG4": "password",
    "MQTT_SET_CLIENT_MSG5": "keepalive (0 ~ 65535)",
    "MQTT_SET_CLIENT_MSG6": "SSL",
    "MQTT_SET_CLIENT_MSG7": "server hostname",
    "MQTT_SET_CLIENT_MSG8": "key file",
    "MQTT_SET_CLIENT_MSG9": "cert file",
    "MQTT_SET_LAST_WILL_MSG0": "Set last will topic",
    "MQTT_SET_LAST_WILL_MSG1": "msg",
    "MQTT_CONNECT_MSG0": "MQTT connect clean session",
    "MQTT_DISCONNECT_MSG0": "MQTT disconnect",
    "MQTT_RECONNECT_MSG0": "MQTT reconnect",
    "MQTT_PUBLISH_TOPIC_MSG0": "MQTT publish topic",
    "MQTT_PUBLISH_TOPIC_MSG1": "msg",
    "MQTT_PUBLISH_TOPIC_MSG2": "QoS",
    "MQTT_PUBLISH_TOPIC_MSG3": "(0 or 1)",
    "MQTT_WAIT_MSG_MSG0": "MQTT apply for messaging",
    "MQTT_SUBSCRIBE_MSG0": "MQTT subscribe",
    "MQTT_SUBSCRIBE_MSG1": "with topic",
    "MQTT_SUBSCRIBE_MSG2": "QoS",
    "MQTT_SUBSCRIBE_MSG3": "(0 or 1)",
    "MQTT_GET_TOPIC_MSG0": "get topic (return bytes)",
    "MQTT_GET_MSG_MSG0": "get msg (return bytes)",
    "MQTT_ISCONNECTED_MSG0": "MQTT is connected (return True or False)",
    "HTTP_REQUEST_MSG0": "HTTP request",
    "HTTP_REQUEST_MSG1": "method",
    "HTTP_REQUEST_MSG2": "URL",
    "HTTP_REQUEST_MSG3": "headers",
    "HTTP_REQUEST_MSG4": "body",
    "HTTP_REQUEST_MSG5": "Content-Type",
    "HTTP_GET_STATUS_CODE_MSG0": "get status code (return int)",
    "HTTP_GET_REASON_MSG0": "get reason (return bytes)",
    "HTTP_GET_HEADERS_MSG0": "get headers (return map)",
    "HTTP_GET_CONTENT_MSG0": "get content (return bytes)",
    "HTTP_GET_TEXT_MSG0": "get text (return bytes)",
    "HTTP_GET_JSON_MSG0": "get json (return json object)",
    "HTTP_CLOSE_MSG0": "HTTP close",
    "UDP_SERVER_START_MSG0": "UDP server start",
    "UDP_SERVER_START_MSG1": "IP address",
    "UDP_SERVER_START_MSG2": "port",
    "UDP_SERVER_CLOSE_MSG0": "UDP server close",
    "UDP_SERVER_RECV_MSG0": "UDP server receive",
    "UDP_SERVER_RECV_MSG1": "bytes",
    "UDP_SERVER_READ_MSG0": "UDP server read",
    "UDP_SERVER_READ_MSG1": "bytes",
    "UDP_SERVER_RECVFROM_MSG0": "UDP server receive",
    "UDP_SERVER_RECVFROM_MSG1": "bytes (return tuple)",
    "UDP_SERVER_SEND_MSG0": "UDP server send",
    "UDP_SERVER_WRITE_MSG0": "UDP server write",
    "UDP_SERVER_SENDTO_MSG0": "UDP server send",
    "UDP_SERVER_SENDTO_MSG1": "to client",
    "UDP_SERVER_SET_SOCKOPT_MSG0": "UDP server set address reuse",
    "UDP_CLIENT_START_MSG0": "UDP client start",
    "UDP_CLIENT_START_MSG1": "IP address",
    "UDP_CLIENT_START_MSG2": "port",
    "UDP_CLIENT_CLOSE_MSG0": "UDP client close",
    "UDP_CLIENT_RECV_MSG0": "UDP client receive",
    "UDP_CLIENT_RECV_MSG1": "bytes",
    "UDP_CLIENT_READ_MSG0": "UDP client read",
    "UDP_CLIENT_READ_MSG1": "bytes",
    "UDP_CLIENT_SEND_MSG0": "UDP client send",
    "UDP_CLIENT_WRITE_MSG0": "UDP client write",
    "UDP_CLIENT_SET_SOCKOPT_MSG0": "UDP client set address reuse",
    "TCP_SERVER_START_MSG0": "TCP server start",
    "TCP_SERVER_START_MSG1": "IP address",
    "TCP_SERVER_START_MSG2": "port",
    "TCP_SERVER_START_MSG3": "listen",
    "TCP_SERVER_ACCEPT_MSG0": "TCP server accept client connect",
    "TCP_SERVER_CLOSE_MSG0": "TCP server close",
    "TCP_SERVER_CLOSE_CLIENT_MSG0": "Close",
    "TCP_SERVER_CLOSE_CLIENT_MSG1": "client connection",
    "TCP_SERVER_RECV_MSG0": "receive",
    "TCP_SERVER_RECV_MSG1": "bytes",
    "TCP_SERVER_READ_MSG0": "read",
    "TCP_SERVER_READ_MSG1": "bytes",
    "TCP_SERVER_SEND_MSG0": "send",
    "TCP_SERVER_WRITE_MSG0": "write",
    "TCP_SERVER_SET_SOCKOPT_MSG0": "TCP server set address reuse",
    "TCP_SERVER_SET_BLOCKING_MSG0": "TCP server set blocking mode",
    "TCP_SERVER_SET_TIMEOUT_MSG0": "TCP server set timeout",
    "TCP_SERVER_SET_TIMEOUT_MSG1": "(0 ~ 100)",
    "TCP_CLIENT_START_MSG0": "TCP client start",
    "TCP_CLIENT_START_MSG1": "IP address",
    "TCP_CLIENT_START_MSG2": "port",
    "TCP_CLIENT_CLOSE_MSG0": "TCP client close",
    "TCP_CLIENT_RECV_MSG0": "TCP client receive",
    "TCP_CLIENT_RECV_MSG1": "bytes",
    "TCP_CLIENT_READ_MSG0": "TCP client read",
    "TCP_CLIENT_READ_MSG1": "bytes",
    "TCP_CLIENT_READLINE_MSG0": "TCP client read line (return bytes)",
    "TCP_CLIENT_SEND_MSG0": "TCP client send",
    "TCP_CLIENT_WRITE_MSG0": "TCP client write",
    "TCP_CLIENT_SET_BLOCKING_MSG0": "TCP client set blocking mode",
    "TCP_CLIENT_SET_TIMEOUT_MSG0": "TCP client set timeout",
    "TCP_CLIENT_SET_TIMEOUT_MSG1": "(0 ~ 100)",
    "FILEIO_OPEN_MSG0": "open",
    "FILEIO_OPEN_MSG1": "path",
    "FILEIO_OPEN_MSG2": "mode",
    "FILEIO_CLOSE_MSG0": "close",
    "FILEIO_FLUSH_MSG0": "flush",
    "FILEIO_READ_MSG0": "read",
    "FILEIO_READ_MSG1": "bytes (return bytes)",
    "FILEIO_READ_INTO_MSG0": "read into buf",
    "FILEIO_READ_INTO_MSG1": "(return length)",
    "FILEIO_READ_LINE_MSG0": "read line (return bytes)",
    "FILEIO_READ_ALL_LINE_MSG0": "read all lines (return list)",
    "FILEIO_SEEK_MSG0": "set offset",
    "FILEIO_SEEK_MSG1": "whence",
    "FILEIO_TELL_MSG0": "get current position",
    "FILEIO_WRITE_MSG0": "write buf",
    "FILEIO_WRITE_OUTPUT_MSG0": "write buf",
    "FILEIO_WRITE_OUTPUT_MSG1": "(return length)",
    "FILEIO_WRITE_NEWLINE_MSG0": "write newline",
    "MODBUS_RTU_MASTER_INIT_MSG0": "Init Modbus RTU master %1 with %2 UART %3 verbose %4",
    "MODBUS_RTU_MASTER_READ_COILS_MSG0": "%1 read coils (0x01) %2 slave address (0 ~ 247) %3 starting address (0x0 ~ 0xFFFF) %4 coil quantity %5 timeout (ms) %6 (return list)",
    "MODBUS_RTU_MASTER_READ_DISCRETE_INPUTS_MSG0": "%1 read discrete inputs (0x02) %2 slave address (0 ~ 247) %3 starting address (0x0 ~ 0xFFFF) %4 input quantity %5 timeout (ms) %6 (return list)",
    "MODBUS_RTU_MASTER_READ_HOLDING_REGISTERS_MSG0": "%1 read holding registers (0x03) %2 slave address (0 ~ 247) %3 starting address (0x0 ~ 0xFFFF) %4 register quantity %5 timeout (ms) %6 (return list)",
    "MODBUS_RTU_MASTER_READ_INPUT_REGISTERS_MSG0": "%1 read input registers (0x04) %2 slave address (0 ~ 247) %3 starting address (0x0 ~ 0xFFFF) %4 register quantity %5 timeout (ms) %6 (return list)",
    "MODBUS_RTU_MASTER_WRITE_SINGLE_COIL_MSG0": "%1 write single coil (0x05) %2 slave address (0 ~ 247) %3 output address (0x0 ~ 0xFFFF) %4 output %5 timeout (ms) %6",
    "MODBUS_RTU_MASTER_WRITE_SINGLE_REGISTER_MSG0": "%1 write single register (0x06) %2 slave address (0 ~ 247) %3 register address (0x0 ~ 0xFFFF) %4 register value %5 timeout (ms) %6",
    "MODBUS_RTU_MASTER_WRITE_MULTIPLE_COILS_MSG0": "%1 write multiple coils (0x0F) %2 slave address (0 ~ 247) %3 starting address (0x0 ~ 0xFFFF) %4 output value %5 timeout (ms) %6",
    "MODBUS_RTU_MASTER_WRITE_MULTIPLE_REGISTER_MSG0": "%1 write multiple registers (0x10) %2 slave address (0 ~ 247) %3 starting address (0x0 ~ 0xFFFF) %4 register value %5 timeout (ms) %6",
    "MODBUS_RTU_SLAVE_INIT_MSG0": "Init Modbus RTU slave %1 with %2 UART %3 device address (1 ~ 247) %4 verbose %5",
    "MODBUS_RTU_SLAVE_ADD_COIL_MSG0": "Add %1 coil address %2 value %3",
    "MODBUS_RTU_SLAVE_SET_COIL_MSG0": "Set %1 coil address %2 value %3",
    "MODBUS_RTU_SLAVE_SET_MULTI_COILS_MSG0": "Set %1 multi coils starting address %2 value %3",
    "MODBUS_RTU_SLAVE_ADD_DISCRETE_INPUT_MSG0": "Add %1 discrete input address %2 value %3",
    "MODBUS_RTU_SLAVE_SET_MULTI_DISCRETE_INPUT_MSG0": "Set %1 multi discrete input starting address %2 value %3",
    "MODBUS_RTU_SLAVE_SET_DISCRETE_INPUT_MSG0": "Set %1 discrete input address %2 value %3",
    "MODBUS_RTU_SLAVE_ADD_HOLDING_REGISTER_MSG0": "Add %1 holding register %2 value %3",
    "MODBUS_RTU_SLAVE_SET_HOLDING_REGISTER_MSG0": "Set %1 holding register %2 value %3",
    "MODBUS_RTU_SLAVE_SET_MULTI_HOLDING_REGISTER_MSG0": "Set %1 multi holding register starting address %2 value %3",
    "MODBUS_RTU_SLAVE_ADD_INPUT_REGISTER_MSG0": "Add %1 input register %2 value %3",
    "MODBUS_RTU_SLAVE_SET_MULTI_INPUT_REGISTER_MSG0": "Set %1 multi input register starting address %2 value %3",
    "MODBUS_RTU_SLAVE_SET_INPUT_REGISTER_MSG0": "Set %1 input register %2 value %3",
    "MODBUS_RTU_SLAVE_REMOVE_COIL_MSG0": "Remove %1 coil %2",
    "MODBUS_RTU_SLAVE_REMOVE_DISCRETE_INPUT_MSG0": "Remove %1 discrete input %2",
    "MODBUS_RTU_SLAVE_REMOVE_HOLDING_REGISTER_MSG0": "Remove %1 holding register %2",
    "MODBUS_RTU_SLAVE_REMOVE_INPUT_REGISTER_MSG0": "Remove %1 input register %2",
    "MODBUS_RTU_SLAVE_GET_COIL_MSG0": "get %1 coil %2 (return True or False)",
    "MODBUS_RTU_SLAVE_GET_DISCRETE_INPUT_MSG0": "get %1 discrete input %2 (return True or False)",
    "MODBUS_RTU_SLAVE_GET_HOLDING_REGISTER_MSG0": "get %1 holding register %2 (return int)",
    "MODBUS_RTU_SLAVE_GET_INPUT_REGISTER_MSG0": "get %1 input register %2 (return int)",
    "MODBUS_RTU_SLAVE_TICK_MSG0": "%1 update in loop",
    "MODBUS_RTU_SLAVE_READ_COILS_CALLBACK_MSG0": "When %1 read coils (0x01) %2 starting register %3 value %4",
    "MODBUS_RTU_SLAVE_READ_DISCRETE_INPUTS_CALLBACK_MSG0": "When %1 read discrete inputs (0x02) %2 starting register %3 value %4",
    "MODBUS_RTU_SLAVE_READ_HOLDING_REGISTERS_CALLBACK_MSG0": "When %1 read holding registers (0x03) %2 starting register %3 value %4",
    "MODBUS_RTU_SLAVE_READ_INPUT_REGISTERS_CALLBACK_MSG0": "When %1 read input registers (0x04) %2 starting register %3 value %4",
    "MODBUS_RTU_SLAVE_WRITE_SINGLE_COIL_CALLBACK_MSG0": "When %1 write single coil (0x05) %2 register %3 value %4",
    "MODBUS_RTU_SLAVE_WRITE_SINGLE_REGISTER_CALLBACK_MSG0": "When %1 write single register (0x06) %2 register %3 value %4",
    "MODBUS_RTU_SLAVE_WRITE_MULTIPLE_COILS_CALLBACK_MSG0": "When %1 write multiple coils (0x0F) %2 starting register %3 value %4",
    "MODBUS_RTU_SLAVE_WRITE_MULTIPLE_REGISTERS_CALLBACK_MSG0": "When %1 write multiple registers (0x10) %2 starting register %3 value %4",
    "MODBUS_RTU_SLAVE_START_MSG0": "%1 start service",
    "MODBUS_RTU_SLAVE_STOP_MSG0": "%1 stop service",
    "MODBUS_TCP_SERVER_INIT_MSG0": "Init Modbus TCP server %1 with %2 host %3 port %4 device address (1 ~ 247) %5 verbose %6",
    "MODBUS_TCP_SERVER_ADD_COIL_MSG0": "Add %1 coil address %2 value %3",
    "MODBUS_TCP_SERVER_SET_COIL_MSG0": "Set %1 coil address %2 value %3",
    "MODBUS_TCP_SERVER_SET_MULTI_COILS_MSG0": "Set %1 multi coils starting address %2 value %3",
    "MODBUS_TCP_SERVER_ADD_DISCRETE_INPUT_MSG0": "Add %1 discrete input address %2 value %3",
    "MODBUS_TCP_SERVER_SET_MULTI_DISCRETE_INPUT_MSG0": "Set %1 multi discrete input starting address %2 value %3",
    "MODBUS_TCP_SERVER_SET_DISCRETE_INPUT_MSG0": "Set %1 discrete input address %2 value %3",
    "MODBUS_TCP_SERVER_ADD_HOLDING_REGISTER_MSG0": "Add %1 holding register %2 value %3",
    "MODBUS_TCP_SERVER_SET_HOLDING_REGISTER_MSG0": "Set %1 holding register %2 value %3",
    "MODBUS_TCP_SERVER_SET_MULTI_HOLDING_REGISTER_MSG0": "Set %1 multi holding register starting address %2 value %3",
    "MODBUS_TCP_SERVER_ADD_INPUT_REGISTER_MSG0": "Add %1 input register %2 value %3",
    "MODBUS_TCP_SERVER_SET_MULTI_INPUT_REGISTER_MSG0": "Set %1 multi input register starting address %2 value %3",
    "MODBUS_TCP_SERVER_SET_INPUT_REGISTER_MSG0": "Set %1 input register %2 value %3",
    "MODBUS_TCP_SERVER_REMOVE_COIL_MSG0": "Remove %1 coil %2",
    "MODBUS_TCP_SERVER_REMOVE_DISCRETE_INPUT_MSG0": "Remove %1 discrete input %2",
    "MODBUS_TCP_SERVER_REMOVE_HOLDING_REGISTER_MSG0": "Remove %1 holding register %2",
    "MODBUS_TCP_SERVER_REMOVE_INPUT_REGISTER_MSG0": "Remove %1 input register %2",
    "MODBUS_TCP_SERVER_GET_COIL_MSG0": "get %1 coil %2 (return True or False)",
    "MODBUS_TCP_SERVER_GET_DISCRETE_INPUT_MSG0": "get %1 discrete input %2 (return True or False)",
    "MODBUS_TCP_SERVER_GET_HOLDING_REGISTER_MSG0": "get %1 holding register %2 (return int)",
    "MODBUS_TCP_SERVER_GET_INPUT_REGISTER_MSG0": "get %1 input register %2 (return int)",
    "MODBUS_TCP_SERVER_TICK_MSG0": "%1 update in loop",
    "MODBUS_TCP_SERVER_READ_COILS_CALLBACK_MSG0": "When %1 read coils (0x01) %2 starting register %3 value %4",
    "MODBUS_TCP_SERVER_READ_DISCRETE_INPUTS_CALLBACK_MSG0": "When %1 read discrete inputs (0x02) %2 starting register %3 value %4",
    "MODBUS_TCP_SERVER_READ_HOLDING_REGISTERS_CALLBACK_MSG0": "When %1 read holding registers (0x03) %2 starting register %3 value %4",
    "MODBUS_TCP_SERVER_READ_INPUT_REGISTERS_CALLBACK_MSG0": "When %1 read input registers (0x04) %2 starting register %3 value %4",
    "MODBUS_TCP_SERVER_WRITE_SINGLE_COIL_CALLBACK_MSG0": "When %1 write single coil (0x05) %2 register %3 value %4",
    "MODBUS_TCP_SERVER_WRITE_SINGLE_REGISTER_CALLBACK_MSG0": "When %1 write single register (0x06) %2 register %3 value %4",
    "MODBUS_TCP_SERVER_WRITE_MULTIPLE_COILS_CALLBACK_MSG0": "When %1 write multiple coils (0x0F) %2 starting register %3 value %4",
    "MODBUS_TCP_SERVER_WRITE_MULTIPLE_REGISTERS_CALLBACK_MSG0": "When %1 write multiple registers (0x10) %2 starting register %3 value %4",
    "MODBUS_TCP_SERVER_START_MSG0": "%1 start service",
    "MODBUS_TCP_SERVER_STOP_MSG0": "%1 stop service",
    "MODBUS_TCP_CLIENT_INIT_MSG0": "Init Modbus TCP Client %1 with %2 host %3 port %4 verbose %5",
    "MODBUS_TCP_CLIENT_READ_COILS_MSG0": "%1 read coils (0x01) %2 slave address (0 ~ 247) %3 starting address (0x0 ~ 0xFFFF) %4 coil quantity %5 timeout (ms) %6 (return list)",
    "MODBUS_TCP_CLIENT_READ_DISCRETE_INPUTS_MSG0": "%1 read discrete inputs (0x02) %2 slave address (0 ~ 247) %3 starting address (0x0 ~ 0xFFFF) %4 input quantity %5 timeout (ms) %6 (return list)",
    "MODBUS_TCP_CLIENT_READ_HOLDING_REGISTERS_MSG0": "%1 read holding registers (0x03) %2 slave address (0 ~ 247) %3 starting address (0x0 ~ 0xFFFF) %4 register quantity %5 timeout (ms) %6 (return list)",
    "MODBUS_TCP_CLIENT_READ_INPUT_REGISTERS_MSG0": "%1 read input registers (0x04) %2 slave address (0 ~ 247) %3 starting address (0x0 ~ 0xFFFF) %4 register quantity %5 timeout (ms) %6 (return list)",
    "MODBUS_TCP_CLIENT_WRITE_SINGLE_COIL_MSG0": "%1 write single coil (0x05) %2 slave address (0 ~ 247) %3 output address (0x0 ~ 0xFFFF) %4 output %5 timeout (ms) %6",
    "MODBUS_TCP_CLIENT_WRITE_SINGLE_REGISTER_MSG0": "%1 write single register (0x06) %2 slave address (0 ~ 247) %3 register address (0x0 ~ 0xFFFF) %4 register value %5 timeout (ms) %6",
    "MODBUS_TCP_CLIENT_WRITE_MULTIPLE_COILS_MSG0": "%1 write multiple coils (0x0F) %2 slave address (0 ~ 247) %3 starting address (0x0 ~ 0xFFFF) %4 output value %5 timeout (ms) %6",
    "MODBUS_TCP_CLIENT_WRITE_MULTIPLE_REGISTER_MSG0": "%1 write multiple registers (0x10) %2 slave address (0 ~ 247) %3 starting address (0x0 ~ 0xFFFF) %4 register value %5 timeout (ms) %6",
    "MODBUS_TCP_CLIENT_CONNECT_MSG0": "%1 connect",
    "MODBUS_TCP_CLIENT_DISCONNECT_MSG0": "%1 disconnect",
    "DUALKMETER_INIT_MSG0": "Init DualKmeter",
    "DUALKMETER_INIT_MSG1": "I2C address",
    "DUALKMETER_INIT_MSG2": "(0x11 ~ 0x20)",
    "DUALKMETER_GET_THERMOCOUPLE_TEMPERATURE_MSG0": "get",
    "DUALKMETER_GET_THERMOCOUPLE_TEMPERATURE_MSG1": "thermocouple temperature",
    "DUALKMETER_GET_THERMOCOUPLE_TEMPERATURE_MSG2": "(return float)",
    "DUALKMETER_GET_KMETER_TEMPERATURE_MSG0": "get",
    "DUALKMETER_GET_KMETER_TEMPERATURE_MSG1": "internal temperature",
    "DUALKMETER_GET_KMETER_TEMPERATURE_MSG2": "(return float)",
    "DUALKMETER_GET_KMETER_CHANNEL_MSG0": "get",
    "DUALKMETER_GET_KMETER_CHANNEL_MSG1": "selected kmeter channel (return 0 or 1)",
    "DUALKMETER_SET_KMETER_CHANNEL_MSG0": "Set",
    "DUALKMETER_SET_KMETER_CHANNEL_MSG1": "kmeter channel",
    "DUALKMETER_IS_READY_MSG0": "is ready temperature measurement",
    "DUALKMETER_GET_THERMOCOUPLE_TEMPERATURE_STRING_MSG0": "get",
    "DUALKMETER_GET_THERMOCOUPLE_TEMPERATURE_STRING_MSG1": "thermocouple temperature",
    "DUALKMETER_GET_THERMOCOUPLE_TEMPERATURE_STRING_MSG2": "(return string)",
    "DUALKMETER_GET_KMETER_TEMPERATURE_STRING_MSG0": "get",
    "DUALKMETER_GET_KMETER_TEMPERATURE_STRING_MSG1": "internal temperature",
    "DUALKMETER_GET_KMETER_TEMPERATURE_STRING_MSG2": "(return string)",
    "DUALKMETER_GET_FW_VER_MSG0": "get",
    "DUALKMETER_GET_FW_VER_MSG1": "firmware version",
    "DUALKMETER_SET_ADDRESS_MSG0": "Set",
    "DUALKMETER_SET_ADDRESS_MSG1": "I2C address",
    "DUALKMETER_SET_ADDRESS_MSG2": "(0x11 ~ 0x20)",
    "MODULE_RELAY2_INIT_MSG0": "Init 2Relay %1 I2C address %2 (0x08 ~ 0x77)",
    "MODULE_RELAY2_GET_STATUS_MSG0": "get %1 the relay %2 state (return True or False)",
    "MODULE_RELAY2_SET_STATUS_MSG0": "Set %1 the relay %2 state %3",
    "MODULE_RELAY2_SET_ALL_STATUS_MSG0": "Set %1 all relay state %2",
    "MODULE_RELAY2_SET_ADDRESS_MSG0": "Set %1 I2C address %2 (0x08 ~ 0x77)",
    "MODULE_RELAY2_GET_I2C_ADDRESS_MSG0": "get %1 current I2C address (return int)",
    "MODULE_RELAY2_GET_FIRMWARE_VERSION_MSG0": "get %1 firmware version (return int)",
    "RELAY4_INIT_MSG0": "Init 4Relay",
    "RELAY4_INIT_MSG1": "I2C address",
    "RELAY4_INIT_MSG2": "(0x08 ~ 0x77)",
    "RELAY4_GET_STATUS_MSG0": "get",
    "RELAY4_GET_STATUS_MSG1": "relay",
    "RELAY4_GET_STATUS_MSG2": "status (return 0 or 1)",
    "RELAY4_SET_STATUS_MSG0": "Set",
    "RELAY4_SET_STATUS_MSG1": "relay",
    "RELAY4_SET_STATUS_MSG2": "state",
    "RELAY4_SET_ALL_STATUS_MSG0": "Set",
    "RELAY4_SET_ALL_STATUS_MSG1": "all relay state",
    "RELAY4_GET_ADC_8BIT_VOLTAGE_MSG0": "get",
    "RELAY4_GET_ADC_8BIT_VOLTAGE_MSG1": "ADC 8bit voltage value (V, return 0 ~ 26)",
    "RELAY4_GET_ADC_8BIT_RAW_MSG0": "get",
    "RELAY4_GET_ADC_8BIT_RAW_MSG1": "ADC 8bit raw value (return 0 ~ 255)",
    "RELAY4_GET_ADC_12BIT_VOLTAGE_MSG0": "get",
    "RELAY4_GET_ADC_12BIT_VOLTAGE_MSG1": "ADC 12bit voltage value (V, return 0 ~ 26)",
    "RELAY4_GET_ADC_12BIT_RAW_MSG0": "get",
    "RELAY4_GET_ADC_12BIT_RAW_MSG1": "ADC 12bit raw value (return 0 ~ 4095)",
    "RELAY4_SET_ADDRESS_MSG0": "Set",
    "RELAY4_SET_ADDRESS_MSG1": "I2C address",
    "RELAY4_SET_ADDRESS_MSG2": "(0x08 ~ 0x77)",
    "ENCODER4MOTOR_INIT_MSG0": "Init 4EncoderMotor",
    "ENCODER4MOTOR_INIT_MSG1": "I2C address",
    "ENCODER4MOTOR_INIT_MSG2": "(0x08 ~ 0x77)",
    "ENCODER4MOTOR_SET_MOTOR_MODE_MSG0": "Set",
    "ENCODER4MOTOR_SET_MOTOR_MODE_MSG1": "motor",
    "ENCODER4MOTOR_SET_MOTOR_MODE_MSG2": "mode",
    "ENCODER4MOTOR_SET_ALL_MOTORS_MODE_MSG0": "Set",
    "ENCODER4MOTOR_SET_ALL_MOTORS_MODE_MSG1": "all motors mode",
    "ENCODER4MOTOR_SET_ALL_MOTORS_MODE_MSG2": "Normal",
    "ENCODER4MOTOR_SET_ALL_MOTORS_MODE_MSG3": "Position",
    "ENCODER4MOTOR_SET_ALL_MOTORS_MODE_MSG4": "Speed",
    "ENCODER4MOTOR_GET_MOTOR_ENCODER_VALUE_MSG0": "get",
    "ENCODER4MOTOR_GET_MOTOR_ENCODER_VALUE_MSG1": "motor",
    "ENCODER4MOTOR_GET_MOTOR_ENCODER_VALUE_MSG2": "encoder value (return int)",
    "ENCODER4MOTOR_SET_MOTOR_ENCODER_VALUE_MSG0": "Set",
    "ENCODER4MOTOR_SET_MOTOR_ENCODER_VALUE_MSG1": "motor",
    "ENCODER4MOTOR_SET_MOTOR_ENCODER_VALUE_MSG2": "encoder value",
    "ENCODER4MOTOR_GET_ENCODER_MODE_DIRECTION_MSG0": "get",
    "ENCODER4MOTOR_GET_ENCODER_MODE_DIRECTION_MSG1": "encoder mode direction (return int)",
    "ENCODER4MOTOR_SET_ENCODER_MODE_DIRECTION_MSG0": "Set",
    "ENCODER4MOTOR_SET_ENCODER_MODE_DIRECTION_MSG1": "encoder mode direction",
    "ENCODER4MOTOR_SET_ADDRESS_MSG0": "Set",
    "ENCODER4MOTOR_SET_ADDRESS_MSG1": "I2C address",
    "ENCODER4MOTOR_SET_ADDRESS_MSG2": "(0x08 ~ 0x77)",
    "ENCODER4MOTOR_GET_VIN_CURRENT_FLOAT_VALUE_MSG0": "get",
    "ENCODER4MOTOR_GET_VIN_CURRENT_FLOAT_VALUE_MSG1": "Vin current value (A, return float)",
    "ENCODER4MOTOR_GET_VIN_CURRENT_INT_VALUE_MSG0": "get",
    "ENCODER4MOTOR_GET_VIN_CURRENT_INT_VALUE_MSG1": "Vin current value (mA, return int)",
    "ENCODER4MOTOR_GET_VIN_ADC_8BIT_RAW_VALUE_MSG0": "get",
    "ENCODER4MOTOR_GET_VIN_ADC_8BIT_RAW_VALUE_MSG1": "Vin adc 8bit raw value (return int)",
    "ENCODER4MOTOR_GET_VIN_ADC_12BIT_RAW_VALUE_MSG0": "get",
    "ENCODER4MOTOR_GET_VIN_ADC_12BIT_RAW_VALUE_MSG1": "Vin adc 12bit raw value (return int)",
    "ENCODER4MOTOR_GET_VIN_VOLTAGE_MSG0": "get",
    "ENCODER4MOTOR_GET_VIN_VOLTAGE_MSG1": "Vin voltage value (return int)",
    "ENCODER4MOTOR_GET_DEVICE_SPEC_DETAIL_MSG0": "get %1 %2 spec detail (return int)",
    "ENCODER4MOTOR_GET_DEVICE_SPEC_DETAIL_MSG1": "firmware version",
    "ENCODER4MOTOR_GET_DEVICE_SPEC_DETAIL_MSG2": "I2C address",
    "ENCODER4MOTOR_SET_MOTOR_PWM_DUTYCYCLE_MSG0": "Set",
    "ENCODER4MOTOR_SET_MOTOR_PWM_DUTYCYCLE_MSG1": "motor",
    "ENCODER4MOTOR_SET_MOTOR_PWM_DUTYCYCLE_MSG2": "PWM dutycycle",
    "ENCODER4MOTOR_SET_MOTOR_PWM_DUTYCYCLE_MSG3": "(-127 ~ 127)",
    "ENCODER4MOTOR_SET_POSITION_ENCODER_VALUE_MSG0": "Set",
    "ENCODER4MOTOR_SET_POSITION_ENCODER_VALUE_MSG1": "motor",
    "ENCODER4MOTOR_SET_POSITION_ENCODER_VALUE_MSG2": "position encoder value",
    "ENCODER4MOTOR_SET_POSITION_MAX_SPEED_VALUE_MSG0": "Set",
    "ENCODER4MOTOR_SET_POSITION_MAX_SPEED_VALUE_MSG1": "motor",
    "ENCODER4MOTOR_SET_POSITION_MAX_SPEED_VALUE_MSG2": "position maximum speed value",
    "ENCODER4MOTOR_SET_POSITION_MAX_SPEED_VALUE_MSG3": "(-127 ~ 127)",
    "ENCODER4MOTOR_SET_POSITION_PID_VALUE_MSG0": "Set",
    "ENCODER4MOTOR_SET_POSITION_PID_VALUE_MSG1": "motor",
    "ENCODER4MOTOR_SET_POSITION_PID_VALUE_MSG2": "position control P",
    "ENCODER4MOTOR_SET_POSITION_PID_VALUE_MSG3": "I",
    "ENCODER4MOTOR_SET_POSITION_PID_VALUE_MSG4": "D",
    "ENCODER4MOTOR_SET_POSITION_PID_VALUE_MSG5": "value",
    "ENCODER4MOTOR_GET_POSITION_PID_VALUE_MSG0": "get",
    "ENCODER4MOTOR_GET_POSITION_PID_VALUE_MSG1": "motor",
    "ENCODER4MOTOR_GET_POSITION_PID_VALUE_MSG2": "position control PID value (return list)",
    "ENCODER4MOTOR_GET_SPEED_PID_VALUE_MSG0": "get",
    "ENCODER4MOTOR_GET_SPEED_PID_VALUE_MSG1": "motor",
    "ENCODER4MOTOR_GET_SPEED_PID_VALUE_MSG2": "speed control PID value (return list)",
    "ENCODER4MOTOR_GET_MOTOR_SPEED_VALUE_MSG0": "get",
    "ENCODER4MOTOR_GET_MOTOR_SPEED_VALUE_MSG1": "motor",
    "ENCODER4MOTOR_GET_MOTOR_SPEED_VALUE_MSG2": "speed value (return int)",
    "ENCODER4MOTOR_SET_SPEED_PID_VALUE_MSG0": "Set",
    "ENCODER4MOTOR_SET_SPEED_PID_VALUE_MSG1": "motor",
    "ENCODER4MOTOR_SET_SPEED_PID_VALUE_MSG2": "speed control P",
    "ENCODER4MOTOR_SET_SPEED_PID_VALUE_MSG3": "I",
    "ENCODER4MOTOR_SET_SPEED_PID_VALUE_MSG4": "D",
    "ENCODER4MOTOR_SET_SPEED_PID_VALUE_MSG5": "value",
    "ENCODER4MOTOR_SET_SPEED_POINT_VALUE_MSG0": "Set",
    "ENCODER4MOTOR_SET_SPEED_POINT_VALUE_MSG1": "motor",
    "ENCODER4MOTOR_SET_SPEED_POINT_VALUE_MSG2": "speed point value",
    "ENCODER4MOTOR_SET_SPEED_POINT_VALUE_MSG3": "(-127 ~ 127)",
    "ENCODER4MOTOR_GET_SOFT_START_STATE_MSG0": "get %1 motor %2 soft start state (return True or False)",
    "ENCODER4MOTOR_SET_SOFT_START_STATE_MSG0": "Set %1 motor %2 soft start state to %3",
    "PPS_INIT_MSG0": "Init PPS",
    "PPS_INIT_MSG1": "I2C address",
    "PPS_INIT_MSG2": "(0x08 ~ 0x77)",
    "PPS_SET_OUTPUT_MSG0": "Set the output mode of",
    "PPS_SET_OUTPUT_MSG1": "to",
    "PPS_ENABLE_OUTPUT_MSG0": "Enable the output of",
    "PPS_DISABLE_OUTPUT_MSG0": "Disable the output of",
    "PPS_SET_OUTPUT_VOLTAGE_MSG0": "Set the output voltage of",
    "PPS_SET_OUTPUT_VOLTAGE_MSG1": "to",
    "PPS_SET_OUTPUT_VOLTAGE_MSG2": "(V, 0.0 ~ 30.0)",
    "PPS_SET_OUTPUT_CURRENT_MSG0": "Set the output current of",
    "PPS_SET_OUTPUT_CURRENT_MSG1": "to",
    "PPS_SET_OUTPUT_CURRENT_MSG2": "(A, 0.0 ~ 5.0)",
    "PPS_READ_PSU_RUNNING_MODE_MSG0": "read the PSU running mode of",
    "PPS_READ_PSU_RUNNING_MODE_MSG1": "(return int)",
    "PPS_READ_OUTPUT_CURRENT_MSG0": "read the output current of",
    "PPS_READ_OUTPUT_CURRENT_MSG1": "(return float)",
    "PPS_READ_OUTPUT_VOLTAGE_MSG0": "read the output voltage of",
    "PPS_READ_OUTPUT_VOLTAGE_MSG1": "(return float)",
    "PPS_READ_INPUT_VOLTAGE_MSG0": "read the input voltage of",
    "PPS_READ_INPUT_VOLTAGE_MSG1": "(return float)",
    "PPS_READ_DATA_UPDATE_FLAG_MSG0": "read the data update flag of",
    "PPS_READ_DATA_UPDATE_FLAG_MSG1": "(return int)",
    "PPS_READ_MCU_TEMPERATURE_MSG0": "read the MCU temperature of",
    "PPS_READ_MCU_TEMPERATURE_MSG1": "(return float)",
    "PPS_READ_MODULE_ID_MSG0": "read the module ID of",
    "PPS_READ_MODULE_ID_MSG1": "(return int)",
    "PPS_READ_UID_MSG0": "read the unique identifier (UID) of",
    "PPS_READ_UID_MSG1": "(return bytearray)",
    "PPS_GET_I2C_ADDRESS_MSG0": "get the current I2C address of",
    "PPS_GET_I2C_ADDRESS_MSG1": "(return int)",
    "PPS_SET_I2C_ADDRESS_MSG0": "Set",
    "PPS_SET_I2C_ADDRESS_MSG1": "I2C address",
    "PPS_SET_I2C_ADDRESS_MSG2": "(0x08 ~ 0x77)",
    "MODULE_DISPLAY_INIT_MSG0": "Module Display config",
    "MODULE_DISPLAY_INIT_MSG1": "size",
    "MODULE_DISPLAY_INIT_MSG2": "refresh rate",
    "MODULE_DISPLAY_INIT_MSG3": "scale (0 ~ 255)",
    "MODULE_DISPLAY_INIT_MSG4": "pixel clock",
    "MODULE_DISPLAY_INIT_MSG5": "output",
    "MODULE_DISPLAY_CONFIG_SIZE_MSG0": "width",
    "MODULE_DISPLAY_CONFIG_SIZE_MSG1": "height",
    "MODULE_DISPLAY_CONFIG_SCALE_MSG0": "width",
    "MODULE_DISPLAY_CONFIG_SCALE_MSG1": "height",
    "MODULE_DISPLAY_CONFIG_OUTPUT_MSG0": "width",
    "MODULE_DISPLAY_CONFIG_OUTPUT_MSG1": "height",
    "MODULE_RCA_INIT_MSG0": "Module RCA config",
    "MODULE_RCA_INIT_MSG1": "size",
    "MODULE_RCA_INIT_MSG2": "output",
    "MODULE_RCA_INIT_MSG3": "signal type",
    "MODULE_RCA_INIT_MSG4": "use psram",
    "MODULE_RCA_INIT_MSG5": "pin dac",
    "MODULE_RCA_INIT_MSG6": "output level",
    "MODULE_RCA_CONFIG_SIZE_MSG0": "width",
    "MODULE_RCA_CONFIG_SIZE_MSG1": "height",
    "MODULE_RCA_CONFIG_OUTPUT_MSG0": "width",
    "MODULE_RCA_CONFIG_OUTPUT_MSG1": "height",
    "IOT_BASE_CATM_INIT_MSG0": "Init IoT Base CatM",
    "IOT_BASE_CATM_CHECK_MODEM_IS_READY_MSG0": "check if modem is ready (return True or False)",
    "IOT_BASE_CATM_GET_SIGNAL_STRENGTH_MSG0": "get",
    "IOT_BASE_CATM_GET_SIGNAL_STRENGTH_MSG1": "signal strength (return int)",
    "IOT_BASE_CATM_GET_MODEL_IDENTIFICATION_MSG0": "get",
    "IOT_BASE_CATM_GET_MODEL_IDENTIFICATION_MSG1": "model identification (return string)",
    "IOT_BASE_CATM_GET_DATA_CONTENT_MSG0": "get",
    "IOT_BASE_CATM_GET_DATA_CONTENT_MSG1": "data content (return string)",
    "IOT_BASE_CATM_GET_GPRS_NETWORK_STATUS_MSG0": "get",
    "IOT_BASE_CATM_GET_GPRS_NETWORK_STATUS_MSG1": "gprs network status (return int)",
    "IOT_BASE_CATM_GET_SHOW_PDP_ADDRESS_MSG0": "get",
    "IOT_BASE_CATM_GET_SHOW_PDP_ADDRESS_MSG1": "show pdp address cid",
    "IOT_BASE_CATM_GET_SHOW_PDP_ADDRESS_MSG2": "(1 ~ 2) (return string)",
    "IOT_BASE_CATM_GET_SELECTED_OPERATOR_MSG0": "get",
    "IOT_BASE_CATM_GET_SELECTED_OPERATOR_MSG1": "selected operator (return string)",
    "IOT_BASE_CATM_GET_MODE_SELECTION_MSG0": "get",
    "IOT_BASE_CATM_GET_MODE_SELECTION_MSG1": "preferred mode selection (return int)",
    "IOT_BASE_CATM_GET_NETWORK_ACTIVATED_MSG0": "get",
    "IOT_BASE_CATM_GET_NETWORK_ACTIVATED_MSG1": "APP network activated pdp id",
    "IOT_BASE_CATM_GET_NETWORK_ACTIVATED_MSG2": "(0 ~ 3)",
    "IOT_BASE_CATM_GET_NETWORK_IP_MSG0": "get",
    "IOT_BASE_CATM_GET_NETWORK_IP_MSG1": "network ip pdp id",
    "IOT_BASE_CATM_GET_NETWORK_IP_MSG2": "(0 ~ 3) (return string)",
    "IOT_BASE_CATM_SET_MODEM_POWER_CTRL_MSG0": "set modem power control",
    "IOT_BASE_CATM_SET_COMMAND_ECHO_MODE_MSG0": "set echo command mode",
    "IOT_BASE_CATM_SET_GPRS_NETWORK_STATE_MSG0": "set gprs network state",
    "IOT_BASE_CATM_SET_PDP_CONTEXT_MSG0": "set define PDP context apn",
    "IOT_BASE_CATM_SET_MODE_SELECTION_MSG0": "set preferred mode selection",
    "IOT_BASE_CATM_SET_NETWORK_ACTIVE_MSG0": "set APP network active PDP id",
    "IOT_BASE_CATM_SET_NETWORK_ACTIVE_MSG1": "action",
    "IOT_BASE_CATM_SET_MODEM_DEBUG_MSG0": "set AT command debug print",
    "IOT_BASE_CATM_MQTT_SERVER_CONNECT_MSG0": "MQTT server connect",
    "IOT_BASE_CATM_MQTT_SERVER_CONNECT_MSG1": "server",
    "IOT_BASE_CATM_MQTT_SERVER_CONNECT_MSG2": "port",
    "IOT_BASE_CATM_MQTT_SERVER_CONNECT_MSG3": "client id",
    "IOT_BASE_CATM_MQTT_SERVER_CONNECT_MSG4": "username",
    "IOT_BASE_CATM_MQTT_SERVER_CONNECT_MSG5": "password",
    "IOT_BASE_CATM_MQTT_SERVER_CONNECT_MSG6": "keepalive (0 ~ 65535)",
    "IOT_BASE_CATM_MQTT_SERVER_DISCONNECT_MSG0": "MQTT server disconnect",
    "IOT_BASE_CATM_MQTT_UNSUBSCRIBE_TOPIC_MSG0": "MQTT unsubscribe topic",
    "IOT_BASE_CATM_MQTT_PUBLISH_TOPIC_MSG0": "MQTT publish topic",
    "IOT_BASE_CATM_MQTT_PUBLISH_TOPIC_MSG1": "msg",
    "IOT_BASE_CATM_MQTT_PUBLISH_TOPIC_MSG2": "QoS",
    "IOT_BASE_CATM_MQTT_PUBLISH_TOPIC_MSG3": "(0 ~ 2)",
    "IOT_BASE_CATM_MQTT_POLLING_LOOP_MSG0": "MQTT polling loop",
    "IOT_BASE_CATM_MQTT_SERVER_IS_CONNECT_MSG0": "check MQTT server is connect (return int)",
    "IOT_BASE_CATM_MQTT_SUBSCRIBE_MSG0": "MQTT subscribe topic",
    "IOT_BASE_CATM_MQTT_SUBSCRIBE_MSG1": "QoS",
    "IOT_BASE_CATM_MQTT_SUBSCRIBE_MSG2": "(0 ~ 2)",
    "IOT_BASE_CATM_MQTT_SUBSCRIBE_CALLBACK_MSG0": "MQTT subscribe callback topic",
    "IOT_BASE_CATM_MQTT_SUBSCRIBE_CALLBACK_MSG1": "msg",
    "IOT_BASE_CATM_HTTP_SERVER_CONNECT_MSG0": "HTTP server connect",
    "IOT_BASE_CATM_HTTP_SERVER_DISCONNECT_MSG0": "HTTP server disconnect",
    "IOT_BASE_CATM_HTTP_GET_RESPONSE_CODE_MSG0": "get",
    "IOT_BASE_CATM_HTTP_GET_RESPONSE_CODE_MSG1": "response status code (return int)",
    "IOT_BASE_CATM_IS_HTTP_SERVER_CONNECT_MSG0": "check HTTP server is connect (return True or False)",
    "IOT_BASE_CATM_HTTP_REQUEST_MSG0": "HTTP request",
    "IOT_BASE_CATM_HTTP_REQUEST_MSG1": "method",
    "IOT_BASE_CATM_HTTP_REQUEST_MSG2": "URL",
    "IOT_BASE_CATM_HTTP_REQUEST_MSG3": "headers",
    "IOT_BASE_CATM_HTTP_REQUEST_MSG4": "data",
    "IOT_BASE_CATM_CONFIGURE_RS485_MSG0": "init RS485",
    "IOT_BASE_CATM_CONFIGURE_RS485_MSG1": "baudrate",
    "IOT_BASE_CATM_CONFIGURE_RS485_MSG2": "data bits",
    "IOT_BASE_CATM_CONFIGURE_RS485_MSG3": "stop bits",
    "IOT_BASE_CATM_CONFIGURE_RS485_MSG4": "parity",
    "IOT_BASE_CATM_RS485_READ_ALL_BYTES_MSG0": "read all bytes (return bytes)",
    "IOT_BASE_CATM_RS485_READ_BYTES_MSG0": "read",
    "IOT_BASE_CATM_RS485_READ_BYTES_MSG1": "bytes (return bytes)",
    "IOT_BASE_CATM_RS485_READ_LINE_MSG0": "read line (return bytes)",
    "IOT_BASE_CATM_RS485_ANY_MSG0": "number of bytes available (return int)",
    "IOT_BASE_CATM_RS485_WRITE_MSG0": "write",
    "IOT_BASE_CATM_RS485_WRITE_LINE_MSG0": "write a line",
    "IOT_BASE_CATM_RS485_WRITE_LIST_BYTES_MSG0": "write list of bytes",
    "IOT_BASE_CATM_RS485_READ_COILS_MSG0": "read coils",
    "IOT_BASE_CATM_RS485_READ_COILS_MSG1": "slave address (0 ~ 247)",
    "IOT_BASE_CATM_RS485_READ_COILS_MSG2": "starting address (0 ~ 9999)",
    "IOT_BASE_CATM_RS485_READ_COILS_MSG3": "coil quantity",
    "IOT_BASE_CATM_RS485_READ_COILS_MSG4": "timeout",
    "IOT_BASE_CATM_RS485_READ_COILS_MSG5": "(return list)",
    "IOT_BASE_CATM_RS485_READ_DISCRETE_INPUTS_MSG0": "read discrete inputs",
    "IOT_BASE_CATM_RS485_READ_DISCRETE_INPUTS_MSG1": "slave address (0 ~ 247)",
    "IOT_BASE_CATM_RS485_READ_DISCRETE_INPUTS_MSG2": "starting address (0 ~ 9999)",
    "IOT_BASE_CATM_RS485_READ_DISCRETE_INPUTS_MSG3": "input quantity",
    "IOT_BASE_CATM_RS485_READ_DISCRETE_INPUTS_MSG4": "timeout",
    "IOT_BASE_CATM_RS485_READ_DISCRETE_INPUTS_MSG5": "(return list)",
    "IOT_BASE_CATM_RS485_READ_HOLDING_REGISTERS_MSG0": "read holding registers",
    "IOT_BASE_CATM_RS485_READ_HOLDING_REGISTERS_MSG1": "slave address (0 ~ 247)",
    "IOT_BASE_CATM_RS485_READ_HOLDING_REGISTERS_MSG2": "starting address (0 ~ 9999)",
    "IOT_BASE_CATM_RS485_READ_HOLDING_REGISTERS_MSG3": "register quantity",
    "IOT_BASE_CATM_RS485_READ_HOLDING_REGISTERS_MSG4": "signed",
    "IOT_BASE_CATM_RS485_READ_HOLDING_REGISTERS_MSG5": "timeout",
    "IOT_BASE_CATM_RS485_READ_HOLDING_REGISTERS_MSG6": "(return list)",
    "IOT_BASE_CATM_RS485_READ_INPUT_REGISTERS_MSG0": "read input registers",
    "IOT_BASE_CATM_RS485_READ_INPUT_REGISTERS_MSG1": "slave address (0 ~ 247)",
    "IOT_BASE_CATM_RS485_READ_INPUT_REGISTERS_MSG2": "starting address (0 ~ 9999)",
    "IOT_BASE_CATM_RS485_READ_INPUT_REGISTERS_MSG3": "register quantity",
    "IOT_BASE_CATM_RS485_READ_INPUT_REGISTERS_MSG4": "signed",
    "IOT_BASE_CATM_RS485_READ_INPUT_REGISTERS_MSG5": "timeout",
    "IOT_BASE_CATM_RS485_READ_INPUT_REGISTERS_MSG6": "(return list)",
    "IOT_BASE_CATM_RS485_WRITE_SINGLE_COIL_MSG0": "write single coil",
    "IOT_BASE_CATM_RS485_WRITE_SINGLE_COIL_MSG1": "slave address (0 ~ 247)",
    "IOT_BASE_CATM_RS485_WRITE_SINGLE_COIL_MSG2": "output address (0 ~ 9999)",
    "IOT_BASE_CATM_RS485_WRITE_SINGLE_COIL_MSG3": "output",
    "IOT_BASE_CATM_RS485_WRITE_SINGLE_COIL_MSG4": "timeout",
    "IOT_BASE_CATM_RS485_WRITE_SINGLE_REGISTER_MSG0": "write single register",
    "IOT_BASE_CATM_RS485_WRITE_SINGLE_REGISTER_MSG1": "slave address (0 ~ 247)",
    "IOT_BASE_CATM_RS485_WRITE_SINGLE_REGISTER_MSG2": "register address (0 ~ 9999)",
    "IOT_BASE_CATM_RS485_WRITE_SINGLE_REGISTER_MSG3": "register value",
    "IOT_BASE_CATM_RS485_WRITE_SINGLE_REGISTER_MSG4": "signed",
    "IOT_BASE_CATM_RS485_WRITE_SINGLE_REGISTER_MSG5": "timeout",
    "IOT_BASE_CATM_RS485_WRITE_MULTIPLE_COILS_MSG0": "write multiple coils",
    "IOT_BASE_CATM_RS485_WRITE_MULTIPLE_COILS_MSG1": "slave address (0 ~ 247)",
    "IOT_BASE_CATM_RS485_WRITE_MULTIPLE_COILS_MSG2": "starting address (0 ~ 9999)",
    "IOT_BASE_CATM_RS485_WRITE_MULTIPLE_COILS_MSG3": "output value",
    "IOT_BASE_CATM_RS485_WRITE_MULTIPLE_COILS_MSG4": "timeout",
    "IOT_BASE_CATM_RS485_WRITE_MULTIPLE_REGISTER_MSG0": "write multiple register",
    "IOT_BASE_CATM_RS485_WRITE_MULTIPLE_REGISTER_MSG1": "slave address (0 ~ 247)",
    "IOT_BASE_CATM_RS485_WRITE_MULTIPLE_REGISTER_MSG2": "starting address (0 ~ 9999)",
    "IOT_BASE_CATM_RS485_WRITE_MULTIPLE_REGISTER_MSG3": "register value",
    "IOT_BASE_CATM_RS485_WRITE_MULTIPLE_REGISTER_MSG4": "signed",
    "IOT_BASE_CATM_RS485_WRITE_MULTIPLE_REGISTER_MSG5": "timeout",
    "MODULE_AIN420MA_INIT_MSG0": "Init AIN4-20mA %1 I2C address %2 (0x08 ~ 0x77)",
    "MODULE_AIN420MA_GET_ADC_RAW_VALUE_MSG0": "get %1 12bit ADC raw value from channel %2 (return int)",
    "MODULE_AIN420MA_GET_CURRENT_VALUE_MSG0": "get %1 current value from channel %2 (mA, return int)",
    "MODULE_AIN420MA_GET_FIRMWARE_VERSION_MSG0": "get %1 firmware version (return int)",
    "MODULE_AIN420MA_GET_I2C_ADDRESS_MSG0": "get %1 current I2C address (return int)",
    "MODULE_AIN420MA_SET_I2C_ADDRESS_MSG0": "Set %1 I2C address %2 (0x08 ~ 0x77)",
    "MODULE_AIN420MA_SET_CAL_CURRENT_MSG0": "Set %1 channel %2 calibration current %3 (4 ~ 20) mA",
    "MODULE_HMI_INIT_MSG0": "Init HMI %1 I2C address %2 (0x08 ~ 0x77)",
    "MODULE_HMI_SET_I2C_ADDRESS_MSG0": "Set %1 I2C address %2 (0x08 ~ 0x77)",
    "MODULE_HMI_GET_I2C_ADDRESS_MSG0": "get %1 current I2C address (return int)",
    "MODULE_HMI_GET_FIRMWARE_VERSION_MSG0": "get %1 firmware version (return int)",
    "MODULE_HMI_GET_ENCODER_VALUE_MSG0": "get %1 rotary value (return int)",
    "MODULE_HMI_SET_ENCODER_VALUE_MSG0": "Set %1 rotary value to %2 (-2147483648 ~ 2147483647)",
    "MODULE_HMI_RESET_ENCODER_VALUE_MSG0": "Reset %1 rotary value",
    "MODULE_HMI_SET_LED_STATE_MSG0": "Set %1 LED %2 state %3",
    "MODULE_HMI_GET_INCREMENT_VALUE_MSG0": "get %1 rotary increment value (compared to last read) (return int)",
    "MODULE_HMI_GET_BUTTON_STATE_MSG0": "get %1 button %2 state (return int)",
    "MODULE_HMI_GET_LED_STATE_MSG0": "get %1 LED %2 state (return 0 or 1)",
    "MODULE_PLUS_INIT_MSG0": "Init Plus %1 I2C address %2",
    "MODULE_PLUS_GET_ENCODER_VALUE_MSG0": "get %1 rotary value",
    "MODULE_PLUS_GET_BUTTON_STATE_MSG0": "get %1 button state",
    "MODULE_PLUS_RESET_ENCODER_VALUE_MSG0": "Reset %1 rotary value",
    "MODULE_PLUS_SET_ENCODER_VALUE_MSG0": "Set %1 rotary value to %2",
    "MODULE_PLUS_GET_INCREMENT_VALUE_MSG0": "get %1 rotary increment value (compared to last read) (return int)",
    "MODULE_LAN_INIT_MSG0": "Init LAN %1 with %2 CS pin %3 reset pin %4 interrupt pin %5",
    "MODULE_LAN_DEINIT_MSG0": "%1 deinit",
    "MODULE_LAN_ISCONNECTED_MSG0": "%1 is connected (return True or False)",
    "MODULE_LAN_ACTIVE_MSG0": "%1 active %2",
    "MODULE_LAN_GET_STATUS_MSG0": "get %1 connect status (return int)",
    "MODULE_LAN_SET_DEFAULT_NETIF_MSG0": "Set %1 default network interface",
    "MODULE_LAN_GET_LOCALIP_MSG0": "get %1 local IP",
    "MODULE_LAN_GET_SUBNET_MSG0": "get %1 subnet",
    "MODULE_LAN_GET_GATEWAY_MSG0": "get %1 gateway",
    "MODULE_LAN_GET_DNS_MSG0": "get %1 DNS",
    "MODULE_LAN_GET_MAC_MSG0": "get %1 MAC address",
    "MODULE_LAN_SET_MAC_MSG0": "Set %1 MAC address to %2",
    "MODULE_LAN_ETH_STATUS_MSG0": "ethernet status %1",
    "MODULE_LAN_IFCONFIG_SUBNET_MSG0": "Set %1 ifconfig with %2 local IP %3 subnet %4 gateway %5 DNS %6",
    "MODULE_LAN_IFCONFIG_NETMASK_MSG0": "Set %1 ifconfig with %2 local IP %3 netmask %4 gateway %5 DNS %6",
    "MODULE_RS232_INIT_MSG0": "Init RS232 %1 with %2 UART %3 baudrate %4 bits %5 parity %6 stop %7 TX %8 RX %9",
    "MODULE_RS232_SETUP_MSG0": "%1 setup %2 baudrate %3 bits %4 parity %5 stop %6 TX %7 RX %8",
    "MODULE_RS232_DEINIT_MSG0": "%1 deinit",
    "MODULE_RS232_AVAILABLE_CHAR_MSG0": "%1 count of available",
    "MODULE_RS232_READ_ALL_MSG0": "%1 read all",
    "MODULE_RS232_READ_BYTES_MSG0": "%1 read %2 bytes",
    "MODULE_RS232_READ_LINE_MSG0": "%1 read line",
    "MODULE_RS232_READ_RAW_DATA_MSG0": "%1 read a raw data (return 0 ~ 255)",
    "MODULE_RS232_WRITE_MSG0": "%1 write %2",
    "MODULE_RS232_WRITE_LINE_MSG0": "%1 write line %2",
    "MODULE_RS232_WRITE_LIST_MSG0": "%1 write list or tuple %2",
    "MODULE_RS232_WRITE_RAW_DATA_LIST_MSG0": "%1 write raw data %2",
    "MODULE_RS232_WRITE_RAW_DATA_MSG0": "%1 write raw data %2",
    "MODULE_RS232_READ_INTO_BUF_MSG0": "%1 read into buf %2",
    "MODULE_RS232_SEND_BREAK_MSG0": "%1 send break single",
    "MODULE_RS232_FLUSH_MSG0": "%1 flush",
    "MODULE_RS232_TXDONE_MSG0": "%1 is transfer done (return True or False)",
    "MODULE_LORA433_INIT_MSG0": "Init LoRa433 %1 with %2 CS pin %3 interrupt pin %4 reset pin %5",
    "MODULE_LORA433_INIT_MSG1": "frequency",
    "MODULE_LORA433_INIT_MSG2": "spreading factor",
    "MODULE_LORA433_INIT_MSG3": "bandwidth",
    "MODULE_LORA433_INIT_MSG4": "coding rate",
    "MODULE_LORA433_INIT_MSG5": "preamble length",
    "MODULE_LORA433_INIT_MSG6": "output power (dBm)",
    "MODULE_LORA433_SEND_RETURN_MSG0": "%1 send packet %2 (return int)",
    "MODULE_LORA433_SEND_WITH_TIME_RETURN_MSG0": "%1 send packet %2 at %3 milliseconds (return int)",
    "MODULE_LORA433_SEND_MSG0": "%1 send packet %2",
    "MODULE_LORA433_START_RECV_MSG0": "%1 start receive data",
    "MODULE_LORA433_STANDBY_MSG0": "Set %1 to standby mode",
    "MODULE_LORA433_SLEEP_MSG0": "%1 sleep",
    "MODULE_LORA433_IRQ_TRIGGERED_MSG0": "%1 check if the IRQ has been triggered (return True or False)",
    "MODULE_LORA433_RECV_MSG0": "%1 receive with timeout %2 milliseconds RX length %3 RX packet %4",
    "MODULE_LORA433_RECEIVE_DATA_EVENT_MSG0": "When %1 receive data %2",
    "MODULE_LORA868_INIT_MSG0": "Init LoRa868 %1 with %2 CS pin %3 interrupt pin %4 reset pin %5",
    "MODULE_LORA868_INIT_MSG1": "frequency",
    "MODULE_LORA868_INIT_MSG2": "spreading factor",
    "MODULE_LORA868_INIT_MSG3": "bandwidth",
    "MODULE_LORA868_INIT_MSG4": "coding rate",
    "MODULE_LORA868_INIT_MSG5": "preamble length",
    "MODULE_LORA868_INIT_MSG6": "output power (dBm)",
    "MODULE_LORA868_SEND_RETURN_MSG0": "%1 send packet %2 (return int)",
    "MODULE_LORA868_SEND_WITH_TIME_RETURN_MSG0": "%1 send packet %2 at %3 milliseconds (return int)",
    "MODULE_LORA868_SEND_MSG0": "%1 send packet %2",
    "MODULE_LORA868_START_RECV_MSG0": "%1 start receive data",
    "MODULE_LORA868_STANDBY_MSG0": "Set %1 to standby mode",
    "MODULE_LORA868_SLEEP_MSG0": "%1 sleep",
    "MODULE_LORA868_IRQ_TRIGGERED_MSG0": "%1 check if the IRQ has been triggered (return True or False)",
    "MODULE_LORA868_RECV_MSG0": "%1 receive with timeout %2 milliseconds RX length %3 RX packet %4",
    "MODULE_LORA868_RECEIVE_DATA_EVENT_MSG0": "When %1 receive data %2",
    "MODULE_LORA868V12_INIT_MSG0": "Init LoRa868 %1 with %2 CS pin %3 interrupt pin %4 reset pin %5 busy pin %6",
    "MODULE_LORA868V12_INIT_MSG1": "frequency (kHz)",
    "MODULE_LORA868V12_INIT_MSG2": "bandwidth",
    "MODULE_LORA868V12_INIT_MSG3": "spreading factor",
    "MODULE_LORA868V12_INIT_MSG4": "coding rate",
    "MODULE_LORA868V12_INIT_MSG5": "preamble length",
    "MODULE_LORA868V12_INIT_MSG6": "syncword",
    "MODULE_LORA868V12_INIT_MSG7": "output power (dBm)",
    "MODULE_LORA868V12_SEND_RETURN_MSG0": "%1 send packet %2 (return int)",
    "MODULE_LORA868V12_SEND_WITH_TIME_RETURN_MSG0": "%1 send packet %2 at %3 milliseconds (return int)",
    "MODULE_LORA868V12_SEND_MSG0": "%1 send packet %2",
    "MODULE_LORA868V12_START_RECV_MSG0": "%1 start receive data",
    "MODULE_LORA868V12_STANDBY_MSG0": "Set %1 to standby mode",
    "MODULE_LORA868V12_SLEEP_MSG0": "%1 sleep",
    "MODULE_LORA868V12_IRQ_TRIGGERED_MSG0": "%1 check if the IRQ has been triggered (return True or False)",
    "MODULE_LORA868V12_RECV_MSG0": "%1 receive with timeout %2 milliseconds RX length %3 RX packet %4",
    "MODULE_LORA868V12_RECEIVE_DATA_EVENT_MSG0": "When %1 receive data %2",
    "MODULE_LORA868V12_RECV_DATA_PARAM_MSG0": "get %2 in receive data %1",
    "MODULE_4IN8OUT_INIT_MSG0": "Init 4IN8OUT %1 I2C address %2 (0x08 ~ 0x77)",
    "MODULE_4IN8OUT_GET_I2C_ADDRESS_MSG0": "get %1 current I2C address (return int)",
    "MODULE_4IN8OUT_GET_FIRMWARE_VERSION_MSG0": "get %1 firmware version (return int)",
    "MODULE_4IN8OUT_SET_ADDRESS_MSG0": "Set %1 I2C address %2 (0x08 ~ 0x77)",
    "MODULE_4IN8OUT_GET_SWITCH_VALUE_MSG0": "get %1 the switch %2 state (return True or False)",
    "MODULE_4IN8OUT_GET_LOAD_STATE_MSG0": "get %1 the load %2 state (return True or False)",
    "MODULE_4IN8OUT_SET_LOAD_STATE_MSG0": "Set %1 the load %2 state %3",
    "MODULE_STEPMOTOR_DRIVER_INIT_MSG0": "Init StepMotor Driver %1 with %2 I2C address (0x08 ~ 0x77) %3 step pin %4 dir pin %5",
    "MODULE_STEPMOTOR_DRIVER_RESET_MOTOR_MSG0": "Reset %1 motor %2 to %3",
    "MODULE_STEPMOTOR_DRIVER_SET_MOTOR_STATE_MSG0": "Set %1 motor state to %2",
    "MODULE_STEPMOTOR_DRIVER_SET_ADDRESS_MSG0": "Set %1 I2C address %2 (0x08 ~ 0x77)",
    "MODULE_STEPMOTOR_DRIVER_SET_MICROSTEP_MSG0": "Set %1 microstep to %2",
    "MODULE_STEPMOTOR_DRIVER_SET_MOTOR_PWM_FREQ_MSG0": "Set %1 motor %2 PWM freq to %3",
    "MODULE_STEPMOTOR_DRIVER_SET_MOTOR_DIRECTION_MSG0": "Set %1 motor %2 direction to %3",
    "MODULE_STEPMOTOR_DRIVER_GET_FIRMWARE_VERSION_MSG0": "get %1 firmware version (return int)",
    "MODULE_STEPMOTOR_DRIVER_GET_ALL_LIMIT_SWITCH_STATE_MSG0": "get %1 all limit switch state (return True or False)",
    "MODULE_STEPMOTOR_DRIVER_GET_LIMIT_SWITCH_STATE_MSG0": "get %1 limit switch %2 state (return True or False)",
    "MODULE_STEPMOTOR_DRIVER_GET_FAULT_IO_STATE_MSG0": "get %1 fault IO %2 state (return True or False)",
    "MODULE_STEPMOTOR_DRIVER_MOTOR_CONTROL_MSG0": "Set %1 motor %2 to %3",
    "MODULE_COM_NBIOT_INIT_MSG0": "Init NB-IoT %1 with %2 UART %3 TX %4 RX %5",
    "MODULE_COM_NBIOT_CHECK_MODEM_IS_READY_MSG0": "check %1 if modem is ready (return True or False)",
    "MODULE_COM_NBIOT_GET_IMEI_NUMBER_MSG0": "get %1 identification (IMEI) number (return string)",
    "MODULE_COM_NBIOT_GET_SIGNAL_STRENGTH_MSG0": "get %1 signal strength (return int)",
    "MODULE_COM_NBIOT_GET_MODEL_IDENTIFICATION_MSG0": "get %1 model identification (return string)",
    "MODULE_COM_NBIOT_GET_GPRS_NETWORK_STATUS_MSG0": "get %1 gprs network status (return int)",
    "MODULE_COM_NBIOT_GET_SHOW_PDP_ADDRESS_MSG0": "get %1 show pdp address cid %2 (0~1) (return string)",
    "MODULE_COM_NBIOT_GET_PDP_CONTEXT_DYNAMIC_PARAMETERS_MSG0": "get %1 pdp context network %2 parameters (return string)",
    "MODULE_COM_NBIOT_SET_MODEM_DEBUG_MSG0": "%1 set AT command debug print %2",
    "MODULE_COM_NBIOT_SET_COMMAND_ECHO_MODE_MSG0": "%1 set echo command mode %2",
    "MODULE_COM_NBIOT_SET_GPRS_NETWORK_STATE_MSG0": "%1 set gprs network state %2",
    "MODULE_COM_NBIOT_SET_PDP_CONTEXT_APN_MSG0": "%1 set define PDP context apn %2",
    "MODULE_COM_NBIOT_MQTT_SERVER_CONFIGURE_MSG0": "%1 MQTT server configure %2 server %3 port %4 client id %5 username %6 password %7 keepalive(0 ~ 65535) %8",
    "MODULE_COM_NBIOT_MQTT_SERVER_CONNECT_MSG0": "%1 MQTT server connect clean session %2",
    "MODULE_COM_NBIOT_MQTT_SERVER_DISCONNECT_MSG0": "%1 MQTT server disconnect",
    "MODULE_COM_NBIOT_MQTT_POLLING_LOOP_MSG0": "%1 MQTT polling loop",
    "MODULE_COM_NBIOT_MQTT_SERVER_IS_CONNECT_MSG0": "%1 check MQTT server is connect (return int)",
    "MODULE_COM_NBIOT_MQTT_UNSUBSCRIBE_TOPIC_MSG0": "%1 MQTT unsubscribe topic %2",
    "MODULE_COM_NBIOT_SET_MQTT_PUBLISH_MSG0": "%1 MQTT publish topic %2 msg %3 QoS %4 (0 ~ 2)",
    "MODULE_COM_NBIOT_MQTT_SUBSCRIBE_CALLBACK_MSG0": "%1 MQTT subscribe %2 with topic QoS %3 (0 ~ 2)",
    "MODULE_COM_NBIOT_GET_TOPIC_MSG0": "get topic (return bytes)",
    "MODULE_COM_NBIOT_GET_MSG_MSG0": "get msg (return bytes)",
    "MODULE_COM_NBIOT_HTTP_REQUEST_MSG0": "HTTP request",
    "MODULE_COM_NBIOT_HTTP_REQUEST_MSG1": "method",
    "MODULE_COM_NBIOT_HTTP_REQUEST_MSG2": "URL",
    "MODULE_COM_NBIOT_HTTP_REQUEST_MSG3": "headers",
    "MODULE_COM_NBIOT_HTTP_REQUEST_MSG4": "data",
    "MODULE_COM_NBIOT_HTTP_TERMINATE_MSG0": "%1 HTTP server terminated",
    "MODULE_COM_NBIOT_HTTP_DATA_CONTENT_MSG0": "get %1 data content (return string)",
    "MODULE_COM_NBIOT_HTTP_RESPONSE_CODE_MSG0": "get %1 response status code (return int)",
    "MODULE_GRBL_INIT_MSG0": "Init GRBL %1 I2C address %2",
    "MODULE_GRBL_SEND_GCODE_MSG0": "%1 send the G-code command %2",
    "MODULE_GRBL_GET_CODE_TIME_MSG0": "get %1 the time of the G-code command %2 (return int)",
    "MODULE_GRBL_TURN_MSG0": "%1 turn motor with %2 x %3 y %4 z %5 speed %6",
    "MODULE_GRBL_SET_MODE_MSG0": "Set %1 mode %2",
    "MODULE_GRBL_SET_STEP_MSG0": "%1 init motor with %2 x step %3 y step %4 z step %5 acceleration %6",
    "MODULE_GRBL_FLUSH_MSG0": "%1 flush the buffer",
    "MODULE_GRBL_WAIT_IDLE_MSG0": "%1 wait until the motor is idle",
    "MODULE_GRBL_UNLOCK_ALARM_STATE_MSG0": "%1 unlock the alarm state",
    "MODULE_GRBL_GET_MESSAGE_MSG0": "get %1 message",
    "MODULE_GRBL_GET_STATUS_MSG0": "get %1 status",
    "MODULE_GRBL_GET_IDLE_STATE_MSG0": "get %1 idle state",
    "MODULE_GRBL_GET_LOCK_STATE_MSG0": "get %1 lock state",
    "MODULE_GRBL_LOCK_MSG0": "%1 lock motor",
    "MODULE_GRBL_UNLOCK_MSG0": "%1 unlock motor",
    "MODULE_LLM_INIT_MSG0": "Init LLM %1 with %2 UART %3 TX %4 RX %5",
    "MODULE_LLM_TICK_MSG0": "Update %1 in loop",
    "MODULE_LLM_CHECK_CONNECTION_MSG0": "%1 is connection normal (return True or False)",
    "MODULE_LLM_GET_RESPONSE_MSG_LIST_MSG0": "get %1 response msg list (return list)",
    "MODULE_LLM_CLEAR_RESPONSE_MSG_LIST_MSG0": "Clear %1 response msg list",
    "MODULE_LLM_SYS_PING_MSG0": "%1 send ping signal",
    "MODULE_LLM_SYS_RESET_MSG0": "Reset %1 wait reset finish %2",
    "MODULE_LLM_SYS_REBOOT_MSG0": "Reboot %1",
    "MODULE_LLM_SETUP_MSG0": "%1 setup LLM with %2 system prompt %3 version %4 %5 model %6 enoutput %7 enkws %8 max token length %9 request id %10",
    "MODULE_LLM_INFERENCE_MSG0": "%1 LLM inference with %2 work id %3 input data %4 request id %5",
    "MODULE_LLM_TTS_INFERENCE_MSG0": "%1 TTS inference with %2 work id %3 input data %4 timeout %5 request id %6",
    "MODULE_LLM_AUDIO_SETUP_MSG0": "%1 setup audio with %2 microphone input volume %3 speaker playback volume %4 request id %5",
    "MODULE_LLM_TTS_SETUP_MSG0": "%1 setup TTS with %2 model %3 input %4 enoutput %5 enkws %6 request id %7",
    "MODULE_LLM_KWS_SETUP_MSG0": "%1 setup KWS with %2 wake-up keyword %3 model %4 enoutput %5 enaudio %6 request id %7",
    "MODULE_LLM_ASR_SETUP_MSG0": "%1 setup ASR with %2 model %3 enoutput %4 enkws %5 wake-up no content timeout %6 ASR no content timeout %7 ASR max recognition timeout %8 request id %9",
    "MODULE_LLM_BEGIN_VOICE_ASSISTANT_MSG0": "%1 begin voice assistant preset with %2 wake-up keyword %3 system prompt %4 system language %5 (return True or False)",
    "MODULE_LLM_CAMERA_SETUP_MSG0": "%1 setup camera with %2 input %3 frame width %4 frame height %5 request id %6 enoutput %7",
    "MODULE_LLM_YOLO_SETUP_MSG0": "%1 setup YOLO with %2 model %3 enoutput %4 input %5 request id %6",
    "MODULE_LLM_KEYWORD_DETECTED_CALLBACK_MSG0": "When %1 detected keyword",
    "MODULE_LLM_ASR_DATA_INPUT_CALLBACK_MSG0": "When %1 ASR data input %2 data %3 finish %4 index %5",
    "MODULE_LLM_DATA_INPUT_CALLBACK_MSG0": "When %1 LLM data input %2 data %3 finish %4 index %5",
    "MODULE_LLM_GET_LATEST_LLM_WORK_ID_MSG0": "get %1 latest LLM work id (return string)",
    "MODULE_LLM_GET_LATEST_AUDIO_WORK_ID_MSG0": "get %1 latest audio work id (return string)",
    "MODULE_LLM_GET_LATEST_TTS_WORK_ID_MSG0": "get %1 latest TTS work id (return string)",
    "MODULE_LLM_GET_LATEST_KWS_WORK_ID_MSG0": "get %1 latest KWS work id (return string)",
    "MODULE_LLM_GET_LATEST_ASR_WORK_ID_MSG0": "get %1 latest ASR work id (return string)",
    "MODULE_LLM_GET_LATEST_ERROR_CODE_MSG0": "get %1 latest error code (return int)",
    "MODULE_LLM_GET_LATEST_CAMERA_WORK_ID_MSG0": "get %1 latest camera work id (return string)",
    "MODULE_LLM_GET_LATEST_YOLO_WORK_ID_MSG0": "get %1 latest YOLO work id (return string)",
    "MODULE_LLM_GET_MODEL_LIST_MSG0": "get %1 model list",
    "MODULE_LLM_REMOVE_MODE_MSG0": "Remove %1 model %2",
    "MODULE_COM_LORAWAN470_INIT_MSG0": "Init LoRaWAN470 %1 with %2 UART %3 TX %4 RX %5",
    "MODULE_COM_LORAWAN470_GET_ABP_CONFIG_MSG0": "get %1 ABP config (return tuple)",
    "MODULE_COM_LORAWAN470_GET_OTAA_CONFIG_MSG0": "get %1 OTAA config (return tuple)",
    "MODULE_COM_LORAWAN470_CHECK_JOIN_STATUS_MSG0": "check %1 join status",
    "MODULE_COM_LORAWAN470_CHECK_UPLINK_STATUS_MSG0": "check %1 uplink data status",
    "MODULE_COM_LORAWAN470_CHECK_DOWNLINK_DATA_MSG0": "check and receive %1 downlink data",
    "MODULE_COM_LORAWAN470_SET_JOIN_MODE_MSG0": "Set %1 join mode %2",
    "MODULE_COM_LORAWAN470_STOP_JOIN_NETWORK_MSG0": "Stop %1 join LoRaWAN network",
    "MODULE_COM_LORAWAN470_SET_UPLINK_PORT_MSG0": "Set %1 uplink app port %2 (1 ~ 233)",
    "MODULE_COM_LORAWAN470_CONFIG_MSG0": "Config %1 %2 frequency band mask %3 RX window param: %4 RX1 offset %5 RX2 datarate %6 RX2 FREQ(Hz) %7 class mode %8 uplink downlink %9",
    "MODULE_COM_LORAWAN470_START_JOIN_NETWORK_MSG0": "Start %1 join LoRaWAN network %2 %3 %4 period (seconds) (7 ~ 255) %5 maximum number of attempts (1 ~ 256) %6",
    "MODULE_COM_LORAWAN470_CONFIG_MODE_MSG0": "config",
    "MODULE_COM_LORAWAN470_SEND_DATA_PAYLOAD_MSG0": "send data payload",
    "MODULE_COM_LORAWAN868_INIT_MSG0": "Init LoRaWAN868 %1 with %2 UART %3 TX %4 RX %5",
    "MODULE_COM_LORAWAN868_SET_MODE_MSG0": "Set %1 mode to %2",
    "MODULE_COM_LORAWAN868_SET_PARAMETERS_MSG0": "Set %1 parameters with %2 freq (Hz) %3 power (dBm) %4 spreading factor (5~12) %5 bandwidth %6 CRC check %7 preamble (8~65535) %8 crc %9 inverted %10 save parameters to flash %11",
    "MODULE_COM_LORAWAN868_WAKE_UP_MSG0": "%1 wake up",
    "MODULE_COM_LORAWAN868_SLEEP_MSG0": "%1 sleep",
    "MODULE_COM_LORAWAN868_RESET_MSG0": "%1 reset",
    "MODULE_COM_LORAWAN868_RESTORE_FACTORY_SETTINGS_MSG0": "Restore %1 to factory settings",
    "MODULE_COM_LORAWAN868_SET_COPYRIGHT_MSG0": "Set %1 copyright information print to %2",
    "MODULE_COM_LORAWAN868_SET_AUTO_LOW_POWER_MSG0": "Set %1 automatic low-power mode to %2",
    "MODULE_COM_LORAWAN868_QUERY_CHIP_ID_MSG0": "%1 query the unique ID of the chip",
    "MODULE_COM_LORAWAN868_ENABLE_RX_MSG0": "Enable %1 to receive data with timeout %2",
    "MODULE_COM_LORAWAN868_SET_DEVEUI_MSG0": "Set %1 DevEui to %2",
    "MODULE_COM_LORAWAN868_SET_APPEUI_MSG0": "Set %1 AppEui to %2",
    "MODULE_COM_LORAWAN868_SET_APPKEY_MSG0": "Set %1 AppKey to %2",
    "MODULE_COM_LORAWAN868_SET_APPSKEY_MSG0": "Set %1 AppSKey to %2",
    "MODULE_COM_LORAWAN868_SET_NWKSKEY_MSG0": "Set %1 NwkSKey to %2",
    "MODULE_COM_LORAWAN868_SET_DEVADDR_MSG0": "Set %1 DevAddr to %2",
    "MODULE_COM_LORAWAN868_SET_OTAA_MODE_MSG0": "Set %1 OTAA mode to %2",
    "MODULE_COM_LORAWAN868_SET_ADR_MSG0": "%1 ADR to %2",
    "MODULE_COM_LORAWAN868_SET_CHANNEL_MASK_MSG0": "Set %1 working channel mask to %2",
    "MODULE_COM_LORAWAN868_JOIN_NETWORK_MSG0": "%1 join the network using OTAA",
    "MODULE_COM_LORAWAN868_SET_DUTY_CYCLE_MSG0": "Set %1 duty cycle to %2",
    "MODULE_COM_LORAWAN868_SET_CLASS_MODE_MSG0": "Set %1 communication mode to %2",
    "MODULE_COM_LORAWAN868_SET_ACK_MSG0": "Set %1 the ACK receipt function to %2",
    "MODULE_COM_LORAWAN868_SET_APP_PORT_MSG0": "Set %1 the application port %2 (0 ~ 255) for upstream data",
    "MODULE_COM_LORAWAN868_SET_RETRANSMISSION_COUNT_MSG0": "Set %1 the number of retransmissions if communication fails to %2 (3 ~ 8)",
    "MODULE_COM_LORAWAN868_SEND_HEX_MSG0": "%1 send hex data %2",
    "MODULE_COM_LORAWAN868_SEND_STRING_MSG0": "%1 send string data %2",
    "MODULE_COM_LORAWAN868_QUERY_LORAWAN_MODE_MSG0": "%1 query if the device is in LoRaWAN or normal LoRa mode",
    "MODULE_COM_LORAWAN868_SAVE_PARAMETERS_TO_FLASH_MSG0": "%1 save the current parameters to flash",
    "MODULE_COM_LORAWAN868_AT_CMD_MSG0": "%1 send an AT command %2 and data %3",
    "MODULE_COM_LORAWAN868_AT_QUERY_MSG0": "%1 query the current settings %2",
    "MODULE_COM_LORAWAN868_AT_RECEIVE_MSG0": "%1 receive a response",
    "MODULE_COM_LORAWAN868_FLUSH_MSG0": "%1 clear the UART buffer",
    "MODULE_COM_LORAWAN868_ANY_MSG0": "%1 check if there is any data in the UART buffer",
    "MODULE_COM_LORAWAN868_RECEIVE_DATA_MSG0": "%1 receive data",
    "MODULE_COM_LORAWAN868V2_INIT_MSG0": "Init LoRaWAN868 v2.0 %1 with %2 UART %3 TX %4 RX %5",
    "MODULE_COM_LORAWAN868V2_GET_ABP_CONFIG_MSG0": "get %1 ABP config (return tuple)",
    "MODULE_COM_LORAWAN868V2_GET_OTAA_CONFIG_MSG0": "get %1 OTAA config (return tuple)",
    "MODULE_COM_LORAWAN868V2_CHECK_JOIN_STATUS_MSG0": "check %1 join status",
    "MODULE_COM_LORAWAN868V2_CHECK_UPLINK_STATUS_MSG0": "check %1 uplink data status",
    "MODULE_COM_LORAWAN868V2_CHECK_DOWNLINK_DATA_MSG0": "check and receive %1 downlink data",
    "MODULE_COM_LORAWAN868V2_SET_JOIN_MODE_MSG0": "Set %1 join mode %2",
    "MODULE_COM_LORAWAN868V2_STOP_JOIN_NETWORK_MSG0": "Stop %1 join LoRaWAN network",
    "MODULE_COM_LORAWAN868V2_SET_UPLINK_PORT_MSG0": "Set %1 uplink app port %2 (1 ~ 233)",
    "MODULE_COM_LORAWAN868V2_CONFIG_MSG0": "Config %1 %2 frequency band mask %3 RX window param: %4 RX1 offset %5 RX2 datarate %6 RX2 FREQ(Hz) %7 class mode %8 uplink downlink %9",
    "MODULE_COM_LORAWAN868V2_START_JOIN_NETWORK_MSG0": "Start %1 join LoRaWAN network %2 %3 %4 period (seconds) (7 ~ 255) %5 maximum number of attempts (1 ~ 256) %6",
    "MODULE_COM_LORAWAN868V2_CONFIG_MODE_MSG0": "config",
    "MODULE_COM_LORAWAN868V2_SEND_DATA_PAYLOAD_MSG0": "send data payload",
    "MODULE_COM_LORAWAN915_INIT_MSG0": "Init LoRaWAN915 %1 with %2 UART %3 TX %4 RX %5",
    "MODULE_COM_LORAWAN915_GET_ABP_CONFIG_MSG0": "get %1 ABP config (return tuple)",
    "MODULE_COM_LORAWAN915_GET_OTAA_CONFIG_MSG0": "get %1 OTAA config (return tuple)",
    "MODULE_COM_LORAWAN915_CHECK_JOIN_STATUS_MSG0": "check %1 join status",
    "MODULE_COM_LORAWAN915_CHECK_UPLINK_STATUS_MSG0": "check %1 uplink data status",
    "MODULE_COM_LORAWAN915_CHECK_DOWNLINK_DATA_MSG0": "check and receive %1 downlink data",
    "MODULE_COM_LORAWAN915_SET_JOIN_MODE_MSG0": "Set %1 join mode %2",
    "MODULE_COM_LORAWAN915_STOP_JOIN_NETWORK_MSG0": "Stop %1 join LoRaWAN network",
    "MODULE_COM_LORAWAN915_SET_UPLINK_PORT_MSG0": "Set %1 uplink app port %2 (1 ~ 233)",
    "MODULE_COM_LORAWAN915_CONFIG_MSG0": "Config %1 %2 frequency band mask %3 RX window param: %4 RX1 offset %5 RX2 datarate %6 RX2 FREQ(Hz) %7 class mode %8 uplink downlink %9",
    "MODULE_COM_LORAWAN915_START_JOIN_NETWORK_MSG0": "Start %1 join LoRaWAN network %2 %3 %4 period (seconds) (7 ~ 255) %5 maximum number of attempts (1 ~ 256) %6",
    "MODULE_COM_LORAWAN915_CONFIG_MODE_MSG0": "config",
    "MODULE_COM_LORAWAN915_SEND_DATA_PAYLOAD_MSG0": "send data payload",
    "MODULE_GNSS_INIT_MSG0": "Init GNSS %1 with %2 UART %3 TX %4 RX %5 BMI270 I2C address %6",
    "MODULE_GNSS_GET_GYROSCOPE_MSG0": "get %1 gyroscope value (return tuple)",
    "MODULE_GNSS_GET_ACCELEROMETER_MSG0": "get %1 accelerometer value (m/s^2, return tuple)",
    "MODULE_GNSS_GET_MAGNETOMETER_MSG0": "get %1 magnetometer value (uT, return tuple)",
    "MODULE_GNSS_GET_COMPASS_MSG0": "get %1 compass heading angle (0 to 360 degree, return float)",
    "MODULE_GNSS_GET_ATTITUDE_MSG0": "get %1 attitude (return tuple, [yaw, pitch, roll])",
    "MODULE_GNSS_GET_TEMPERATURE_MSG0": "get %1 temperature (°C, return float)",
    "MODULE_GNSS_GET_PRESSURE_MSG0": "get %1 pressure (hPa, return float)",
    "MODULE_GNSS_GET_TIME_ZONE_MSG0": "get %1 time zone (return int)",
    "MODULE_GNSS_GET_SATELLITE_NUM_MSG0": "get %1 satellite numbers (return string)",
    "MODULE_GNSS_GET_ALTITUDE_MSG0": "get %1 altitude (meter, return string)",
    "MODULE_GNSS_GET_TIME_MSG0": "get %1 time (return string, format is hh:mm:ss)",
    "MODULE_GNSS_GET_DATE_MSG0": "get %1 date (return string, format is dd/mm/yy)",
    "MODULE_GNSS_GET_LATITUDE_MSG0": "get %1 latitude (return string, format is ddmm.mmmmmN/S)",
    "MODULE_GNSS_GET_LONGITUDE_MSG0": "get %1 longitude (return string, format is ddmm.mmmmmE/W)",
    "MODULE_GNSS_GET_LATITUDE_DECIMAL_MSG0": "get %1 latitude decimal (return float, format is dd.dddd)",
    "MODULE_GNSS_GET_LONGITUDE_DECIMAL_MSG0": "get %1 longitude decimal (return float, format is dd.dddd)",
    "MODULE_GNSS_GET_SPEED_MSG0": "get %1 speed %2 (return string)",
    "MODULE_GNSS_GET_COURSE_MSG0": "get %1 course (return string, 0 to 360 degree)",
    "MODULE_GNSS_IS_LOCATE_VALID_MSG0": "get %1 locate status (return True or False)",
    "MODULE_GNSS_SET_TIME_ZONE_MSG0": "Set %1 time zone to %2",
    "MODULE_GNSS_SET_ACCEL_GYRO_ODR_MSG0": "Set %1 accelerometer ODR to %2 and gyroscope ODR to %3",
    "MODULE_GNSS_SET_ACCEL_RANGE_MSG0": "Set %1 accelerometer scale to %2",
    "MODULE_GNSS_SET_GYRO_RANGE_MSG0": "Set %1 gyroscope scale to %2",
    "MODULE_GNSS_SET_MAGNET_ODR_MSG0": "Set %1 magnetometer ODR to %2",
    "MODULE_GNSS_SET_GYRO_OFFSETS_MSG0": "Set %1 gyroscope offset calibration x %2 y %3 z %4",
    "MODULE_SERVO2_INIT_MSG0": "Init Servo2 %1 with %2 I2C address %3 frequency (Hz) %4 min pulse (us) %5 max pulse (us) %6 max degrees %7",
    "MODULE_SERVO2_SET_DEGREES_MSG0": "Set %1 channel %2 degrees %3",
    "MODULE_SERVO2_SET_RADIANS_MSG0": "Set %1 channel %2 radians %3",
    "MODULE_SERVO2_SET_PULSE_WIDTH_MSG0": "Set %1 channel %2 pulse width %3 microseconds",
    "MODULE_SERVO2_SET_DUTY_MSG0": "Set %1 channel %2 duty cycle %3 (0~100)",
    "MODULE_SERVO2_RELEASE_MSG0": "Release %1 channel %2",
    "STEPMOTOR_INIT_MSG0": "Init StepMotor %1 I2C address %2",
    "STEPMOTOR_SET_SPEED_MSG0": "Set %1 speed to %2",
    "STEPMOTOR_TURN_MSG0": "Set %1 turn x %2 y %3 z %4",
    "STEPMOTOR_SET_MODE_MSG0": "Set %1 mode to %2",
    "STEPMOTOR_READ_IDLE_MSG0": "get %1 rotation status",
    "MODULE_GPS_INIT_MSG0": "Init GPS %1 with %2 UART %3 TX %4 RX %5",
    "MODULE_GPS_SET_TIME_ZONE_MSG0": "Set %1 time zone to %2",
    "MODULE_GPS_GET_TIME_ZONE_MSG0": "get %1 time zone (return int)",
    "MODULE_GPS_GET_SATELLITE_NUM_MSG0": "get %1 satellite numbers (return string)",
    "MODULE_GPS_GET_ALTITUDE_MSG0": "get %1 altitude (meter, return string)",
    "MODULE_GPS_GET_TIME_MSG0": "get %1 time (return string, format is hh:mm:ss)",
    "MODULE_GPS_GET_DATE_MSG0": "get %1 date (return string, format is dd/mm/yy)",
    "MODULE_GPS_GET_LATITUDE_MSG0": "get %1 latitude (return string, format is ddmm.mmmmmN/S)",
    "MODULE_GPS_GET_LONGITUDE_MSG0": "get %1 longitude (return string, format is ddmm.mmmmmE/W)",
    "MODULE_GPS_GET_LATITUDE_DECIMAL_MSG0": "get %1 latitude decimal (return float, format is dd.dddd)",
    "MODULE_GPS_GET_LONGITUDE_DECIMAL_MSG0": "get %1 longitude decimal (return float, format is dd.dddd)",
    "MODULE_GPS_GET_SPEED_MSG0": "get %1 speed %2 (return string)",
    "MODULE_GPS_GET_COURSE_MSG0": "get %1 course (return string, 0 to 360 degree)",
    "MODULE_GPS_IS_LOCATE_VALID_MSG0": "get %1 locate status (return True or False)",
    "MODULE_GPSV2_INIT_MSG0": "Init GPS v2.0 %1 with %2 UART %3 TX %4 RX %5 PPS %6",
    "MODULE_GPSV2_DEINIT_MSG0": "%1 deinit",
    "MODULE_GPSV2_GET_ANTENNA_STATE_MSG0": "get %1 antenna state (return string)",
    "MODULE_GPSV2_GET_GPS_TIME_MSG0": "get %1 local time (return list [hour, min, second])",
    "MODULE_GPSV2_GET_GPS_DATE_MSG0": "get %1 date (return list [yyyy, mm, dd])",
    "MODULE_GPSV2_GET_GPS_DATE_TIME_MSG0": "get %1 date and local time (return list [yyyy, mm, dd, hour, min, second])",
    "MODULE_GPSV2_GET_TIMESTAMP_MSG0": "get %1 timestamp (return int)",
    "MODULE_GPSV2_GET_LATITUDE_MSG0": "get %1 latitude (return string)",
    "MODULE_GPSV2_GET_LONGITUDE_MSG0": "get %1 longitude (return string)",
    "MODULE_GPSV2_GET_ALTITUDE_MSG0": "get %1 altitude (return string)",
    "MODULE_GPSV2_GET_SATELLITE_NUM_MSG0": "get %1 satellite number (return int)",
    "MODULE_GPSV2_GET_POS_QUALITY_MSG0": "get %1 position quality (return int)",
    "MODULE_GPSV2_GET_CORSE_OVER_GROUND_MSG0": "get %1 course over ground degree (return string)",
    "MODULE_GPSV2_GET_SPEED_OVER_GROUND_MSG0": "get %1 speed over ground knot (return string)",
    "MODULE_GPSV2_GET_WORK_MODE_MSG0": "get %1 work mode (return int)",
    "MODULE_GPSV2_SET_WORK_MODE_MSG0": "Set %1 work mode to %2",
    "MODULE_GPSV2_GET_TIME_ZONE_MSG0": "get %1 current time zone offset (return int)",
    "MODULE_GPSV2_SET_TIME_ZONE_MSG0": "Set %1 time zone offset to %2",
    "MODULE_COM_GPS_INIT_MSG0": "Init GPS %1 with %2 UART %3 TX %4 RX %5",
    "MODULE_COM_GPS_SET_TIME_ZONE_MSG0": "Set %1 time zone to %2",
    "MODULE_COM_GPS_GET_TIME_ZONE_MSG0": "get %1 time zone (return int)",
    "MODULE_COM_GPS_GET_SATELLITE_NUM_MSG0": "get %1 satellite numbers (return string)",
    "MODULE_COM_GPS_GET_ALTITUDE_MSG0": "get %1 altitude (meter, return string)",
    "MODULE_COM_GPS_GET_TIME_MSG0": "get %1 time (return string, format is hh:mm:ss)",
    "MODULE_COM_GPS_GET_DATE_MSG0": "get %1 date (return string, format is dd/mm/yy)",
    "MODULE_COM_GPS_GET_LATITUDE_MSG0": "get %1 latitude (return string, format is ddmm.mmmmmN/S)",
    "MODULE_COM_GPS_GET_LONGITUDE_MSG0": "get %1 longitude (return string, format is ddmm.mmmmmE/W)",
    "MODULE_COM_GPS_GET_LATITUDE_DECIMAL_MSG0": "get %1 latitude decimal (return float, format is dd.dddd)",
    "MODULE_COM_GPS_GET_LONGITUDE_DECIMAL_MSG0": "get %1 longitude decimal (return float, format is dd.dddd)",
    "MODULE_COM_GPS_GET_SPEED_MSG0": "get %1 speed %2 (return string)",
    "MODULE_COM_GPS_GET_COURSE_MSG0": "get %1 course (return string, 0 to 360 degree)",
    "MODULE_COM_GPS_IS_LOCATE_VALID_MSG0": "get %1 locate status (return True or False)",
    "MODULE_GOPLUS2_INIT_MSG0": "Init GoPlus2 %1 I2C address %2",
    "MODULE_GOPLUS2_GET_DIGITAL_INPUT_MSG0": "get %1 port B %2 digital input value",
    "MODULE_GOPLUS2_GET_ANALOG_INPUT_MSG0": "get %1 port B %2 analog input value",
    "MODULE_GOPLUS2_SET_SERVO_ANGLE_MSG0": "Set %1 servo %2 rotate to angle %3 (0 ~ 180)",
    "MODULE_GOPLUS2_SET_SERVO_PULSE_WIDTH_MSG0": "Set %1 servo %2 pulse width to %3 (500 ~ 2500)",
    "MODULE_GOPLUS2_SET_MOTOR_SPEED_MSG0": "Set %1 motor %2 speed to %3 (-127 ~ 127)",
    "MODULE_GOPLUS2_SET_DIGITAL_OUTPUT_MSG0": "Set %1 port B %2 digital output to %3",
    "MODULE_PM25_INIT_MSG0": "Init PM2.5 %1 with UART %2",
    "MODULE_PM25_GET_MODULE_POWER_MSG0": "get %1 power state (return True or False)",
    "MODULE_PM25_GET_PM_DATA_MSG0": "get %1 %2 data",
    "MODULE_PM25_SET_MODULE_POWER_MSG0": "Set %1 power state to %2",
    "MODULE_PM25_SET_MODULE_MODE_MSG0": "Set %1 work mode to %2",
    "MODULE_PM25_REFRESH_DATA_MSG0": "Refresh %1 data",
    "MODULE_PM25_GET_TEMPERATURE_MSG0": "get %1 environmental temperature (°C, return float)",
    "MODULE_PM25_GET_HUMIDITY_MSG0": "get %1 environmental humidity (%, return float)",
    "MODULE_PM25_REQUEST_AIR_DATA_MSG0": "Request %1 air quality data",
    "MODULE_ODRIVE_INIT_MSG0": "Init ODrive %1 with %2 UART %3 TX %4 RX %5",
    "MODULE_ODRIVE_SET_POSITION_MSG0": "%1 set the target position with %2 position (counts or radians) %3 feedforward velocity (counts/s or radians/s) %4 feedforward current (A) %5",
    "MODULE_ODRIVE_SET_VELOCITY_MSG0": "%1 set the velocity with %2 velocity (counts/s or radians/s) %3 current (A) %4",
    "MODULE_ODRIVE_SET_CURRENT_MSG0": "%1 set the target current to %2 (A)",
    "MODULE_ODRIVE_SET_GAIN_MSG0": "%1 set gain with %2 pos gain %3 vel gain %4 vel integrator gain %5",
    "MODULE_ODRIVE_SET_CONTROL_MODE_MSG0": "%1 set the control mode to %2",
    "MODULE_ODRIVE_SET_CONTROL_INPUT_POS_MSG0": "%1 set the control input position to %2 (counts or radians)",
    "MODULE_ODRIVE_TRAPEZOIDAL_MOVE_MSG0": "%1 trapezoidal move to position %2 (counts or radians)",
    "MODULE_ODRIVE_RUN_STATE_MSG0": "%1 run axis to requested state %2 with timeout %3 (milliseconds)",
    "MODULE_ODRIVE_GET_VELOCITY_MSG0": "%1 get the estimated velocity of the motor (counts/s or radians/s, return float)",
    "MODULE_ODRIVE_GET_VBUS_VOLTAGE_MSG0": "%1 get the measured bus voltage (V, return float)",
    "MODULE_ODRIVE_GET_PHASE_CURRENT_MSG0": "%1 get the measured phase current of the motor (A, return float)",
    "MODULE_ODRIVE_GET_BUS_CURRENT_MSG0": "%1 get the bus current drawn by the motor (A, return float)",
    "MODULE_ODRIVE_GET_ENCODER_SHADOW_COUNT_MSG0": "%1 get the encoder's shadow count (return int)",
    "MODULE_ODRIVE_GET_ENCODER_POS_ESTIMATE_MSG0": "%1 get the estimated position from the encoder (counts or radians, return float)",
    "MODULE_ODRIVE_GET_MOTOR_TEMP_MSG0": "%1 get the temperature of the motor thermistor (°C, return float)",
    "MODULE_ODRIVE_ERASE_CONFIG_MSG0": "%1 erase current config settings",
    "MODULE_ODRIVE_SAVE_CONFIG_MSG0": "%1 save current config",
    "MODULE_ODRIVE_REBOOT_MSG0": "%1 reboot device",
    "MODULE_ODRIVE_SET_DEFAULT_CONFIG_MSG0": "%1 set default config params",
    "MODULE_ODRIVE_CHECK_ERROR_MSG0": "%1 check for any errors in the system components",
    "MODULE_ODRIVE_READ_FLUSH_MSG0": "%1 flush the UART read buffer",
    "MODULE_ODRIVE_READ_STRING_MSG0": "%1 read line (return string)",
    "MODULE_ODRIVE_READ_FLOAT_MSG0": "%1 read a float (return float)",
    "MODULE_ODRIVE_READ_INT_MSG0": "%1 read an int (return int)",
    "MODULE_ODRIVE_WRITE_TO_DEVICE_MSG0": "%1 write a command %2",
    "MODULE_ODRIVE_WRITE_CONFIG_MSG0": "%1 write config param with %2 key %3 value %4",
    "MODULE_ODRIVE_READ_CONFIG_INT_MSG0": "%1 read int config with key %2 (return int)",
    "MODULE_ODRIVE_READ_CONFIG_FLOAT_MSG0": "%1 read float config with key %2 (return float)",
    "MODULE_DMX_INIT_MSG0": "Init DMX %1 with %2 UART %3 mode %4",
    "MODULE_DMX_REINIT_MSG0": "Reinit %1 with %2 mode",
    "MODULE_DMX_DEINIT_MSG0": "%1 deinit",
    "MODULE_DMX_WRITE_DATA_MSG0": "%1 send %2 (0 ~ 255) to channel %3 (1 ~ 512)",
    "MODULE_DMX_READ_DATA_MSG0": "Read %1 data from channel %2 (1 ~ 512) (return int)",
    "MODULE_DMX_CLEAR_BUFFER_MSG0": "Reset %1 DMX buffer",
    "MODULE_DMX_RECEIVE_DATA_EVENT_MSG0": "When %1 channel %2 (1 ~ 512) receive data %3",
    "MODULE_DMX_START_RECEIVE_MSG0": "%1 start receive data",
    "MODULE_DMX_STOP_RECEIVE_MSG0": "%1 stop receive data",
    "MODULE_COM_ZIGBEE_INIT_MSG0": "Init Zigbee %1 with %2 UART %3 TX %4 RX %5 verbose %6",
    "MODULE_COM_ZIGBEE_SET_MODULE_PARAM_MSG0": "%1 set module parameters %2 device type %3 PAN ID %4 channel (11 ~ 26) %5 transfer mode %6 custom address %7",
    "MODULE_COM_ZIGBEE_SET_MODULE_PARAM_MSG1": "ANT type",
    "MODULE_COM_ZIGBEE_SET_MODULE_PARAM_MSG2": "encryption enable",
    "MODULE_COM_ZIGBEE_SET_MODULE_PARAM_MSG3": "encryption key",
    "MODULE_COM_ZIGBEE_SET_MODULE_PARAM_MSG4": "Subnode preset parameters",
    "MODULE_COM_ZIGBEE_SET_NODE_PARAM_MSG0": "device type",
    "MODULE_COM_ZIGBEE_SET_NODE_PARAM_MSG1": "ANT type",
    "MODULE_COM_ZIGBEE_SET_NODE_PARAM_MSG2": "transfer mode",
    "MODULE_COM_ZIGBEE_SET_NODE_PARAM_MSG3": "custom address",
    "MODULE_COM_ZIGBEE_SET_DEVICE_TYPE_MSG0": "%1 set device type %2",
    "MODULE_COM_ZIGBEE_SET_CHANNEL_MSG0": "%1 set channel %2",
    "MODULE_COM_ZIGBEE_SET_TRANSFER_MODE_MSG0": "%1 set transfer mode %2",
    "MODULE_COM_ZIGBEE_SET_CUSTOM_ADDRESS_MSG0": "%1 set custom address %2",
    "MODULE_COM_ZIGBEE_SET_PAN_ID_MSG0": "%1 set PAN ID %2",
    "MODULE_COM_ZIGBEE_SET_ANT_TYPE_MSG0": "%1 set ANT type %2",
    "MODULE_COM_ZIGBEE_GET_SHORT_ADDRESS_MSG0": "get %1 short address (return int)",
    "MODULE_COM_ZIGBEE_GET_CUSTOM_ADDRESS_MSG0": "get %1 custom address (return int)",
    "MODULE_COM_ZIGBEE_ISCONNECTED_MSG0": "%1 is connected (return True or False)",
    "MODULE_COM_ZIGBEE_START_RECEIVE_MSG0": "%1 start receive data",
    "MODULE_COM_ZIGBEE_RECEIVE_DATA_EVENT_MSG0": "when %1 receive data (bytes) %2 data %3 dest address %4 src address %5",
    "MODULE_COM_ZIGBEE_RECEIVE_DATA_STR_EVENT_MSG0": "when %1 receive data (string) %2 data %3 dest address %4 src address %5",
    "MODULE_COM_ZIGBEE_STOP_RECEIVE_MSG0": "%1 stop receive data",
    "MODULE_COM_ZIGBEE_SEND_DATA_MSG0": "%1 send (string or bytes) %2 custom address %3",
    "MODULE_COM_ZIGBEE_BROADCAST_MSG0": "%1 broadcast (string or bytes) %2",
    "MODULE_PWRCAN_INIT_MSG0": "Init PwrCAN %1 %2 with",
    "MODULE_PWRCAN_INIT_MSG1": "ID",
    "MODULE_PWRCAN_INIT_MSG2": "mode",
    "MODULE_PWRCAN_INIT_MSG3": "TX",
    "MODULE_PWRCAN_INIT_MSG4": "RX",
    "MODULE_PWRCAN_INIT_MSG5": "baudrate",
    "MODULE_PWRCAN_INIT_MSG6": "prescaler",
    "MODULE_PWRCAN_INIT_MSG7": "sjw",
    "MODULE_PWRCAN_INIT_MSG8": "bs1",
    "MODULE_PWRCAN_INIT_MSG9": "bs2",
    "MODULE_PWRCAN_INIT_MSG10": "triple sampling",
    "MODULE_PWRCAN_INIT_MSG11": "UART",
    "MODULE_PWRCAN_INIT_MSG12": "baudrate",
    "MODULE_PWRCAN_INIT_MSG13": "bits",
    "MODULE_PWRCAN_INIT_MSG14": "parity",
    "MODULE_PWRCAN_INIT_MSG15": "stop",
    "MODULE_PWRCAN_INIT_MSG16": "TX",
    "MODULE_PWRCAN_INIT_MSG17": "RX",
    "MODULE_PWRCAN_INIT_MSG18": "RTS",
    "MODULE_PWRCAN_INIT_MSG19": "CTS",
    "MODULE_PWRCAN_INIT_MSG20": "TX buffer",
    "MODULE_PWRCAN_INIT_MSG21": "RX buffer",
    "MODULE_PWRCAN_INIT_MSG22": "timeout",
    "MODULE_PWRCAN_INIT_MSG23": "timeout char",
    "MODULE_PWRCAN_INIT_MSG24": "invert",
    "MODULE_PWRCAN_INIT_MSG25": "flow",
    "MODULE_PWRCAN_SETUP_MSG0": "%1 setup %2 baudrate %3 bits %4 parity %5 stop %6 TX %7 RX %8",
    "MODULE_PWRCAN_DEINIT_MSG0": "%1 deinit",
    "MODULE_PWRCAN_RESTART_MSG0": "%1 restart",
    "MODULE_PWRCAN_GET_STATE_MSG0": "%1 get state (return int)",
    "MODULE_PWRCAN_GET_INFO_MSG0": "%1 get error status information",
    "MODULE_PWRCAN_ANY_MSG0": "%1 count of available (return True or False)",
    "MODULE_PWRCAN_RECV_MESSAGE_MSG0": "%1 read message timeout %2 (return tuple)",
    "MODULE_PWRCAN_RECV_MESSAGE_INFO_MSG0": "%1 read message into %2 timeout %3",
    "MODULE_PWRCAN_SEND_DATA_MSG0": "%1 send %2 id %3 timeout %4 rtr %5 extframe %6",
    "MODULE_PWRCAN_RS485_READ_ALL_BYTES_MSG0": "%1 read all bytes (return bytes)",
    "MODULE_PWRCAN_RS485_READ_BYTES_MSG0": "%1 read %2 bytes (return bytes)",
    "MODULE_PWRCAN_RS485_READ_LINE_MSG0": "%1 read line (return bytes)",
    "MODULE_PWRCAN_RS485_ANY_MSG0": "%1 number of bytes available",
    "MODULE_PWRCAN_RS485_WRITE_MSG0": "%1 write %2",
    "MODULE_PWRCAN_RS485_WRITE_LINE_MSG0": "%1 write a line %2",
    "MODULE_PWRCAN_RS485_WRITE_LIST_BYTES_MSG0": "%1 write list of bytes %2",
    "MODULE_PWRCAN_RS485_READ_INTO_BUF_MSG0": "%1 read into buf %2",
    "MODULE_PWRCAN_RS485_SEND_BREAK_MSG0": "%1 send break single",
    "MODULE_PWRCAN_RS485_FLUSH_MSG0": "%1 flush",
    "MODULE_PWRCAN_RS485_TXDONE_MSG0": "%1 is transfer done (return True or False)",
    "MODULE_USB_INIT_MSG0": "Init USB %1 with %2 CS pin %3 interrupt pin %4",
    "MODULE_USB_POLL_DATA_MSG0": "%1 poll data in loop ",
    "MODULE_USB_IS_LEFT_BTN_PRESSED_MSG0": "%1 mouse left button is pressed (return True or False)",
    "MODULE_USB_IS_RIGHT_BTN_PRESSED_MSG0": "%1 mouse right button is pressed (return True or False)",
    "MODULE_USB_IS_MIDDLE_BTN_PRESSED_MSG0": "%1 mouse middle button is pressed (return True or False)",
    "MODULE_USB_IS_FORWARD_BTN_PRESSED_MSG0": "%1 mouse forward button is pressed (return True or False)",
    "MODULE_USB_IS_BACK_BTN_PRESSED_MSG0": "%1 mouse back button is pressed (return True or False)",
    "MODULE_USB_READ_MOUSE_MOVE_MSG0": "%1 read mouse cursor movement (return tuple)",
    "MODULE_USB_READ_WHEEL_MOVE_MSG0": "%1 read mouse wheel movement (return -127~127)",
    "MODULE_USB_READ_KB_INPUT_MSG0": "%1 read keyboard input %2 convert HID KeyCode to string %3",
    "MODULE_USB_READ_KB_MODIFIER_MSG0": "%1 read keyboard modifier (return int)",
    "MODULE_USB_READ_GPIN_MSG0": "%1 read input pin %2 value (return 0 or 1)",
    "MODULE_USB_WRITE_GPOUT_MSG0": "%1 set output pin %2 value %3 (0 or 1)",
    "MODULE_BALA2_INIT_MSG0": "Init Bala2 %1 with timer %2 (0~3)",
    "MODULE_BALA2_SET_MOTOR_SPEED_MSG0": "Set %1 left motor speed to %2 (-1023~1023) and right motor speed to %3 (-1023~1023)",
    "MODULE_BALA2_SET_ENCODER_VALUE_MSG0": "Set %1 left encoder value to %2 and right encoder value to %3",
    "MODULE_BALA2_GET_ENCODER_VALUE_MSG0": "get %1 encoder value (return tuple)",
    "MODULE_BALA2_SET_SERVO_ANGLE_MSG0": "Set %1 servo pos to %2 (1~4) and angle to %3 (0~180)",
    "MODULE_BALA2_START_MSG0": "%1 start",
    "MODULE_BALA2_STOP_MSG0": "%1 stop",
    "MODULE_BALA2_GET_ANGLE_MSG0": "get %1 tilt angle",
    "MODULE_BALA2_SET_ANGLE_PID_MSG0": "Set %1 angle PID parameters with %2 proportional gain %3 integral gain %4 derivative gain %5",
    "MODULE_BALA2_GET_ANGLE_PID_MSG0": "get %1 angle PID parameters (return tuple)",
    "MODULE_BALA2_SET_ANGLE_PID_TARGET_MSG0": "Set %1 target angle for angle PID control to %2",
    "MODULE_BALA2_GET_ANGLE_PID_TARGET_MSG0": "get %1 target angle for angle PID control (return float)",
    "MODULE_BALA2_SET_SPEED_PID_MSG0": "Set %1 speed PID parameters with %2 proportional gain %3 integral gain %4 derivative gain %5",
    "MODULE_BALA2_GET_SPEED_PID_MSG0": "get %1 speed PID parameters (return tuple)",
    "MODULE_BALA2_SET_SPEED_PID_TARGET_MSG0": "Set %1 target speed for speed PID control to %2",
    "MODULE_BALA2_GET_SPEED_PID_TARGET_MSG0": "get %1 target speed for speed PID control (return float)",
    "MODULE_BALA2_SET_TURN_SPEED_MSG0": "Set %1 turning speed to %2 (-1023~1023)",
    "MODULE_BALA2_CALIBRATE_MSG0": "%1 sensor calibrate",
    "MODULE_COM_LTE_INIT_MSG0": "Init LTE %1 with %2 UART %3 TX %4 RX %5 verbose %6",
    "MODULE_COM_LTE_CHAT_MSG0": "%1 chat to modem with script %2",
    "MODULE_COM_LTE_CHAT_PDP_MSG0": "%1 chat to modem with PDP type %2 APN %3",
    "MODULE_COM_LTE_ACTIVE_MSG0": "%1 active %2",
    "MODULE_COM_LTE_DEINIT_MSG0": "%1 deinit",
    "MODULE_COM_LTE_ISCONNECTED_MSG0": "%1 is connected",
    "MODULE_COM_LTE_GET_LOCALIP_MSG0": "get %1 local IP",
    "MODULE_COM_LTE_GET_SUBNET_MSG0": "get %1 subnet",
    "MODULE_COM_LTE_GET_GATEWAY_MSG0": "get %1 gateway",
    "MODULE_COM_LTE_GET_DNS_MSG0": "get %1 DNS",
    "MODULE_COM_LTE_CONNECT_MSG0": "%1 connect to ppp with authmode %2 username %3 password %4",
    "MODULE_FANV11_INIT_MSG0": "Init Fan v1.1 %1 I2C address %2 (0x08 ~ 0x77)",
    "MODULE_FANV11_GET_I2C_ADDRESS_MSG0": "get %1 current I2C address (return int)",
    "MODULE_FANV11_SET_ADDRESS_MSG0": "Set %1 I2C address %2 (0x08 ~ 0x77)",
    "MODULE_FANV11_GET_FIRMWARE_VERSION_MSG0": "get %1 firmware version (return int)",
    "MODULE_FANV11_GET_FAN_STATE_MSG0": "get %1 current fan state (return True or False)",
    "MODULE_FANV11_SET_FAN_STATE_MSG0": "Set %1 fan state to %2",
    "MODULE_FANV11_GET_PWM_FREQUENCY_MSG0": "get %1 fan PWM frequency (return int)",
    "MODULE_FANV11_SET_PWM_FREQUENCY_MSG0": "Set %1 fan PWM frequency to %2",
    "MODULE_FANV11_GET_PWM_DUTY_CYCLE_MSG0": "get %1 current fan PWM duty cycle (return int)",
    "MODULE_FANV11_SET_PWM_DUTY_CYCLE_MSG0": "Set %1 fan PWM duty cycle to %2",
    "MODULE_FANV11_GET_FAN_RPM_MSG0": "get %1 current fan rpm (return int)",
    "MODULE_FANV11_GET_SINGLE_FREQUENCY_MSG0": "get %1 current fan single frequency (return int)",
    "MODULE_FANV11_WRITE_FLASH_MSG0": "Save %1 current setting to flash",
    "MODULE_COMMU_INIT_MSG0": "Init COMMU %1 %2 with",
    "MODULE_COMMU_INIT_MSG1": "mode",
    "MODULE_COMMU_INIT_MSG2": "baudrate",
    "MODULE_COMMU_INIT_MSG3": "UART",
    "MODULE_COMMU_INIT_MSG4": "baudrate",
    "MODULE_COMMU_INIT_MSG5": "bits",
    "MODULE_COMMU_INIT_MSG6": "parity",
    "MODULE_COMMU_INIT_MSG7": "stop",
    "MODULE_COMMU_INIT_MSG8": "TX",
    "MODULE_COMMU_INIT_MSG9": "RX",
    "MODULE_COMMU_INIT_MSG10": "RTS",
    "MODULE_COMMU_INIT_MSG11": "CTS",
    "MODULE_COMMU_INIT_MSG12": "TX buffer",
    "MODULE_COMMU_INIT_MSG13": "RX buffer",
    "MODULE_COMMU_INIT_MSG14": "timeout",
    "MODULE_COMMU_INIT_MSG15": "timeout char",
    "MODULE_COMMU_INIT_MSG16": "invert",
    "MODULE_COMMU_INIT_MSG17": "flow",
    "MODULE_COMMU_INIT_MSG18": "I2C ID",
    "MODULE_COMMU_INIT_MSG19": "SCL",
    "MODULE_COMMU_INIT_MSG20": "SDA",
    "MODULE_COMMU_INIT_MSG21": "freq",
    "MODULE_COMMU_DEINIT_MSG0": "%1 deinit",
    "MODULE_COMMU_GET_INFO_MSG0": "%1 get error status information",
    "MODULE_COMMU_ANY_MSG0": "%1 count of available (return True or False)",
    "MODULE_COMMU_RECV_MESSAGE_MSG0": "%1 read message timeout %2",
    "MODULE_COMMU_RECV_MESSAGE_INTO_MSG0": "%1 read message into %2 timeout %3",
    "MODULE_COMMU_SEND_DATA_MSG0": "%1 send %2 id %3 extframe %4",
    "MODULE_COMMU_RS485_SETUP_MSG0": "%1 setup %2 baudrate %3 bits %4 parity %5 stop %6 TX %7 RX %8",
    "MODULE_COMMU_RS485_READ_ALL_BYTES_MSG0": "%1 read all bytes (return bytes)",
    "MODULE_COMMU_RS485_READ_BYTES_MSG0": "%1 read %2 bytes (return bytes)",
    "MODULE_COMMU_RS485_READ_LINE_MSG0": "%1 read line (return bytes)",
    "MODULE_COMMU_RS485_ANY_MSG0": "%1 number of bytes available",
    "MODULE_COMMU_RS485_WRITE_MSG0": "%1 write %2",
    "MODULE_COMMU_RS485_WRITE_LINE_MSG0": "%1 write a line %2",
    "MODULE_COMMU_RS485_WRITE_LIST_BYTES_MSG0": "%1 write list of bytes %2",
    "MODULE_COMMU_RS485_READ_INTO_BUF_MSG0": "%1 read into buf %2",
    "MODULE_COMMU_RS485_SEND_BREAK_MSG0": "%1 send break single",
    "MODULE_COMMU_RS485_FLUSH_MSG0": "%1 flush",
    "MODULE_COMMU_RS485_TXDONE_MSG0": "%1 is transfer done (return True or False)",
    "MODULE_COMMU_I2C_SCAN_MSG0": "%1 scan device (return 7-bit address list)",
    "MODULE_COMMU_I2C_READFROM_MSG0": "%1 read from addr %2 nbytes %3 STOP %4 (return bytes)",
    "MODULE_COMMU_I2C_READFROM_INTO_MSG0": "%1 read from addr %2 into buf %3 STOP %4",
    "MODULE_COMMU_I2C_READFROM_MEM_MSG0": "%1 read from addr %2 memory addr %3 nbytes %4 (return bytes)",
    "MODULE_COMMU_I2C_READFROM_MEM_INTO_MSG0": "%1 read from addr %2 memory addr %3 into buf %4",
    "MODULE_COMMU_I2C_WRITETO_MSG0": "%1 write buf %2 to addr %3 stop %4",
    "MODULE_COMMU_I2C_WRITETO_RETURN_MSG0": "%1 write buf %2 to addr %3 STOP %4 (return nbytes written)",
    "MODULE_COMMU_I2C_WRITETO_MEM_MSG0": "%1 write buf %2 to addr %3 memory addr %4",
    "ATOM_SOCKET_INIT_MSG0": "Init ATOM Socket",
    "ATOM_SOCKET_INIT_MSG1": "TX pin",
    "ATOM_SOCKET_INIT_MSG2": "RX pin",
    "ATOM_SOCKET_INIT_MSG3": "relay pin",
    "ATOM_SOCKET_GET_DATA_MSG0": "get data timeout",
    "ATOM_SOCKET_GET_DATA_MSG1": "ms from ATOM Socket (return tuple)",
    "ATOM_SOCKET_GET_VOLTAGE_MSG0": "get voltage from ATOM Socket (V, return float)",
    "ATOM_SOCKET_GET_CURRENT_MSG0": "get current from ATOM Socket (A, return float)",
    "ATOM_SOCKET_GET_POWER_MSG0": "get power from ATOM Socket (W, return float)",
    "ATOM_SOCKET_GET_PF_MSG0": "get power factor from ATOM Socket (return int)",
    "ATOM_SOCKET_GET_INSPECTING_POWER_MSG0": "calculate the inspecting power of ATOM Socket (W, return float)",
    "ATOM_SOCKET_GET_POWER_FACTOR_MSG0": "calculate the power factor of ATOM Socket (return float)",
    "ATOM_SOCKET_GET_KWH_MSG0": "get the accumulated energy measurement in KWh from ATOM Socket (return float)",
    "ATOM_SOCKET_SET_RELAY_MSG0": "Set the relay status of ATOM Socket to",
    "ATOM_SOCKET_START_RECEIVE_DATA_MSG0": "Start receiving data from ATOM Socket",
    "ATOM_SOCKET_RECEIVE_DATA_EVENT_MSG0": "When ATOM Socket receive data",
    "ATOM_SOCKET_RECEIVE_DATA_EVENT_MSG1": "voltage",
    "ATOM_SOCKET_RECEIVE_DATA_EVENT_MSG2": "current",
    "ATOM_SOCKET_RECEIVE_DATA_EVENT_MSG3": "power",
    "ATOM_SOCKET_RECEIVE_DATA_EVENT_MSG4": "KWh",
    "ATOM_SOCKET_STOP_RECEIVE_DATA_MSG0": "Stop receiving data from ATOM Socket",
    "BASE_MOTION_INIT_MSG0": "Init Motion I2C address %1",
    "BASE_MOTION_GET_SERVO_ANGLE_MSG0": "Motion get channel %1 servo angle (return 0 ~ 180)",
    "BASE_MOTION_GET_SERVO_PULSE_MSG0": "Motion get channel %1 servo pulse (return 500 ~ 2500)",
    "BASE_MOTION_GET_MOTOR_SPEED_MSG0": "Motion get channel %1 motor speed (return -127 ~ 127)",
    "BASE_MOTION_SET_SERVO_ANGLE_MSG0": "Motion set channel %1 servo angle %2 (0 ~ 180)",
    "BASE_MOTION_SET_SERVO_PULSE_MSG0": "Motion set channel %1 servo pulse %2 (500 ~ 2500)",
    "BASE_MOTION_SET_MOTOR_SPEED_MSG0": "Motion set channel %1 motor speed %2 (-127 ~ 127)",
    "BASE_MOTION_READ_VOLTAGE_MSG0": "Motion read voltage (V, return float)",
    "BASE_MOTION_READ_CURRENT_MSG0": "Motion read current (A, return float)",
    "BASE_MOTION_READ_POWER_MSG0": "Motion read power (W, return float)",
    "BASE_CAN_INIT_MSG0": "Init CAN with %1 ID %2 mode %3 TX %4 RX %5 baudrate %6",
    "BASE_CAN_INIT_ADVANCED_MSG0": "Init CAN with %1 ID %2 mode %3 TX %4 RX %5 prescaler %6 sjw %7 bs1 %8 bs2 %9 triple sampling %10",
    "BASE_CAN_DEINIT_MSG0": "CAN deinit",
    "BASE_CAN_RESTART_MSG0": "CAN restart",
    "BASE_CAN_GET_STATE_MSG0": "CAN get state (return int)",
    "BASE_CAN_GET_INFO_MSG0": "CAN get error status information",
    "BASE_CAN_ANY_MSG0": "CAN count of available (return True or False)",
    "BASE_CAN_RECV_MESSAGE_MSG0": "CAN read message timeout %1 (return tuple)",
    "BASE_CAN_RECV_MESSAGE_INFO_MSG0": "CAN read message into %1 timeout %2",
    "BASE_CAN_SEND_DATA_MSG0": "CAN send %1 id %2 timeout %3 rtr %4 extframe %5",
    "BASE_SPK_INIT_MSG0": "Init Speaker with %1 ID %2 SCK %3 WS %4 SD %5",
    "BASE_SPK_STOP_MSG0": "SPK play stop",
    "BASE_SPK_BEGIN_MSG0": "SPK begin",
    "BASE_SPK_END_MSG0": "SPK end",
    "BASE_SPK_IS_RUNNING_MSG0": "SPK is running",
    "BASE_SPK_IS_ENABLED_MSG0": "SPK is enabled",
    "BASE_SPK_IS_PLAYING_MSG0": "SPK is playing",
    "BASE_SPK_GET_VOLUME_MSG0": "SPK get volume (return 0~255)",
    "BASE_SPK_GET_VOLUME_PERCENTAGE_MSG0": "SPK get volume percentage (return float)",
    "BASE_SPK_BEGIN_RETURN_MSG0": "SPK begin (return True or False)",
    "BASE_SPK_GET_PLAYING_CHANNELS_MSG0": "SPK get playing channels (return int)",
    "BASE_SPK_TONE_MSG0": "SPK play tone freq %1 millisecond %2",
    "BASE_SPK_PLAY_WAV_MSG0": "SPK play WAV (bytearray / bytes) %1",
    "BASE_SPK_PLAY_RAW_MSG0": "SPK play PCM (bytearray / bytes) %1 sample rate (Hz) %2",
    "BASE_SPK_SET_VOLUME_MSG0": "SPK set volume %1 (0 ~ 255)",
    "BASE_SPK_SET_VOLUME_PERCENTAGE_MSG0": "SPK set volume %1 %",
    "BASE_SPK_SET_ALL_CHANNEL_VOLUME_MSG0": "SPK set all channel volume %1 (0 ~ 255)",
    "BASE_SPK_SET_CHANNEL_VOLUME_MSG0": "SPK set channel %1 volume %2 (0 ~ 255)",
    "BASE_SPK_GET_CHANNEL_VOLUME_MSG0": "SPK get channel %1 volume (return int)",
    "BASE_SPK_PLAY_RAW_RETURN_MSG0": "SPK play PCM (bytearray / bytes) %1 sample rate (Hz) %2 (return True or False)",
    "BASE_SPK_PLAYWAV_FILE_MSG0": "SPK play WAV file %1 %2",
    "BASE_SPK_SDCARD_INIT_MSG0": "Init SDCard with %1 slot %2 SCK %3 MISO %4 MOSI %5 CS %6 freq %7",
    "BASE_SPK_SDCARD_CHDIR_MSG0": "SDCard change current dir %1",
    "BASE_SPK_SDCARD_GET_CWD_MSG0": "SDCard get current dir",
    "BASE_SPK_SDCARD_LISTDIR_MSG0": "SDCard listdir %1",
    "BASE_SPK_SDCARD_MKDIR_MSG0": "SDCard mkdir %1",
    "BASE_SPK_SDCARD_REMOVE_MSG0": "SDCard remove %1",
    "BASE_SPK_SDCARD_RMDIR_MSG0": "SDCard rmdir %1",
    "BASE_SPK_SDCARD_RENAME_MSG0": "SDCard rename %1 to %2",
    "BASE_SPK_SDCARD_IS_FILE_MSG0": "is file %1",
    "BASE_SPK_SDCARD_IS_DIRECTORY_MSG0": "is directory %1",
    "BASE_SPK_SDCARD_IS_EXIST_MSG0": "%1 is exist in %2",
    "BASE_ECHO_INIT_MSG0": "Init Echo with %1 I2C address %2 I2S port %3 sample rate %4 SCK %5 WS %6 DI %7 DO %8",
    "BASE_ECHO_SPEAKER_STOP_MSG0": "Echo play stop",
    "BASE_ECHO_SPEAKER_BEGIN_MSG0": "Echo begin",
    "BASE_ECHO_SPEAKER_END_MSG0": "Echo end",
    "BASE_ECHO_SPEAKER_IS_RUNNING_MSG0": "Echo is running",
    "BASE_ECHO_SPEAKER_IS_ENABLED_MSG0": "Echo is enabled",
    "BASE_ECHO_SPEAKER_IS_PLAYING_MSG0": "Echo is playing",
    "BASE_ECHO_SPEAKER_GET_VOLUME_MSG0": "Echo get volume (return 0~255)",
    "BASE_ECHO_SPEAKER_GET_VOLUME_PERCENTAGE_MSG0": "Echo get volume percentage (return float)",
    "BASE_ECHO_SPEAKER_BEGIN_RETURN_MSG0": "Echo begin (return True or False)",
    "BASE_ECHO_SPEAKER_GET_PLAYING_CHANNELS_MSG0": "Echo get playing channels (return int)",
    "BASE_ECHO_SPEAKER_TONE_MSG0": "Echo play tone freq %1 millisecond %2",
    "BASE_ECHO_SPEAKER_PLAY_WAV_MSG0": "Echo play WAV (bytearray / bytes) %1",
    "BASE_ECHO_SPEAKER_PLAY_RAW_MSG0": "Echo play PCM (bytearray / bytes) %1 sample rate (Hz) %2",
    "BASE_ECHO_SPEAKER_SET_VOLUME_MSG0": "Echo set volume %1 (0 ~ 255)",
    "BASE_ECHO_SPEAKER_SET_VOLUME_PERCENTAGE_MSG0": "Echo set volume %1 %",
    "BASE_ECHO_SPEAKER_SET_ALL_CHANNEL_VOLUME_MSG0": "Echo set all channel volume %1 (0 ~ 255)",
    "BASE_ECHO_SPEAKER_SET_CHANNEL_VOLUME_MSG0": "Echo set channel %1 volume %2 (0 ~ 255)",
    "BASE_ECHO_SPEAKER_GET_CHANNEL_VOLUME_MSG0": "Echo get channel %1 volume (return int)",
    "BASE_ECHO_SPEAKER_PLAY_RAW_RETURN_MSG0": "Echo play PCM (bytearray / bytes) %1 sample rate (Hz) %2 (return True or False)",
    "BASE_ECHO_SPEAKER_PLAYWAV_FILE_MSG0": "Echo play WAV file %1 %2",
    "BASE_RS232_INIT_MSG0": "Init RS232 with %1 UART %2 baudrate %3 bits %4 parity %5 stop %6 TX %7 RX %8",
    "BASE_RS232_INIT_MSG1": "TX buffer",
    "BASE_RS232_INIT_MSG2": "RX buffer",
    "BASE_RS232_INIT_MSG3": "timeout",
    "BASE_RS232_INIT_MSG4": "timeout char",
    "BASE_RS232_INIT_MSG5": "invert",
    "BASE_RS232_INIT_MSG6": "flow",
    "BASE_RS232_SETUP_MSG0": "RS232 setup %1 baudrate %2 bits %3 parity %4 stop %5 TX %6 RX %7",
    "BASE_RS232_DEINIT_MSG0": "RS232 deinit",
    "BASE_RS232_AVAILABLE_CHAR_MSG0": "RS232 count of available",
    "BASE_RS232_READ_ALL_MSG0": "RS232 read all",
    "BASE_RS232_READ_BYTES_MSG0": "RS232 read %1 bytes",
    "BASE_RS232_READ_LINE_MSG0": "RS232 read line",
    "BASE_RS232_READ_RAW_DATA_MSG0": "RS232 read a raw data (return 0 ~ 255)",
    "BASE_RS232_WRITE_MSG0": "RS232 write %1",
    "BASE_RS232_WRITE_LINE_MSG0": "RS232 write line %1",
    "BASE_RS232_WRITE_LIST_MSG0": "RS232 write list or tuple %1",
    "BASE_RS232_WRITE_RAW_DATA_LIST_MSG0": "RS232 write raw data %1",
    "BASE_RS232_WRITE_RAW_DATA_MSG0": "RS232 write raw data %1",
    "BASE_RS232_READ_INTO_BUF_MSG0": "RS232 read into buf %1",
    "BASE_RS232_SEND_BREAK_MSG0": "RS232 send break single",
    "BASE_RS232_FLUSH_MSG0": "RS232 flush",
    "BASE_RS232_TXDONE_MSG0": "RS232 is transfer done (return True or False)",
    "BASE_RS485_INIT_MSG0": "Init RS485 with %1 UART %2 baudrate %3 bits %4 parity %5 stop %6 TX %7 RX %8",
    "BASE_RS485_INIT_MSG1": "TX buffer",
    "BASE_RS485_INIT_MSG2": "RX buffer",
    "BASE_RS485_INIT_MSG3": "timeout",
    "BASE_RS485_INIT_MSG4": "timeout char",
    "BASE_RS485_INIT_MSG5": "invert",
    "BASE_RS485_INIT_MSG6": "flow",
    "BASE_RS485_SETUP_MSG0": "RS485 setup %1 baudrate %2 bits %3 parity %4 stop %5 TX %6 RX %7",
    "BASE_RS485_DEINIT_MSG0": "RS485 deinit",
    "BASE_RS485_AVAILABLE_CHAR_MSG0": "RS485 count of available",
    "BASE_RS485_READ_ALL_MSG0": "RS485 read all",
    "BASE_RS485_READ_BYTES_MSG0": "RS485 read %1 bytes",
    "BASE_RS485_READ_LINE_MSG0": "RS485 read line",
    "BASE_RS485_READ_RAW_DATA_MSG0": "RS485 read a raw data (return 0 ~ 255)",
    "BASE_RS485_WRITE_MSG0": "RS485 write %1",
    "BASE_RS485_WRITE_LINE_MSG0": "RS485 write line %1",
    "BASE_RS485_WRITE_LIST_MSG0": "RS485 write list or tuple %1",
    "BASE_RS485_WRITE_RAW_DATA_LIST_MSG0": "RS485 write raw data %1",
    "BASE_RS485_WRITE_RAW_DATA_MSG0": "RS485 write raw data %1",
    "BASE_RS485_READ_INTO_BUF_MSG0": "RS485 read into buf %1",
    "BASE_RS485_SEND_BREAK_MSG0": "RS485 send break single",
    "BASE_RS485_FLUSH_MSG0": "RS485 flush",
    "BASE_RS485_TXDONE_MSG0": "RS485 is transfer done (return True or False)",
    "BASE_DISPLAY_INIT_MSG0": "Base Display config",
    "BASE_DISPLAY_INIT_MSG1": "logical size",
    "BASE_DISPLAY_INIT_MSG2": "output",
    "BASE_DISPLAY_INIT_MSG3": "refresh rate",
    "BASE_DISPLAY_INIT_MSG4": "scale (0 ~ 255)",
    "BASE_DISPLAY_INIT_MSG5": "pixel clock (Hz)",
    "BASE_DISPLAY_CONFIG_SIZE_MSG0": "width (px)",
    "BASE_DISPLAY_CONFIG_SIZE_MSG1": "height (px)",
    "BASE_DISPLAY_CONFIG_SCALE_MSG0": "width (px)",
    "BASE_DISPLAY_CONFIG_SCALE_MSG1": "height (px)",
    "BASE_DISPLAY_CONFIG_OUTPUT_MSG0": "width (px)",
    "BASE_DISPLAY_CONFIG_OUTPUT_MSG1": "height (px)",
    "BASE_GPS_INIT_MSG0": "Init GPS with %1 UART %2 TX %3 RX %4",
    "BASE_GPS_DEINIT_MSG0": "GPS deinit",
    "BASE_GPS_GET_ANTENNA_STATE_MSG0": "get GPS antenna state (return string)",
    "BASE_GPS_GET_ANTENNA_STATE_MSG1": "antenna open circuit",
    "BASE_GPS_GET_ANTENNA_STATE_MSG2": "antenna good",
    "BASE_GPS_GET_ANTENNA_STATE_MSG3": "antenna short circuit",
    "BASE_GPS_GET_GPS_TIME_MSG0": "get GPS local time (return list [hour, min, second])",
    "BASE_GPS_GET_GPS_DATE_MSG0": "get GPS date (return list [yyyy, mm, dd])",
    "BASE_GPS_GET_GPS_DATE_TIME_MSG0": "get GPS date and local time (return list [yyyy, mm, dd, hour, min, second])",
    "BASE_GPS_GET_TIMESTAMP_MSG0": "get GPS timestamp (return int)",
    "BASE_GPS_GET_LATITUDE_MSG0": "get GPS latitude (return string)",
    "BASE_GPS_GET_LONGITUDE_MSG0": "get GPS longitude (return string)",
    "BASE_GPS_GET_ALTITUDE_MSG0": "get GPS altitude (return string)",
    "BASE_GPS_GET_SATELLITE_NUM_MSG0": "get GPS satellite number (return int)",
    "BASE_GPS_GET_POS_QUALITY_MSG0": "get GPS position quality (return int)",
    "BASE_GPS_GET_POS_QUALITY_MSG1": "Position not available or invalid",
    "BASE_GPS_GET_POS_QUALITY_MSG2": "SPS positioning mode, position valid",
    "BASE_GPS_GET_POS_QUALITY_MSG3": "Estimation mode (dead reckoning)",
    "BASE_GPS_GET_CORSE_OVER_GROUND_MSG0": "get GPS course over ground degree (return string)",
    "BASE_GPS_GET_SPEED_OVER_GROUND_MSG0": "get GPS speed over ground knot (return string)",
    "BASE_GPS_GET_TIME_ZONE_MSG0": "get GPS current time zone offset (return int)",
    "BASE_GPS_SET_TIME_ZONE_MSG0": "Set GPS time zone offset to %1",
    "BASE_PWM_INIT_MSG0": "Init PWM with output pin %1 and frequency %2",
    "BASE_PWM_GET_FREQ_MSG0": "get PWM frequency (Hz, return int)",
    "BASE_PWM_SET_FREQ_MSG0": "Set PWM frequency to %1 Hz",
    "BASE_PWM_GET_DUTY_U16_MSG0": "get PWM duty cycle (return 0 ~ 65535)",
    "BASE_PWM_SET_DUTY_U16_MSG0": "Set PWM duty cycle to %1 (0 ~ 65535)",
    "BASE_HDRIVER_INIT_MSG0": "Init HDriver with %1 PWM control pin1 %2 PWM control pin2 %3 driver status %4 driver input voltage detect %5 PWM frequency %6",
    "BASE_HDRIVER_GET_FREQ_MSG0": "get HDriver PWM frequency (Hz, return int)",
    "BASE_HDRIVER_SET_FREQ_MSG0": "Set HDriver PWM frequency to %1 Hz",
    "BASE_HDRIVER_GET_STATUS_MSG0": "get HDriver status (return True or False)",
    "BASE_HDRIVER_GET_VOLTAGE_MSG0": "get HDriver voltage (V, return float)",
    "BASE_HDRIVER_SET_SPEED_MSG0": "Set HDriver motor speed to %1 (-100 ~ 100)",
    "BASE_STEPMOTOR_INIT_MSG0": "Init Stepmotor with %1 enable pin %2 direction pin %3 step pin %4 fault pin %5 reset pin %6",
    "BASE_STEPMOTOR_GET_STATUS_MSG0": "get Stepmotor status (return True or False)",
    "BASE_STEPMOTOR_GET_VOLTAGE_MSG0": "get Stepmotor voltage (V, return float)",
    "BASE_STEPMOTOR_ENABLE_MSG0": "Enable Stepmotor driver",
    "BASE_STEPMOTOR_DISABLE_MSG0": "Disable Stepmotor driver",
    "BASE_STEPMOTOR_STEP_MSG0": "Move Stepmotor one step",
    "BASE_STEPMOTOR_STOP_MSG0": "Stop Stepmotor",
    "BASE_STEPMOTOR_RESET_MSG0": "Reset Stepmotor driver",
    "BASE_STEPMOTOR_SET_DIRECTION_MSG0": "Set Stepmotor direction to %1",
    "BASE_STEPMOTOR_ROTATE_MSG0": "Rotate Stepmotor with %1 steps %2 delay (ms) %3 direction %4",
    "BASE_LORAWAN470_INIT_MSG0": "Init LoRaWAN470 with UART %1 TX %2 RX %3",
    "BASE_LORAWAN470_GET_ABP_CONFIG_MSG0": "get LoRaWAN470 ABP config (return tuple)",
    "BASE_LORAWAN470_GET_OTAA_CONFIG_MSG0": "get LoRaWAN470 OTAA config (return tuple)",
    "BASE_LORAWAN470_CHECK_JOIN_STATUS_MSG0": "check LoRaWAN470 join status",
    "BASE_LORAWAN470_CHECK_UPLINK_STATUS_MSG0": "check LoRaWAN470 uplink data status",
    "BASE_LORAWAN470_CHECK_DOWNLINK_DATA_MSG0": "check and receive LoRaWAN470 downlink data",
    "BASE_LORAWAN470_SET_JOIN_MODE_MSG0": "Set LoRaWAN470 join mode %1",
    "BASE_LORAWAN470_STOP_JOIN_NETWORK_MSG0": "Stop LoRaWAN470 join LoRaWAN network",
    "BASE_LORAWAN470_SET_UPLINK_PORT_MSG0": "Set LoRaWAN470 uplink app port %1 (1 ~ 233)",
    "BASE_LORAWAN470_CONFIG_MSG0": "Config LoRaWAN470 %1 frequency band mask %2 RX window param: %3 RX1 offset %4 RX2 datarate %5 RX2 FREQ(Hz) %6 class mode %7 uplink downlink %8",
    "BASE_LORAWAN470_START_JOIN_NETWORK_MSG0": "Start LoRaWAN470 join LoRaWAN network %1 %2 auto join %3 period (seconds) (7 ~ 255) %4 maximum number of attempts (1 ~ 256) %5",
    "BASE_LORAWAN470_CONFIG_MODE_MSG0": "LoRaWAN470",
    "BASE_LORAWAN470_CONFIG_MODE_MSG1": "config",
    "BASE_LORAWAN470_CONFIG_MODE_MSG2": "device eui *",
    "BASE_LORAWAN470_CONFIG_MODE_MSG3": "app key *",
    "BASE_LORAWAN470_CONFIG_MODE_MSG4": "app eui",
    "BASE_LORAWAN470_CONFIG_MODE_MSG5": "device address",
    "BASE_LORAWAN470_CONFIG_MODE_MSG6": "app session key",
    "BASE_LORAWAN470_CONFIG_MODE_MSG7": "network session key",
    "BASE_LORAWAN470_SEND_DATA_PAYLOAD_MSG0": "LoRaWAN470 send data payload",
    "BASE_LORAWAN470_SEND_DATA_PAYLOAD_MSG1": "try times",
    "BASE_LORAWAN868_INIT_MSG0": "Init LoRaWAN868 with UART %1 TX %2 RX %3",
    "BASE_LORAWAN868_GET_ABP_CONFIG_MSG0": "get LoRaWAN868 ABP config (return tuple)",
    "BASE_LORAWAN868_GET_OTAA_CONFIG_MSG0": "get LoRaWAN868 OTAA config (return tuple)",
    "BASE_LORAWAN868_CHECK_JOIN_STATUS_MSG0": "check LoRaWAN868 join status",
    "BASE_LORAWAN868_CHECK_UPLINK_STATUS_MSG0": "check LoRaWAN868 uplink data status",
    "BASE_LORAWAN868_CHECK_DOWNLINK_DATA_MSG0": "check and receive LoRaWAN868 downlink data",
    "BASE_LORAWAN868_SET_JOIN_MODE_MSG0": "Set LoRaWAN868 join mode %1",
    "BASE_LORAWAN868_STOP_JOIN_NETWORK_MSG0": "Stop LoRaWAN868 join LoRaWAN network",
    "BASE_LORAWAN868_SET_UPLINK_PORT_MSG0": "Set LoRaWAN868 uplink app port %1 (1 ~ 233)",
    "BASE_LORAWAN868_CONFIG_MSG0": "Config LoRaWAN868 %1 frequency band mask %2 RX window param: %3 RX1 offset %4 RX2 datarate %5 RX2 FREQ(Hz) %6 class mode %7 uplink downlink %8",
    "BASE_LORAWAN868_START_JOIN_NETWORK_MSG0": "Start LoRaWAN868 join LoRaWAN network %1 %2 auto join %3 period (seconds) (7 ~ 255) %4 maximum number of attempts (1 ~ 256) %5",
    "BASE_LORAWAN868_CONFIG_MODE_MSG0": "LoRaWAN868",
    "BASE_LORAWAN868_CONFIG_MODE_MSG1": "config",
    "BASE_LORAWAN868_CONFIG_MODE_MSG2": "device eui *",
    "BASE_LORAWAN868_CONFIG_MODE_MSG3": "app key *",
    "BASE_LORAWAN868_CONFIG_MODE_MSG4": "app eui",
    "BASE_LORAWAN868_CONFIG_MODE_MSG5": "device address",
    "BASE_LORAWAN868_CONFIG_MODE_MSG6": "app session key",
    "BASE_LORAWAN868_CONFIG_MODE_MSG7": "network session key",
    "BASE_LORAWAN868_SEND_DATA_PAYLOAD_MSG0": "LoRaWAN868 send data payload",
    "BASE_LORAWAN868_SEND_DATA_PAYLOAD_MSG1": "try times",
    "BASE_LORAWAN915_INIT_MSG0": "Init LoRaWAN915 with UART %1 TX %2 RX %3",
    "BASE_LORAWAN915_GET_ABP_CONFIG_MSG0": "get LoRaWAN915 ABP config (return tuple)",
    "BASE_LORAWAN915_GET_OTAA_CONFIG_MSG0": "get LoRaWAN915 OTAA config (return tuple)",
    "BASE_LORAWAN915_CHECK_JOIN_STATUS_MSG0": "check LoRaWAN915 join status",
    "BASE_LORAWAN915_CHECK_UPLINK_STATUS_MSG0": "check LoRaWAN915 uplink data status",
    "BASE_LORAWAN915_CHECK_DOWNLINK_DATA_MSG0": "check and receive LoRaWAN915 downlink data",
    "BASE_LORAWAN915_SET_JOIN_MODE_MSG0": "Set LoRaWAN915 join mode %1",
    "BASE_LORAWAN915_STOP_JOIN_NETWORK_MSG0": "Stop LoRaWAN915 join LoRaWAN network",
    "BASE_LORAWAN915_SET_UPLINK_PORT_MSG0": "Set LoRaWAN915 uplink app port %1 (1 ~ 233)",
    "BASE_LORAWAN915_CONFIG_MSG0": "Config LoRaWAN915 %1 frequency band mask %2 RX window param: %3 RX1 offset %4 RX2 datarate %5 RX2 FREQ(Hz) %6 class mode %7 uplink downlink %8",
    "BASE_LORAWAN915_START_JOIN_NETWORK_MSG0": "Start LoRaWAN915 join LoRaWAN network %1 %2 auto join %3 period (seconds) (7 ~ 255) %4 maximum number of attempts (1 ~ 256) %5",
    "BASE_LORAWAN915_CONFIG_MODE_MSG0": "LoRaWAN915",
    "BASE_LORAWAN915_CONFIG_MODE_MSG1": "config",
    "BASE_LORAWAN915_CONFIG_MODE_MSG2": "device eui *",
    "BASE_LORAWAN915_CONFIG_MODE_MSG3": "app key *",
    "BASE_LORAWAN915_CONFIG_MODE_MSG4": "app eui",
    "BASE_LORAWAN915_CONFIG_MODE_MSG5": "device address",
    "BASE_LORAWAN915_CONFIG_MODE_MSG6": "app session key",
    "BASE_LORAWAN915_CONFIG_MODE_MSG7": "network session key",
    "BASE_LORAWAN915_SEND_DATA_PAYLOAD_MSG0": "LoRaWAN915 send data payload",
    "BASE_LORAWAN915_SEND_DATA_PAYLOAD_MSG1": "try times",
    "BASE_TFCARD_INIT_MSG0": "Init TFCard with %1 slot %2 SCK %3 MISO %4 MOSI %5 freq %6",
    "BASE_TFCARD_CHDIR_MSG0": "TFCard change current dir %1",
    "BASE_TFCARD_GET_CWD_MSG0": "TFCard get current dir",
    "BASE_TFCARD_LISTDIR_MSG0": "TFCard listdir %1",
    "BASE_TFCARD_MKDIR_MSG0": "TFCard mkdir %1",
    "BASE_TFCARD_REMOVE_MSG0": "TFCard remove %1",
    "BASE_TFCARD_RMDIR_MSG0": "TFCard rmdir %1",
    "BASE_TFCARD_RENAME_MSG0": "TFCard rename %1 to %2",
    "BASE_TFCARD_IS_FILE_MSG0": "is file %1",
    "BASE_TFCARD_IS_DIRECTORY_MSG0": "is directory %1",
    "BASE_TFCARD_IS_EXIST_MSG0": "%1 is exist in %2",
    "UNIT_ENV_INIT_MSG0": "Init %1",
    "UNIT_ENV_GET_TEMPERATURE_MSG0": "get %1 temperature (°C, return float)",
    "UNIT_ENV_GET_PRESSURE_MSG0": "get %1 pressure (hPa, return float)",
    "UNIT_ENV_GET_HUMIDITY_MSG0": "get %1 humidity (%, return float)",
    "UNIT_ENVPRO_INIT_MSG0": "Init",
    "UNIT_ENVPRO_GET_TEMPERATURE_MSG0": "get",
    "UNIT_ENVPRO_GET_TEMPERATURE_MSG1": "temperature (°C, return float)",
    "UNIT_ENVPRO_GET_PRESSURE_MSG0": "get",
    "UNIT_ENVPRO_GET_PRESSURE_MSG1": "pressure (hPa, return float)",
    "UNIT_ENVPRO_GET_HUMIDITY_MSG0": "get",
    "UNIT_ENVPRO_GET_HUMIDITY_MSG1": "humidity (%, return float)",
    "UNIT_ENVPRO_GET_GAS_RESISTANCE_MSG0": "get",
    "UNIT_ENVPRO_GET_GAS_RESISTANCE_MSG1": "gas resistance (kΩ, return float)",
    "UNIT_ENVPRO_GET_ALTITUDE_MSG0": "get",
    "UNIT_ENVPRO_GET_ALTITUDE_MSG1": "altitude (meters, return float)",
    "UNIT_ENVPRO_GET_IIR_FILTER_COEFFICIENT_MSG0": "get",
    "UNIT_ENVPRO_GET_IIR_FILTER_COEFFICIENT_MSG1": "IIR filter coefficient (return int)",
    "UNIT_ENVPRO_GET_OVER_SAMPLING_RATE_MSG0": "get",
    "UNIT_ENVPRO_GET_OVER_SAMPLING_RATE_MSG1": "oversampling rate (return int)",
    "UNIT_ENVPRO_SET_IIR_FILTER_COEFFICIENT_MSG0": "set IIR filter coefficient",
    "UNIT_ENVPRO_SET_IIR_FILTER_COEFFICIENT_MSG1": "(0 ~ 127)",
    "UNIT_ENVPRO_SET_OVER_SAMPLING_RATE_MSG0": "set",
    "UNIT_ENVPRO_SET_OVER_SAMPLING_RATE_MSG1": "oversampling rate",
    "UNIT_ENVPRO_SET_OVER_SAMPLING_RATE_MSG2": "(1 ~ 16)",
    "UNIT_PAHUB_INIT_MSG0": "Init",
    "UNIT_PAHUB_SELECT_CHANNEL_MSG0": "select channel",
    "UNIT_PAHUB_RELEASE_CHANNEL_MSG0": "release channel",
    "UNIT_PAHUB_SCAN_MSG0": "scan",
    "UNIT_PAHUB_START_MSG0": "start",
    "UNIT_PAHUB_STOP_MSG0": "stop",
    "UNIT_PAHUB_READINTO_MSG0": "readinto",
    "UNIT_PAHUB_READINTO_MSG1": "NACK",
    "UNIT_PAHUB_WRITE_RETURN_MSG0": "write",
    "UNIT_PAHUB_WRITE_MSG0": "write",
    "UNIT_PAHUB_READFROM_MSG0": "read from",
    "UNIT_PAHUB_READFROM_MSG1": "addr",
    "UNIT_PAHUB_READFROM_MSG2": "nbytes",
    "UNIT_PAHUB_READFROM_MSG3": "stop",
    "UNIT_PAHUB_READFROM_INTO_MSG0": "read from",
    "UNIT_PAHUB_READFROM_INTO_MSG1": "addr",
    "UNIT_PAHUB_READFROM_INTO_MSG2": "into",
    "UNIT_PAHUB_READFROM_INTO_MSG3": "stop",
    "UNIT_PAHUB_WRITETO_MSG0": "write",
    "UNIT_PAHUB_WRITETO_MSG1": "addr",
    "UNIT_PAHUB_WRITETO_MSG2": "stop",
    "UNIT_PAHUB_WRITETO_RETURN_MSG0": "write",
    "UNIT_PAHUB_WRITETO_RETURN_MSG1": "addr",
    "UNIT_PAHUB_WRITETO_RETURN_MSG2": "stop",
    "UNIT_PAHUB_READFROM_MEM_MSG0": "read from addr",
    "UNIT_PAHUB_READFROM_MEM_MSG1": "mem addr",
    "UNIT_PAHUB_READFROM_MEM_MSG2": "nbytes",
    "UNIT_PAHUB_READFROM_MEM_INTO_MSG0": "read from addr",
    "UNIT_PAHUB_READFROM_MEM_INTO_MSG1": "mem addr",
    "UNIT_PAHUB_READFROM_MEM_INTO_MSG2": "into buf",
    "UNIT_PAHUB_WRITETO_MEM_MSG0": "write buf",
    "UNIT_PAHUB_WRITETO_MEM_MSG1": "to addr",
    "UNIT_PAHUB_WRITETO_MEM_MSG2": "mem addr",
    "UNIT_COLOR_INIT_MSG0": "Init",
    "UNIT_COLOR_GET_LUX_MSG0": "get",
    "UNIT_COLOR_GET_LUX_MSG1": "lux",
    "UNIT_COLOR_GET_TEMPERATURE_MSG0": "get",
    "UNIT_COLOR_GET_TEMPERATURE_MSG1": "color temperature",
    "UNIT_COLOR_GET_RGB_TYPE_MSG0": "get",
    "UNIT_COLOR_GET_RGB_TYPE_MSG1": "color RGB bytes",
    "UNIT_COLOR_GET_COLOR_MSG0": "get",
    "UNIT_COLOR_GET_COLOR_MSG1": "color",
    "UNIT_COLOR_GET_COLOR565_MSG0": "get",
    "UNIT_COLOR_GET_COLOR565_MSG1": "color565",
    "UNIT_COLOR_GET_COLOR_RAW_MSG0": "get",
    "UNIT_COLOR_GET_COLOR_RAW_MSG1": "color raw",
    "UNIT_COLOR_GET_ACTIVE_MSG0": "get",
    "UNIT_COLOR_GET_ACTIVE_MSG1": "active",
    "UNIT_COLOR_SET_ACTIVE_MSG0": "active",
    "UNIT_COLOR_GET_INTEGRATION_TIME_MSG0": "get",
    "UNIT_COLOR_GET_INTEGRATION_TIME_MSG1": "integration time",
    "UNIT_COLOR_SET_INTEGRATION_TIME_MSG0": "integration time",
    "UNIT_COLOR_GET_GAIN_MSG0": "get",
    "UNIT_COLOR_GET_GAIN_MSG1": "gain",
    "UNIT_COLOR_SET_GAIN_MSG0": "gain",
    "UNIT_COLOR_GET_CYCLES_MSG0": "get",
    "UNIT_COLOR_GET_CYCLES_MSG1": "cycles",
    "UNIT_COLOR_SET_CYCLES_MSG0": "cycles",
    "UNIT_COLOR_GET_MIN_VALUE_MSG0": "get",
    "UNIT_COLOR_GET_MIN_VALUE_MSG1": "min value",
    "UNIT_COLOR_SET_MIN_VALUE_MSG0": "min value",
    "UNIT_COLOR_SET_MIN_VALUE_MSG1": "(0 ~ 65535)",
    "UNIT_COLOR_GET_MAX_VALUE_MSG0": "get",
    "UNIT_COLOR_GET_MAX_VALUE_MSG1": "max value",
    "UNIT_COLOR_SET_MAX_VALUE_MSG0": "max value",
    "UNIT_COLOR_SET_MAX_VALUE_MSG1": "(0 ~ 65535)",
    "UNIT_COLOR_GET_GLASS_ATTENUATION_MSG0": "get",
    "UNIT_COLOR_GET_GLASS_ATTENUATION_MSG1": "glass attenuation",
    "UNIT_COLOR_SET_GLASS_ATTENUATION_MSG0": "glass attenuation",
    "UNIT_COLOR_GET_INTERRUPT_MSG0": "get",
    "UNIT_COLOR_GET_INTERRUPT_MSG1": "interrupt",
    "UNIT_COLOR_CLEAR_INTERRUPT_MSG0": "clear interrupt",
    "UNIT_COLOR_GET_COLOR_R_MSG0": "get",
    "UNIT_COLOR_GET_COLOR_R_MSG1": "color R int",
    "UNIT_COLOR_GET_COLOR_G_MSG0": "get",
    "UNIT_COLOR_GET_COLOR_G_MSG1": "color G int",
    "UNIT_COLOR_GET_COLOR_B_MSG0": "get",
    "UNIT_COLOR_GET_COLOR_B_MSG1": "color B int",
    "UNIT_COLOR_GET_COLOR_H_MSG0": "get",
    "UNIT_COLOR_GET_COLOR_H_MSG1": "color hue int",
    "UNIT_COLOR_GET_COLOR_S_MSG0": "get",
    "UNIT_COLOR_GET_COLOR_S_MSG1": "color saturation float",
    "UNIT_COLOR_GET_COLOR_V_MSG0": "get",
    "UNIT_COLOR_GET_COLOR_V_MSG1": "color value float",
    "UNIT_TOF_INIT_MSG0": "Init %1",
    "UNIT_TOF_GET_DATA_STATUS_MSG0": "get %1 data ready status (return True or False)",
    "UNIT_TOF_GET_DISTANCE_MSG0": "get %1 distance (cm, return float)",
    "UNIT_TOF_GET_RANGE_MSG0": "get %1 range (mm, return int)",
    "UNIT_TOF_GET_CONTINUOUS_MODE_MSG0": "get %1 continuous mode (return True or False)",
    "UNIT_TOF_GET_MEASUREMENT_TIMING_BUDGET_MSG0": "get %1 measurement timing budget (return int)",
    "UNIT_TOF_SET_MEASUREMENT_TIMING_BUDGET_MSG0": "%1 measurement timing budget %2",
    "UNIT_TOF_SET_ADDRESS_MSG0": "%1 set address %2",
    "UNIT_TOF_GET_SIGNAL_RATE_LIMIT_MSG0": "get %1 signal rate limit (return float)",
    "UNIT_TOF_SET_SIGNAL_RATE_LIMIT_MSG0": "%1 signal rate limit %2 MCPS (0.0 ~ 511.99)",
    "UNIT_TOF_START_CONTINUOUS_MSG0": "%1 start continuous",
    "UNIT_TOF_STOP_CONTINUOUS_MSG0": "%1 stop continuous",
    "UNIT_ADC_INIT_MSG0": "Init %1",
    "UNIT_ADC_GET_VALUE_MSG0": "get %1 value (return int)",
    "UNIT_ADC_GET_VOLTAGE_MSG0": "get %1 voltage (return float)",
    "UNIT_ADC_GET_RAW_VALUE_MSG0": "get %1 16 bit ADC raw value (return int)",
    "UNIT_ADC_GET_OPERATING_MODE_MSG0": "get %1 operating mode (return 0 or 1)",
    "UNIT_ADC_SET_OPERATING_MODE_MSG0": "%1 operating mode %2",
    "UNIT_ADC_GET_DATA_RATE_MSG0": "get %1 data rate (return int)",
    "UNIT_ADC_SET_DATA_RATE_MSG0": "%1 data rate %2",
    "UNIT_ADC_GET_GAIN_MSG0": "get %1 gain (return int)",
    "UNIT_ADC_SET_GAIN_MSG0": "%1 gain %2",
    "UNIT_ADCV11_INIT_MSG0": "Init %1",
    "UNIT_ADCV11_GET_VOLTAGE_MSG0": "get %1 voltage (return float)",
    "UNIT_ADCV11_GET_ADC_RAW_VALUE_MSG0": "get %1 16 bit ADC raw value (return int)",
    "UNIT_ADCV11_SET_GAIN_MSG0": "%1 set gain x%2",
    "UNIT_ADCV11_SET_SAMPLE_RATE_MSG0": "%1 set sample rate %2",
    "UNIT_ADCV11_SET_MODE_MSG0": "%1 set mode %2",
    "UNIT_ADCV11_START_SINGLE_CONVERSION_MSG0": "%1 start single conversion",
    "UNIT_DAC_INIT_MSG0": "Init %1",
    "UNIT_DAC_GET_VALUE_MSG0": "get %1 DAC value (return int)",
    "UNIT_DAC_SET_VALUE_MSG0": "%1 DAC value %2 (0 ~ 65535)",
    "UNIT_DAC_GET_VOLTAGE_MSG0": "get %1 voltage (return float)",
    "UNIT_DAC_SET_VOLTAGE_MSG0": "%1 voltage %2 (0 ~ 3.3)",
    "UNIT_DAC_GET_RAW_VALUE_MSG0": "get %1 raw value (return int)",
    "UNIT_DAC_SET_RAW_VALUE_MSG0": "%1 raw value %2 (0 ~ 4095)",
    "UNIT_DAC_GET_NORMALIZED_VALUE_MSG0": "get %1 normalized value (return 0.0 ~ 1.0)",
    "UNIT_DAC_SET_NORMALIZED_VALUE_MSG0": "%1 normalized value %2 (0.0 ~ 1.0)",
    "UNIT_DAC_SAVE_TO_EEPROM_MSG0": "%1 save to eeprom",
    "UNIT_EXTIO_INIT_MSG0": "Init %1",
    "UNIT_EXTIO_SET_PORT_MODE_MSG0": "%1 set port mode %2",
    "UNIT_EXTIO_DIGIT_READ_PORT_MSG0": "get %1 port digit value",
    "UNIT_EXTIO_DIGIT_WRITE_PORT_MSG0": "%1 set digit value %2 (0 ~ 255)",
    "UNIT_EXTIO_SET_PIN_MODE_MSG0": "%1 set %2 mode %3",
    "UNIT_EXTIO_DIGIT_WRITE_MSG0": "%1 set %2 value %3",
    "UNIT_EXTIO_DIGIT_WRITE_INPUT_MSG0": "%1 set %2 value %3 (0 or 1)",
    "UNIT_EXTIO_DIGIT_READ_MSG0": "get %1 %2 value",
    "UNIT_EXTIO2_INIT_MSG0": "Init",
    "UNIT_EXTIO2_GET_CONFIG_MODE_MSG0": "get",
    "UNIT_EXTIO2_GET_CONFIG_MODE_MSG1": "mode (return 0~5)",
    "UNIT_EXTIO2_MODE_OPTION_MSG0": "IN",
    "UNIT_EXTIO2_MODE_OPTION_MSG1": "OUT",
    "UNIT_EXTIO2_MODE_OPTION_MSG2": "ANALOG",
    "UNIT_EXTIO2_MODE_OPTION_MSG3": "SERVO",
    "UNIT_EXTIO2_MODE_OPTION_MSG4": "NEOPIXEL",
    "UNIT_EXTIO2_MODE_OPTION_MSG5": "PWM",
    "UNIT_EXTIO2_READ_INPUT_PIN_MSG0": "get",
    "UNIT_EXTIO2_READ_INPUT_PIN_MSG1": "value (return 0 or 1)",
    "UNIT_EXTIO2_READ_ADC8_PIN_MSG0": "get",
    "UNIT_EXTIO2_READ_ADC8_PIN_MSG1": "adc 8b (return 0~255)",
    "UNIT_EXTIO2_READ_ADC12_PIN_MSG0": "get",
    "UNIT_EXTIO2_READ_ADC12_PIN_MSG1": "adc 12b (return 0~4095)",
    "UNIT_EXTIO2_READ_SERVO_ANGLE_MSG0": "get",
    "UNIT_EXTIO2_READ_SERVO_ANGLE_MSG1": "servo angle (return 0~180)",
    "UNIT_EXTIO2_READ_SERVO_PULSE_MSG0": "get",
    "UNIT_EXTIO2_READ_SERVO_PULSE_MSG1": "servo pulse (return 500~2500)",
    "UNIT_EXTIO2_READ_RGB_LED_MSG0": "get",
    "UNIT_EXTIO2_READ_RGB_LED_MSG1": "RGB888 (return 0~0xfffff)",
    "UNIT_EXTIO2_READ_FW_VERSION_MSG0": "get",
    "UNIT_EXTIO2_READ_FW_VERSION_MSG1": "firmware version",
    "UNIT_EXTIO2_GET_ADDRESS_MSG0": "get",
    "UNIT_EXTIO2_GET_ADDRESS_MSG1": "I2C address (return 0x01~0x7f)",
    "UNIT_EXTIO2_SET_CONFIG_MODE_MSG0": "set",
    "UNIT_EXTIO2_SET_CONFIG_MODE_MSG1": "mode",
    "UNIT_EXTIO2_SET_OUTPUT_PIN_MSG0": "set",
    "UNIT_EXTIO2_SET_OUTPUT_PIN_MSG1": "value",
    "UNIT_EXTIO2_SET_OUTPUT_PIN_INPUT_MSG0": "set",
    "UNIT_EXTIO2_SET_OUTPUT_PIN_INPUT_MSG1": "value",
    "UNIT_EXTIO2_SET_OUTPUT_PIN_INPUT_MSG2": "(0 or 1)",
    "UNIT_EXTIO2_SET_SERVO_ANGLE_MSG0": "set",
    "UNIT_EXTIO2_SET_SERVO_ANGLE_MSG1": "servo angle",
    "UNIT_EXTIO2_SET_SERVO_ANGLE_MSG2": "(0 ~ 180)",
    "UNIT_EXTIO2_SET_SERVO_PULSE_MSG0": "set",
    "UNIT_EXTIO2_SET_SERVO_PULSE_MSG1": "servo pulse",
    "UNIT_EXTIO2_SET_SERVO_PULSE_MSG2": "(500 ~ 2500)",
    "UNIT_EXTIO2_SET_RGB_LED_MSG0": "set",
    "UNIT_EXTIO2_SET_RGB_LED_MSG1": "RGB",
    "UNIT_EXTIO2_SET_ADDRESS_MSG0": "set I2C address",
    "UNIT_EXTIO2_SET_ADDRESS_MSG1": "(0x08 ~ 0x77)",
    "UNIT_EXTIO2_GET_PWM_FREQUENCY_MSG0": "get %1 PWM frequency (return int)",
    "UNIT_EXTIO2_SET_PWM_FREQUENCY_MSG0": "%1 set PWM frequency to %2",
    "UNIT_EXTIO2_GET_PWM_DUTY_CYCLE_MSG0": "get %1 %2 PWM duty cycle (return int)",
    "UNIT_EXTIO2_SET_PWM_DUTY_CYCLE_MSG0": "%1 set %2 PWM duty cycle to %3",
    "UNIT_EARTH_INIT_MSG0": "Init %1",
    "UNIT_EARTH_SET_CALIBRATE_MSG0": "Set %1 calibrate min value %2 (0 ~ 3300) max value %3 (0 ~ 3300)",
    "UNIT_EARTH_GET_HUMIDITY_MSG0": "get %1 humidity (return 0.0~1.0)",
    "UNIT_EARTH_GET_ANALOG_VALUE_MSG0": "get %1 analog value (return 0~65535)",
    "UNIT_EARTH_GET_VOLTAGE_MV_MSG0": "get %1 voltage mv (return 0~3300)",
    "UNIT_EARTH_GET_DIGITAL_VALUE_MSG0": "get %1 digital value (return 0 or 1)",
    "UNIT_ANGLE_INIT_MSG0": "Init %1",
    "UNIT_ANGLE_GET_VOLTAGE_MSG0": "get %1 voltage (return float)",
    "UNIT_ANGLE_GET_ANALOG_MSG0": "get %1 analog value (return 0~65535)",
    "UNIT_RGB_INIT_MSG0": "Init %1 number %2",
    "UNIT_RGB_SET_INDEX_COLOR_MSG0": "%1 set index %2 color %3",
    "UNIT_RGB_SET_FILL_COLOR_MSG0": "%1 fill color %2",
    "UNIT_RGB_SET_BRIGHTNESS_MSG0": "%1 set brightness %2 % (0 ~ 100)",
    "UNIT_FINGER_INIT_MSG0": "Init %1 UART %2",
    "UNIT_FINGER_SLEEP_MSG0": "sleep",
    "UNIT_FINGER_GET_ADD_MODE_MSG0": "get",
    "UNIT_FINGER_GET_ADD_MODE_MSG1": "add mode (return 0 or 1)",
    "UNIT_FINGER_SET_ADD_MODE_MSG0": "Set",
    "UNIT_FINGER_SET_ADD_MODE_MSG1": "add mode",
    "UNIT_FINGER_ADD_USER_MSG0": "add user",
    "UNIT_FINGER_ADD_USER_MSG1": "(0 ~ 149) permission",
    "UNIT_FINGER_ADD_USER_RETURN_MSG0": "add user",
    "UNIT_FINGER_ADD_USER_RETURN_MSG1": "(0 ~ 149) permission",
    "UNIT_FINGER_ADD_USER_RETURN_MSG2": "(return -1 or 0~149)",
    "UNIT_FINGER_DELETE_USER_MSG0": "delete user",
    "UNIT_FINGER_DELETE_USER_MSG1": "(0 ~ 149)",
    "UNIT_FINGER_DELETE_ALL_USER_MSG0": "delete all user",
    "UNIT_FINGER_GET_USER_COUNT_MSG0": "get",
    "UNIT_FINGER_GET_USER_COUNT_MSG1": "user count",
    "UNIT_FINGER_GET_USER_CAPACITY_MSG0": "get",
    "UNIT_FINGER_GET_USER_CAPACITY_MSG1": "user capacity",
    "UNIT_FINGER_COMPARE_ID_MSG0": "compare user",
    "UNIT_FINGER_COMPARE_ID_MSG1": "(0 ~ 149)",
    "UNIT_FINGER_COMPARE_ID_MSG2": "(return True or False)",
    "UNIT_FINGER_COMPARE_FINGER_MSG0": "compare finger (return -1 or 0~149)",
    "UNIT_FINGER_GET_USER_LIST_MSG0": "get",
    "UNIT_FINGER_GET_USER_LIST_MSG1": "user list",
    "UNIT_FINGER_GET_USER_INFO_MSG0": "get",
    "UNIT_FINGER_GET_USER_INFO_MSG1": "user",
    "UNIT_FINGER_GET_USER_INFO_MSG2": "(0 ~ 149) info",
    "UNIT_FINGER_GET_USER_INFO_MSG3": "(return None or tuple)",
    "UNIT_FINGER_GET_USER_PERMISSION_MSG0": "get",
    "UNIT_FINGER_GET_USER_PERMISSION_MSG1": "user",
    "UNIT_FINGER_GET_USER_PERMISSION_MSG2": "(0 ~ 149) permission",
    "UNIT_FINGER_GET_USER_PERMISSION_MSG3": "(return -1 or 1,2,3)",
    "UNIT_FINGER_GET_USER_CHARACTERISTIC_MSG0": "get",
    "UNIT_FINGER_GET_USER_CHARACTERISTIC_MSG1": "user",
    "UNIT_FINGER_GET_USER_CHARACTERISTIC_MSG2": "(0 ~ 149) characteristic",
    "UNIT_FINGER_ADD_USER_INFO_MSG0": "add user",
    "UNIT_FINGER_ADD_USER_INFO_MSG1": "(0 ~ 149) permission",
    "UNIT_FINGER_ADD_USER_INFO_MSG2": "characteristic",
    "UNIT_FINGER_GET_MATCH_LEVEL_MSG0": "get",
    "UNIT_FINGER_GET_MATCH_LEVEL_MSG1": "match level (return 0~9)",
    "UNIT_FINGER_SET_MATCH_LEVEL_MSG0": "Set",
    "UNIT_FINGER_SET_MATCH_LEVEL_MSG1": "match level",
    "UNIT_FINGER_SET_MATCH_LEVEL_MSG2": "(0 ~ 9)",
    "UNIT_PIR_INIT_MSG0": "Init",
    "UNIT_PIR_ENABLE_IRQ_MSG0": "enable irq",
    "UNIT_PIR_DISABLE_IRQ_MSG0": "disable irq",
    "UNIT_PIR_CALLBACK_MSG0": "When PIR",
    "UNIT_PIR_CALLBACK_MSG1": "was",
    "UNIT_PIR_GET_STATUS_MSG0": "get",
    "UNIT_PIR_GET_STATUS_MSG1": "status (return True or False)",
    "UNIT_IR_INIT_MSG0": "Init",
    "UNIT_IR_SEND_ADDR_MSG0": "send addr",
    "UNIT_IR_SEND_ADDR_MSG1": "(0 ~ 255)",
    "UNIT_IR_SEND_ADDR_MSG2": "data",
    "UNIT_IR_SEND_ADDR_MSG3": "(0 ~ 255)",
    "UNIT_IR_CALLBACK_MSG0": "When",
    "UNIT_IR_CALLBACK_MSG1": "receive data",
    "UNIT_IR_CALLBACK_MSG2": "(0 ~ 255)",
    "UNIT_IR_CALLBACK_MSG3": "addr",
    "UNIT_IR_CALLBACK_MSG4": "(0 ~ 255)",
    "UNIT_DUAL_BUTTON_INIT_MSG0": "Init",
    "UNIT_DUAL_BUTTON_CALLBACK_MSG0": "When",
    "UNIT_DUAL_BUTTON_CALLBACK_MSG1": "was",
    "UNIT_DUAL_BUTTON_TICK_MSG0": "update in loop",
    "UNIT_NCIR_INIT_MSG0": "Init %1",
    "UNIT_NCIR_GET_AMBIENT_TEMPERATURE_MSG0": "get %1 ambient temperature (°C, return float)",
    "UNIT_NCIR_GET_OBJECT_TEMPERATURE_MSG0": "get %1 object temperature (°C, return float)",
    "UNIT_RELAY_INIT_MSG0": "Init %1",
    "UNIT_RELAY_ON_MSG0": "Set %1 on",
    "UNIT_RELAY_OFF_MSG0": "Set %1 off",
    "UNIT_RELAY_SET_STATUS_MSG0": "Set %1 status %2",
    "UNIT_RELAY_GET_VALUE_MSG0": "get %1 status (return True or False)",
    "UNIT_RELAY2_INIT_MSG0": "Init %1",
    "UNIT_RELAY2_GET_STATUS_MSG0": "get %1 relay %2 status (return True or False)",
    "UNIT_RELAY2_SET_CONTROL_MSG0": "Set %1 relay %2 status %3",
    "UNIT_RELAY4_INIT_MSG0": "Init %1 I2C address %2",
    "UNIT_RELAY4_SET_MODE_MSG0": "Set %1 relay mode to %2",
    "UNIT_RELAY4_GET_MODE_MSG0": "get %1 relay mode",
    "UNIT_RELAY4_GET_LED_STATE_MSG0": "get %1 LED %2 state (return True or False)",
    "UNIT_RELAY4_SET_LED_STATE_MSG0": "Set %1 LED %2 state %3",
    "UNIT_RELAY4_GET_RELAY_STATE_MSG0": "get %1 relay %2 state (return True or False)",
    "UNIT_RELAY4_SET_RELAY_STATE_MSG0": "Set %1 relay %2 state %3",
    "UNIT_RELAY4_SET_ALL_RELAY_STATE_MSG0": "Set %1 all relay state %2",
    "UNIT_LIGHT_INIT_MSG0": "Init %1",
    "UNIT_LIGHT_GET_DIGITAL_VALUE_MSG0": "get %1 digital value (return 0 or 1)",
    "UNIT_LIGHT_GET_ANALOG_VALUE_MSG0": "get %1 analog value (return 0~65535)",
    "UNIT_LIGHT_GET_OHM_MSG0": "get %1 ohm (return int)",
    "UNIT_DLIGHT_INIT_MSG0": "Init %1",
    "UNIT_DLIGHT_GET_LUX_MSG0": "get %1 lux (return float)",
    "UNIT_DLIGHT_CONFIGURE_MSG0": "%1 set mode %2 resolution %3",
    "UNIT_CARDKB_INIT_MSG0": "Init",
    "UNIT_CARDKB_GET_KEY_MSG0": "get",
    "UNIT_CARDKB_GET_KEY_MSG1": "key value (return int)",
    "UNIT_CARDKB_GET_STRING_MSG0": "get",
    "UNIT_CARDKB_GET_STRING_MSG1": "key string (return string)",
    "UNIT_CARDKB_IS_PRESSED_MSG0": "has",
    "UNIT_CARDKB_IS_PRESSED_MSG1": "pressed (return True or False)",
    "UNIT_CARDKB_KEYCODE_MSG0": "KeyCode",
    "UNIT_CARDKB_CALLBACK_MSG0": "When keyboard",
    "UNIT_CARDKB_CALLBACK_MSG1": "was pressed",
    "UNIT_CARDKB_TICK_MSG0": "update in loop",
    "UNIT_ENCODER8_INIT_MSG0": "Init",
    "UNIT_ENCODER8_INIT_MSG1": "I2C address",
    "UNIT_ENCODER8_INIT_MSG2": "(0x08 ~ 0x77)",
    "UNIT_ENCODER8_GET_DEVICE_STATUS_MSG0": "get",
    "UNIT_ENCODER8_GET_DEVICE_STATUS_MSG1": "device status",
    "UNIT_ENCODER8_GET_COUNTER_VALUE_MSG0": "get",
    "UNIT_ENCODER8_GET_COUNTER_VALUE_MSG1": "channel",
    "UNIT_ENCODER8_GET_COUNTER_VALUE_MSG2": "counter value",
    "UNIT_ENCODER8_GET_INCREMENT_VALUE_MSG0": "get",
    "UNIT_ENCODER8_GET_INCREMENT_VALUE_MSG1": "channel",
    "UNIT_ENCODER8_GET_INCREMENT_VALUE_MSG2": "increment value",
    "UNIT_ENCODER8_GET_BUTTON_STATUS_MSG0": "get",
    "UNIT_ENCODER8_GET_BUTTON_STATUS_MSG1": "channel",
    "UNIT_ENCODER8_GET_BUTTON_STATUS_MSG2": "button status",
    "UNIT_ENCODER8_GET_SWITCH_STATUS_MSG0": "get",
    "UNIT_ENCODER8_GET_SWITCH_STATUS_MSG1": "switch status",
    "UNIT_ENCODER8_SET_COUNTER_VALUE_MSG0": "Set",
    "UNIT_ENCODER8_SET_COUNTER_VALUE_MSG1": "channel",
    "UNIT_ENCODER8_SET_COUNTER_VALUE_MSG2": "counter value",
    "UNIT_ENCODER8_RESET_COUNTER_VALUE_MSG0": "Reset",
    "UNIT_ENCODER8_RESET_COUNTER_VALUE_MSG1": "channel",
    "UNIT_ENCODER8_RESET_COUNTER_VALUE_MSG2": "counter value",
    "UNIT_ENCODER8_SET_I2C_ADDR_MSG0": "Set",
    "UNIT_ENCODER8_SET_I2C_ADDR_MSG1": "I2C address",
    "UNIT_ENCODER8_SET_I2C_ADDR_MSG2": "(0x08 ~ 0x77)",
    "UNIT_ENCODER8_SET_RGB_LED_MSG0": "Set",
    "UNIT_ENCODER8_SET_RGB_LED_MSG1": "channel",
    "UNIT_ENCODER8_SET_RGB_LED_MSG2": "RGB LED color",
    "UNIT_ENCODER8_SET_RGB_LED_FROM_MSG0": "Set",
    "UNIT_ENCODER8_SET_RGB_LED_FROM_MSG1": "channel from",
    "UNIT_ENCODER8_SET_RGB_LED_FROM_MSG2": "to",
    "UNIT_ENCODER8_SET_RGB_LED_FROM_MSG3": "LED color",
    "UNIT_LORAWAN470_INIT_MSG0": "Init %1 UART %2",
    "UNIT_LORAWAN470_GET_ABP_CONFIG_MSG0": "get",
    "UNIT_LORAWAN470_GET_ABP_CONFIG_MSG1": "ABP config (return tuple)",
    "UNIT_LORAWAN470_GET_OTAA_CONFIG_MSG0": "get",
    "UNIT_LORAWAN470_GET_OTAA_CONFIG_MSG1": "OTAA config (return tuple)",
    "UNIT_LORAWAN470_CHECK_JOIN_STATUS_MSG0": "check",
    "UNIT_LORAWAN470_CHECK_JOIN_STATUS_MSG1": "join status",
    "UNIT_LORAWAN470_CHECK_UPLINK_STATUS_MSG0": "check",
    "UNIT_LORAWAN470_CHECK_UPLINK_STATUS_MSG1": "uplink data status",
    "UNIT_LORAWAN470_CHECK_DOWNLINK_DATA_MSG0": "check and receive",
    "UNIT_LORAWAN470_CHECK_DOWNLINK_DATA_MSG1": "downlink data",
    "UNIT_LORAWAN470_SET_UART_PORT_MSG0": "Set",
    "UNIT_LORAWAN470_SET_UART_PORT_MSG1": "core uart ID num",
    "UNIT_LORAWAN470_SET_JOIN_MODE_MSG0": "Set",
    "UNIT_LORAWAN470_SET_JOIN_MODE_MSG1": "join mode",
    "UNIT_LORAWAN470_STOP_JOIN_NETWORK_MSG0": "Stop",
    "UNIT_LORAWAN470_STOP_JOIN_NETWORK_MSG1": "join LoRaWAN network",
    "UNIT_LORAWAN470_SET_UPLINK_PORT_MSG0": "Set",
    "UNIT_LORAWAN470_SET_UPLINK_PORT_MSG1": "uplink app port",
    "UNIT_LORAWAN470_SET_UPLINK_PORT_MSG2": "(1 ~ 233)",
    "UNIT_LORAWAN470_CONFIG_MSG0": "Config",
    "UNIT_LORAWAN470_CONFIG_MSG1": "frequency band mask",
    "UNIT_LORAWAN470_CONFIG_MSG2": "RX window param: ",
    "UNIT_LORAWAN470_CONFIG_MSG3": "RX1 offset",
    "UNIT_LORAWAN470_CONFIG_MSG4": "RX2 datarate",
    "UNIT_LORAWAN470_CONFIG_MSG5": "RX2 FREQ(Hz)",
    "UNIT_LORAWAN470_CONFIG_MSG6": "class mode",
    "UNIT_LORAWAN470_CONFIG_MSG7": "uplink downlink",
    "UNIT_LORAWAN470_START_JOIN_NETWORK_MSG0": "Start",
    "UNIT_LORAWAN470_START_JOIN_NETWORK_MSG1": "join LoRaWAN network",
    "UNIT_LORAWAN470_START_JOIN_NETWORK_MSG2": "period (seconds) (7 ~ 255)",
    "UNIT_LORAWAN470_START_JOIN_NETWORK_MSG3": "maximum number of attempts (1 ~ 256)",
    "UNIT_LORAWAN470_CONFIG_MODE_MSG0": "config",
    "UNIT_LORAWAN470_SEND_DATA_PAYLOAD_MSG0": "send data payload",
    "UNIT_LORAWANCN470_INIT_MSG0": "Init %1 UART %2",
    "UNIT_LORAWANCN470_GET_ABP_CONFIG_MSG0": "get %1 ABP config (return tuple)",
    "UNIT_LORAWANCN470_GET_OTAA_CONFIG_MSG0": "get %1 OTAA config (return tuple)",
    "UNIT_LORAWANCN470_GET_JOIN_STATE_MSG0": "check %1 join status",
    "UNIT_LORAWANCN470_SET_JOIN_MODE_MSG0": "Set %1 join mode %2",
    "UNIT_LORAWANCN470_CONFIG_MSG0": "Config %1 %2 frequency band mask %3 RX window param: %4 RX1 delay (1~15) %5 RX2 delay (2~16) %6 RX2 datarate %7 class mode %8",
    "UNIT_LORAWANCN470_START_JOIN_NETWORK_MSG0": "Start %1 join LoRaWAN network",
    "UNIT_LORAWANCN470_START_JOIN_NETWORK_RETURN_MSG0": "Start %1 join LoRaWAN network, wait %2 ms for response",
    "UNIT_LORAWANCN470_JOIN_MSG0": "Start %1 join LoRaWAN network %2 %3 %4 reattempt interval (seconds) (7 ~ 255) %5 maximum number of attempts (0 ~ 255) %6 wait (ms) %7",
    "UNIT_LORAWANCN470_CONFIG_MODE_MSG0": "config",
    "UNIT_LORAWANCN470_SEND_DATA_PAYLOAD_MSG0": "%1 send data %2 on port %3 (1 ~ 233)",
    "UNIT_LORAWANCN470_SEND_DATA_PAYLOAD_RETURN_MSG0": "%1 send data %2 on port %3 (1 ~ 233) wait %4 ms to confirm",
    "UNIT_LORAWANCN470_SET_NETWORK_MODE_MSG0": "Set %1 network mode to %2",
    "UNIT_LORAWANCN470_GET_LAST_RECEIVE_MSG0": "get %1 last received data (return tuple, [port, payload])",
    "UNIT_LORAWANCN470_GET_P2P_FREQUENCY_MSG0": "get %1 P2P mode frequency",
    "UNIT_LORAWANCN470_SET_P2P_FREQUENCY_MSG0": "Set %1 P2P mode frequency to %2",
    "UNIT_LORAWANCN470_GET_P2P_SPREADING_FACTOR_MSG0": "get %1 P2P mode spreading factor",
    "UNIT_LORAWANCN470_SET_P2P_SPREADING_FACTOR_MSG0": "Set %1 P2P mode spreading factor to %2 (5 ~ 12)",
    "UNIT_LORAWANCN470_GET_P2P_BANDWIDTH_MSG0": "get %1 P2P mode bandwidth",
    "UNIT_LORAWANCN470_SET_P2P_LORA_BANDWIDTH_MSG0": "Set %1 P2P LORA mode bandwidth to %2",
    "UNIT_LORAWANCN470_SET_P2P_FSK_BANDWIDTH_MSG0": "Set %1 P2P FSK mode bandwidth to %2 (4800 ~ 467000)",
    "UNIT_LORAWANCN470_GET_P2P_TX_POWER_MSG0": "get %1 P2P mode tx power",
    "UNIT_LORAWANCN470_SET_P2P_TX_POWER_MSG0": "Set %1 P2P mode tx power to %2 (5 ~ 22)",
    "UNIT_LORAWANCN470_GET_P2P_FSK_BITRATE_MSG0": "get %1 P2P mode FSK bitrate",
    "UNIT_LORAWANCN470_SET_P2P_FSK_BITRATE_MSG0": "Set %1 P2P mode FSK bitrate to %2 (600 ~ 300000)",
    "UNIT_LORAWANCN470_SEND_P2P_DATA_MSG0": "Send %1 P2P data %2 , convert to hex %3",
    "UNIT_LORAWANCN470_SEND_P2P_DATA_RETURN_MSG0": "Send %1 P2P data %2 wait %3 ms to get send result, convert to hex %4",
    "UNIT_LORAWANCN470_GET_P2P_RECEIVE_DATA_MSG0": "get %1 P2P mode receive data in %2 ms, convert to hex %3 (return tuple)",
    "UNIT_LORAWANCN470_GET_P2P_SYNC_WORD_MSG0": "get %1 P2P mode sync word",
    "UNIT_LORAWANCN470_SET_P2P_SYNC_WORD_MSG0": "Set %1 P2P mode sync word to %2 (0x0000 ~ 0xffff)",
    "UNIT_LORAWANCN470_RESET_MODULE_TO_DEFAULT_MSG0": "Restore %1 to default parameters",
    "UNIT_LORAWANCN470_GET_P2P_CODE_RATE_MSG0": "get %1 P2P mode code rate",
    "UNIT_LORAWANCN470_SET_P2P_CODE_RATE_MSG0": "Set %1 P2P mode code rate to %2",
    "UNIT_LORAWANCN470_GET_P2P_PREAMBLE_LENGTH_MSG0": "get %1 P2P mode preamble length",
    "UNIT_LORAWANCN470_SET_P2P_PREAMBLE_LENGTH_MSG0": "Set %1 P2P mode preamble length to %2",
    "UNIT_LORAWANEU868_CONFIG_MSG0": "Config %1 %2 RX window param: %3 RX1 delay (1~15) %4 RX2 delay (2~16) %5 RX2 datarate %6 class mode %7",
    "UNIT_GPS_INIT_MSG0": "Init %1 UART %2",
    "UNIT_GPS_GET_TIME_MSG0": "get",
    "UNIT_GPS_GET_TIME_MSG1": "time (string)",
    "UNIT_GPS_GET_DATE_MSG0": "get",
    "UNIT_GPS_GET_DATE_MSG1": "date (string)",
    "UNIT_GPS_GET_LATITUDE_MSG0": "get",
    "UNIT_GPS_GET_LATITUDE_MSG1": "latitude (string: ddmm.mmmmm<W/E>)",
    "UNIT_GPS_GET_LONGITUDE_MSG0": "get",
    "UNIT_GPS_GET_LONGITUDE_MSG1": "longitude (string: dddmm.mmmmm<S/N>)",
    "UNIT_GPS_GET_ALTITUDE_MSG0": "get",
    "UNIT_GPS_GET_ALTITUDE_MSG1": "altitude (string: meter)",
    "UNIT_GPS_GET_LATITUDE_DECIMAL_MSG0": "get",
    "UNIT_GPS_GET_LATITUDE_DECIMAL_MSG1": "latitude decimal (float:dd.dddd)",
    "UNIT_GPS_GET_LONGITUDE_DECIMAL_MSG0": "get",
    "UNIT_GPS_GET_LONGITUDE_DECIMAL_MSG1": "longitude decimal (float:dd.dddd)",
    "UNIT_GPS_GET_SATELLITE_NUM_MSG0": "get",
    "UNIT_GPS_GET_SATELLITE_NUM_MSG1": "satellite num (string)",
    "UNIT_GPS_GET_POSITIONING_QUALITY_MSG0": "get",
    "UNIT_GPS_GET_POSITIONING_QUALITY_MSG1": "positioning quality (string)",
    "UNIT_GPS_GET_SPEED_MSG0": "get",
    "UNIT_GPS_GET_SPEED_MSG1": "speed",
    "UNIT_GPS_GET_SPEED_MSG2": "(string)",
    "UNIT_GPS_GET_COURSE_MSG0": "get",
    "UNIT_GPS_GET_COURSE_MSG1": "course (string)",
    "UNIT_GPS_SET_UART_ID_MSG0": "Set",
    "UNIT_GPS_SET_UART_ID_MSG1": "core UART id num",
    "UNIT_GPS_SET_TIME_ZONE_MSG0": "Set",
    "UNIT_GPS_SET_TIME_ZONE_MSG1": "time zone",
    "UNIT_GPSV11_INIT_MSG0": "Init %1 UART %2",
    "UNIT_GPSV11_DEINIT_MSG0": "%1 deinit",
    "UNIT_GPSV11_GET_ANTENNA_STATE_MSG0": "get %1 antenna state (return string)",
    "UNIT_GPSV11_GET_GPS_TIME_MSG0": "get %1 local time (return list [hour, min, second])",
    "UNIT_GPSV11_GET_GPS_DATE_MSG0": "get %1 date (return list [yyyy, mm, dd])",
    "UNIT_GPSV11_GET_GPS_DATE_TIME_MSG0": "get %1 date and local time (return list [yyyy, mm, dd, hour, min, second])",
    "UNIT_GPSV11_GET_TIMESTAMP_MSG0": "get %1 timestamp (return int)",
    "UNIT_GPSV11_GET_LATITUDE_MSG0": "get %1 latitude (return string)",
    "UNIT_GPSV11_GET_LONGITUDE_MSG0": "get %1 longitude (return string)",
    "UNIT_GPSV11_GET_ALTITUDE_MSG0": "get %1 altitude (return string)",
    "UNIT_GPSV11_GET_SATELLITE_NUM_MSG0": "get %1 satellite number (return int)",
    "UNIT_GPSV11_GET_POS_QUALITY_MSG0": "get %1 position quality (return int)",
    "UNIT_GPSV11_GET_CORSE_OVER_GROUND_MSG0": "get %1 course over ground degree (return string)",
    "UNIT_GPSV11_GET_SPEED_OVER_GROUND_MSG0": "get %1 speed over ground knot (return string)",
    "UNIT_GPSV11_GET_WORK_MODE_MSG0": "get %1 work mode (return int)",
    "UNIT_GPSV11_SET_WORK_MODE_MSG0": "Set %1 work mode to %2",
    "UNIT_GPSV11_GET_TIME_ZONE_MSG0": "get %1 current time zone offset (return int)",
    "UNIT_GPSV11_SET_TIME_ZONE_MSG0": "Set %1 time zone offset to %2",
    "UNIT_GPSSMA_INIT_MSG0": "Init %1 UART %2",
    "UNIT_GPSSMA_DEINIT_MSG0": "%1 deinit",
    "UNIT_GPSSMA_GET_ANTENNA_STATE_MSG0": "get %1 antenna state (return string)",
    "UNIT_GPSSMA_GET_GPS_TIME_MSG0": "get %1 local time (return list [hour, min, second])",
    "UNIT_GPSSMA_GET_GPS_DATE_MSG0": "get %1 date (return list [yyyy, mm, dd])",
    "UNIT_GPSSMA_GET_GPS_DATE_TIME_MSG0": "get %1 date and local time (return list [yyyy, mm, dd, hour, min, second])",
    "UNIT_GPSSMA_GET_TIMESTAMP_MSG0": "get %1 timestamp (return int)",
    "UNIT_GPSSMA_GET_LATITUDE_MSG0": "get %1 latitude (return string)",
    "UNIT_GPSSMA_GET_LONGITUDE_MSG0": "get %1 longitude (return string)",
    "UNIT_GPSSMA_GET_ALTITUDE_MSG0": "get %1 altitude (return string)",
    "UNIT_GPSSMA_GET_SATELLITE_NUM_MSG0": "get %1 satellite number (return int)",
    "UNIT_GPSSMA_GET_POS_QUALITY_MSG0": "get %1 position quality (return int)",
    "UNIT_GPSSMA_GET_CORSE_OVER_GROUND_MSG0": "get %1 course over ground degree (return string)",
    "UNIT_GPSSMA_GET_SPEED_OVER_GROUND_MSG0": "get %1 speed over ground knot (return string)",
    "UNIT_GPSSMA_GET_WORK_MODE_MSG0": "get %1 work mode (return int)",
    "UNIT_GPSSMA_SET_WORK_MODE_MSG0": "Set %1 work mode to %2",
    "UNIT_GPSSMA_GET_TIME_ZONE_MSG0": "get %1 current time zone offset (return int)",
    "UNIT_GPSSMA_SET_TIME_ZONE_MSG0": "Set %1 time zone offset to %2",
    "UNIT_HBRIDGE_INIT_MSG0": "Init",
    "UNIT_HBRIDGE_INIT_MSG1": "I2C address",
    "UNIT_HBRIDGE_INIT_MSG2": "(0x20 ~ 0x2f)",
    "UNIT_HBRIDGE_GET_CONFIGURE_VALUE_MSG0": "get",
    "UNIT_HBRIDGE_GET_CONFIGURE_VALUE_MSG1": "configure value",
    "UNIT_HBRIDGE_GET_ADC_VALUE_MSG0": "get",
    "UNIT_HBRIDGE_GET_ADC_VALUE_MSG1": "value resolution",
    "UNIT_HBRIDGE_GET_FW_VERSION_MSG0": "get",
    "UNIT_HBRIDGE_GET_FW_VERSION_MSG1": "firmware version",
    "UNIT_HBRIDGE_SET_DIRECTION_MSG0": "Set",
    "UNIT_HBRIDGE_SET_DIRECTION_MSG1": "direction",
    "UNIT_HBRIDGE_SET_8BIT_PWM_MSG0": "Set",
    "UNIT_HBRIDGE_SET_8BIT_PWM_MSG1": "PWM duty cycle 8bit value",
    "UNIT_HBRIDGE_SET_8BIT_PWM_MSG2": "(0 ~ 255)",
    "UNIT_HBRIDGE_SET_16BIT_PWM_MSG0": "Set",
    "UNIT_HBRIDGE_SET_16BIT_PWM_MSG1": "PWM duty cycle 16bit value",
    "UNIT_HBRIDGE_SET_16BIT_PWM_MSG2": "(0 ~ 65535)",
    "UNIT_HBRIDGE_SET_PWM_FREQ_MSG0": "Set",
    "UNIT_HBRIDGE_SET_PWM_FREQ_MSG1": "PWM frequency",
    "UNIT_HBRIDGE_SET_PWM_FREQ_MSG2": "(100 ~ 10000)",
    "UNIT_HBRIDGE_GET_VIN_CURRENT_MSG0": "get",
    "UNIT_HBRIDGE_GET_VIN_CURRENT_MSG1": "vin current (float) in amps",
    "UNIT_HBRIDGE_SET_PERCENTAGE_PWM_MSG0": "Set",
    "UNIT_HBRIDGE_SET_PERCENTAGE_PWM_MSG1": "PWM duty cycle",
    "UNIT_HBRIDGE_SET_PERCENTAGE_PWM_MSG2": "(%)  resolution",
    "UNIT_PBHUB_INIT_MSG0": "Init %1 I2C address %2",
    "UNIT_PBHUB_DIGITAL_READ_MSG0": "%1 get digital value CH %2 IO %3 (return 0 or 1)",
    "UNIT_PBHUB_ANALOG_READ_MSG0": "%1 get analog value CH %2",
    "UNIT_PBHUB_DIGITAL_WRITE_MSG0": "%1 set digital value CH %2 IO %3 value %4 (0 ~ 1)",
    "UNIT_PBHUB_SET_RGB_LED_MSG0": "%1 RGB pixel LED CH %2 total LED %3",
    "UNIT_PBHUB_SET_RGB_LED_COLOR_MSG0": "%1 RGB pixel LED CH %2 LED num %3 color %4",
    "UNIT_PBHUB_SET_RGB_LED_BEGIN_COLOR_MSG0": "%1 RGB pixel LED CH %2 begin %3 number %4 color %5",
    "UNIT_PBHUB_SET_RGB_LED_BRIGHTNESS_MSG0": "%1 RGB pixel LED CH %2 brightness %3 (0 ~ 100)",
    "UNIT_PBHUB_SET_I2C_ADDRESS_MSG0": "Set %1 I2C address %2",
    "UNIT_PBHUB_SERVO_ANGLE_MSG0": "%1 servo CH %2 IO %3 angle %4 (0 ~ 180)",
    "UNIT_PBHUB_SERVO_PULSE_MSG0": "%1 servo CH %2 IO %3 pulse %4 (500 ~ 2500)",
    "UNIT_PBHUB_PWM_WRITE_MSG0": "%1 set PWM write CH %2 IO %3 duty cycle %4 %",
    "UNIT_PBHUB_PWM_READ_MSG0": "%1 get PWM duty cycle CH %2 IO %3(return 0 ~ 100%)",
    "UNIT_PBHUB_READ_STATUS_MSG0": "%1 get device information %2",
    "UNIT_PBHUB_GET_RGB_MODE_MSG0": "get %1 RGB pixel LED mode (return int)",
    "UNIT_PBHUB_SET_RGB_MODE_MSG0": "%1 set RGB pixel LED mode to %2",
    "UNIT_UWB_INIT_MSG0": "Init %1 UART %2 as %3 with ID",
    "UNIT_UWB_INIT_MSG1": "(0 ~ 3)",
    "UNIT_UWB_INIT_MSG2": "verbose",
    "UNIT_UWB_SET_UART_ID_MSG0": "Set",
    "UNIT_UWB_SET_UART_ID_MSG1": "core uart ID num",
    "UNIT_UWB_SET_UART_ID_MSG2": "(1 ~ 2)",
    "UNIT_UWB_SET_TAG_MODE_MSG0": "Set",
    "UNIT_UWB_SET_TAG_MODE_MSG1": "to tag mode",
    "UNIT_UWB_SET_MEASURING_INTERVAL_MSG0": "Set",
    "UNIT_UWB_SET_MEASURING_INTERVAL_MSG1": "range interval",
    "UNIT_UWB_SET_MEASURING_INTERVAL_MSG2": "(5 ~ 50) times before value output",
    "UNIT_UWB_MEASUREMENT_CONTINUOUS_MSG0": "continuous value output",
    "UNIT_UWB_SET_ANCHOR_MODE_MSG0": "Set",
    "UNIT_UWB_SET_ANCHOR_MODE_MSG1": "to anchor mode with ID",
    "UNIT_UWB_SET_ANCHOR_MODE_MSG2": "(0 ~ 3)",
    "UNIT_UWB_CHECK_DEVICE_MSG0": "check",
    "UNIT_UWB_CHECK_DEVICE_MSG1": "device available (return True or False)",
    "UNIT_UWB_GET_VERSION_MSG0": "get",
    "UNIT_UWB_GET_VERSION_MSG1": "firmware version (return string)",
    "UNIT_UWB_GET_DISTANCE_MEASURE_MSG0": "get",
    "UNIT_UWB_GET_DISTANCE_MEASURE_MSG1": "distance (in Meter) to anchor ID",
    "UNIT_UWB_GET_DISTANCE_MEASURE_MSG2": "(0 ~ 3) (return float)",
    "UNIT_UWB_UPDATED_MEASURED_MSG0": "updated new distance value (in use loop)",
    "UNIT_UWB_RESET_MSG0": "Device reset",
    "UNIT_UWB_START_MEASURING_MSG0": "start measuring",
    "UNIT_UWB_STOP_MEASURING_MSG0": "stop measuring",
    "UNIT_UWB_GET_MEASURING_DATA_LIST_MSG0": "get",
    "UNIT_UWB_GET_MEASURING_DATA_LIST_MSG1": "measuring data list (return list)",
    "UNIT_UWB_GET_MEASURING_DATA_LIST_NUM_MSG0": "get",
    "UNIT_UWB_GET_MEASURING_DATA_LIST_NUM_MSG1": "measuring data list",
    "UNIT_UWB_GET_MEASURING_DATA_LIST_NUM_MSG2": "(return string)",
    "UNIT_UWB_GET_DEVICE_ID_MSG0": "get %1 device ID (return int)",
    "UNIT_UWB_GET_DEVICE_MODE_MSG0": "get %1 device mode (return int)",
    "UNIT_UWB_ISCONNECTED_MSG0": "check %1 is connected (return True or False)",
    "UNIT_UWB_SET_DEVICE_MODE_MSG0": "Set %1 as %2 with ID %3",
    "UNIT_UWB_GET_DISTANCE_MSG0": "get %1 distance to anchor ID %2 (0 ~ 3) (meters, return float)",
    "UNIT_UWB_SET_MEASUREMENT_MSG0": "Set %1 measurement output %2",
    "UNIT_UWB_TICK_MSG0": "%1 update in loop",
    "UNIT_UWB_CALLBACK_MSG0": "When %1 anchor ID %2 (0 ~ 3) %3",
    "UNIT_AC_MEASURE_INIT_MSG0": "Init",
    "UNIT_AC_MEASURE_INIT_MSG1": "I2C address",
    "UNIT_AC_MEASURE_INIT_MSG2": "(0x08 ~ 0x77)",
    "UNIT_AC_MEASURE_IS_READY_MSG0": "is data ready (return True or False)",
    "UNIT_AC_MEASURE_GET_VOLTAGE_MSG0": "get",
    "UNIT_AC_MEASURE_GET_VOLTAGE_MSG1": "voltage (in volts) (return string)",
    "UNIT_AC_MEASURE_GET_CURRENT_MSG0": "get",
    "UNIT_AC_MEASURE_GET_CURRENT_MSG1": "current (in Amps) (return string)",
    "UNIT_AC_MEASURE_GET_ACTIVE_POWER_MSG0": "get",
    "UNIT_AC_MEASURE_GET_ACTIVE_POWER_MSG1": "active power (in Watts) (return string)",
    "UNIT_AC_MEASURE_GET_POWER_FACTOR_MSG0": "get",
    "UNIT_AC_MEASURE_GET_POWER_FACTOR_MSG1": "power factor (return string)",
    "UNIT_AC_MEASURE_GET_APPARENT_POWER_MSG0": "get",
    "UNIT_AC_MEASURE_GET_APPARENT_POWER_MSG1": "apparent power (in VA) (return string)",
    "UNIT_AC_MEASURE_GET_KWH_MSG0": "get",
    "UNIT_AC_MEASURE_GET_KWH_MSG1": "KW/H (return string)",
    "UNIT_AC_MEASURE_GET_VOLTAGE_RAW_MSG0": "get",
    "UNIT_AC_MEASURE_GET_VOLTAGE_RAW_MSG1": "voltage × 100 (in Volts) (return int)",
    "UNIT_AC_MEASURE_GET_CURRENT_RAW_MSG0": "get",
    "UNIT_AC_MEASURE_GET_CURRENT_RAW_MSG1": "current × 100 (in Amps) (return int)",
    "UNIT_AC_MEASURE_GET_ACTIVE_POWER_RAW_MSG0": "get",
    "UNIT_AC_MEASURE_GET_ACTIVE_POWER_RAW_MSG1": "active power × 100 (in Watts) (return int)",
    "UNIT_AC_MEASURE_GET_APPARENT_POWER_RAW_MSG0": "get",
    "UNIT_AC_MEASURE_GET_APPARENT_POWER_RAW_MSG1": "apparent power × 100 (in VA) (return int)",
    "UNIT_AC_MEASURE_GET_POWER_FACTOR_RAW_MSG0": "get",
    "UNIT_AC_MEASURE_GET_POWER_FACTOR_RAW_MSG1": "power factor × 100 (return int)",
    "UNIT_AC_MEASURE_GET_KWH_RAW_MSG0": "get",
    "UNIT_AC_MEASURE_GET_KWH_RAW_MSG1": "KW/H × 100 (return int)",
    "UNIT_AC_MEASURE_GET_VOLTAGE_COEFFICIENT_MSG0": "get",
    "UNIT_AC_MEASURE_GET_VOLTAGE_COEFFICIENT_MSG1": "voltage coefficient (return int)",
    "UNIT_AC_MEASURE_GET_CURRENT_COEFFICIENT_MSG0": "get",
    "UNIT_AC_MEASURE_GET_CURRENT_COEFFICIENT_MSG1": "current coefficient (return int)",
    "UNIT_AC_MEASURE_GET_FW_VERSION_MSG0": "get",
    "UNIT_AC_MEASURE_GET_FW_VERSION_MSG1": "firmware version (return string)",
    "UNIT_AC_MEASURE_SET_VOLTAGE_COEFFICIENT_MSG0": "Set",
    "UNIT_AC_MEASURE_SET_VOLTAGE_COEFFICIENT_MSG1": "voltage coefficient",
    "UNIT_AC_MEASURE_SET_VOLTAGE_COEFFICIENT_MSG2": "(0 ~ 255)",
    "UNIT_AC_MEASURE_SET_CURRENT_COEFFICIENT_MSG0": "Set",
    "UNIT_AC_MEASURE_SET_CURRENT_COEFFICIENT_MSG1": "current coefficient",
    "UNIT_AC_MEASURE_SET_CURRENT_COEFFICIENT_MSG2": "(0 ~ 255)",
    "UNIT_AC_MEASURE_SAVE_COEFFICIENT_MSG0": "save voltage and current coefficient in flash",
    "UNIT_AC_MEASURE_SET_ADDRESS_MSG0": "Set",
    "UNIT_AC_MEASURE_SET_ADDRESS_MSG1": "I2C address",
    "UNIT_AC_MEASURE_SET_ADDRESS_MSG2": "(0x08 ~ 0x77)",
    "UNIT_RS485_INIT_MSG0": "Init %1 UART %2",
    "UNIT_RS485_CONFIGURE_MSG0": "Configure",
    "UNIT_RS485_CONFIGURE_MSG1": "UART",
    "UNIT_RS485_CONFIGURE_MSG2": "baudrate",
    "UNIT_RS485_CONFIGURE_MSG3": "data bits",
    "UNIT_RS485_CONFIGURE_MSG4": "stop bits",
    "UNIT_RS485_CONFIGURE_MSG5": "parity",
    "UNIT_RS485_CONFIGURE_MSG6": "TX pin",
    "UNIT_RS485_CONFIGURE_MSG7": "RX pin",
    "UNIT_RS485_CONFIGURE_MSG8": "ctrl pin",
    "UNIT_RS485_READ_ALL_BYTES_MSG0": "read all bytes (return bytes)",
    "UNIT_RS485_READ_BYTES_MSG0": "read",
    "UNIT_RS485_READ_BYTES_MSG1": "bytes (return bytes)",
    "UNIT_RS485_READ_LINE_MSG0": "read line (return bytes)",
    "UNIT_RS485_REMAIN_CACHE_MSG0": "number of bytes available",
    "UNIT_RS485_WRITE_MSG0": "write",
    "UNIT_RS485_WRITE_LINE_MSG0": "write a line",
    "UNIT_RS485_WRITE_LIST_BYTES_MSG0": "write list of bytes",
    "UNIT_RS485_READ_COILS_MSG0": "read coils (0x01)",
    "UNIT_RS485_READ_COILS_MSG1": "slave address (0 ~ 247)",
    "UNIT_RS485_READ_COILS_MSG2": "starting address (0 ~ 9999)",
    "UNIT_RS485_READ_COILS_MSG3": "coil quantity",
    "UNIT_RS485_READ_COILS_MSG4": "timeout",
    "UNIT_RS485_READ_COILS_MSG5": "(return list)",
    "UNIT_RS485_READ_DISCRETE_INPUTS_MSG0": "read discrete inputs (0x02)",
    "UNIT_RS485_READ_DISCRETE_INPUTS_MSG1": "slave address (0 ~ 247)",
    "UNIT_RS485_READ_DISCRETE_INPUTS_MSG2": "starting address (0 ~ 9999)",
    "UNIT_RS485_READ_DISCRETE_INPUTS_MSG3": "input quantity",
    "UNIT_RS485_READ_DISCRETE_INPUTS_MSG4": "timeout",
    "UNIT_RS485_READ_DISCRETE_INPUTS_MSG5": "(return list)",
    "UNIT_RS485_READ_HOLDING_REGISTERS_MSG0": "read holding registers (0x03)",
    "UNIT_RS485_READ_HOLDING_REGISTERS_MSG1": "slave address (0 ~ 247)",
    "UNIT_RS485_READ_HOLDING_REGISTERS_MSG2": "starting address (0 ~ 9999)",
    "UNIT_RS485_READ_HOLDING_REGISTERS_MSG3": "register quantity",
    "UNIT_RS485_READ_HOLDING_REGISTERS_MSG4": "signed",
    "UNIT_RS485_READ_HOLDING_REGISTERS_MSG5": "timeout",
    "UNIT_RS485_READ_HOLDING_REGISTERS_MSG6": "(return list)",
    "UNIT_RS485_READ_INPUT_REGISTERS_MSG0": "read input registers (0x04)",
    "UNIT_RS485_READ_INPUT_REGISTERS_MSG1": "slave address (0 ~ 247)",
    "UNIT_RS485_READ_INPUT_REGISTERS_MSG2": "starting address (0 ~ 9999)",
    "UNIT_RS485_READ_INPUT_REGISTERS_MSG3": "register quantity",
    "UNIT_RS485_READ_INPUT_REGISTERS_MSG4": "signed",
    "UNIT_RS485_READ_INPUT_REGISTERS_MSG5": "timeout",
    "UNIT_RS485_READ_INPUT_REGISTERS_MSG6": "(return list)",
    "UNIT_RS485_WRITE_SINGLE_COIL_MSG0": "write single coil (0x05)",
    "UNIT_RS485_WRITE_SINGLE_COIL_MSG1": "slave address (0 ~ 247)",
    "UNIT_RS485_WRITE_SINGLE_COIL_MSG2": "output address (0 ~ 9999)",
    "UNIT_RS485_WRITE_SINGLE_COIL_MSG3": "output",
    "UNIT_RS485_WRITE_SINGLE_COIL_MSG4": "timeout",
    "UNIT_RS485_WRITE_SINGLE_REGISTER_MSG0": "write single register (0x06)",
    "UNIT_RS485_WRITE_SINGLE_REGISTER_MSG1": "slave address (0 ~ 247)",
    "UNIT_RS485_WRITE_SINGLE_REGISTER_MSG2": "register address (0 ~ 9999)",
    "UNIT_RS485_WRITE_SINGLE_REGISTER_MSG3": "register value",
    "UNIT_RS485_WRITE_SINGLE_REGISTER_MSG4": "signed",
    "UNIT_RS485_WRITE_SINGLE_REGISTER_MSG5": "timeout",
    "UNIT_RS485_WRITE_MULTIPLE_COILS_MSG0": "write multiple coils (0x0F)",
    "UNIT_RS485_WRITE_MULTIPLE_COILS_MSG1": "slave address (0 ~ 247)",
    "UNIT_RS485_WRITE_MULTIPLE_COILS_MSG2": "starting address (0 ~ 9999)",
    "UNIT_RS485_WRITE_MULTIPLE_COILS_MSG3": "output value",
    "UNIT_RS485_WRITE_MULTIPLE_COILS_MSG4": "timeout",
    "UNIT_RS485_WRITE_MULTIPLE_REGISTER_MSG0": "write multiple register (0x10)",
    "UNIT_RS485_WRITE_MULTIPLE_REGISTER_MSG1": "slave address (0 ~ 247)",
    "UNIT_RS485_WRITE_MULTIPLE_REGISTER_MSG2": "starting address (0 ~ 9999)",
    "UNIT_RS485_WRITE_MULTIPLE_REGISTER_MSG3": "register value",
    "UNIT_RS485_WRITE_MULTIPLE_REGISTER_MSG4": "signed",
    "UNIT_RS485_WRITE_MULTIPLE_REGISTER_MSG5": "timeout",
    "UNIT_RS485_READ_INTO_BUF_MSG0": "%1 read into buf %2",
    "UNIT_RS485_SEND_BREAK_MSG0": "%1 send break single",
    "UNIT_RS485_FLUSH_MSG0": "%1 flush",
    "UNIT_RS485_TXDONE_MSG0": "%1 is transfer done (return True or False)",
    "UNIT_RS485_INIT_2_MSG0": "Init %1 with %2 UART %3 baudrate %4 bits %5 parity %6 stop %7",
    "UNIT_RS485_SETUP_MSG0": "%1 setup %2 baudrate %3 bits %4 parity %5 stop %6",
    "UNIT_RS485_DEINIT_MSG0": "%1 deinit",
    "UNIT_ULTRASONIC_INIT_MSG0": "Init",
    "UNIT_ULTRASONIC_GET_DISTANCE_MSG0": "get",
    "UNIT_ULTRASONIC_GET_DISTANCE_MSG1": "target distance",
    "UNIT_ULTRASONIC_GET_DISTANCE_MSG2": "(return float)",
    "UNIT_SONIC_IO_INIT_MSG0": "Init",
    "UNIT_SONIC_IO_GET_DISTANCE_MSG0": "get",
    "UNIT_SONIC_IO_GET_DISTANCE_MSG1": "target distance",
    "UNIT_SONIC_IO_GET_DISTANCE_MSG2": "(return float)",
    "UNIT_LIMIT_INIT_MSG0": "Init",
    "UNIT_LIMIT_INIT_MSG1": "active low",
    "UNIT_LIMIT_INIT_MSG2": "type",
    "UNIT_LIMIT_CALLBACK_MSG0": "When",
    "UNIT_LIMIT_CALLBACK_MSG1": "was",
    "UNIT_LIMIT_TICK_MSG0": "update in loop",
    "UNIT_LIMIT_GET_COUNTER_VALUE_MSG0": "get",
    "UNIT_LIMIT_GET_COUNTER_VALUE_MSG1": "counter value (return int)",
    "UNIT_LIMIT_RESET_COUNTER_VALUE_MSG0": "Reset",
    "UNIT_LIMIT_RESET_COUNTER_VALUE_MSG1": "counter value",
    "UNIT_OP_INIT_MSG0": "Init",
    "UNIT_OP_INIT_MSG1": "active low",
    "UNIT_OP_INIT_MSG2": "type",
    "UNIT_OP_GET_SWITCH_VALUE_MSG0": "get",
    "UNIT_OP_GET_SWITCH_VALUE_MSG1": "switch value (return 0 ~ 1)",
    "UNIT_OP_GET_COUNTER_VALUE_MSG0": "get",
    "UNIT_OP_GET_COUNTER_VALUE_MSG1": "counter value (return int)",
    "UNIT_OP_RESET_COUNTER_VALUE_MSG0": "Reset",
    "UNIT_OP_RESET_COUNTER_VALUE_MSG1": "counter value",
    "UNIT_OP_CALLBACK_MSG0": "When",
    "UNIT_OP_CALLBACK_MSG1": "was",
    "UNIT_OP_BUTTON_TICK_MSG0": "update in loop",
    "UNIT_RFID_INIT_MSG0": "Init",
    "UNIT_RFID_IS_NEW_CARD_PRESENT_MSG0": "is new card present (return True or False)",
    "UNIT_RFID_READ_CARD_UID_MSG0": "read card uid (return bytearray)",
    "UNIT_RFID_READ_MSG0": "read from addr",
    "UNIT_RFID_READ_MSG1": "(return bytearray)",
    "UNIT_RFID_WRITE_MSG0": "write buffer",
    "UNIT_RFID_WRITE_MSG1": "to addr",
    "UNIT_RFID_WRITE_RETURN_MSG0": "write buffer",
    "UNIT_RFID_WRITE_RETURN_MSG1": "to addr",
    "UNIT_RFID_WRITE_RETURN_MSG2": "(return int)",
    "UNIT_RFID_CLOSE_MSG0": "close",
    "UNIT_WEIGHT_INIT_MSG0": "Init",
    "UNIT_WEIGHT_GET_RAW_VALUE_MSG0": "get",
    "UNIT_WEIGHT_GET_RAW_VALUE_MSG1": "raw weight value (return int)",
    "UNIT_WEIGHT_GET_SCALE_VALUE_MSG0": "get",
    "UNIT_WEIGHT_GET_SCALE_VALUE_MSG1": "scale weight value (gm, return int)",
    "UNIT_WEIGHT_SET_TARE_MSG0": "set tare",
    "UNIT_WEIGHT_SET_CALIBRATE_SCALE_MSG0": "set calibrate scale weight",
    "UNIT_WEIGHT_SET_CALIBRATE_SCALE_MSG1": "gm",
    "UNIT_SCALES_INIT_MSG0": "Init",
    "UNIT_SCALES_INIT_MSG1": "I2C address",
    "UNIT_SCALES_INIT_MSG2": "(0x08 ~ 0x77)",
    "UNIT_SCALES_GET_BUTTON_STATUS_MSG0": "get",
    "UNIT_SCALES_GET_BUTTON_STATUS_MSG1": "button status",
    "UNIT_SCALES_GET_BUTTON_STATUS_MSG2": "(return int)",
    "UNIT_SCALES_SET_BUTTON_OFFSET_MSG0": "set offset with button",
    "UNIT_SCALES_SET_RGBLED_SYNC_MSG0": "set RGB led sync with weight",
    "UNIT_SCALES_SET_RGBLED_COLOR_MSG0": "set RGB led color",
    "UNIT_SCALES_GET_RGB_LED_MSG0": "get",
    "UNIT_SCALES_GET_RGB_LED_MSG1": "RGB led color (return list)",
    "UNIT_SCALES_GET_SCALE_VALUE_MSG0": "get",
    "UNIT_SCALES_GET_SCALE_VALUE_MSG1": "scale",
    "UNIT_SCALES_GET_SCALE_VALUE_MSG2": "value (return int)",
    "UNIT_SCALES_SET_RAW_OFFSET_MSG0": "set Raw ADC offset value",
    "UNIT_SCALES_SET_CURRENT_RAW_OFFSET_MSG0": "set current Raw ADC offset value",
    "UNIT_SCALES_SET_CALIBRATION_ZERO_MSG0": "set calibration zero weight (tare)",
    "UNIT_SCALES_SET_CALIBRATION_LOAD_MSG0": "set calibration load weight",
    "UNIT_SCALES_SET_CALIBRATION_LOAD_MSG1": "gm",
    "UNIT_SCALES_SET_ADDRESS_MSG0": "set I2C address",
    "UNIT_SCALES_SET_ADDRESS_MSG1": "(0x08 ~ 0x77)",
    "UNIT_SCALES_GET_DEVICE_INFORM_MSG0": "get",
    "UNIT_SCALES_GET_DEVICE_INFORM_MSG1": "device information",
    "UNIT_SCALES_GET_DEVICE_INFORM_MSG2": "(return int)",
    "UNIT_GESTURE_INIT_MSG0": "Init",
    "UNIT_GESTURE_GET_HAND_GESTURES_MSG0": "get hand gestures value (return 0 ~ 512)",
    "UNIT_GESTURE_GET_TEXT_DESCRIPTION_MSG0": "get text description related to gesture",
    "UNIT_GESTURE_GET_TEXT_DESCRIPTION_MSG1": "value (return string)",
    "UNIT_GESTURE_MOVEMENTS_MSG0": "movements",
    "UNIT_GESTURE_MOVEMENTS_MSG1": "(return 0 ~ 512)",
    "UNIT_GESTURE_SET_GESTURE_HIGHRATE_MSG0": "set highrate mode",
    "UNIT_THERMAL_INIT_MSG0": "Init",
    "UNIT_THERMAL_GET_MAX_TEMPERATURE_MSG0": "get",
    "UNIT_THERMAL_GET_MAX_TEMPERATURE_MSG1": "maximum temperature in pixel array (return float)",
    "UNIT_THERMAL_GET_MIN_TEMPERATURE_MSG0": "get",
    "UNIT_THERMAL_GET_MIN_TEMPERATURE_MSG1": "minimum temperature in pixel array (return float)",
    "UNIT_THERMAL_GET_MIDPOINT_TEMPERATURE_MSG0": "get",
    "UNIT_THERMAL_GET_MIDPOINT_TEMPERATURE_MSG1": "midpoint temperature in pixel array (return float)",
    "UNIT_THERMAL_GET_PIXEL_TEMPERATURE_MSG0": "get",
    "UNIT_THERMAL_GET_PIXEL_TEMPERATURE_MSG1": "temperature in pixel array x",
    "UNIT_THERMAL_GET_PIXEL_TEMPERATURE_MSG2": "y",
    "UNIT_THERMAL_GET_PIXEL_TEMPERATURE_MSG3": "position (return float)",
    "UNIT_THERMAL_GET_TEMPERATURE_BUFFER_MSG0": "get",
    "UNIT_THERMAL_GET_TEMPERATURE_BUFFER_MSG1": "pixel array buffer (return list)",
    "UNIT_THERMAL_GET_REFRESH_RATE_MSG0": "get",
    "UNIT_THERMAL_GET_REFRESH_RATE_MSG1": "refresh rate in Hz (return int)",
    "UNIT_THERMAL_SET_REFRESH_RATE_MSG0": "set refresh rate",
    "UNIT_THERMAL_SET_REFRESH_RATE_MSG1": "in Hz",
    "UNIT_THERMAL_UPDATE_TEMPERATURE_BUFFER_MSG0": "update temperature pixel buffer (in loop)",
    "UNIT_DAC2_INIT_MSG0": "Init %1 I2C address %2 (0x58 ~ 0x65)",
    "UNIT_DAC2_SET_VOLTAGE_RANGE_MSG0": "Set %1 output voltage range %2",
    "UNIT_DAC2_SET_VOLTAGE_MSG0": "Set %1 channel %2 output voltage %3 (V)",
    "UNIT_DAC2_SET_VOLTAGE_BOTH_MSG0": "Set %1 channel0 output voltage %2 (V) channel1 output voltage %3 (V)",
    "UNIT_MINISCALES_INIT_MSG0": "Init",
    "UNIT_MINISCALES_GET_ADC_MSG0": "get",
    "UNIT_MINISCALES_GET_ADC_MSG1": "raw ADC value (return int)",
    "UNIT_MINISCALES_GET_WEIGHT_MSG0": "get",
    "UNIT_MINISCALES_GET_WEIGHT_MSG1": "weight (gram, return float)",
    "UNIT_MINISCALES_GET_BUTTON_MSG0": "get",
    "UNIT_MINISCALES_GET_BUTTON_MSG1": "button state (return True or False)",
    "UNIT_MINISCALES_GET_LOW_PASS_FILTER_MSG0": "get",
    "UNIT_MINISCALES_GET_LOW_PASS_FILTER_MSG1": "low pass filter status (return True or False)",
    "UNIT_MINISCALES_GET_AVERAGE_FILTER_LEVEL_MSG0": "get",
    "UNIT_MINISCALES_GET_AVERAGE_FILTER_LEVEL_MSG1": "average filter level (return 0 ~ 50)",
    "UNIT_MINISCALES_GET_EMA_FILTER_ALPHA_MSG0": "get",
    "UNIT_MINISCALES_GET_EMA_FILTER_ALPHA_MSG1": "EMA filter alpha value (return 0 ~ 99)",
    "UNIT_MINISCALES_RESET_MSG0": "reset",
    "UNIT_MINISCALES_SET_LOW_PASS_FILTER_MSG0": "set low pass filter",
    "UNIT_MINISCALES_SET_AVERAGE_FILTER_MSG0": "set average filter level",
    "UNIT_MINISCALES_SET_AVERAGE_FILTER_MSG1": "(0 ~ 50)",
    "UNIT_MINISCALES_SET_EMA_FILTER_ALPHA_MSG0": "set EMA filter alpha",
    "UNIT_MINISCALES_SET_EMA_FILTER_ALPHA_MSG1": "(0 ~ 99)",
    "UNIT_MINISCALES_SET_RGB_LED_COLOR_MSG0": "set RGB LED color",
    "UNIT_MINISCALES_CALIBRATE_MSG0": "Calibrate",
    "UNIT_MINISCALES_CALIBRATE_MSG1": "weight1 (in grams)",
    "UNIT_MINISCALES_CALIBRATE_MSG2": "weight1 adc",
    "UNIT_MINISCALES_CALIBRATE_MSG3": "weight2 (in grams)",
    "UNIT_MINISCALES_CALIBRATE_MSG4": "weight2 adc",
    "UNIT_MINISCALES_SET_TARE_MSG0": "tare the scale",
    "UNIT_SYNTH_INIT_MSG0": "Init",
    "UNIT_SYNTH_INIT_MSG1": "UART",
    "UNIT_SYNTH_SET_NOTE_ON_MSG0": "set note on channel",
    "UNIT_SYNTH_SET_NOTE_ON_MSG1": "pitch",
    "UNIT_SYNTH_SET_NOTE_ON_MSG2": "(0 ~ 127)",
    "UNIT_SYNTH_SET_NOTE_ON_MSG3": "velocity",
    "UNIT_SYNTH_SET_NOTE_ON_MSG4": "(0 ~ 127)",
    "UNIT_SYNTH_SET_NOTE_ON_PITCH_MSG0": "set note on channel",
    "UNIT_SYNTH_SET_NOTE_ON_PITCH_MSG1": "pitch",
    "UNIT_SYNTH_SET_NOTE_ON_PITCH_MSG2": "velocity",
    "UNIT_SYNTH_SET_NOTE_ON_PITCH_MSG3": "(0 ~ 127)",
    "UNIT_SYNTH_SET_NOTE_OFF_MSG0": "set note off channel",
    "UNIT_SYNTH_SET_NOTE_OFF_MSG1": "pitch",
    "UNIT_SYNTH_SET_NOTE_OFF_MSG2": "(0 ~ 127)",
    "UNIT_SYNTH_SET_CHANGE_INSTRUMENT_MSG0": "set instrument bank",
    "UNIT_SYNTH_SET_CHANGE_INSTRUMENT_MSG1": "channel",
    "UNIT_SYNTH_SET_CHANGE_INSTRUMENT_MSG2": "program",
    "UNIT_SYNTH_SET_CHANGE_INSTRUMENT_MSG3": "(1 ~ 128)",
    "UNIT_SYNTH_SET_INSTRUMENT_GENERAL_MIDI_MSG0": "set general instrument channel",
    "UNIT_SYNTH_SET_INSTRUMENT_GENERAL_MIDI_MSG1": "name",
    "UNIT_SYNTH_SET_INSTRUMENT_VARIATION_MSG0": "set MT-32 instrument channel",
    "UNIT_SYNTH_SET_INSTRUMENT_VARIATION_MSG1": "name",
    "UNIT_SYNTH_SET_DRUMS_INSTRUMENT_MSG0": "set drums instrument name",
    "UNIT_SYNTH_SET_DRUMS_INSTRUMENT_MSG1": "velocity",
    "UNIT_SYNTH_SET_DRUMS_INSTRUMENT_MSG2": "(0 ~ 127)",
    "UNIT_SYNTH_SET_PITCH_BEND_MSG0": "set pitch bend channel",
    "UNIT_SYNTH_SET_PITCH_BEND_MSG1": "value",
    "UNIT_SYNTH_SET_PITCH_BEND_MSG2": "(0 ~ 1023)",
    "UNIT_SYNTH_SET_PITCH_BEND_RANGE_MSG0": "set pitch bend range channel",
    "UNIT_SYNTH_SET_PITCH_BEND_RANGE_MSG1": "value",
    "UNIT_SYNTH_SET_PITCH_BEND_RANGE_MSG2": "(0 ~ 255)",
    "UNIT_SYNTH_MIDI_RESET_MSG0": "reset",
    "UNIT_SYNTH_SET_CHANNEL_VOLUME_MSG0": "set channel",
    "UNIT_SYNTH_SET_CHANNEL_VOLUME_MSG1": "volume",
    "UNIT_SYNTH_SET_CHANNEL_VOLUME_MSG2": "(0 ~ 100)",
    "UNIT_SYNTH_SET_ALL_NOTES_OFF_MSG0": "set all notes off channel",
    "UNIT_SYNTH_SET_MASTER_VOLUME_MSG0": "set master volume",
    "UNIT_SYNTH_SET_MASTER_VOLUME_MSG1": "(0 ~ 100)",
    "UNIT_SYNTH_SET_ALL_DRUMS_MSG0": "set all channels drums",
    "UNIT_SYNTH_SET_REVERB_MSG0": "set reverb",
    "UNIT_SYNTH_SET_REVERB_MSG1": "channel",
    "UNIT_SYNTH_SET_REVERB_MSG2": "program",
    "UNIT_SYNTH_SET_REVERB_MSG3": "level (0 ~ 127)",
    "UNIT_SYNTH_SET_REVERB_MSG4": "delay feedback (0 ~ 255)",
    "UNIT_SYNTH_SET_CHORUS_MSG0": "set chorus",
    "UNIT_SYNTH_SET_CHORUS_MSG1": "channel",
    "UNIT_SYNTH_SET_CHORUS_MSG2": "program",
    "UNIT_SYNTH_SET_CHORUS_MSG3": "level (0 ~ 127)",
    "UNIT_SYNTH_SET_CHORUS_MSG4": "feedback (0 ~ 255)",
    "UNIT_SYNTH_SET_CHORUS_MSG5": "chorus delay (0 ~ 255)",
    "UNIT_SYNTH_SET_PAN_MSG0": "set pan channel",
    "UNIT_SYNTH_SET_PAN_MSG1": "value",
    "UNIT_SYNTH_SET_PAN_MSG2": "(0 ~ 127)",
    "UNIT_SYNTH_SET_EQUALIZER_MSG0": "set equalizer",
    "UNIT_SYNTH_SET_EQUALIZER_MSG1": "channel",
    "UNIT_SYNTH_SET_EQUALIZER_MSG2": "band (0 ~ 127)",
    "UNIT_SYNTH_SET_EQUALIZER_MSG3": "low band",
    "UNIT_SYNTH_SET_EQUALIZER_MSG4": "medium low band",
    "UNIT_SYNTH_SET_EQUALIZER_MSG5": "medium high band",
    "UNIT_SYNTH_SET_EQUALIZER_MSG6": "high band",
    "UNIT_SYNTH_SET_EQUALIZER_MSG7": "freq (0 ~ 127)",
    "UNIT_SYNTH_SET_EQUALIZER_MSG8": "low freq",
    "UNIT_SYNTH_SET_EQUALIZER_MSG9": "medium low freq",
    "UNIT_SYNTH_SET_EQUALIZER_MSG10": "medium high freq",
    "UNIT_SYNTH_SET_EQUALIZER_MSG11": "high freq",
    "UNIT_SYNTH_SET_TUNING_MSG0": "set tuning",
    "UNIT_SYNTH_SET_TUNING_MSG1": "channel",
    "UNIT_SYNTH_SET_TUNING_MSG2": "fine tuning (0 ~ 127)",
    "UNIT_SYNTH_SET_TUNING_MSG3": "coarse tuning (0 ~ 127)",
    "UNIT_SYNTH_SET_VIBRATE_MSG0": "set vibrate",
    "UNIT_SYNTH_SET_VIBRATE_MSG1": "channel",
    "UNIT_SYNTH_SET_VIBRATE_MSG2": "rate (0 ~ 127)",
    "UNIT_SYNTH_SET_VIBRATE_MSG3": "depth (0 ~ 127)",
    "UNIT_SYNTH_SET_VIBRATE_MSG4": "delay (0 ~ 127)",
    "UNIT_SYNTH_SET_TVF_MSG0": "set TVF",
    "UNIT_SYNTH_SET_TVF_MSG1": "channel",
    "UNIT_SYNTH_SET_TVF_MSG2": "cutoff freq (0 ~ 127)",
    "UNIT_SYNTH_SET_TVF_MSG3": "resonance (0 ~ 127)",
    "UNIT_SYNTH_SET_ENVELOPE_MSG0": "set envelope time",
    "UNIT_SYNTH_SET_ENVELOPE_MSG1": "channel",
    "UNIT_SYNTH_SET_ENVELOPE_MSG2": "attack (0 ~ 127)",
    "UNIT_SYNTH_SET_ENVELOPE_MSG3": "decay (0 ~ 127)",
    "UNIT_SYNTH_SET_ENVELOPE_MSG4": "release (0 ~ 127)",
    "UNIT_SYNTH_SET_SCALE_TUNING_MSG0": "set scale tuning",
    "UNIT_SYNTH_SET_SCALE_TUNING_MSG1": "channel",
    "UNIT_SYNTH_SET_MOD_WHEEL_MSG0": "set modulation wheel",
    "UNIT_SYNTH_SET_MOD_WHEEL_MSG1": "channel",
    "UNIT_SYNTH_SET_MOD_WHEEL_MSG2": "pitch (0 ~ 127)",
    "UNIT_SYNTH_SET_MOD_WHEEL_MSG3": "TVT cutoff (0 ~ 127)",
    "UNIT_SYNTH_SET_MOD_WHEEL_MSG4": "amplitude (0 ~ 127)",
    "UNIT_SYNTH_SET_MOD_WHEEL_MSG5": "rate (0 ~ 127)",
    "UNIT_SYNTH_SET_MOD_WHEEL_MSG6": "pitch depth (0 ~ 127)",
    "UNIT_SYNTH_SET_MOD_WHEEL_MSG7": "TVF depth (0 ~ 127)",
    "UNIT_SYNTH_SET_MOD_WHEEL_MSG8": "TVA depth (0 ~ 127)",
    "UNIT_SERVOS8_INIT_MSG0": "Init",
    "UNIT_SERVOS8_INIT_MSG1": "I2C address",
    "UNIT_SERVOS8_INIT_MSG2": "(0x08 ~ 0x77)",
    "UNIT_SERVOS8_GET_MODE_MSG0": "get",
    "UNIT_SERVOS8_GET_MODE_MSG1": "channel",
    "UNIT_SERVOS8_GET_MODE_MSG2": "config mode (return 0 ~ 5)",
    "UNIT_SERVOS8_SET_MODE_MSG0": "set channel",
    "UNIT_SERVOS8_SET_MODE_MSG1": "config mode",
    "UNIT_SERVOS8_GET_DIGITAL_INPUT_MSG0": "get",
    "UNIT_SERVOS8_GET_DIGITAL_INPUT_MSG1": "channel",
    "UNIT_SERVOS8_GET_DIGITAL_INPUT_MSG2": "digital input value (return True or False)",
    "UNIT_SERVOS8_SET_OUTPUT_VALUE_MSG0": "set channel",
    "UNIT_SERVOS8_SET_OUTPUT_VALUE_MSG1": "digital output value",
    "UNIT_SERVOS8_SET_OUTPUT_VALUE_MSG2": "(0 ~ 1)",
    "UNIT_SERVOS8_GET_8BIT_ADC_RAW_MSG0": "get",
    "UNIT_SERVOS8_GET_8BIT_ADC_RAW_MSG1": "channel",
    "UNIT_SERVOS8_GET_8BIT_ADC_RAW_MSG2": "8bit ADC raw value (return 0 ~ 255)",
    "UNIT_SERVOS8_GET_12BIT_ADC_RAW_MSG0": "get",
    "UNIT_SERVOS8_GET_12BIT_ADC_RAW_MSG1": "channel",
    "UNIT_SERVOS8_GET_12BIT_ADC_RAW_MSG2": "12bit ADC raw value (return 0 ~ 4095)",
    "UNIT_SERVOS8_GET_SERVO_ANGLE_MSG0": "get",
    "UNIT_SERVOS8_GET_SERVO_ANGLE_MSG1": "channel",
    "UNIT_SERVOS8_GET_SERVO_ANGLE_MSG2": "servo angle value (return 0 ~ 180)",
    "UNIT_SERVOS8_GET_SERVO_PULSE_MSG0": "get",
    "UNIT_SERVOS8_GET_SERVO_PULSE_MSG1": "channel",
    "UNIT_SERVOS8_GET_SERVO_PULSE_MSG2": "servo pulse value (return 500 ~ 2500)",
    "UNIT_SERVOS8_SET_SERVO_ANGLE_MSG0": "set channel",
    "UNIT_SERVOS8_SET_SERVO_ANGLE_MSG1": "servo angle",
    "UNIT_SERVOS8_SET_SERVO_ANGLE_MSG2": "(0 ~ 180)",
    "UNIT_SERVOS8_SET_SERVO_PULSE_MSG0": "set channel",
    "UNIT_SERVOS8_SET_SERVO_PULSE_MSG1": "servo pulse",
    "UNIT_SERVOS8_SET_SERVO_PULSE_MSG2": "(500 ~ 2500)",
    "UNIT_SERVOS8_GET_RGB_LED_MSG0": "get",
    "UNIT_SERVOS8_GET_RGB_LED_MSG1": "channel",
    "UNIT_SERVOS8_GET_RGB_LED_MSG2": "RGB LED color value (return [0,0,0])",
    "UNIT_SERVOS8_SET_RGB_LED_MSG0": "set channel",
    "UNIT_SERVOS8_SET_RGB_LED_MSG1": "RGB LED color",
    "UNIT_SERVOS8_SET_PWM_DUTYCYCLE_MSG0": "set channel",
    "UNIT_SERVOS8_SET_PWM_DUTYCYCLE_MSG1": "PWM duty cycle",
    "UNIT_SERVOS8_SET_PWM_DUTYCYCLE_MSG2": "%",
    "UNIT_SERVOS8_GET_INPUT_CURRENT_MSG0": "get",
    "UNIT_SERVOS8_GET_INPUT_CURRENT_MSG1": "input current value (return float)",
    "UNIT_SERVOS8_GET_DEVICE_SPEC_DETAIL_MSG0": "get",
    "UNIT_SERVOS8_GET_DEVICE_SPEC_DETAIL_MSG1": "spec detail (return int)",
    "UNIT_SERVOS8_SET_I2C_ADDRESS_MSG0": "set I2C address",
    "UNIT_SERVOS8_SET_I2C_ADDRESS_MSG1": "(0x08 ~ 0x77)",
    "UNIT_VMETER_INIT_MSG0": "Init",
    "UNIT_VMETER_GET_GAIN_MSG0": "get",
    "UNIT_VMETER_GET_GAIN_MSG1": "ads1115 chip gain value (return int)",
    "UNIT_VMETER_GET_DATA_RATE_MSG0": "get",
    "UNIT_VMETER_GET_DATA_RATE_MSG1": "ads1115 chip data rate (return int)",
    "UNIT_VMETER_GET_OPERATION_MODE_MSG0": "get",
    "UNIT_VMETER_GET_OPERATION_MODE_MSG1": "ads1115 chip operation mode (return int)",
    "UNIT_VMETER_GET_VOLTAGE_MSG0": "get",
    "UNIT_VMETER_GET_VOLTAGE_MSG1": "voltage value (mV, return float)",
    "UNIT_VMETER_GET_ADC_RAW_MSG0": "get",
    "UNIT_VMETER_GET_ADC_RAW_MSG1": "ADC raw value (return int)",
    "UNIT_VMETER_SET_GAIN_MSG0": "set ads1115 chip gain value",
    "UNIT_VMETER_SET_DATA_RATE_MSG0": "set ads1115 chip data rate",
    "UNIT_VMETER_SET_OPERATION_MODE_MSG0": "set operation mode",
    "UNIT_VMETER_SET_MEASUREMENT_RANGE_MSG0": "set max input voltage measurement range",
    "UNIT_VMETER_SET_CALIBRATION_MSG0": "set internal calibration",
    "UNIT_AMETER_INIT_MSG0": "Init %1",
    "UNIT_AMETER_GET_GAIN_MSG0": "get %1 ads1115 chip gain value (return int)",
    "UNIT_AMETER_GET_DATA_RATE_MSG0": "get %1 ads1115 chip data rate (return int)",
    "UNIT_AMETER_GET_OPERATION_MODE_MSG0": "get %1 ads1115 chip operation mode (return int)",
    "UNIT_AMETER_GET_CURRENT_MSG0": "get %1 current value (mA, return float)",
    "UNIT_AMETER_GET_ADC_RAW_MSG0": "get %1 ADC raw value (return int)",
    "UNIT_AMETER_SET_GAIN_MSG0": "%1 set ads1115 chip gain value %2",
    "UNIT_AMETER_SET_DATA_RATE_MSG0": "%1 set ads1115 chip data rate %2",
    "UNIT_AMETER_SET_OPERATION_MODE_MSG0": "%1 set operation mode %2",
    "UNIT_AMETER_SET_MEASUREMENT_RANGE_MSG0": "%1 set max input current measurement range %2",
    "UNIT_AMETER_SET_CALIBRATION_MSG0": "%1 set internal calibration %2",
    "UNIT_LORAE220_INIT_MSG0": "Init %1 UART %2",
    "UNIT_LORAE220_CONFIGURE_MSG0": "Configure",
    "UNIT_LORAE220_CONFIGURE_MSG1": "address (0x0000 ~ 0xFFFF)",
    "UNIT_LORAE220_CONFIGURE_MSG2": "channel (0 ~ 30)",
    "UNIT_LORAE220_CONFIGURE_MSG3": "encryption key (0x0000 ~ 0xFFFF)",
    "UNIT_LORAE220_CONFIGURE_MSG4": "data rate",
    "UNIT_LORAE220_CONFIGURE_MSG5": "subpacket size",
    "UNIT_LORAE220_CONFIGURE_MSG6": "RSSI ambient noise flag",
    "UNIT_LORAE220_CONFIGURE_MSG7": "transmitting power",
    "UNIT_LORAE220_CONFIGURE_MSG8": "RSSI byte flag",
    "UNIT_LORAE220_CONFIGURE_MSG9": "transmission method type",
    "UNIT_LORAE220_CONFIGURE_MSG10": "LBT flag",
    "UNIT_LORAE220_CONFIGURE_MSG11": "WOR cycle",
    "UNIT_LORAE220_START_RECEIVE_MSG0": "start receive data",
    "UNIT_LORAE220_STOP_RECEIVE_MSG0": "stop receive data",
    "UNIT_LORAE220_RECEIVE_MSG0": "receive data timeout",
    "UNIT_LORAE220_RECEIVE_MSG1": "ms (return list [data, rssi])",
    "UNIT_LORAE220_SEND_LINE_MSG0": "send a line",
    "UNIT_LORAE220_SEND_RAW_DATA_MSG0": "send raw data",
    "UNIT_LORAE220_SEND_MSG0": "send",
    "UNIT_LORAE220_SEND_MSG1": "address",
    "UNIT_LORAE220_SEND_MSG2": "(0x0000 ~ 0xFFFF)",
    "UNIT_LORAE220_SEND_MSG3": "channel",
    "UNIT_LORAE220_SEND_MSG4": "(0 ~ 30)",
    "UNIT_LORAE220_RECEIVE_DATA_EVENT_MSG0": "When",
    "UNIT_LORAE220_RECEIVE_DATA_EVENT_MSG1": "receive data (bytes)",
    "UNIT_LORAE220_RECEIVE_DATA_EVENT_MSG2": "RSSI (in dB)",
    "UNIT_LORAE220_RECEIVE_DATA_STR_EVENT_MSG1": "receive data (string)",
    "UNIT_LORAE220433_INIT_MSG0": "Init %1 UART %2",
    "UNIT_LORAE220433_START_RECEIVE_MSG0": "%1 start receive data",
    "UNIT_LORAE220433_STOP_RECEIVE_MSG0": "%1 stop receive data",
    "UNIT_LORAE220433_CONFIGURE_MODULE_MSG0": "Setup %1 module %2 address (0x0000 ~ 0xFFFF) %3 channel (0 ~ 83) %4 encryption key (0x0000 ~ 0xFFFF) %5",
    "UNIT_LORAE220433_CONFIGURE_MODULE_MSG1": "data rate",
    "UNIT_LORAE220433_CONFIGURE_MODULE_MSG2": "subpacket size",
    "UNIT_LORAE220433_CONFIGURE_MODULE_MSG3": "RSSI ambient noise flag",
    "UNIT_LORAE220433_CONFIGURE_MODULE_MSG4": "TX power",
    "UNIT_LORAE220433_CONFIGURE_MODULE_MSG5": "RSSI byte flag",
    "UNIT_LORAE220433_CONFIGURE_MODULE_MSG6": "transmission method type",
    "UNIT_LORAE220433_CONFIGURE_MODULE_MSG7": "LBT flag",
    "UNIT_LORAE220433_CONFIGURE_MODULE_MSG8": "WOR cycle",
    "UNIT_LORAE220433_READ_CONFIGURE_PARAM_MSG0": "get %1 setup %2 parameter (return int)",
    "UNIT_LORAE220433_GET_AVAILABLE_DATA_MSG0": "%1 available of data count (return int)",
    "UNIT_LORAE220433_RECEIVE_MSG0": "%1 receive data timeout %2 ms (return list [data, rssi])",
    "UNIT_LORAE220433_SEND_MSG0": "%1 send %2 address %3 (0x0000 ~ 0xFFFF) channel %4 (0 ~ 83)",
    "UNIT_LORAE220433_SEND_LINE_MSG0": "%1 send a line %2 address %3 (0x0000 ~ 0xFFFF) channel %4 (0 ~ 83)",
    "UNIT_LORAE220433_SEND_RAW_DATA_MSG0": "%1 send raw data %2 address %3 (0x0000 ~ 0xFFFF) channel %4 (0 ~ 83)",
    "UNIT_LORAE220433_RECEIVE_DATA_EVENT_MSG0": "When %1 receive data (bytes) %2 RSSI (in dB) %3",
    "UNIT_LORAE220433_RECEIVE_DATA_STR_EVENT_MSG0": "When %1 receive data (string) %2 RSSI (in dB) %3",
    "UNIT_RTC_INIT_MSG0": "Init",
    "UNIT_RTC_GET_DATE_TIME_MSG0": "get",
    "UNIT_RTC_GET_DATE_TIME_MSG1": "value (return int)",
    "UNIT_RTC_GET_TIMER_VALUE_MSG0": "get",
    "UNIT_RTC_GET_TIMER_VALUE_MSG1": "timer value (return 0 ~ 255)",
    "UNIT_RTC_SET_DATE_TIME_MSG0": "set time",
    "UNIT_RTC_SET_DATE_TIME_MSG1": "year",
    "UNIT_RTC_SET_DATE_TIME_MSG2": "month",
    "UNIT_RTC_SET_DATE_TIME_MSG3": "date",
    "UNIT_RTC_SET_DATE_TIME_MSG4": "weekday",
    "UNIT_RTC_SET_DATE_TIME_MSG5": "hour",
    "UNIT_RTC_SET_DATE_TIME_MSG6": "minute",
    "UNIT_RTC_SET_DATE_TIME_MSG7": "second",
    "UNIT_RTC_CHECK_IF_ALARM_ON_MSG0": "check if alarm on (return True or False)",
    "UNIT_RTC_CHECK_IF_TIMER_ON_MSG0": "check if timer on (return True or False)",
    "UNIT_RTC_TURN_OFF_ALARM_MSG0": "turn off alarm",
    "UNIT_RTC_TURN_OFF_TIMER_MSG0": "turn off timer",
    "UNIT_RTC_CLEAR_ALARM_FLAG_MSG0": "clear alarm flag",
    "UNIT_RTC_CLEAR_TIMER_FLAG_MSG0": "clear timer flag",
    "UNIT_RTC_SET_DAILY_ALARM_MSG0": "set daily alarm",
    "UNIT_RTC_SET_DAILY_ALARM_MSG1": "hour",
    "UNIT_RTC_SET_DAILY_ALARM_MSG2": "minute",
    "UNIT_RTC_SET_DAILY_ALARM_MSG3": "date",
    "UNIT_RTC_SET_DAILY_ALARM_MSG4": "weekday",
    "UNIT_RTC_SET_TIMER_MODE_MSG0": "set timer mode",
    "UNIT_RTC_SET_TIMER_MODE_MSG1": "value",
    "UNIT_RTC_SET_TIMER_MODE_MSG2": "(0 ~ 255)",
    "UNIT_RTC_SET_INTERNET_TIME_MSG0": "set date and time",
    "UNIT_RTC_SET_INTERNET_TIME_MSG1": "by NTP server host",
    "UNIT_RTC_SET_INTERNET_TIME_MSG2": "time zone",
    "UNIT_RTC_TIME_ZONE_MSG0": "hours",
    "UNIT_RTC_TIME_ZONE_MSG1": "minutes",
    "UNIT_WEIGHTI2C_INIT_MSG0": "Init",
    "UNIT_WEIGHTI2C_INIT_MSG1": "I2C address",
    "UNIT_WEIGHTI2C_INIT_MSG2": "(0x08 ~ 0x77)",
    "UNIT_WEIGHTI2C_GET_ADC_RAW_MSG0": "get",
    "UNIT_WEIGHTI2C_GET_ADC_RAW_MSG1": "ADC raw value (return int)",
    "UNIT_WEIGHTI2C_GET_WEIGHT_FLOAT_MSG0": "get",
    "UNIT_WEIGHTI2C_GET_WEIGHT_FLOAT_MSG1": "weight in float (return float)",
    "UNIT_WEIGHTI2C_GET_WEIGHT_INT_MSG0": "get",
    "UNIT_WEIGHTI2C_GET_WEIGHT_INT_MSG1": "weight in int (return int)",
    "UNIT_WEIGHTI2C_GET_WEIGHT_STR_MSG0": "get",
    "UNIT_WEIGHTI2C_GET_WEIGHT_STR_MSG1": "weight in string (return string)",
    "UNIT_WEIGHTI2C_GET_LOWPASS_FILTER_MSG0": "get",
    "UNIT_WEIGHTI2C_GET_LOWPASS_FILTER_MSG1": "low pass filter (return True or False)",
    "UNIT_WEIGHTI2C_GET_AVERAGE_FILTER_LEVEL_MSG0": "get",
    "UNIT_WEIGHTI2C_GET_AVERAGE_FILTER_LEVEL_MSG1": "average filter level (return int)",
    "UNIT_WEIGHTI2C_GET_EMA_FILTER_ALPHA_MSG0": "get",
    "UNIT_WEIGHTI2C_GET_EMA_FILTER_ALPHA_MSG1": "EMA filter alpha (return int)",
    "UNIT_WEIGHTI2C_GET_DEVICE_SPEC_MSG0": "get",
    "UNIT_WEIGHTI2C_GET_DEVICE_SPEC_MSG1": "spec detail (return int)",
    "UNIT_WEIGHTI2C_SET_RESET_OFFSET_MSG0": "reset offset value (Tare)",
    "UNIT_WEIGHTI2C_SET_CALIBRATE_MSG0": "set calibration",
    "UNIT_WEIGHTI2C_SET_CALIBRATE_MSG1": "zero weight in grams",
    "UNIT_WEIGHTI2C_SET_CALIBRATE_MSG2": "zero weight adc",
    "UNIT_WEIGHTI2C_SET_CALIBRATE_MSG3": "load weight in grams",
    "UNIT_WEIGHTI2C_SET_CALIBRATE_MSG4": "load weight adc",
    "UNIT_WEIGHTI2C_SET_LOW_PASS_FILTER_MSG0": "set low pass filter",
    "UNIT_WEIGHTI2C_SET_AVERAGE_FILTER_LEVEL_MSG0": "set average filter level value",
    "UNIT_WEIGHTI2C_SET_AVERAGE_FILTER_LEVEL_MSG1": "(0 ~ 50)",
    "UNIT_WEIGHTI2C_SET_EMA_FILTER_ALPHA_MSG0": "set EMA filter alpha value",
    "UNIT_WEIGHTI2C_SET_EMA_FILTER_ALPHA_MSG1": "(0 ~ 99)",
    "UNIT_WEIGHTI2C_SET_I2C_ADDRESS_MSG0": "set I2C address",
    "UNIT_WEIGHTI2C_SET_I2C_ADDRESS_MSG1": "(0x08 ~ 0x77)",
    "UNIT_KMETER_INIT_MSG0": "Init %1 I2C address %2 (0x08 ~ 0x77)",
    "UNIT_KMETER_GET_THERMO_TEMPERATURE_MSG0": "get %1 thermocouple temperature %2 (return float)",
    "UNIT_KMETER_GET_INTERNAL_TEMPERATURE_MSG0": "get %1 internal temperature %2 (return float)",
    "UNIT_KMETER_GET_SLEEP_TIME_MSG0": "get %1 sleep time (return int)",
    "UNIT_KMETER_GET_FIRMWARE_VERSION_MSG0": "get %1 firmware version (return float)",
    "UNIT_KMETER_GET_I2C_ADDRESS_MSG0": "get %1 I2C address (return int)",
    "UNIT_KMETER_SET_SLEEP_TIME_MSG0": "Set %1 sleep time %2 seconds",
    "UNIT_KMETER_SET_WAKEUP_TRIGGER_MSG0": "Set %1 wakeup trigger mode %2",
    "UNIT_KMETER_SET_I2C_ADDRESS_MSG0": "Set %1 I2C address %2 (0x08 ~ 0x77)",
    "UNIT_KMETERISO_INIT_MSG0": "Init",
    "UNIT_KMETERISO_INIT_MSG1": "I2C address",
    "UNIT_KMETERISO_INIT_MSG2": "(0x08 ~ 0x77)",
    "UNIT_KMETERISO_GET_THERMO_MSG0": "get",
    "UNIT_KMETERISO_GET_THERMO_MSG1": "thermocouple temperature format",
    "UNIT_KMETERISO_GET_THERMO_MSG2": "(return float)",
    "UNIT_KMETERISO_GET_INTERNAL_MSG0": "get",
    "UNIT_KMETERISO_GET_INTERNAL_MSG1": "internal temperature format",
    "UNIT_KMETERISO_GET_INTERNAL_MSG2": "(return float)",
    "UNIT_KMETERISO_GET_DATA_AVAILABLE_STATUS_MSG0": "is ready temperature measurement (return True or False)",
    "UNIT_KMETERISO_GET_KMETER_THERMO_STRING_MSG0": "get",
    "UNIT_KMETERISO_GET_KMETER_THERMO_STRING_MSG1": "thermocouple temperature format",
    "UNIT_KMETERISO_GET_KMETER_THERMO_STRING_MSG2": "(return string)",
    "UNIT_KMETERISO_GET_KMETER_INTERNAL_STRING_MSG0": "get",
    "UNIT_KMETERISO_GET_KMETER_INTERNAL_STRING_MSG1": "internal temperature format",
    "UNIT_KMETERISO_GET_KMETER_INTERNAL_STRING_MSG2": "(return string)",
    "UNIT_KMETERISO_GET_DEVICE_SPEC_MSG0": "get",
    "UNIT_KMETERISO_GET_DEVICE_SPEC_MSG1": "(return int)",
    "UNIT_KMETERISO_SET_I2C_ADDRESS_MSG0": "set I2C address",
    "UNIT_KMETERISO_SET_I2C_ADDRESS_MSG1": "(0x08 ~ 0x77)",
    "UNIT_THERMAL2_INIT_MSG0": "Init",
    "UNIT_THERMAL2_GET_BUTTON_STATE_MSG0": "get",
    "UNIT_THERMAL2_GET_BUTTON_STATE_MSG1": "button",
    "UNIT_THERMAL2_GET_BUTTON_STATE_MSG2": "state (return True or False)",
    "UNIT_THERMAL2_GET_TEMP_ALARM_STATUS_MSG0": "get",
    "UNIT_THERMAL2_GET_TEMP_ALARM_STATUS_MSG1": "temperature alarm status (return 0 ~ 255)",
    "UNIT_THERMAL2_GET_DEVICE_DETAIL_MSG0": "get",
    "UNIT_THERMAL2_GET_DEVICE_DETAIL_MSG1": "device",
    "UNIT_THERMAL2_GET_DEVICE_DETAIL_MSG2": "detail (return int)",
    "UNIT_THERMAL2_GET_I2C_ADDR_MSG0": "get",
    "UNIT_THERMAL2_GET_I2C_ADDR_MSG1": "I2C address",
    "UNIT_THERMAL2_GET_I2C_ADDR_MSG2": "(return int)",
    "UNIT_THERMAL2_GET_FUNC_CTRL_MSG0": "get",
    "UNIT_THERMAL2_GET_FUNC_CTRL_MSG1": "function control (return 0 ~ 7)",
    "UNIT_THERMAL2_GET_REFRESH_RATE_MSG0": "get",
    "UNIT_THERMAL2_GET_REFRESH_RATE_MSG1": "refresh rate in Hz (return 0 ~ 7)",
    "UNIT_THERMAL2_GET_NOISE_FILTER_MSG0": "get",
    "UNIT_THERMAL2_GET_NOISE_FILTER_MSG1": "noise filter range (return 0 ~ 15)",
    "UNIT_THERMAL2_GET_TEMP_MONITOR_MSG0": "get",
    "UNIT_THERMAL2_GET_TEMP_MONITOR_MSG1": "temperature monitor",
    "UNIT_THERMAL2_GET_TEMP_MONITOR_MSG2": "size (return 0 ~ 15)",
    "UNIT_THERMAL2_GET_BUZZER_FREQ_MSG0": "get",
    "UNIT_THERMAL2_GET_BUZZER_FREQ_MSG1": "buzzer frequency in Hz (return 20 ~ 20000)",
    "UNIT_THERMAL2_GET_BUZZER_DUTY_MSG0": "get",
    "UNIT_THERMAL2_GET_BUZZER_DUTY_MSG1": "buzzer dutycycle (return 0 ~ 255)",
    "UNIT_THERMAL2_GET_TEMP_THRESHOLD_MSG0": "get",
    "UNIT_THERMAL2_GET_TEMP_THRESHOLD_MSG1": "temperature threshold value (return int)",
    "UNIT_THERMAL2_GET_TEMP_ALARM_BUZZER_FREQ_MSG0": "get",
    "UNIT_THERMAL2_GET_TEMP_ALARM_BUZZER_FREQ_MSG1": "temperature alarm buzzer frequency (return int)",
    "UNIT_THERMAL2_GET_TEMP_ALARM_INTERVAL_MSG0": "get",
    "UNIT_THERMAL2_GET_TEMP_ALARM_INTERVAL_MSG1": "temperature alarm interval in ms (return int)",
    "UNIT_THERMAL2_GET_TEMP_ALARM_LED_MSG0": "get",
    "UNIT_THERMAL2_GET_TEMP_ALARM_LED_MSG1": "temperature alarm RGB LED color (return list)",
    "UNIT_THERMAL2_GET_DATA_REFRESH_CTRL_MSG0": "get",
    "UNIT_THERMAL2_GET_DATA_REFRESH_CTRL_MSG1": "data refresh control (return 0 or 1)",
    "UNIT_THERMAL2_GET_TEMP_MEASURE_MSG0": "get",
    "UNIT_THERMAL2_GET_TEMP_MEASURE_MSG1": "temperature value in °C (return float)",
    "UNIT_THERMAL2_GET_DIFFERENTIAL_TEMP_MEASURE_MSG0": "get",
    "UNIT_THERMAL2_GET_DIFFERENTIAL_TEMP_MEASURE_MSG1": "differential temperature value in °C (return float)",
    "UNIT_THERMAL2_GET_TEMP_DIFFERENTIAL_MSG0": "get",
    "UNIT_THERMAL2_GET_TEMP_DIFFERENTIAL_MSG1": "differential",
    "UNIT_THERMAL2_GET_TEMP_DIFFERENTIAL_MSG2": "position value (return int)",
    "UNIT_THERMAL2_SET_FUNC_CTRL_MSG0": "set function",
    "UNIT_THERMAL2_SET_FUNC_CTRL_MSG1": "control",
    "UNIT_THERMAL2_SET_REFRESH_RATE_MSG0": "set refresh rate",
    "UNIT_THERMAL2_SET_REFRESH_RATE_MSG1": "in Hz",
    "UNIT_THERMAL2_SET_NOISE_FILTER_MSG0": "set noise filter range",
    "UNIT_THERMAL2_SET_NOISE_FILTER_MSG1": "(0 ~ 15)",
    "UNIT_THERMAL2_SET_TEMP_MONITOR_MSG0": "set temperature monitor width",
    "UNIT_THERMAL2_SET_TEMP_MONITOR_MSG1": "(0 ~ 15) height",
    "UNIT_THERMAL2_SET_TEMP_MONITOR_MSG2": "(0 ~ 15)",
    "UNIT_THERMAL2_SET_TEMP_ALARM_CTR_MSG0": "set temperature alarm",
    "UNIT_THERMAL2_SET_TEMP_ALARM_CTR_MSG1": "control",
    "UNIT_THERMAL2_SET_BUZZER_DUTY_MSG0": "set buzzer dutycycle",
    "UNIT_THERMAL2_SET_BUZZER_DUTY_MSG1": "(0 ~ 255)",
    "UNIT_THERMAL2_SET_BUZZER_FREQ_MSG0": "set buzzer frequency in Hz",
    "UNIT_THERMAL2_SET_BUZZER_FREQ_MSG1": "(20 ~ 20000)",
    "UNIT_THERMAL2_SET_RGB_LED_MSG1": "set RGB LED Color",
    "UNIT_THERMAL2_SET_TEMP_THRESHOLD_MSG0": "set",
    "UNIT_THERMAL2_SET_TEMP_THRESHOLD_MSG1": "temperature threshold value",
    "UNIT_THERMAL2_SET_ALARM_BUZZER_FREQ_MSG0": "set",
    "UNIT_THERMAL2_SET_ALARM_BUZZER_FREQ_MSG1": "temperature alarm buzzer frequency",
    "UNIT_THERMAL2_SET_TEMP_ALARM_INTERVAL_MSG0": "set",
    "UNIT_THERMAL2_SET_TEMP_ALARM_INTERVAL_MSG1": "temperature alarm interval",
    "UNIT_THERMAL2_SET_TEMP_ALARM_INTERVAL_MSG2": "ms (10 ~ 2550)",
    "UNIT_THERMAL2_SET_TEMP_ALARM_LED_MSG0": "set",
    "UNIT_THERMAL2_SET_TEMP_ALARM_LED_MSG1": "temperature RGB LED Color",
    "UNIT_NCIR2_INIT_MSG0": "Init",
    "UNIT_NCIR2_INIT_MSG1": "I2C address",
    "UNIT_NCIR2_INIT_MSG2": "(0x08 ~ 0x77)",
    "UNIT_NCIR2_GET_TEMPERATURE_MSG0": "get",
    "UNIT_NCIR2_GET_TEMPERATURE_MSG1": "temperature value in °C (return float)",
    "UNIT_NCIR2_GET_EMISSIVITY_MSG0": "get",
    "UNIT_NCIR2_GET_EMISSIVITY_MSG1": "emissivity value (return float)",
    "UNIT_NCIR2_GET_TEMPERATURE_THRESHOLD_MSG0": "get",
    "UNIT_NCIR2_GET_TEMPERATURE_THRESHOLD_MSG1": "temperature threshold value (return float)",
    "UNIT_NCIR2_GET_TEMP_ALARM_LED_MSG0": "get",
    "UNIT_NCIR2_GET_TEMP_ALARM_LED_MSG1": "temperature alarm RGB LED color (return list)",
    "UNIT_NCIR2_GET_TEMP_BUZZER_FREQ_MSG0": "get",
    "UNIT_NCIR2_GET_TEMP_BUZZER_FREQ_MSG1": "temperature alarm buzzer frequency (return int)",
    "UNIT_NCIR2_GET_TEMP_ALARM_INTERVAL_MSG0": "get",
    "UNIT_NCIR2_GET_TEMP_ALARM_INTERVAL_MSG1": "temperature alarm interval in ms (return int)",
    "UNIT_NCIR2_GET_TEMP_BUZZER_DUTY_MSG0": "get",
    "UNIT_NCIR2_GET_TEMP_BUZZER_DUTY_MSG1": "temperature buzzer dutycycle (return 0 ~ 255)",
    "UNIT_NCIR2_GET_BUZZER_FREQ_MSG0": "get",
    "UNIT_NCIR2_GET_BUZZER_FREQ_MSG1": "buzzer frequency in Hz (return 20 ~ 20000)",
    "UNIT_NCIR2_GET_BUZZER_DUTY_MSG0": "get",
    "UNIT_NCIR2_GET_BUZZER_DUTY_MSG1": "buzzer dutycycle (return 0 ~ 255)",
    "UNIT_NCIR2_GET_BUZZER_CONTROL_MSG0": "get",
    "UNIT_NCIR2_GET_BUZZER_CONTROL_MSG1": "buzzer ON/OFF status (return True or False)",
    "UNIT_NCIR2_GET_RGB_LED_MSG0": "get",
    "UNIT_NCIR2_GET_RGB_LED_MSG1": "RGB LED color (return list)",
    "UNIT_NCIR2_GET_BUTTON_STATUS_MSG0": "get",
    "UNIT_NCIR2_GET_BUTTON_STATUS_MSG1": "button status (return True or False)",
    "UNIT_NCIR2_GET_CHIP_TEMPERATURE_MSG0": "get",
    "UNIT_NCIR2_GET_CHIP_TEMPERATURE_MSG1": "chip temperature value in °C (return float)",
    "UNIT_NCIR2_GET_DEVICE_SPEC_MSG0": "get",
    "UNIT_NCIR2_GET_DEVICE_SPEC_MSG1": "spec detail (return int)",
    "UNIT_NCIR2_SET_EMISSIVITY_VALUE_MSG0": "set emissivity",
    "UNIT_NCIR2_SET_EMISSIVITY_VALUE_MSG1": "(0.1 ~ 0.95)",
    "UNIT_NCIR2_SET_TEMP_THRESHOLD_MSG0": "set",
    "UNIT_NCIR2_SET_TEMP_THRESHOLD_MSG1": "temperature threshold",
    "UNIT_NCIR2_SET_TEMP_ALARM_LED_MSG0": "set",
    "UNIT_NCIR2_SET_TEMP_ALARM_LED_MSG1": "temperature alarm RGB LED color",
    "UNIT_NCIR2_SET_TEMP_BUZZER_FREQ_MSG0": "set",
    "UNIT_NCIR2_SET_TEMP_BUZZER_FREQ_MSG1": "temperature alarm buzzer frequency",
    "UNIT_NCIR2_SET_TEMP_BUZZER_FREQ_MSG2": "Hz",
    "UNIT_NCIR2_SET_TEMP_ALARM_INTERVAL_MSG0": "set",
    "UNIT_NCIR2_SET_TEMP_ALARM_INTERVAL_MSG1": "temperature alarm interval",
    "UNIT_NCIR2_SET_TEMP_ALARM_INTERVAL_MSG2": "ms",
    "UNIT_NCIR2_SET_TEMP_BUZZER_DUTY_MSG0": "set",
    "UNIT_NCIR2_SET_TEMP_BUZZER_DUTY_MSG1": "temperature buzzer dutycycle",
    "UNIT_NCIR2_SET_BUZZER_FREQ_MSG0": "set buzzer frequency",
    "UNIT_NCIR2_SET_BUZZER_FREQ_MSG1": "Hz",
    "UNIT_NCIR2_SET_BUZZER_DUTY_MSG0": "set buzzer dutycycle",
    "UNIT_NCIR2_SET_BUZZER_CONTROL_MSG0": "set buzzer control",
    "UNIT_NCIR2_SET_RGB_LED_MSG0": "set RGB LED Color",
    "UNIT_NCIR2_SAVE_CONFIG_SETTING_MSG0": "save current configure settings",
    "UNIT_NCIR2_SET_I2C_ADDR_MSG0": "set I2C address",
    "UNIT_NCIR2_SET_I2C_ADDR_MSG1": "(0x08 ~ 0x77)",
    "UNIT_TOF4M_INIT_MSG0": "Init",
    "UNIT_TOF4M_INIT_MSG1": "I2C address",
    "UNIT_TOF4M_INIT_MSG2": "(0x08 ~ 0x77)",
    "UNIT_TOF4M_GET_DISTANCE_MSG0": "get",
    "UNIT_TOF4M_GET_DISTANCE_MSG1": "target distance in mm (return int)",
    "UNIT_TOF4M_GET_MEASUREMENT_TIMING_BUDGET_MSG0": "get",
    "UNIT_TOF4M_GET_MEASUREMENT_TIMING_BUDGET_MSG1": "measurement timing budget (return int)",
    "UNIT_TOF4M_GET_DISTANCE_MODE_MSG0": "get",
    "UNIT_TOF4M_GET_DISTANCE_MODE_MSG1": "distance mode (return int)",
    "UNIT_TOF4M_GET_DATA_READY_MSG0": "get",
    "UNIT_TOF4M_GET_DATA_READY_MSG1": "data ready (return int)",
    "UNIT_TOF4M_SET_CONTINUOUS_START_MEASUREMENT_MSG0": "set continuous start measurement",
    "UNIT_TOF4M_SET_CONTINUOUS_STOP_MEASUREMENT_MSG0": "set continuous stop measurement",
    "UNIT_TOF4M_SET_MEASUREMENT_TIMING_BUDGET_MSG0": "set measurement timing budget",
    "UNIT_TOF4M_SET_DISTANCE_MODE_MSG0": "set distance",
    "UNIT_TOF4M_SET_DISTANCE_MODE_MSG1": "mode",
    "UNIT_TOF4M_SET_I2C_ADDRESS_MSG0": "set I2C address",
    "UNIT_TOF4M_SET_I2C_ADDRESS_MSG1": "(0x08 ~ 0x77)",
    "UNIT_ANGLE8_INIT_MSG0": "Init",
    "UNIT_ANGLE8_INIT_MSG1": "I2C address",
    "UNIT_ANGLE8_INIT_MSG2": "(0x08 ~ 0x77)",
    "UNIT_ANGLE8_GET_SWITCH_STATUS_MSG0": "get",
    "UNIT_ANGLE8_GET_SWITCH_STATUS_MSG1": "switch status (return True or False)",
    "UNIT_ANGLE8_GET_ADC12_RAW_MSG0": "get",
    "UNIT_ANGLE8_GET_ADC12_RAW_MSG1": "channel",
    "UNIT_ANGLE8_GET_ADC12_RAW_MSG2": "12 bit adc value (return int)",
    "UNIT_ANGLE8_GET_ADC8_RAW_MSG0": "get",
    "UNIT_ANGLE8_GET_ADC8_RAW_MSG1": "channel",
    "UNIT_ANGLE8_GET_ADC8_RAW_MSG2": "8 bit adc value (return int)",
    "UNIT_ANGLE8_GET_DEVICE_SPEC_DETAIL_MSG0": "get",
    "UNIT_ANGLE8_GET_DEVICE_SPEC_DETAIL_MSG1": "spec detail (return int)",
    "UNIT_ANGLE8_SET_I2C_ADDR_MSG0": "Set",
    "UNIT_ANGLE8_SET_I2C_ADDR_MSG1": "I2C address",
    "UNIT_ANGLE8_SET_I2C_ADDR_MSG2": "(0x08 ~ 0x77)",
    "UNIT_ANGLE8_SET_RGB_LED_MSG0": "Set",
    "UNIT_ANGLE8_SET_RGB_LED_MSG1": "channel",
    "UNIT_ANGLE8_SET_RGB_LED_MSG2": "RGB LED color",
    "UNIT_ANGLE8_SET_RGB_LED_MSG3": "brightness (0 ~ 100)",
    "UNIT_ANGLE8_FROM_TO_CHANNEL_MSG0": "begin",
    "UNIT_ANGLE8_FROM_TO_CHANNEL_MSG1": "to end",
    "UNIT_ANGLE8_SET_RGB_LED_FROM_MSG0": "Set",
    "UNIT_ANGLE8_SET_RGB_LED_FROM_MSG1": "channel",
    "UNIT_ANGLE8_SET_RGB_LED_FROM_MSG2": "RGB LED color",
    "UNIT_ANGLE8_SET_RGB_LED_FROM_MSG3": "brightness (0 ~ 100)",
    "UNIT_ANGLE8_SET_RGB_LED_FROM_MSG4": "delay (ms)",
    "UNIT_ANGLE8_SET_ANGLE_SYNC_BRIGHT_MSG0": "Set",
    "UNIT_ANGLE8_SET_ANGLE_SYNC_BRIGHT_MSG1": "angle control brightness",
    "UNIT_ANGLE8_SET_ANGLE_SYNC_BRIGHT_MSG2": "channel",
    "UNIT_ANGLE8_SET_ANGLE_SYNC_BRIGHT_MSG3": "RGB LED color",
    "UNIT_CO2_INIT_MSG0": "Init",
    "UNIT_CO2_IS_DATA_READY_MSG0": "is sensor data ready (return True or False)",
    "UNIT_CO2_GET_VALUE_MSG0": "get",
    "UNIT_CO2_GET_VALUE_MSG1": "value in ppm (return int, 400 ~ 2000)",
    "UNIT_CO2_GET_TEMPERATURE_MSG0": "get",
    "UNIT_CO2_GET_TEMPERATURE_MSG1": "temperature in °C (return float, -10 ~ 60)",
    "UNIT_CO2_GET_HUMIDITY_MSG0": "get",
    "UNIT_CO2_GET_HUMIDITY_MSG1": "humidity in RH% (return float, 0 ~ 100)",
    "UNIT_CO2_GET_TEMPERATURE_OFFSET_MSG0": "get",
    "UNIT_CO2_GET_TEMPERATURE_OFFSET_MSG1": "temperature offset in °C (return float)",
    "UNIT_CO2_GET_SENSOR_ALTITUDE_MSG0": "get",
    "UNIT_CO2_GET_SENSOR_ALTITUDE_MSG1": "sensor altitude in meters (return int)",
    "UNIT_CO2_GET_CALIBRATION_ENABLED_MSG0": "get",
    "UNIT_CO2_GET_CALIBRATION_ENABLED_MSG1": "automatic self calibration enabled (return True or False)",
    "UNIT_CO2_GET_SERIAL_NUMBER_MSG0": "get",
    "UNIT_CO2_GET_SERIAL_NUMBER_MSG1": "serial number (return tuple)",
    "UNIT_CO2_SET_START_PERIODIC_MEASUREMENT_MSG0": "set start periodic measurement",
    "UNIT_CO2_SET_STOP_PERIODIC_MEASUREMENT_MSG0": "set stop periodic measurement",
    "UNIT_CO2_SET_TEMPERATURE_OFFSET_MSG0": "set temperature offset",
    "UNIT_CO2_SET_TEMPERATURE_OFFSET_MSG1": "in °C",
    "UNIT_CO2_SET_SENSOR_ALTITUDE_MSG0": "set sensor altitude",
    "UNIT_CO2_SET_SENSOR_ALTITUDE_MSG1": "in meters",
    "UNIT_CO2_SET_AMBIENT_PRESSURE_MSG0": "set ambient pressure",
    "UNIT_CO2_SET_AMBIENT_PRESSURE_MSG1": "in hPa",
    "UNIT_CO2_SET_FORCE_CALIBRATION_MSG0": "set perform force calibration in co2 value",
    "UNIT_CO2_SET_CALIBRATION_ENABLED_MSG0": "set automatic self calibration",
    "UNIT_CO2_SET_START_LOW_PERIODIC_MEASUREMENT_MSG0": "set start low periodic measurement",
    "UNIT_CO2_SAVE_TO_EEPROM_MSG0": "save current configure settings to eeprom",
    "UNIT_CO2_SET_SELF_TEST_MSG0": "set perform self test",
    "UNIT_CO2_SET_FACTORY_RESET_MSG0": "set perform factory reset",
    "UNIT_CO2_REINIT_MSG0": "set sensor reinitializes",
    "UNIT_CO2L_INIT_MSG0": "Init",
    "UNIT_CO2L_IS_DATA_READY_MSG0": "is sensor data ready (return True or False)",
    "UNIT_CO2L_GET_VALUE_MSG0": "get",
    "UNIT_CO2L_GET_VALUE_MSG1": "value in ppm (return int, 400 ~ 2000)",
    "UNIT_CO2L_GET_TEMPERATURE_MSG0": "get",
    "UNIT_CO2L_GET_TEMPERATURE_MSG1": "temperature in °C (return float, -10 ~ 60)",
    "UNIT_CO2L_GET_HUMIDITY_MSG0": "get",
    "UNIT_CO2L_GET_HUMIDITY_MSG1": "humidity in RH% (return float, 0 ~ 100)",
    "UNIT_CO2L_GET_TEMPERATURE_OFFSET_MSG0": "get",
    "UNIT_CO2L_GET_TEMPERATURE_OFFSET_MSG1": "temperature offset in °C (return float)",
    "UNIT_CO2L_GET_SENSOR_ALTITUDE_MSG0": "get",
    "UNIT_CO2L_GET_SENSOR_ALTITUDE_MSG1": "sensor altitude in meters (return int)",
    "UNIT_CO2L_GET_CALIBRATION_ENABLED_MSG0": "get",
    "UNIT_CO2L_GET_CALIBRATION_ENABLED_MSG1": "automatic self calibration enabled (return True or False)",
    "UNIT_CO2L_GET_SERIAL_NUMBER_MSG0": "get",
    "UNIT_CO2L_GET_SERIAL_NUMBER_MSG1": "serial number (return tuple)",
    "UNIT_CO2L_SET_START_PERIODIC_MEASUREMENT_MSG0": "set start periodic measurement",
    "UNIT_CO2L_SET_STOP_PERIODIC_MEASUREMENT_MSG0": "set stop periodic measurement",
    "UNIT_CO2L_SET_TEMPERATURE_OFFSET_MSG0": "set temperature offset",
    "UNIT_CO2L_SET_TEMPERATURE_OFFSET_MSG1": "in °C",
    "UNIT_CO2L_SET_SENSOR_ALTITUDE_MSG0": "set sensor altitude",
    "UNIT_CO2L_SET_SENSOR_ALTITUDE_MSG1": "in meters",
    "UNIT_CO2L_SET_AMBIENT_PRESSURE_MSG0": "set ambient pressure",
    "UNIT_CO2L_SET_AMBIENT_PRESSURE_MSG1": "in hPa",
    "UNIT_CO2L_SET_FORCE_CALIBRATION_MSG0": "set perform force calibration in co2 value",
    "UNIT_CO2L_SET_CALIBRATION_ENABLED_MSG0": "set automatic self calibration",
    "UNIT_CO2L_SET_START_LOW_PERIODIC_MEASUREMENT_MSG0": "set start low periodic measurement",
    "UNIT_CO2L_SAVE_TO_EEPROM_MSG0": "save current configure settings to eeprom",
    "UNIT_CO2L_SET_SELF_TEST_MSG0": "set perform self test",
    "UNIT_CO2L_SET_FACTORY_RESET_MSG0": "set perform factory reset",
    "UNIT_CO2L_REINIT_MSG0": "set sensor reinitializes",
    "UNIT_CO2L_SET_SINGLE_SHOT_MEASUREMENT_ALL_MSG0": "set single shot in all measurements",
    "UNIT_CO2L_SET_SINGLE_SHOT_MEASUREMENT_HT_MSG0": "set single shot in temperature and humidity measurements",
    "UNIT_CO2L_SET_SLEEP_MODE_MSG0": "set sensor sleep mode",
    "UNIT_CO2L_SET_WAKE_UP_MSG0": "set sensor wake up",
    "UNIT_CAN_INIT_MSG0": "Init",
    "UNIT_CAN_INIT_MSG1": "mode",
    "UNIT_CAN_INIT_MSG2": "baudrate",
    "UNIT_CAN_INIT_MSG3": "ID",
    "UNIT_CAN_INIT_MSG4": "prescaler",
    "UNIT_CAN_INIT_MSG5": "sjw",
    "UNIT_CAN_INIT_MSG6": "bs1",
    "UNIT_CAN_INIT_MSG7": "bs2",
    "UNIT_CAN_INIT_MSG8": "triple sampling",
    "UNIT_CAN_DEINIT_MSG0": "deinit",
    "UNIT_CAN_RESTART_MSG0": "restart",
    "UNIT_CAN_GET_STATE_MSG0": "get state (return int)",
    "UNIT_CAN_GET_INFO_MSG0": "get error status information",
    "UNIT_CAN_ANY_MSG0": "count of available (return True or False)",
    "UNIT_CAN_RECV_MESSAGE_MSG0": "read message timeout",
    "UNIT_CAN_RECV_MESSAGE_MSG1": "(return tuple)",
    "UNIT_CAN_RECV_MESSAGE_INFO_MSG0": "read message into",
    "UNIT_CAN_RECV_MESSAGE_INFO_MSG1": "timeout",
    "UNIT_CAN_SEND_DATA_MSG0": "send",
    "UNIT_CAN_SEND_DATA_MSG1": "id",
    "UNIT_CAN_SEND_DATA_MSG2": "timeout",
    "UNIT_CAN_SEND_DATA_MSG3": "rtr",
    "UNIT_CAN_SEND_DATA_MSG4": "extframe",
    "UNIT_MINICAN_INIT_MSG0": "Init",
    "UNIT_MINICAN_INIT_MSG1": "mode",
    "UNIT_MINICAN_INIT_MSG2": "baudrate",
    "UNIT_MINICAN_INIT_MSG3": "ID",
    "UNIT_MINICAN_INIT_MSG4": "prescaler",
    "UNIT_MINICAN_INIT_MSG5": "sjw",
    "UNIT_MINICAN_INIT_MSG6": "bs1",
    "UNIT_MINICAN_INIT_MSG7": "bs2",
    "UNIT_MINICAN_INIT_MSG8": "triple sampling",
    "UNIT_MINICAN_DEINIT_MSG0": "deinit",
    "UNIT_MINICAN_RESTART_MSG0": "restart",
    "UNIT_MINICAN_GET_STATE_MSG0": "get state (return int)",
    "UNIT_MINICAN_GET_INFO_MSG0": "get error status information",
    "UNIT_MINICAN_ANY_MSG0": "count of available (return True or False)",
    "UNIT_MINICAN_RECV_MESSAGE_MSG0": "read message timeout",
    "UNIT_MINICAN_RECV_MESSAGE_MSG1": "(return tuple)",
    "UNIT_MINICAN_RECV_MESSAGE_INFO_MSG0": "read message into",
    "UNIT_MINICAN_RECV_MESSAGE_INFO_MSG1": "timeout",
    "UNIT_MINICAN_SEND_DATA_MSG0": "send",
    "UNIT_MINICAN_SEND_DATA_MSG1": "id",
    "UNIT_MINICAN_SEND_DATA_MSG2": "timeout",
    "UNIT_MINICAN_SEND_DATA_MSG3": "rtr",
    "UNIT_MINICAN_SEND_DATA_MSG4": "extframe",
    "UNIT_CATM_INIT_MSG0": "Init %1 UART %2",
    "UNIT_CATM_CHECK_MODEM_IS_READY_MSG0": "check if modem is ready (return True or False)",
    "UNIT_CATM_GET_SIGNAL_STRENGTH_MSG0": "get",
    "UNIT_CATM_GET_SIGNAL_STRENGTH_MSG1": "signal strength (return int)",
    "UNIT_CATM_GET_MODEL_IDENTIFICATION_MSG0": "get",
    "UNIT_CATM_GET_MODEL_IDENTIFICATION_MSG1": "model identification (return string)",
    "UNIT_CATM_GET_DATA_CONTENT_MSG0": "get",
    "UNIT_CATM_GET_DATA_CONTENT_MSG1": "data content (return string)",
    "UNIT_CATM_GET_GPRS_NETWORK_STATUS_MSG0": "get",
    "UNIT_CATM_GET_GPRS_NETWORK_STATUS_MSG1": "gprs network status (return int)",
    "UNIT_CATM_GET_SHOW_PDP_ADDRESS_MSG0": "get",
    "UNIT_CATM_GET_SHOW_PDP_ADDRESS_MSG1": "show pdp address cid",
    "UNIT_CATM_GET_SHOW_PDP_ADDRESS_MSG2": "(1 ~ 2) (return string)",
    "UNIT_CATM_GET_SELECTED_OPERATOR_MSG0": "get",
    "UNIT_CATM_GET_SELECTED_OPERATOR_MSG1": "selected operator (return string)",
    "UNIT_CATM_GET_MODE_SELECTION_MSG0": "get",
    "UNIT_CATM_GET_MODE_SELECTION_MSG1": "preferred mode selection (return int)",
    "UNIT_CATM_GET_NETWORK_ACTIVATED_MSG0": "get",
    "UNIT_CATM_GET_NETWORK_ACTIVATED_MSG1": "APP network activated pdp id",
    "UNIT_CATM_GET_NETWORK_ACTIVATED_MSG2": "(0 ~ 3)",
    "UNIT_CATM_GET_NETWORK_IP_MSG0": "get",
    "UNIT_CATM_GET_NETWORK_IP_MSG1": "network ip pdp id",
    "UNIT_CATM_GET_NETWORK_IP_MSG2": "(0 ~ 3) (return string)",
    "UNIT_CATM_SET_COMMAND_ECHO_MODE_MSG0": "set echo command mode",
    "UNIT_CATM_SET_GPRS_NETWORK_STATE_MSG0": "set gprs network state",
    "UNIT_CATM_SET_PDP_CONTEXT_MSG0": "set define PDP context apn",
    "UNIT_CATM_SET_MODE_SELECTION_MSG0": "set preferred mode selection",
    "UNIT_CATM_SET_NETWORK_ACTIVE_MSG0": "set APP network active PDP id",
    "UNIT_CATM_SET_NETWORK_ACTIVE_MSG1": "action",
    "UNIT_CATM_SET_MODEM_DEBUG_MSG0": "set AT command debug print",
    "UNIT_CATM_MQTT_SERVER_CONNECT_MSG0": "MQTT server connect",
    "UNIT_CATM_MQTT_SERVER_CONNECT_MSG1": "server",
    "UNIT_CATM_MQTT_SERVER_CONNECT_MSG2": "port",
    "UNIT_CATM_MQTT_SERVER_CONNECT_MSG3": "client id",
    "UNIT_CATM_MQTT_SERVER_CONNECT_MSG4": "username",
    "UNIT_CATM_MQTT_SERVER_CONNECT_MSG5": "password",
    "UNIT_CATM_MQTT_SERVER_CONNECT_MSG6": "keepalive (0 ~ 65535)",
    "UNIT_CATM_MQTT_SERVER_DISCONNECT_MSG0": "MQTT server disconnect",
    "UNIT_CATM_MQTT_UNSUBSCRIBE_TOPIC_MSG0": "MQTT unsubscribe topic",
    "UNIT_CATM_MQTT_PUBLISH_TOPIC_MSG0": "MQTT publish topic",
    "UNIT_CATM_MQTT_PUBLISH_TOPIC_MSG1": "msg",
    "UNIT_CATM_MQTT_PUBLISH_TOPIC_MSG2": "QoS",
    "UNIT_CATM_MQTT_PUBLISH_TOPIC_MSG3": "(0 ~ 2)",
    "UNIT_CATM_MQTT_POLLING_LOOP_MSG0": "MQTT polling loop",
    "UNIT_CATM_MQTT_SERVER_IS_CONNECT_MSG0": "check MQTT server is connect (return int)",
    "UNIT_CATM_MQTT_SUBSCRIBE_MSG0": "MQTT subscribe topic",
    "UNIT_CATM_MQTT_SUBSCRIBE_MSG1": "QoS",
    "UNIT_CATM_MQTT_SUBSCRIBE_MSG2": "(0 ~ 2)",
    "UNIT_CATM_MQTT_SUBSCRIBE_CALLBACK_MSG0": "MQTT subscribe callback topic",
    "UNIT_CATM_MQTT_SUBSCRIBE_CALLBACK_MSG1": "msg",
    "UNIT_CATM_HTTP_SERVER_CONNECT_MSG0": "HTTP server connect",
    "UNIT_CATM_HTTP_SERVER_DISCONNECT_MSG0": "HTTP server disconnect",
    "UNIT_CATM_HTTP_GET_RESPONSE_CODE_MSG0": "get",
    "UNIT_CATM_HTTP_GET_RESPONSE_CODE_MSG1": "response status code (return int)",
    "UNIT_CATM_IS_HTTP_SERVER_CONNECT_MSG0": "check http server is connect (return True or False)",
    "UNIT_CATM_HTTP_REQUEST_MSG0": "HTTP request",
    "UNIT_CATM_HTTP_REQUEST_MSG1": "method",
    "UNIT_CATM_HTTP_REQUEST_MSG2": "URL",
    "UNIT_CATM_HTTP_REQUEST_MSG3": "headers",
    "UNIT_CATM_HTTP_REQUEST_MSG4": "data",
    "UNIT_CATM_SUBSCRIBE_CALLBACK_MSG0": "%1 MQTT subscribe %2 with topic QoS %3 (0 ~ 2)",
    "UNIT_CATM_GET_TOPIC_MSG0": "get topic (return bytes)",
    "UNIT_CATM_GET_MSG_MSG0": "get msg (return bytes)",
    "UNIT_CATMGNSS_INIT_MSG0": "Init %1 UART %2",
    "UNIT_CATMGNSS_CHECK_MODEM_IS_READY_MSG0": "check if modem is ready (return True or False)",
    "UNIT_CATMGNSS_GET_SIGNAL_STRENGTH_MSG0": "get",
    "UNIT_CATMGNSS_GET_SIGNAL_STRENGTH_MSG1": "signal strength (return int)",
    "UNIT_CATMGNSS_GET_MODEL_IDENTIFICATION_MSG0": "get",
    "UNIT_CATMGNSS_GET_MODEL_IDENTIFICATION_MSG1": "model identification (return string)",
    "UNIT_CATMGNSS_GET_DATA_CONTENT_MSG0": "get",
    "UNIT_CATMGNSS_GET_DATA_CONTENT_MSG1": "data content (return string)",
    "UNIT_CATMGNSS_GET_GPRS_NETWORK_STATUS_MSG0": "get",
    "UNIT_CATMGNSS_GET_GPRS_NETWORK_STATUS_MSG1": "gprs network status (return int)",
    "UNIT_CATMGNSS_GET_SHOW_PDP_ADDRESS_MSG0": "get",
    "UNIT_CATMGNSS_GET_SHOW_PDP_ADDRESS_MSG1": "show pdp address cid",
    "UNIT_CATMGNSS_GET_SHOW_PDP_ADDRESS_MSG2": "(1 ~ 2) (return string)",
    "UNIT_CATMGNSS_GET_SELECTED_OPERATOR_MSG0": "get",
    "UNIT_CATMGNSS_GET_SELECTED_OPERATOR_MSG1": "selected operator (return string)",
    "UNIT_CATMGNSS_GET_MODE_SELECTION_MSG0": "get",
    "UNIT_CATMGNSS_GET_MODE_SELECTION_MSG1": "preferred mode selection (return int)",
    "UNIT_CATMGNSS_GET_NETWORK_ACTIVATED_MSG0": "get",
    "UNIT_CATMGNSS_GET_NETWORK_ACTIVATED_MSG1": "APP network activated pdp id",
    "UNIT_CATMGNSS_GET_NETWORK_ACTIVATED_MSG2": "(0 ~ 3)",
    "UNIT_CATMGNSS_GET_NETWORK_IP_MSG0": "get",
    "UNIT_CATMGNSS_GET_NETWORK_IP_MSG1": "network ip pdp id",
    "UNIT_CATMGNSS_GET_NETWORK_IP_MSG2": "(0 ~ 3) (return string)",
    "UNIT_CATMGNSS_SET_COMMAND_ECHO_MODE_MSG0": "set echo command mode",
    "UNIT_CATMGNSS_SET_GPRS_NETWORK_STATE_MSG0": "set gprs network state",
    "UNIT_CATMGNSS_SET_PDP_CONTEXT_MSG0": "set define PDP context apn",
    "UNIT_CATMGNSS_SET_MODE_SELECTION_MSG0": "set preferred mode selection",
    "UNIT_CATMGNSS_SET_NETWORK_ACTIVE_MSG0": "set APP network active PDP id",
    "UNIT_CATMGNSS_SET_NETWORK_ACTIVE_MSG1": "action",
    "UNIT_CATMGNSS_SET_MODEM_DEBUG_MSG0": "set AT command debug print",
    "UNIT_CATMGNSS_MQTT_SERVER_CONNECT_MSG0": "MQTT server connect",
    "UNIT_CATMGNSS_MQTT_SERVER_CONNECT_MSG1": "server",
    "UNIT_CATMGNSS_MQTT_SERVER_CONNECT_MSG2": "port",
    "UNIT_CATMGNSS_MQTT_SERVER_CONNECT_MSG3": "client id",
    "UNIT_CATMGNSS_MQTT_SERVER_CONNECT_MSG4": "username",
    "UNIT_CATMGNSS_MQTT_SERVER_CONNECT_MSG5": "password",
    "UNIT_CATMGNSS_MQTT_SERVER_CONNECT_MSG6": "keepalive (0 ~ 65535)",
    "UNIT_CATMGNSS_MQTT_SERVER_DISCONNECT_MSG0": "MQTT server disconnect",
    "UNIT_CATMGNSS_MQTT_UNSUBSCRIBE_TOPIC_MSG0": "MQTT unsubscribe topic",
    "UNIT_CATMGNSS_MQTT_PUBLISH_TOPIC_MSG0": "MQTT publish topic",
    "UNIT_CATMGNSS_MQTT_PUBLISH_TOPIC_MSG1": "msg",
    "UNIT_CATMGNSS_MQTT_PUBLISH_TOPIC_MSG2": "QoS",
    "UNIT_CATMGNSS_MQTT_PUBLISH_TOPIC_MSG3": "(0 ~ 2)",
    "UNIT_CATMGNSS_MQTT_POLLING_LOOP_MSG0": "MQTT polling loop",
    "UNIT_CATMGNSS_MQTT_SERVER_IS_CONNECT_MSG0": "check MQTT server is connect (return int)",
    "UNIT_CATMGNSS_MQTT_SUBSCRIBE_MSG0": "MQTT subscribe topic",
    "UNIT_CATMGNSS_MQTT_SUBSCRIBE_MSG1": "QoS",
    "UNIT_CATMGNSS_MQTT_SUBSCRIBE_MSG2": "(0 ~ 2)",
    "UNIT_CATMGNSS_MQTT_SUBSCRIBE_CALLBACK_MSG0": "MQTT subscribe callback topic",
    "UNIT_CATMGNSS_MQTT_SUBSCRIBE_CALLBACK_MSG1": "msg",
    "UNIT_CATMGNSS_HTTP_SERVER_CONNECT_MSG0": "HTTP server connect",
    "UNIT_CATMGNSS_HTTP_SERVER_DISCONNECT_MSG0": "HTTP server disconnect",
    "UNIT_CATMGNSS_HTTP_GET_RESPONSE_CODE_MSG0": "get",
    "UNIT_CATMGNSS_HTTP_GET_RESPONSE_CODE_MSG1": "response status code (return int)",
    "UNIT_CATMGNSS_IS_HTTP_SERVER_CONNECT_MSG0": "check http server is connect (return True or False)",
    "UNIT_CATMGNSS_HTTP_REQUEST_MSG0": "HTTP request",
    "UNIT_CATMGNSS_HTTP_REQUEST_MSG1": "method",
    "UNIT_CATMGNSS_HTTP_REQUEST_MSG2": "URL",
    "UNIT_CATMGNSS_HTTP_REQUEST_MSG3": "headers",
    "UNIT_CATMGNSS_HTTP_REQUEST_MSG4": "data",
    "UNIT_CATMGNSS_GET_CHECK_GNSS_POWER_MSG0": "get",
    "UNIT_CATMGNSS_GET_CHECK_GNSS_POWER_MSG1": "check GNSS power status (return int)",
    "UNIT_CATMGNSS_SET_GNSS_POWER_CTRL_MSG0": "set GNSS power control",
    "UNIT_CATMGNSS_SET_GNSS_WORK_MODE_MSG0": "set GNSS work mode",
    "UNIT_CATMGNSS_GNSS_NMEA_OUTPUT_POLLING_MSG0": "GNSS NMEA output polling loop",
    "UNIT_CATMGNSS_GET_NMEA_PARAM_MSG0": "GNSS NMEA parameter",
    "UNIT_CATMGNSS_GET_NMEA_PARAM_MSG1": "(return string)",
    "UNIT_CATMGNSS_GET_GNSS_POSITION_MSG0": "get",
    "UNIT_CATMGNSS_GET_GNSS_POSITION_MSG1": "GNSS position",
    "UNIT_CATMGNSS_GET_GNSS_POSITION_MSG2": "format",
    "UNIT_CATMGNSS_GET_GNSS_POSITION_MSG3": "(return string)",
    "UNIT_CATMGNSS_SET_GNSS_START_MSG0": "set GNSS",
    "UNIT_CATMGNSS_SET_GNSS_START_MSG1": "start",
    "UNIT_CATMGNSS_SET_TIME_ZONE_MSG0": "set time zone hours",
    "UNIT_CATMGNSS_SET_TIME_ZONE_MSG1": "minutes",
    "UNIT_CATMGNSS_SUBSCRIBE_CALLBACK_MSG0": "%1 MQTT subscribe %2 with topic QoS %3 (0 ~ 2)",
    "UNIT_CATMGNSS_GET_TOPIC_MSG0": "get topic (return bytes)",
    "UNIT_CATMGNSS_GET_MSG_MSG0": "get msg (return bytes)",
    "UNIT_FADER_INIT_MSG0": "Init %1",
    "UNIT_FADER_GET_VOLTAGE_MSG0": "get %1 voltage (V, return float)",
    "UNIT_FADER_GET_RAW_MSG0": "get %1 raw value (return int)",
    "UNIT_FADER_UPDATE_COLOR_MSG0": "%1 update the color based on adc value",
    "UNIT_FADER_UPDATE_BRIGHTNESS_MSG0": "%1 update the brightness based on adc value",
    "UNIT_FADER_SET_BRIGHTNESS_MSG0": "%1 set brightness %2 (0 ~ 100)",
    "UNIT_FADER_FILL_COLOR_MSG0": "%1 fill RGB LED color %2",
    "UNIT_FADER_SET_COLOR_MSG0": "%1 set RGB LED index %2 RGB color %3",
    "UNIT_FAN_INIT_MSG0": "Init %1",
    "UNIT_FAN_SET_SPEED_CTRL_MSG0": "%1 set speed control %2 (0 ~ 100)",
    "UNIT_FAN_SET_PWM_FREQ_MSG0": "%1 set PWM frequency %2 (1 ~ 40000000)",
    "UNIT_LASERRX_INIT_MSG0": "Init %1 with mode",
    "UNIT_LASERRX_INIT_MSG1": "id",
    "UNIT_LASERRX_CONFIGURE_UART_MSG0": "init uart with",
    "UNIT_LASERRX_CONFIGURE_UART_MSG1": "baudrate",
    "UNIT_LASERRX_CONFIGURE_UART_MSG2": "bits",
    "UNIT_LASERRX_CONFIGURE_UART_MSG3": "parity",
    "UNIT_LASERRX_CONFIGURE_UART_MSG4": "stop",
    "UNIT_LASERRX_UART_READ_BYTES_MSG0": "%1 read bytes (return bytes)",
    "UNIT_LASERRX_UART_ANY_MSG0": "%1 number of data available (return int)",
    "UNIT_LASERRX_GPIO_GET_VALUE_MSG0": "%1 get value (return 0 or 1)",
    "UNIT_LASERTX_INIT_MSG0": "Init %1 with mode",
    "UNIT_LASERTX_INIT_MSG1": "id",
    "UNIT_LASERTX_CONFIGURE_UART_MSG0": "init uart with",
    "UNIT_LASERTX_CONFIGURE_UART_MSG1": "baudrate",
    "UNIT_LASERTX_CONFIGURE_UART_MSG2": "bits",
    "UNIT_LASERTX_CONFIGURE_UART_MSG3": "parity",
    "UNIT_LASERTX_CONFIGURE_UART_MSG4": "stop",
    "UNIT_LASERTX_GPIO_ON_MSG0": "%1 on",
    "UNIT_LASERTX_GPIO_OFF_MSG0": "%1 off",
    "UNIT_LASERTX_GPIO_SET_VALUE_MSG0": "%1 set value %2 (0 ~ 1)",
    "UNIT_LASERTX_UART_WRITE_MESSAGE_MSG0": "%1 write message %2 in string",
    "UNIT_LASERTX_UART_WRITE_LIST_MSG0": "%1 write data in list %2",
    "UNIT_SSR_INIT_MSG0": "Init %1",
    "UNIT_SSR_ON_MSG0": "%1 on",
    "UNIT_SSR_OFF_MSG0": "%1 off",
    "UNIT_SSR_SET_STATE_MSG0": "%1 set state %2",
    "UNIT_ENCODER_INIT_MSG0": "Init %1 I2C address %2",
    "UNIT_ENCODER_GET_ROTARY_STATUS_MSG0": "%1 had rotated (return True or False)",
    "UNIT_ENCODER_GET_ROTARY_VALUE_MSG0": "get %1 rotary value (return int)",
    "UNIT_ENCODER_GET_BUTTON_STATUS_MSG0": "get %1 button status (return True or False)",
    "UNIT_ENCODER_FILL_COLOR_MSG0": "%1 fill RGB LED color %2",
    "UNIT_ENCODER_SET_COLOR_MSG0": "%1 set RGB LED index %2 RGB color %3",
    "UNIT_ENCODER_GET_INCREMENTS_MSG0": "get %1 rotary increments (return int)",
    "UNIT_ENCODER_RESET_VALUE_MSG0": "%1 reset rotary value",
    "UNIT_ENCODER_SET_VALUE_MSG0": "%1 set rotary value %2",
    "UNIT_BUTTON_INIT_MSG0": "Init %1 active low %2 type %3",
    "UNIT_BUTTON_GET_COUNTER_VALUE_MSG0": "get %1 counter value (return int)",
    "UNIT_BUTTON_RESET_COUNTER_VALUE_MSG0": "Reset %1 counter value",
    "UNIT_BUTTON_TICK_MSG0": "%1 update in loop",
    "UNIT_BUTTON_CALLBACK_MSG0": "When %1 %2",
    "UNIT_BLDCDRIVER_INIT_MSG0": "Init %1 I2C address %2 (0x08 ~ 0x77)",
    "UNIT_BLDCDRIVER_GET_CURRENT_MODE_MSG0": "get %1 current mode (return 0 or 1)",
    "UNIT_BLDCDRIVER_GET_MOTOR_CURRENT_DIRECTION_MSG0": "get %1 motor current direction (return 0 or 1)",
    "UNIT_BLDCDRIVER_GET_MOTOR_CURRENT_MODEL_MSG0": "get %1 motor current model (return 0 or 1)",
    "UNIT_BLDCDRIVER_GET_MOTOR_POLE_PAIRS_MSG0": "get %1 motor number of pole pairs (return int)",
    "UNIT_BLDCDRIVER_GET_MOTOR_STATUS_MSG0": "get %1 motor status (return int)",
    "UNIT_BLDCDRIVER_GET_OPEN_LOOP_PWM_MSG0": "get %1 open loop PWM value (return int)",
    "UNIT_BLDCDRIVER_GET_READ_BACK_RPM_FLOAT_MSG0": "get %1 read back rpm value in float (return float)",
    "UNIT_BLDCDRIVER_GET_READ_BACK_RPM_INT_MSG0": "get %1 read back rpm value in int (x100, return int)",
    "UNIT_BLDCDRIVER_GET_READ_BACK_RPM_STR_MSG0": "get %1 read back rpm value (return string)",
    "UNIT_BLDCDRIVER_GET_READ_BACK_FREQ_FLOAT_MSG0": "get %1 read back freq value in float (return float)",
    "UNIT_BLDCDRIVER_GET_READ_BACK_FREQ_INT_MSG0": "get %1 read back freq value in int (x100, return int)",
    "UNIT_BLDCDRIVER_GET_READ_BACK_FREQ_STR_MSG0": "get %1 read back freq value (return string)",
    "UNIT_BLDCDRIVER_GET_RPM_FLOAT_MSG0": "get %1 rpm value (return float)",
    "UNIT_BLDCDRIVER_GET_RPM_INT_MSG0": "get %1 rpm value (return int)",
    "UNIT_BLDCDRIVER_GET_PID_VALUE_MSG0": "get %1 PID value (return tuple)",
    "UNIT_BLDCDRIVER_GET_DEVICE_SPEC_MSG0": "get %1 %2 spec detail (return int)",
    "UNIT_BLDCDRIVER_SET_MODE_MSG0": "Set %1 %2 mode",
    "UNIT_BLDCDRIVER_SET_DIRECTION_MSG0": "Set %1 motor %2 direction",
    "UNIT_BLDCDRIVER_SET_MOTOR_MODEL_MSG0": "Set %1 motor %2 model",
    "UNIT_BLDCDRIVER_SAVE_DATA_IN_FLASH_MSG0": "%1 save current motor data in flash",
    "UNIT_BLDCDRIVER_SET_ADDRESS_MSG0": "Set %1 I2C address %2 (0x08 ~ 0x77)",
    "UNIT_BLDCDRIVER_SET_POLE_PAIRS_MSG0": "Set %1 %2 number of pole pairs",
    "UNIT_BLDCDRIVER_SET_OPEN_LOOP_PWM_MSG0": "Set %1 open loop PWM %2 (0 ~ 2047)",
    "UNIT_BLDCDRIVER_SET_RPM_FLOAT_MSG0": "Set %1 motor rpm %2 in float",
    "UNIT_BLDCDRIVER_SET_RPM_INT_MSG0": "Set %1 motor rpm %2 in int",
    "UNIT_BLDCDRIVER_SET_PID_VALUE_MSG0": "Set %1 P %2 I %3 D %4",
    "UNIT_REFLECTIVEIR_INIT_MSG0": "Init %1",
    "UNIT_REFLECTIVEIR_GET_ANALOG_VALUE_MSG0": "get %1 analog value (return 0 ~ 65535)",
    "UNIT_REFLECTIVEIR_GET_DIGITAL_VALUE_MSG0": "get %1 digital value (return 0 or 1)",
    "UNIT_REFLECTIVEIR_ENABLE_IRQ_MSG0": "%1 enable detect event",
    "UNIT_REFLECTIVEIR_DISABLE_IRQ_MSG0": "%1 disable detect event",
    "UNIT_REFLECTIVEIR_CALLBACK_MSG0": "When %1 %2",
    "UNIT_HALLEFFECT_INIT_MSG0": "Init %1",
    "UNIT_HALLEFFECT_ENABLE_IRQ_MSG0": "%1 enable detect event",
    "UNIT_HALLEFFECT_DISABLE_IRQ_MSG0": "%1 disable detect event",
    "UNIT_HALLEFFECT_GET_STATUS_MSG0": "get %1 status (return True or False)",
    "UNIT_HALLEFFECT_CALLBACK_MSG0": "When %1 %2",
    "UNIT_HALLEFFECT_IRQ_ACTIVE_MSG0": "%1 IRQ_ACTIVE",
    "UNIT_HALLEFFECT_IRQ_NEGACTIVE_MSG0": "%1 IRQ_NEGATIVE",
    "UNIT_BUZZER_INIT_MSG0": "Init %1",
    "UNIT_BUZZER_DEINIT_MSG0": "%1 deinit",
    "UNIT_BUZZER_TURN_OFF_MSG0": "%1 turn off",
    "UNIT_BUZZER_SET_FREQ_MSG0": "%1 set freq %2 Hz(100 ~ 10000)",
    "UNIT_BUZZER_SET_DUTY_MSG0": "%1 set duty %2 %",
    "UNIT_BUZZER_SET_ONCE_MSG0": "play once with",
    "UNIT_BUZZER_SET_ONCE_MSG1": "freq (100 ~ 10000 Hz)",
    "UNIT_BUZZER_SET_ONCE_MSG2": "duty (%)",
    "UNIT_BUZZER_SET_ONCE_MSG3": "duration (ms)",
    "UNIT_EXTENCODER_INIT_MSG0": "Init %1 I2C address %2 (0x08 ~ 0x77)",
    "UNIT_EXTENCODER_GET_ROTARY_STATUS_MSG0": "%1 had rotated (return True or False)",
    "UNIT_EXTENCODER_GET_ROTARY_VALUE_MSG0": "get %1 rotary value (return int)",
    "UNIT_EXTENCODER_GET_INCREMENTS_MSG0": "get %1 rotary increments (return int)",
    "UNIT_EXTENCODER_RESET_VALUE_MSG0": "Reset %1 rotary value",
    "UNIT_EXTENCODER_SET_VALUE_MSG0": "Set %1 rotary value %2",
    "UNIT_EXTENCODER_GET_PERIMETER_MSG0": "get %1 perimeter (return int)",
    "UNIT_EXTENCODER_GET_PULSE_MSG0": "get %1 pulse (return int)",
    "UNIT_EXTENCODER_GET_ZERO_MODE_MSG0": "get %1 zero mode (return int)",
    "UNIT_EXTENCODER_GET_METER_VALUE_MSG0": "get %1 meter value (return int)",
    "UNIT_EXTENCODER_GET_ZERO_PULSE_MSG0": "get %1 zero pulse value (return int)",
    "UNIT_EXTENCODER_SET_PERIMETER_MSG0": "Set %1 perimeter %2",
    "UNIT_EXTENCODER_SET_PULSE_MSG0": "Set %1 pulse %2",
    "UNIT_EXTENCODER_SET_ZERO_MODE_MSG0": "Set %1 zero mode %2",
    "UNIT_EXTENCODER_SET_ZERO_PULSE_MSG0": "Set %1 zero pulse %2",
    "UNIT_EXTENCODER_GET_FW_VERSION_MSG0": "get %1 firmware version (return string)",
    "UNIT_EXTENCODER_SET_ADDRESS_MSG0": "Set %1 I2C address %2 (0x08 ~ 0x77)",
    "UNIT_ACCEL_INIT_MSG0": "Init %1 I2C address %2",
    "UNIT_ACCEL_GET_ACCEL_MSG0": "%1 get accel (return tuple)",
    "UNIT_ACCEL_ENABLE_MOTION_DETECTION_MSG0": "%1 set motion detection threshold %2",
    "UNIT_ACCEL_DISABLE_MOTION_DETECTION_MSG0": "%1 disable motion detection",
    "UNIT_ACCEL_IS_TAP_MSG0": "%1 is tap (return True or False)",
    "UNIT_ACCEL_IS_MOTION_MSG0": "%1 is motion (return True or False)",
    "UNIT_ACCEL_IS_FREEFALL_MSG0": "%1 is freefall (return True or False)",
    "UNIT_ACCEL_ENABLE_FREEFALL_DETECTION_MSG0": "%1 enable freefall detection",
    "UNIT_ACCEL_SET_FREEFALL_DETECTION_MSG0": "%1 set freefall detection threshold %2 time %3 ms",
    "UNIT_ACCEL_DISABLE_FREEFALL_DETECTION_MSG0": "%1 disable freefall detection",
    "UNIT_ACCEL_DISABLE_TAP_DETECTION_MSG0": "%1 disable tap detection",
    "UNIT_ACCEL_GET_DATA_RATE_MSG0": "%1 get data rate",
    "UNIT_ACCEL_GET_RANGE_MSG0": "%1 get range",
    "UNIT_ACCEL_SET_DATA_RATE_MSG0": "%1 set data rate %2",
    "UNIT_ACCEL_SET_RANGE_MSG0": "%1 set range %2",
    "UNIT_ACCEL_ENABLE_TAP_DETECTION_MSG0": "%1 enable tap detection",
    "UNIT_ACCEL_SET_TAP_DETECTION_MSG0": "%1 set tap detection",
    "UNIT_ACCEL_SET_TAP_DETECTION_MSG1": "tap count",
    "UNIT_ACCEL_SET_TAP_DETECTION_MSG2": "threshold",
    "UNIT_ACCEL_SET_TAP_DETECTION_MSG3": "duration",
    "UNIT_ACCEL_SET_TAP_DETECTION_MSG4": "latency",
    "UNIT_ACCEL_SET_TAP_DETECTION_MSG5": "window",
    "UNIT_DDS_INIT_MSG0": "Init %1 I2C address %2",
    "UNIT_DDS_SET_FREQ_MSG0": "%1 set frequency %2 to %3 Hz",
    "UNIT_DDS_SET_PHASE_MSG0": "%1 set phase %2 to %3 degrees",
    "UNIT_DDS_SET_FREQ_PHASE_MSG0": "%1 set frequency %2 to %3 Hz and phase %4 to %5 degrees",
    "UNIT_DDS_SET_MODE_MSG0": "%1 set output mode to %2",
    "UNIT_DDS_SET_QUICK_OUTPUT_MSG0": "%1 quickly set output mode to %2 freq to %3 Hz and phase to %4 degrees",
    "UNIT_DDS_SET_OUTPUT_MSG0": "%1 output signal with freq %2 and phase %3",
    "UNIT_DDS_SET_SLEEP_MODE_MSG0": "%1 set sleep mode to %2",
    "UNIT_DDS_RESET_MSG0": "%1 reset",
    "UNIT_DDS_SELECT_FREQ_REG_MSG0": "%1 select frequency %2",
    "UNIT_DDS_SELECT_PHASE_REG_MSG0": "%1 select phase %2",
    "UNIT_DDS_SET_CTRL_MSG0": "%1 set control register %2 freq %3 phase %4 disable mclk %5 disable dac %6 reset %7",
    "UNIT_DIGICLOCK_INIT_MSG0": "Init %1 I2C address %2",
    "UNIT_DIGICLOCK_CLEAR_MSG0": "%1 clear the display",
    "UNIT_DIGICLOCK_SET_BRIGHTNESS_MSG0": "%1 set brightness %2 (0 ~ 8)",
    "UNIT_DIGICLOCK_SET_RAW_MSG0": "%1 write raw data %2 to the %3th digit",
    "UNIT_DIGICLOCK_SET_CHAR_MSG0": "%1 write character %2 to the %3th digit",
    "UNIT_DIGICLOCK_SET_STRING_MSG0": "%1 write string %2 to the display",
    "UNIT_DIGICLOCK_GET_FW_VERSION_MSG0": "get %1 firmware version (return int)",
    "UNIT_FLASHLIGHT_INIT_MSG0": "Init %1",
    "UNIT_FLASHLIGHT_SET_FLASH_MSG0": "%1 set flash with %2 brightness %3 time %4 turn off after flash %5",
    "UNIT_GROVE2GROVE_INIT_MSG0": "Init %1",
    "UNIT_GROVE2GROVE_SET_ON_MSG0": "%1 turn on",
    "UNIT_GROVE2GROVE_SET_OFF_MSG0": "%1 turn off",
    "UNIT_GROVE2GROVE_SET_STATE_MSG0": "%1 set state to %2",
    "UNIT_GROVE2GROVE_GET_CURRENT_MSG0": "get %1 current (A, return float)",
    "UNIT_KEY_INIT_MSG0": "Init %1",
    "UNIT_KEY_GET_STATE_MSG0": "get %1 key state (return 0 or 1)",
    "UNIT_KEY_SET_COLOR_MSG0": "Set %1 RGB LED color %2",
    "UNIT_KEY_SET_BRIGHTNESS_MSG0": "Set %1 brightness %2 %",
    "UNIT_KEY_BUTTON_CALLBACK_MSG0": "When %1 was %2",
    "UNIT_KEY_BUTTON_TICK_MSG0": "%1 update in loop",
    "UNIT_TUBEPRESSURE_INIT_MSG0": "Init %1",
    "UNIT_TUBEPRESSURE_GET_CURRENT_MSG0": "get %1 pressure (kPa, return float)",
    "UNIT_TUBEPRESSURE_GET_ANALOG_VALUE_MSG0": "get %1 ADC %2 raw value (return int)",
    "UNIT_TUBEPRESSURE_GET_VOLTAGE_MSG0": "get %1 sensor output voltage (mV, return float)",
    "UNIT_NECO_INIT_MSG0": "Init %1 total LED %2 button active low %3",
    "UNIT_NECO_SET_INDEX_COLOR_MSG0": "%1 set RGB LED index %2 color %3",
    "UNIT_NECO_SET_FILL_COLOR_MSG0": "%1 fill RGB LED color %2",
    "UNIT_NECO_SET_BRIGHTNESS_MSG0": "%1 set brightness %2 % (0 ~ 100)",
    "UNIT_NECO_BUTTON_GET_STATUS_MSG0": "%1 button %2",
    "UNIT_NECO_BUTTON_CALLBACK_MSG0": "When %1 %2",
    "UNIT_NECO_BUTTON_TICK_MSG0": "%1 update in loop",
    "UNIT_NECO_SET_COLOR_FROM_MSG0": "%1 set RGB LED begin %2 to end %3 color %4 delay %5 ms",
    "UNIT_NECO_SET_COLOR_RUNNING_FROM_MSG0": "%1 set running RGB LED begin %2 to end %3 color %4 delay %5 ms",
    "UNIT_NECO_SET_RANDOM_LED_FROM_MSG0": "%1 set random RGB LED begin %2 to end %3 random color",
    "UNIT_AIN4_20MA_INIT_MSG0": "Init %1 I2C address %2 (0x08 ~ 0x77)",
    "UNIT_AIN4_20MA_GET_ADC_RAW16_VALUE_MSG0": "get %1 12bit ADC raw value (return int)",
    "UNIT_AIN4_20MA_GET_CURRENT_VALUE_MSG0": "get %1 4 to 20 mA current (return float)",
    "UNIT_AIN4_20MA_GET_DEVICE_SPEC_MSG0": "get %1 %2 spec detail (return int)",
    "UNIT_AIN4_20MA_GET_FIRMWARE_VERSION_MSG0": "get %1 firmware version (return int)",
    "UNIT_AIN4_20MA_GET_I2C_ADDRESS_MSG0": "get %1 I2C address (return int)",
    "UNIT_AIN4_20MA_SET_I2C_ADDRESS_MSG0": "Set %1 I2C address %2 (0x08 ~ 0x77)",
    "UNIT_AIN4_20MA_SET_CAL_CURRENT_MSG0": "Set %1 calibration current %2 mA (4 ~ 20)",
    "UNIT_TVOC_INIT_MSG0": "Init %1",
    "UNIT_TVOC_SET_BASELINE_CO2_TVOC_MSG0": "%1 set baseline CO2eq %2 TVOC %3",
    "UNIT_TVOC_SET_RELATIVE_HUMIDITY_MSG0": "%1 set relative humidity %2 in RH temperature %3 in °C",
    "UNIT_TVOC_GET_CO2EQ_MSG0": "get %1 CO2 equivalent (ppm, return int)",
    "UNIT_TVOC_GET_BASELINE_CO2EQ_MSG0": "get %1 CO2 equivalent baseline (return int)",
    "UNIT_TVOC_GET_TVOC_MSG0": "get %1 TVOC (ppb, return int)",
    "UNIT_TVOC_GET_BASELINE_TVOC_MSG0": "get %1 TVOC baseline (return int)",
    "UNIT_TVOC_GET_RAW_H2_MSG0": "get %1 raw H2 (return int)",
    "UNIT_TVOC_GET_RAW_ETHANOL_MSG0": "get %1 raw ethanol (return int)",
    "UNIT_CATCH_INIT_MSG0": "Init %1",
    "UNIT_CATCH_DEINIT_MSG0": "%1 deinit",
    "UNIT_CATCH_CLAMP_MSG0": "%1 clamp the gripper",
    "UNIT_CATCH_RELEASE_MSG0": "%1 release the gripper",
    "UNIT_CATCH_SET_DUTY_MSG0": "%1 set duty cycle to %2 (20 ~ 54)",
    "UNIT_CATCH_SET_CLAMP_PERCENT_MSG0": "%1 set clamping percentage to %2 %",
    "UNIT_JOYSTICK_INIT_MSG0": "Init %1 I2C address %2",
    "UNIT_JOYSTICK_GET_X_RAW_MSG0": "get %1 x-axis raw value (return int)",
    "UNIT_JOYSTICK_GET_Y_RAW_MSG0": "get %1 y-axis raw value (return int)",
    "UNIT_JOYSTICK_GET_X_MSG0": "get %1 x-axis value (return int)",
    "UNIT_JOYSTICK_GET_Y_MSG0": "get %1 y-axis value (return int)",
    "UNIT_JOYSTICK_GET_BUTTON_STATUS_MSG0": "get %1 button status (return True or False)",
    "UNIT_JOYSTICK_SET_SWAP_X_MSG0": "%1 swap x-axis direction %2",
    "UNIT_JOYSTICK_SET_SWAP_Y_MSG0": "%1 swap y-axis direction %2",
    "UNIT_JOYSTICK2_INIT_MSG0": "Init %1 I2C address %2 (0x08 ~ 0x77)",
    "UNIT_JOYSTICK2_SET_ADDRESS_MSG0": "Set %1 I2C address %2 (0x08 ~ 0x77)",
    "UNIT_JOYSTICK2_SET_AXIS_X_INVERT_MSG0": "%1 invert x-axis %2",
    "UNIT_JOYSTICK2_SET_AXIS_Y_INVERT_MSG0": "%1 invert y-axis %2",
    "UNIT_JOYSTICK2_SET_AXIS_SWAP_MSG0": "%1 swap x-axis and y-axis %2",
    "UNIT_JOYSTICK2_GET_BUTTON_STATUS_MSG0": "get %1 button status (return True or False)",
    "UNIT_JOYSTICK2_GET_ADC_VALUE_MSG0": "get %1 ADC value (return tuple)",
    "UNIT_JOYSTICK2_FILL_COLOR_MSG0": "%1 fill color %2",
    "UNIT_JOYSTICK2_GET_X_RAW_MSG0": "get %1 ADC value of x-axis",
    "UNIT_JOYSTICK2_GET_Y_RAW_MSG0": "get %1 ADC value of y-axis",
    "UNIT_JOYSTICK2_GET_X_POSITION_MSG0": "get %1 x-axis position",
    "UNIT_JOYSTICK2_GET_Y_POSITION_MSG0": "get %1 y-axis position",
    "UNIT_JOYSTICK2_GET_FIRMWARE_VERSION_MSG0": "get %1 firmware version (return int)",
    "UNIT_JOYSTICK2_GET_AXIS_POSITION_MSG0": "get %1 position (return tuple)",
    "UNIT_JOYSTICK2_SET_DEADZONE_ADC_MSG0": "Set %1 deadzone with ADC value X %2 (0 ~ 32768) and Y %3 (0 ~ 32768)",
    "UNIT_JOYSTICK2_SET_DEADZONE_POSITION_MSG0": "Set %1 deadzone with position X %2 (0 ~ 4096) and Y %3 (0 ~ 4096)",
    "UNIT_JOYSTICK2_SET_AXIS_X_MAPPING_MSG0": "Set %1 mapping parameters of the x-axis with %2 min negative ADC value (0 ~ 65536) %3 max negative ADC value (0 ~ 65536) %4 min positive ADC value (0 ~ 65536) %5 max positive ADC value (0 ~ 65536) %6",
    "UNIT_JOYSTICK2_SET_AXIS_Y_MAPPING_MSG0": "Set %1 mapping parameters of the y-axis with %2 min negative ADC value (0 ~ 65536) %3 max negative ADC value (0 ~ 65536) %4 min positive ADC value (0 ~ 65536) %5 max positive ADC value (0 ~ 65536) %6",
    "UNIT_JOYSTICK2_SET_LED_BRIGHTNESS_MSG0": "Set %1 LED brightness %2 % (0 ~ 100)",
    "UNIT_WATERING_INIT_MSG0": "Init %1",
    "UNIT_WATERING_GET_VOLTAGE_MSG0": "%1 get voltage (return float)",
    "UNIT_WATERING_GET_RAW_MSG0": "%1 get ADC raw value (return int)",
    "UNIT_WATERING_ON_MSG0": "%1 turn on the pump",
    "UNIT_WATERING_OFF_MSG0": "%1 turn off the pump",
    "UNIT_WATERING_SET_PUMP_MSG0": "%1 set the pump state %2",
    "UNIT_MQTT_INIT_MSG0": "Init %1 UART %2",
    "UNIT_MQTT_CHECK_MODEM_IS_READY_MSG0": "check %1 if modem is ready (return True or False)",
    "UNIT_MQTT_GET_FIRMWARE_VERSION_MSG0": "get %1 firmware version (return string)",
    "UNIT_MQTT_GET_BAUDRATE_MSG0": "get %1 device baudrate (return int)",
    "UNIT_MQTT_GET_NETWORK_STATUS_MSG0": "get %1 network connection status (return int)",
    "UNIT_MQTT_GET_NETWORK_PARAM_MSG0": "get %1 network %2 address (return string)",
    "UNIT_MQTT_GET_MAC_ADDRESS_MSG0": "get %1 MAC address (return string)",
    "UNIT_MQTT_GET_STATIC_IP_MSG0": "get %1 static %2 address (return string)",
    "UNIT_MQTT_GET_DHCP_STATUS_MSG0": "get %1 DHCP status (return 0 or 1)",
    "UNIT_MQTT_SET_DEBUG_MSG0": "%1 set AT command debug print %2",
    "UNIT_MQTT_SET_DHCP_STATE_MSG0": "%1 set DHCP state %2",
    "UNIT_MQTT_SET_STATIC_IP_MSG0": "Set %1 %2 static IP %3 subnet %4 gateway %5",
    "UNIT_MQTT_SET_BAUDRATE_MSG0": "%1 set device baudrate %2",
    "UNIT_MQTT_SET_SERVER_CONFIG_MSG0": "Set %1 MQTT %2 client id %3 server %4 port %5 username %6 password %7 keepalive(0 ~ 65535) %8",
    "UNIT_MQTT_SET_CONNECT_MSG0": "%1 MQTT connect",
    "UNIT_MQTT_SET_DISCONNECT_MSG0": "%1 MQTT disconnect",
    "UNIT_MQTT_CHECK_MSG_MSG0": "%1 MQTT apply for messaging",
    "UNIT_MQTT_GET_TOPIC_MSG0": "get topic (return bytes)",
    "UNIT_MQTT_GET_MSG_MSG0": "get msg (return bytes)",
    "UNIT_MQTT_SET_MQTT_PUBLISH_MSG0": "%1 MQTT publish topic %2 msg %3 QoS %4 (0 ~ 2)",
    "UNIT_MQTT_SUBSCRIBE_CALLBACK_MSG0": "%1 MQTT subscribe %2 with topic QoS %3 (0 ~ 2)",
    "UNIT_MQTTPOE_INIT_MSG0": "Init %1 UART %2",
    "UNIT_MQTTPOE_CHECK_MODEM_IS_READY_MSG0": "check %1 if modem is ready (return True or False)",
    "UNIT_MQTTPOE_GET_FIRMWARE_VERSION_MSG0": "get %1 firmware version (return string)",
    "UNIT_MQTTPOE_GET_BAUDRATE_MSG0": "get %1 device baudrate (return int)",
    "UNIT_MQTTPOE_GET_NETWORK_STATUS_MSG0": "get %1 network connection status (return int)",
    "UNIT_MQTTPOE_GET_NETWORK_PARAM_MSG0": "get %1 network %2 address (return string)",
    "UNIT_MQTTPOE_GET_MAC_ADDRESS_MSG0": "get %1 MAC address (return string)",
    "UNIT_MQTTPOE_GET_STATIC_IP_MSG0": "get %1 static %2 address (return string)",
    "UNIT_MQTTPOE_GET_DHCP_STATUS_MSG0": "get %1 DHCP status (return 0 or 1)",
    "UNIT_MQTTPOE_SET_DEBUG_MSG0": "%1 set AT command debug print %2",
    "UNIT_MQTTPOE_SET_DHCP_STATE_MSG0": "%1 set DHCP state %2",
    "UNIT_MQTTPOE_SET_STATIC_IP_MSG0": "Set %1 %2 static IP %3 subnet %4 gateway %5",
    "UNIT_MQTTPOE_SET_BAUDRATE_MSG0": "%1 set device baudrate %2",
    "UNIT_MQTTPOE_SET_SERVER_CONFIG_MSG0": "Set %1 MQTT %2 client id %3 server %4 port %5 username %6 password %7 keepalive(0 ~ 65535) %8",
    "UNIT_MQTTPOE_SET_CONNECT_MSG0": "%1 MQTT connect",
    "UNIT_MQTTPOE_SET_DISCONNECT_MSG0": "%1 MQTT disconnect",
    "UNIT_MQTTPOE_CHECK_MSG_MSG0": "%1 MQTT apply for messaging",
    "UNIT_MQTTPOE_GET_TOPIC_MSG0": "get topic (return bytes)",
    "UNIT_MQTTPOE_GET_MSG_MSG0": "get msg (return bytes)",
    "UNIT_MQTTPOE_SET_MQTT_PUBLISH_MSG0": "%1 MQTT publish topic %2 msg %3 QoS %4 (0 ~ 2)",
    "UNIT_MQTTPOE_SUBSCRIBE_CALLBACK_MSG0": "%1 MQTT subscribe %2 with topic QoS %3 (0 ~ 2)",
    "UNIT_VIBRATOR_INIT_MSG0": "Init %1",
    "UNIT_VIBRATOR_DEINIT_MSG0": "%1 deinit",
    "UNIT_VIBRATOR_TURN_OFF_MSG0": "%1 turn off vibrator",
    "UNIT_VIBRATOR_SET_FREQ_MSG0": "%1 set freq %2 Hz (1 ~ 40000000)",
    "UNIT_VIBRATOR_SET_DUTY_MSG0": "%1 set duty %2 %",
    "UNIT_VIBRATOR_SET_ONCE_MSG0": "%1 play once with %2 freq (1 ~ 40000000 Hz) %3 duty (%) %4 duration (ms) %5",
    "UNIT_HEART_INIT_MSG0": "Init %1 I2C address %2",
    "UNIT_HEART_STOP_MSG0": "%1 stop",
    "UNIT_HEART_START_MSG0": "%1 start",
    "UNIT_HEART_DEINIT_MSG0": "%1 deinit",
    "UNIT_HEART_GET_HEART_RATE_MSG0": "get %1 heart rate (return int)",
    "UNIT_HEART_GET_SPO2_MSG0": "get %1 SpO2 (return int)",
    "UNIT_HEART_GET_IR_MSG0": "get %1 IR (return int)",
    "UNIT_HEART_GET_RED_MSG0": "get %1 red (return int)",
    "UNIT_HEART_SET_MODE_MSG0": "%1 set mode %2",
    "UNIT_HEART_SET_LED_CURRENT_MSG0": "%1 set LED red current %2 IR current %3",
    "UNIT_HEART_SET_PULSE_WIDTH_MSG0": "%1 set pulse width %2",
    "UNIT_HEART_SET_SAMPLING_RATE_MSG0": "%1 set sampling rate %2",
    "UNIT_ACSSR_INIT_MSG0": "Init %1 with mode %2",
    "UNIT_ACSSR_INIT_MSG1": "I2C address (0x08 ~ 0x77)",
    "UNIT_ACSSR_INIT_MSG2": "Modbus RTU master obj",
    "UNIT_ACSSR_INIT_MSG3": "slave address (1 ~ 247)",
    "UNIT_ACSSR_SET_I2C_ADDRESS_MSG0": "Set %1 I2C address %2 (0x08 ~ 0x77)",
    "UNIT_ACSSR_SET_SLAVE_ADDRESS_MSG0": "Set %1 slave address %2 (1 ~ 247)",
    "UNIT_ACSSR_SET_ON_MSG0": "%1 on",
    "UNIT_ACSSR_SET_OFF_MSG0": "%1 off",
    "UNIT_ACSSR_GET_FW_VERSION_MSG0": "get %1 firmware version (return int)",
    "UNIT_ACSSR_GET_STATUS_MSG0": "get %1 relay status (return True or False)",
    "UNIT_ACSSR_FILL_COLOR_MSG0": "%1 fill RGB LED color %2",
    "UNIT_ACSSR_SET_RELAY_MSG0": "%1 set relay status %2",
    "UNIT_DCSSR_INIT_MSG0": "Init %1 with mode %2",
    "UNIT_DCSSR_INIT_MSG1": "I2C address (0x08 ~ 0x77)",
    "UNIT_DCSSR_INIT_MSG2": "Modbus RTU master obj",
    "UNIT_DCSSR_INIT_MSG3": "slave address (1 ~ 247)",
    "UNIT_DCSSR_SET_I2C_ADDRESS_MSG0": "Set %1 I2C address %2 (0x08 ~ 0x77)",
    "UNIT_DCSSR_SET_SLAVE_ADDRESS_MSG0": "Set %1 slave address %2 (1 ~ 247)",
    "UNIT_DCSSR_SET_ON_MSG0": "%1 on",
    "UNIT_DCSSR_SET_OFF_MSG0": "%1 off",
    "UNIT_DCSSR_GET_FW_VERSION_MSG0": "get %1 firmware version (return int)",
    "UNIT_DCSSR_GET_STATUS_MSG0": "get %1 relay status (return True or False)",
    "UNIT_DCSSR_FILL_COLOR_MSG0": "%1 fill RGB LED color %2",
    "UNIT_DCSSR_SET_RELAY_MSG0": "%1 set relay status %2",
    "UNIT_NBIOT_INIT_MSG0": "Init %1 UART %2",
    "UNIT_NBIOT_CHECK_MODEM_IS_READY_MSG0": "check %1 if modem is ready (return True or False)",
    "UNIT_NBIOT_GET_IMEI_NUMBER_MSG0": "get %1 identification (IMEI) number (return string)",
    "UNIT_NBIOT_GET_SIGNAL_STRENGTH_MSG0": "get %1 signal strength (return int)",
    "UNIT_NBIOT_GET_MODEL_IDENTIFICATION_MSG0": "get %1 model identification (return string)",
    "UNIT_NBIOT_GET_GPRS_NETWORK_STATUS_MSG0": "get %1 gprs network status (return int)",
    "UNIT_NBIOT_GET_SHOW_PDP_ADDRESS_MSG0": "get %1 show pdp address cid %2 (1~2) (return string)",
    "UNIT_NBIOT_GET_PDP_CONTEXT_STATUS_MSG0": "get %1 pdp context status (return int)",
    "UNIT_NBIOT_GET_PDP_CONTEXT_DYNAMIC_PARAMETERS_MSG0": "get %1 pdp context network %2 parameters (return string)",
    "UNIT_NBIOT_SET_MODEM_DEBUG_MSG0": "%1 set AT command debug print %2",
    "UNIT_NBIOT_SET_COMMAND_ECHO_MODE_MSG0": "%1 set echo command mode %2",
    "UNIT_NBIOT_SET_GPRS_NETWORK_STATE_MSG0": "%1 set gprs network state %2",
    "UNIT_NBIOT_SET_PDP_CONTEXT_APN_MSG0": "%1 set define PDP context apn %2",
    "UNIT_NBIOT_SET_PDP_CONTEXT_MSG0": "%1 set pdp context state %2",
    "UNIT_NBIOT_MQTT_SERVER_CONNECT_MSG0": "%1 MQTT server connect %2 server %3 port %4 client id %5 username %6 password %7 keepalive(0 ~ 65535) %8",
    "UNIT_NBIOT_MQTT_SERVER_DISCONNECT_MSG0": "%1 MQTT server disconnect",
    "UNIT_NBIOT_MQTT_POLLING_LOOP_MSG0": "%1 MQTT polling loop",
    "UNIT_NBIOT_MQTT_SERVER_IS_CONNECT_MSG0": "%1 check MQTT server is connect (return int)",
    "UNIT_NBIOT_MQTT_UNSUBSCRIBE_TOPIC_MSG0": "%1 MQTT unsubscribe topic %2",
    "UNIT_NBIOT_SET_MQTT_PUBLISH_MSG0": "%1 MQTT publish topic %2 msg %3 QoS %4 (0 ~ 2)",
    "UNIT_NBIOT_MQTT_SUBSCRIBE_CALLBACK_MSG0": "%1 MQTT subscribe %2 with topic QoS %3 (0 ~ 2)",
    "UNIT_NBIOT_HTTP_REQUEST_MSG0": "HTTP request",
    "UNIT_NBIOT_HTTP_REQUEST_MSG1": "method",
    "UNIT_NBIOT_HTTP_REQUEST_MSG2": "URL",
    "UNIT_NBIOT_HTTP_REQUEST_MSG3": "headers",
    "UNIT_NBIOT_HTTP_REQUEST_MSG4": "data",
    "UNIT_NBIOT_HTTP_DATA_CONTENT_MSG0": "get %1 data content (return string)",
    "UNIT_NBIOT_HTTP_RESPONSE_CODE_MSG0": "get %1 response status code (return int)",
    "UNIT_NBIOT_HTTP_SERVER_CONNECT_MSG0": "%1 HTTP server connect",
    "UNIT_NBIOT_HTTP_SERVER_DISCONNECT_MSG0": "%1 HTTP server disconnect",
    "UNIT_NBIOT_HTTP_SERVER_IS_CONNECT_MSG0": "%1 check HTTP server is connect (return True or False)",
    "UNIT_NBIOT_GET_TOPIC_MSG0": "get topic (return bytes)",
    "UNIT_NBIOT_GET_MSG_MSG0": "get msg (return bytes)",
    "UNIT_NBIOT2_INIT_MSG0": "Init %1 UART %2",
    "UNIT_NBIOT2_CHECK_MODEM_IS_READY_MSG0": "check %1 if modem is ready (return True or False)",
    "UNIT_NBIOT2_GET_IMEI_NUMBER_MSG0": "get %1 identification (IMEI) number (return string)",
    "UNIT_NBIOT2_GET_SIGNAL_STRENGTH_MSG0": "get %1 signal strength (return int)",
    "UNIT_NBIOT2_GET_MODEL_IDENTIFICATION_MSG0": "get %1 model identification (return string)",
    "UNIT_NBIOT2_GET_GPRS_NETWORK_STATUS_MSG0": "get %1 gprs network status (return int)",
    "UNIT_NBIOT2_GET_SHOW_PDP_ADDRESS_MSG0": "get %1 show pdp address cid %2 (0~1) (return string)",
    "UNIT_NBIOT2_GET_PDP_CONTEXT_DYNAMIC_PARAMETERS_MSG0": "get %1 pdp context network %2 parameters (return string)",
    "UNIT_NBIOT2_SET_MODEM_DEBUG_MSG0": "%1 set AT command debug print %2",
    "UNIT_NBIOT2_SET_COMMAND_ECHO_MODE_MSG0": "%1 set echo command mode %2",
    "UNIT_NBIOT2_SET_GPRS_NETWORK_STATE_MSG0": "%1 set gprs network state %2",
    "UNIT_NBIOT2_SET_PDP_CONTEXT_APN_MSG0": "%1 set define PDP context apn %2",
    "UNIT_NBIOT2_MQTT_SERVER_CONFIGURE_MSG0": "%1 MQTT server configure %2 server %3 port %4 client id %5 username %6 password %7 keepalive(0 ~ 65535) %8",
    "UNIT_NBIOT2_MQTT_SERVER_CONNECT_MSG0": "%1 MQTT server connect clean session %2",
    "UNIT_NBIOT2_MQTT_SERVER_DISCONNECT_MSG0": "%1 MQTT server disconnect",
    "UNIT_NBIOT2_MQTT_POLLING_LOOP_MSG0": "%1 MQTT polling loop",
    "UNIT_NBIOT2_MQTT_SERVER_IS_CONNECT_MSG0": "%1 check MQTT server is connect (return int)",
    "UNIT_NBIOT2_MQTT_UNSUBSCRIBE_TOPIC_MSG0": "%1 MQTT unsubscribe topic %2",
    "UNIT_NBIOT2_SET_MQTT_PUBLISH_MSG0": "%1 MQTT publish topic %2 msg %3 QoS %4 (0 ~ 2)",
    "UNIT_NBIOT2_MQTT_SUBSCRIBE_CALLBACK_MSG0": "%1 MQTT subscribe %2 with topic QoS %3 (0 ~ 2)",
    "UNIT_NBIOT2_GET_TOPIC_MSG0": "get topic (return bytes)",
    "UNIT_NBIOT2_GET_MSG_MSG0": "get msg (return bytes)",
    "UNIT_NBIOT2_HTTP_REQUEST_MSG0": "HTTP request",
    "UNIT_NBIOT2_HTTP_REQUEST_MSG1": "method",
    "UNIT_NBIOT2_HTTP_REQUEST_MSG2": "URL",
    "UNIT_NBIOT2_HTTP_REQUEST_MSG3": "headers",
    "UNIT_NBIOT2_HTTP_REQUEST_MSG4": "data",
    "UNIT_NBIOT2_HTTP_TERMINATE_MSG0": "%1 HTTP server terminated",
    "UNIT_NBIOT2_HTTP_DATA_CONTENT_MSG0": "get %1 data content (return string)",
    "UNIT_NBIOT2_HTTP_RESPONSE_CODE_MSG0": "get %1 response status code (return int)",
    "UNIT_QRCODE_INIT_MSG0": "Init %1",
    "UNIT_QRCODE_INIT_MSG1": "mode",
    "UNIT_QRCODE_INIT_MSG2": "I2C address",
    "UNIT_QRCODE_INIT_MSG3": "(0x08 ~ 0x77)",
    "UNIT_QRCODE_GET_DEVICE_INFO_MSG0": "get %1 device information %2 (return int)",
    "UNIT_QRCODE_GET_QRCODE_DATA_LENGTH_MSG0": "get %1 qrcode data length (return int)",
    "UNIT_QRCODE_GET_QRCODE_DATA_STATUS_MSG0": "get %1 qrcode data status (return int)",
    "UNIT_QRCODE_GET_QRCODE_DATA_MSG0": "get %1 qrcode data format %2 (return bytes or string)",
    "UNIT_QRCODE_GET_TRIGGER_BUTTON_STATUS_MSG0": "get %1 trigger button status (return True or False)",
    "UNIT_QRCODE_GET_TRIGGER_MODE_MSG0": "get %1 trigger mode status (return int)",
    "UNIT_QRCODE_SET_I2C_ADDRESS_MSG0": "%1 set I2C address %2 (0x08 ~ 0x77)",
    "UNIT_QRCODE_SET_TRIGGER_MODE_MSG0": "%1 set trigger mode %2",
    "UNIT_QRCODE_CLEAR_QRCODE_DATA_STATUS_MSG0": "%1 set clear qrcode data status",
    "UNIT_QRCODE_SET_MANUAL_SCAN_MSG0": "%1 set manual scanning control %2",
    "UNIT_QRCODE_CALLBACK_MSG0": "When %1 get data %2",
    "UNIT_QRCODE_TICK_MSG0": "%1 calling event poll in loop",
    "UNIT_IMU_INIT_MSG0": "Init %1",
    "UNIT_IMU_GET_ACCELEROMETER_MSG0": "get %1 accelerometer values (m/s^2, return tuple)",
    "UNIT_IMU_GET_GYROSCOPE_MSG0": "get %1 gyroscope values (rad/s, return tuple)",
    "UNIT_IMU_GET_ATTITUDE_MSG0": "get %1 attitude angles ([yaw, pitch, roll], return tuple)",
    "UNIT_IMU_SET_ACCEL_RANGE_MSG0": "%1 set accelerometer scale %2 g",
    "UNIT_IMU_SET_GYRO_RANGE_MSG0": "%1 set gyroscope scale %2 dps",
    "UNIT_IMU_SET_ACCEL_UNIT_MSG0": "%1 set accelerometer output unit %2",
    "UNIT_IMU_SET_GYRO_UNIT_MSG0": "%1 set gyroscope output unit %2",
    "UNIT_IMU_SET_GYRO_CALIBRATE_MSG0": "%1 set gyroscope auto calibration samples %2 delay %3 ms ",
    "UNIT_IMU_SET_GYRO_OFFSET_MSG0": "%1 set gyroscope offset calibration x %2 y %3 z %4 rad/s",
    "UNIT_IMUPRO_INIT_MSG0": "Init %1",
    "UNIT_IMUPRO_GET_ACCELEROMETER_MSG0": "get %1 accelerometer values (m/s^2, return tuple)",
    "UNIT_IMUPRO_GET_GYROSCOPE_MSG0": "get %1 gyroscope values (rad/s, return tuple)",
    "UNIT_IMUPRO_GET_MAGNETOMETER_MSG0": "get %1 magnetometer values (uT, return tuple)",
    "UNIT_IMUPRO_GET_COMPASS_MSG0": "get %1 compass heading angle (0 ~ 360°, return float)",
    "UNIT_IMUPRO_GET_ATTITUDE_MSG0": "get %1 attitude angles ([yaw, pitch, roll], return tuple)",
    "UNIT_IMUPRO_GET_TEMPERATURE_MSG0": "get %1 temperature value (°C, return float)",
    "UNIT_IMUPRO_GET_PRESSURE_MSG0": "get %1 pressure value (hPa, return float)",
    "UNIT_IMUPRO_SET_ODR_MSG0": "%1 set output data rate %2 accelerometer ODR (Hz) %3 gyroscope ODR (Hz) %4 ",
    "UNIT_IMUPRO_SET_MAGNET_ODR_MSG0": "%1 set magnetometer ODR %2 Hz",
    "UNIT_IMUPRO_SET_ACCEL_RANGE_MSG0": "%1 set accelerometer scale %2 g",
    "UNIT_IMUPRO_SET_GYRO_RANGE_MSG0": "%1 set gyroscope scale %2 dps",
    "UNIT_IMUPRO_SET_GYRO_OFFSET_MSG0": "%1 set gyroscope offset calibration x %2 y %3 z %4 rad/s",
    "UNIT_ZIGBEE_INIT_MSG0": "Init %1 UART %2 verbose %3",
    "UNIT_ZIGBEE_SET_MODULE_PARAM_MSG0": "%1 set module parameters %2 device type %3 PAN ID %4 channel (11 ~ 26) %5 transfer mode %6 custom address %7",
    "UNIT_ZIGBEE_SET_MODULE_PARAM_MSG1": "ANT type",
    "UNIT_ZIGBEE_SET_MODULE_PARAM_MSG2": "encryption enable",
    "UNIT_ZIGBEE_SET_MODULE_PARAM_MSG3": "encryption key",
    "UNIT_ZIGBEE_SET_MODULE_PARAM_MSG4": "Subnode preset parameters",
    "UNIT_ZIGBEE_SET_NODE_PARAM_MSG0": "device type",
    "UNIT_ZIGBEE_SET_NODE_PARAM_MSG1": "ANT type",
    "UNIT_ZIGBEE_SET_NODE_PARAM_MSG2": "transfer mode",
    "UNIT_ZIGBEE_SET_NODE_PARAM_MSG3": "custom address",
    "UNIT_ZIGBEE_SET_DEVICE_TYPE_MSG0": "%1 set device type %2",
    "UNIT_ZIGBEE_SET_CHANNEL_MSG0": "%1 set channel %2",
    "UNIT_ZIGBEE_SET_TRANSFER_MODE_MSG0": "%1 set transfer mode %2",
    "UNIT_ZIGBEE_SET_CUSTOM_ADDRESS_MSG0": "%1 set custom address %2",
    "UNIT_ZIGBEE_SET_PAN_ID_MSG0": "%1 set PAN ID %2",
    "UNIT_ZIGBEE_SET_ANT_TYPE_MSG0": "%1 set ANT type %2",
    "UNIT_ZIGBEE_GET_SHORT_ADDRESS_MSG0": "get %1 short address (return int)",
    "UNIT_ZIGBEE_GET_CUSTOM_ADDRESS_MSG0": "get %1 custom address (return int)",
    "UNIT_ZIGBEE_ISCONNECTED_MSG0": "%1 is connected (return True or False)",
    "UNIT_ZIGBEE_START_RECEIVE_MSG0": "%1 start receive data",
    "UNIT_ZIGBEE_RECEIVE_DATA_EVENT_MSG0": "when %1 receive data (bytes) %2 data %3 dest address %4 src address %5",
    "UNIT_ZIGBEE_RECEIVE_DATA_STR_EVENT_MSG0": "when %1 receive data (string) %2 data %3 dest address %4 src address %5",
    "UNIT_ZIGBEE_STOP_RECEIVE_MSG0": "%1 stop receive data",
    "UNIT_ZIGBEE_SEND_DATA_MSG0": "%1 send (string or bytes) %2 custom address %3",
    "UNIT_ZIGBEE_BROADCAST_MSG0": "%1 broadcast (string or bytes) %2",
    "UNIT_GLASS_INIT_MSG0": "config",
    "UNIT_GLASS_INIT_MSG1": "I2C address",
    "UNIT_GLASS2_INIT_MSG0": "config",
    "UNIT_GLASS2_INIT_MSG1": "I2C address",
    "UNIT_OLED_INIT_MSG0": "config",
    "UNIT_OLED_INIT_MSG1": "I2C address",
    "UNIT_MINIOLED_INIT_MSG0": "config",
    "UNIT_MINIOLED_INIT_MSG1": "I2C address",
    "UNIT_LCD_INIT_MSG0": "config",
    "UNIT_LCD_INIT_MSG1": "I2C address",
    "UNIT_RCA_INIT_MSG0": "config",
    "UNIT_RCA_INIT_MSG1": "size",
    "UNIT_RCA_INIT_MSG2": "output",
    "UNIT_RCA_INIT_MSG3": "signal type",
    "UNIT_RCA_INIT_MSG4": "use psram",
    "UNIT_RCA_INIT_MSG5": "pin dac (25 or 26)",
    "UNIT_RCA_INIT_MSG6": "output level",
    "UNIT_RCA_CONFIG_SIZE_MSG0": "width",
    "UNIT_RCA_CONFIG_SIZE_MSG1": "height",
    "UNIT_RCA_CONFIG_OUTPUT_MSG0": "width",
    "UNIT_RCA_CONFIG_OUTPUT_MSG1": "height",
    "UNIT_TMOS_INIT_MSG0": "Init %1 I2C address %2",
    "UNIT_TMOS_GET_DATA_READY_MSG0": "get %1 data update status (return True or False)",
    "UNIT_TMOS_GET_MOTION_STATE_MSG0": "get %1 motion detection state (return True or False)",
    "UNIT_TMOS_GET_PRESENCE_STATE_MSG0": "get %1 presence detection state (return True or False)",
    "UNIT_TMOS_GET_PRESENCE_VALUE_MSG0": "get %1 presence value (cm^-1, return int)",
    "UNIT_TMOS_GET_MOTION_VALUE_MSG0": "get %1 motion value (cm^-1, return int)",
    "UNIT_TMOS_GET_GAIN_MODE_MSG0": "get %1 gain mode (return int)",
    "UNIT_TMOS_GET_TMOS_SENSITIVITY_MSG0": "get %1 sensitivity (return float)",
    "UNIT_TMOS_GET_TAMB_SHOCK_STATE_MSG0": "get %1 ambient temperature shock detection state (return True or False)",
    "UNIT_TMOS_GET_TEMPERATURE_DATA_MSG0": "get %1 object temperature (return float)",
    "UNIT_TMOS_GET_TAMBIENT_RAW_VALUE_MSG0": "get %1 ambient temperature (return int)",
    "UNIT_TMOS_GET_PRESENCE_THRESHOLD_MSG0": "get %1 presence threshold (return int)",
    "UNIT_TMOS_GET_MOTION_THRESHOLD_MSG0": "get %1 motion threshold (return int)",
    "UNIT_TMOS_GET_TAMBIENT_SHOCK_THRESHOLD_MSG0": "get %1 ambient temperature shock threshold (return int)",
    "UNIT_TMOS_GET_PRESENCE_HYSTERESIS_MSG0": "get %1 presence detection hysteresis value (return int)",
    "UNIT_TMOS_GET_MOTION_HYSTERESIS_MSG0": "get %1 motion detection hysteresis value (return int)",
    "UNIT_TMOS_GET_TAMBIENT_SHOCK_HYSTERESIS_MSG0": "get %1 ambient temperature shock detection hysteresis value (return int)",
    "UNIT_TMOS_SET_GAIN_MODE_MSG0": "Set %1 gain mode to %2",
    "UNIT_TMOS_SET_TMOS_SENSITIVITY_MSG0": "Set %1 sensitivity to %2 (0 ~ 255)",
    "UNIT_TMOS_SET_PRESENCE_THRESHOLD_MSG0": "Set %1 presence threshold to %2 (0 ~ 32767)",
    "UNIT_TMOS_SET_MOTION_THRESHOLD_MSG0": "Set %1 motion threshold to %2 (0 ~ 32767)",
    "UNIT_TMOS_SET_TAMBIENT_SHOCK_THRESHOLD_MSG0": "Set %1 ambient temperature shock threshold to %2 (0 ~ 32767)",
    "UNIT_TMOS_SET_PRESENCE_HYSTERESIS_MSG0": "Set %1 presence detection hysteresis value to %2 (0 ~ 255)",
    "UNIT_TMOS_SET_MOTION_HYSTERESIS_MSG0": "Set %1 motion detection hysteresis value to %2 (0 ~ 255)",
    "UNIT_TMOS_SET_TAMBIENT_SHOCK_HYSTERESIS_MSG0": "Set %1 ambient temperature shock detection hysteresis value to %2 (0 ~ 255)",
    "UNIT_TMOS_CALLBACK_MSG0": "When %1 was %2 detect",
    "UNIT_TMOS_TICK_MSG0": "%1 update in loop",
    "UNIT_BPS_INIT_MSG0": "Init %1",
    "UNIT_BPS_GET_TEMPERATURE_MSG0": "get %1 temperature (°C, return float)",
    "UNIT_BPS_GET_PRESSURE_MSG0": "get %1 pressure (hPa, return float)",
    "UNIT_BPS_GET_ALTITUDE_MSG0": "get %1 altitude value (meters, return float)",
    "UNIT_SCROLL_INIT_MSG0": "Init %1 I2C address %2",
    "UNIT_SCROLL_GET_ROTARY_STATUS_MSG0": "%1 had rotated (return True or False)",
    "UNIT_SCROLL_GET_ROTARY_VALUE_MSG0": "get %1 rotary value (return int)",
    "UNIT_SCROLL_GET_BUTTON_STATUS_MSG0": "get %1 button status (return True or False)",
    "UNIT_SCROLL_FILL_COLOR_MSG0": "%1 fill RGB LED color %2",
    "UNIT_SCROLL_GET_INCREMENTS_MSG0": "get %1 rotary increments (return int)",
    "UNIT_SCROLL_RESET_VALUE_MSG0": "%1 reset rotary value",
    "UNIT_SCROLL_SET_VALUE_MSG0": "%1 set rotary value %2",
    "UNIT_SCROLL_GET_FIRMWARE_VERSION_MSG0": "get %1 firmware version (return string)",
    "UNIT_SCROLL_GET_BOOTLOADER_VERSION_MSG0": "get %1 bootloader version (return string)",
    "UNIT_ID_INIT_MSG0": "Init %1",
    "UNIT_ID_GET_REVISION_NUMBER_MSG0": "get %1 revision number (return int)",
    "UNIT_ID_GET_SERIAL_NUMBER_MSG0": "get %1 serial number (return string)",
    "UNIT_ID_GET_RANDOM_NUMBER_INT_MSG0": "get %1 random int number min %2 max %3 (return int)",
    "UNIT_ID_GET_RANDOM_NUMBER_FLOAT_MSG0": "get %1 random float number (return 0.0 ~ 1.0)",
    "UNIT_ID_GET_RANDRANGE_MAX_MSG0": "get %1 random range max %2 (return int)",
    "UNIT_ID_GET_RANDOM_NUMBER_RANGE_MSG0": "get %1 random range min %2 max %3 step %4 (return int)",
    "UNIT_ID_GET_RANDOM_UNIFORM_MSG0": "get %1 random uniform min %2 max %3 (return float)",
    "UNIT_ID_GET_GENERATE_KEY_MSG0": "get %1 generate key slot %2 (0~4) key type %3 (return bytearray)",
    "UNIT_ID_GET_SHA256_HASH_MSG0": "get %1 SHA256 hash message %2 format %3 (return string)",
    "UNIT_ID_GET_ECDSA_SIGN_MSG0": "get %1 signature of ECDSA algorithm %2 slot (0~4) %3 message (string / list / bytearray) %4 (return bytearray)",
    "UNIT_ID_GET_VERIFY_ECDSA_SIGN_MSG0": "get %1 verify signature of ECDSA algorithm %2 message (string / list / bytearray) %3 signature (bytearray) %4 key (bytearray) %5 (return True or False)",
    "UNIT_ID_SET_CERTIFICATE_SIGNING_REQUEST_MSG0": "Set %1 certificate signing request(CSR) %2 slot (0~4) %3 key type %4 country %5 state %6 city %7 org %8 org unit %9 file %10 %11",
    "UNIT_DMX_INIT_MSG0": "Init %1 UART %2 with %3 mode",
    "UNIT_DMX_REINIT_MSG0": "Reinit %1 with %2 mode",
    "UNIT_DMX_DEINIT_MSG0": "%1 deinit",
    "UNIT_DMX_WRITE_DATA_MSG0": "%1 send %2 (0 ~ 255) to channel %3 (1 ~ 512)",
    "UNIT_DMX_READ_DATA_MSG0": "Read %1 data from channel %2 (1 ~ 512) (return int)",
    "UNIT_DMX_CLEAR_BUFFER_MSG0": "Reset %1 DMX buffer",
    "UNIT_DMX_RECEIVE_DATA_EVENT_MSG0": "When %1 channel %2 (1 ~ 512) receive data %3",
    "UNIT_DMX_START_RECEIVE_MSG0": "%1 start receive data",
    "UNIT_DMX_STOP_RECEIVE_MSG0": "%1 stop receive data",
    "UNIT_MIDI_INIT_MSG0": "Init %1 UART %2",
    "UNIT_MIDI_SET_NOTE_ON_MSG0": "%1 set note on channel %2 pitch %3 (0 ~ 127) velocity %4 (0 ~ 127)",
    "UNIT_MIDI_SET_NOTE_ON_PITCH_MSG0": "%1 set note on channel %2 pitch %3 velocity %4 (0 ~ 127)",
    "UNIT_MIDI_SET_NOTE_OFF_MSG0": "%1 set note off channel %2 pitch %3 (0 ~ 127)",
    "UNIT_MIDI_SET_CHANGE_INSTRUMENT_MSG0": "%1 set instrument bank %2 channel %3 program %4 (1 ~ 128)",
    "UNIT_MIDI_SET_INSTRUMENT_GENERAL_MIDI_MSG0": "%1 set general instrument channel %2 name %3",
    "UNIT_MIDI_SET_INSTRUMENT_VARIATION_MSG0": "%1 set MT-32 instrument channel %2 name %3",
    "UNIT_MIDI_SET_DRUMS_INSTRUMENT_MSG0": "%1 set drums instrument name %2 velocity %3 (0 ~ 127)",
    "UNIT_MIDI_SET_PITCH_BEND_MSG0": "%1 set pitch bend channel %2 value %3 (0 ~ 1023)",
    "UNIT_MIDI_SET_PITCH_BEND_RANGE_MSG0": "%1 set pitch bend range channel %2 value %3 (0 ~ 255)",
    "UNIT_MIDI_MIDI_RESET_MSG0": "%1 reset",
    "UNIT_MIDI_SET_CHANNEL_VOLUME_MSG0": "%1 set channel %2 volume %3 (0 ~ 127)",
    "UNIT_MIDI_SET_ALL_NOTES_OFF_MSG0": "%1 set all notes off channel %2",
    "UNIT_MIDI_SET_MASTER_VOLUME_MSG0": "%1 set master volume %2 (0 ~ 127)",
    "UNIT_MIDI_SET_ALL_DRUMS_MSG0": "%1 set all channels drums",
    "UNIT_MIDI_SET_REVERB_MSG0": "%1 set reverb %2 channel %3 program %4 level (0 ~ 127) %5 delay feedback (0 ~ 255) %6",
    "UNIT_MIDI_SET_CHORUS_MSG0": "%1 set chorus %2 channel %3 program %4 level (0 ~ 127) %5 feedback (0 ~ 255) %6 chorus delay (0 ~ 255) %7",
    "UNIT_MIDI_SET_PAN_MSG0": "%1 set pan channel %2 value %3 (0 ~ 127)",
    "UNIT_MIDI_SET_EQUALIZER_MSG0": "set equalizer",
    "UNIT_MIDI_SET_EQUALIZER_MSG1": "channel",
    "UNIT_MIDI_SET_EQUALIZER_MSG2": "band (0 ~ 127)",
    "UNIT_MIDI_SET_EQUALIZER_MSG3": "low band",
    "UNIT_MIDI_SET_EQUALIZER_MSG4": "medium low band",
    "UNIT_MIDI_SET_EQUALIZER_MSG5": "medium high band",
    "UNIT_MIDI_SET_EQUALIZER_MSG6": "high band",
    "UNIT_MIDI_SET_EQUALIZER_MSG7": "freq (0 ~ 127)",
    "UNIT_MIDI_SET_EQUALIZER_MSG8": "low freq",
    "UNIT_MIDI_SET_EQUALIZER_MSG9": "medium low freq",
    "UNIT_MIDI_SET_EQUALIZER_MSG10": "medium high freq",
    "UNIT_MIDI_SET_EQUALIZER_MSG11": "high freq",
    "UNIT_MIDI_SET_TUNING_MSG0": "%1 set tuning %2 channel %3 fine tuning (0 ~ 127) %4 coarse tuning (0 ~ 127) %5",
    "UNIT_MIDI_SET_VIBRATE_MSG0": "%1 set vibrate %2 channel %3 rate (0 ~ 127) %4 depth (0 ~ 127) %5 delay (0 ~ 127) %6",
    "UNIT_MIDI_SET_TVF_MSG0": "%1 set TVF %2 channel %3 cutoff freq (0 ~ 127) %4 resonance (0 ~ 127) %5",
    "UNIT_MIDI_SET_ENVELOPE_MSG0": "set envelope time",
    "UNIT_MIDI_SET_ENVELOPE_MSG1": "channel",
    "UNIT_MIDI_SET_ENVELOPE_MSG2": "attack (0 ~ 127)",
    "UNIT_MIDI_SET_ENVELOPE_MSG3": "decay (0 ~ 127)",
    "UNIT_MIDI_SET_ENVELOPE_MSG4": "release (0 ~ 127)",
    "UNIT_MIDI_SET_SCALE_TUNING_MSG0": "set scale tuning",
    "UNIT_MIDI_SET_SCALE_TUNING_MSG1": "channel",
    "UNIT_MIDI_SET_MOD_WHEEL_MSG0": "set modulation wheel",
    "UNIT_MIDI_SET_MOD_WHEEL_MSG1": "channel",
    "UNIT_MIDI_SET_MOD_WHEEL_MSG2": "pitch (0 ~ 127)",
    "UNIT_MIDI_SET_MOD_WHEEL_MSG3": "TVT cutoff (0 ~ 127)",
    "UNIT_MIDI_SET_MOD_WHEEL_MSG4": "amplitude (0 ~ 127)",
    "UNIT_MIDI_SET_MOD_WHEEL_MSG5": "rate (0 ~ 127)",
    "UNIT_MIDI_SET_MOD_WHEEL_MSG6": "pitch depth (0 ~ 127)",
    "UNIT_MIDI_SET_MOD_WHEEL_MSG7": "TVF depth (0 ~ 127)",
    "UNIT_MIDI_SET_MOD_WHEEL_MSG8": "TVA depth (0 ~ 127)",
    "UNIT_ROLLER485_INIT_MSG0": "Init %1 with mode %2",
    "UNIT_ROLLER485_INIT_MSG1": "I2C address (0x08 ~ 0x77)",
    "UNIT_ROLLER485_INIT_MSG3": "motor ID (0x00 ~ 0xFF)",
    "UNIT_ROLLER485_INIT_MSG4": "UART obj",
    "UNIT_ROLLER485_GET_MOTOR_STATUS_MSG0": "get %1 motor status (return int)",
    "UNIT_ROLLER485_GET_MOTOR_OUTPUT_STATUS_MSG0": "get %1 motor output status (return True or False)",
    "UNIT_ROLLER485_GET_MOTOR_JAM_PROTECT_STATE_MSG0": "get %1 motor jam protect state (return True or False)",
    "UNIT_ROLLER485_GET_MOTOR_MODE_MSG0": "get %1 motor current mode (return int)",
    "UNIT_ROLLER485_GET_MOTOR_ERROR_CODE_MSG0": "get %1 motor error code (return int)",
    "UNIT_ROLLER485_GET_MOTOR_ID_MSG0": "get %1 motor 485 id (return int)",
    "UNIT_ROLLER485_GET_485_BAUDRATE_MSG0": "get %1 motor 485 baudrate (return int)",
    "UNIT_ROLLER485_GET_RGB_MODE_MSG0": "get %1 RGB mode (return int)",
    "UNIT_ROLLER485_GET_RGB_COLOR_MSG0": "get %1 RGB color (return tuple)",
    "UNIT_ROLLER485_GET_RGB_BRIGHTNESS_MSG0": "get %1 RGB LED brightness (return 0 ~ 100)",
    "UNIT_ROLLER485_GET_VIN_VALUE_MSG0": "get %1 input voltage (mV, return int)",
    "UNIT_ROLLER485_GET_TEMPERATURE_VALUE_MSG0": "get %1 temperature (°C, return int)",
    "UNIT_ROLLER485_SET_MOTOR_OUTPUT_STATE_MSG0": "Set %1 motor output status to %2",
    "UNIT_ROLLER485_SET_MOTOR_MODE_MSG0": "Set %1 motor mode to %2",
    "UNIT_ROLLER485_SET_MOTOR_OVER_RANGE_PROTECT_MSG0": "Set %1 motor over range protection to %2",
    "UNIT_ROLLER485_SET_BUTTON_CHANGE_MODE_MSG0": "Set %1 motor mode change via button to %2",
    "UNIT_ROLLER485_SET_REMOVE_PROTECT_MSG0": "Temporary remove %1 motor jam protect state",
    "UNIT_ROLLER485_SET_MOTOR_STALL_PROTECT_MSG0": "Set %1 motor jam protect to %2",
    "UNIT_ROLLER485_SET_MOTOR_ID_MSG0": "Set %1 motor 485 id to %2",
    "UNIT_ROLLER485_SET_485_BAUDRATE_MSG0": "Set %1 motor 485 baudrate to %2",
    "UNIT_ROLLER485_SET_RGB_MODE_MSG0": "Set %1 RGB mode to %2",
    "UNIT_ROLLER485_SET_RGB_COLOR_MSG0": "Set %1 RGB color to %2",
    "UNIT_ROLLER485_SET_RGB_BRIGHTNESS_MSG0": "Set %1 RGB LED brightness to %2 (0 ~ 100)",
    "UNIT_ROLLER485_SET_DATA_SAVE_IN_FLASH_MSG0": "Set %1 current setting save in flash",
    "UNIT_ROLLER485_GET_MOTOR_SPEED_READBACK_MSG0": "get %1 motor current speed(rpm) readback value(return float)",
    "UNIT_ROLLER485_GET_MOTOR_SPEED_PID_MSG0": "get %1 motor speed pid(return tuple)",
    "UNIT_ROLLER485_SET_MOTOR_SPEED_MSG0": "Set %1 motor speed %2 rpm",
    "UNIT_ROLLER485_SET_SPEED_MAX_CURRENT_MSG0": "Set %1 max current to %2 (mA) in speed mode",
    "UNIT_ROLLER485_SET_MOTOR_SPEED_PID_MSG0": "Set %1 motor speed P %2 I %3 D %4",
    "UNIT_ROLLER485_GET_MOTOR_POSITION_READBACK_MSG0": "get %1 motor current position readback value (return float)",
    "UNIT_ROLLER485_GET_MOTOR_POSITION_PID_MSG0": "get %1 motor position pid (return tuple)",
    "UNIT_ROLLER485_SET_MOTOR_POSITION_MSG0": "Set %1 motor position %2 count",
    "UNIT_ROLLER485_SET_POSITION_MAX_CURRENT_MSG0": "Set %1 max current to %2 in position mode",
    "UNIT_ROLLER485_SET_MOTOR_POSITION_PID_MSG0": "Set %1 motor position P %2 I %3 D %4",
    "UNIT_ROLLER485_GET_MOTOR_CURRENT_READBACK_MSG0": "get %1 motor current readback value (return float)",
    "UNIT_ROLLER485_SET_MOTOR_MAX_CURRENT_MSG0": "Set %1 motor max current to %2 mA",
    "UNIT_ROLLER485_GET_ENCODER_VALUE_MSG0": "get %1 motor encoder count value (return float)",
    "UNIT_ROLLER485_SET_ENCODER_VALUE_MSG0": "Set %1 motor encoder count to %2",
    "UNIT_ROLLER485_GET_MOTOR_SPEED_SETTING_MSG0": "get %1 motor speed(rpm) (return int)",
    "UNIT_ROLLER485_GET_MOTOR_SPEED_MAX_CURRENT_MSG0": "get %1 max current in speed mode (mA, return int)",
    "UNIT_ROLLER485_GET_MOTOR_POSITION_SETTING_MSG0": "get %1 motor position (return int)",
    "UNIT_ROLLER485_GET_MOTOR_POSITION_MAX_CURRENT_MSG0": "get %1 max current in position mode (mA, return int)",
    "UNIT_ROLLER485_GET_MOTOR_MAX_CURRENT_MSG0": "get %1 motor max current setting value (mA, return float)",
    "UNIT_ROLLER485_GET_FIRMWARE_VERSION_MSG0": "get %1 firmware version (return int)",
    "UNIT_ROLLER485_GET_I2C_ADDRESS_MSG0": "get %1 I2C Address (return int)",
    "UNIT_ROLLER485_SET_I2C_ADDRESS_MSG0": "Set %1 I2C address %2 (0x08 ~ 0x77)",
    "UNIT_ROLLER485_GET_MOTOR_OVER_RANGE_PROTECT_STATE_MSG0": "get %1 motor over range protect setting (return True or False)",
    "UNIT_ROLLER485_GET_BUTTON_CHANGE_MODE_MSG0": "get %1 button switching mode status (return True or False)",
    "UNIT_ROLLERCAN_INIT_MSG0": "Init %1 with mode %2",
    "UNIT_ROLLERCAN_INIT_MSG1": "I2C address (0x08 ~ 0x77)",
    "UNIT_ROLLERCAN_INIT_MSG3": "motor ID (0x00 ~ 0xFF)",
    "UNIT_ROLLERCAN_INIT_MSG4": "CAN obj",
    "UNIT_ROLLERCAN_GET_MOTOR_STATUS_MSG0": "get %1 motor status (return int)",
    "UNIT_ROLLERCAN_GET_MOTOR_OUTPUT_STATUS_MSG0": "get %1 motor output status (return True or False)",
    "UNIT_ROLLERCAN_GET_MOTOR_JAM_PROTECT_STATE_MSG0": "get %1 motor jam protect state (return True or False)",
    "UNIT_ROLLERCAN_GET_MOTOR_MODE_MSG0": "get %1 motor current mode (return int)",
    "UNIT_ROLLERCAN_GET_MOTOR_ERROR_CODE_MSG0": "get %1 motor error code (return int)",
    "UNIT_ROLLERCAN_GET_MOTOR_ID_MSG0": "get %1 motor CAN id (return int)",
    "UNIT_ROLLERCAN_GET_CAN_BAUDRATE_MSG0": "get %1 motor CAN baudrate (return int)",
    "UNIT_ROLLERCAN_GET_RGB_MODE_MSG0": "get %1 RGB mode (return int)",
    "UNIT_ROLLERCAN_GET_RGB_COLOR_MSG0": "get %1 RGB color (return tuple)",
    "UNIT_ROLLERCAN_GET_RGB_BRIGHTNESS_MSG0": "get %1 RGB LED brightness (return 0 ~ 100)",
    "UNIT_ROLLERCAN_GET_VIN_VALUE_MSG0": "get %1 input voltage (mV, return int)",
    "UNIT_ROLLERCAN_GET_TEMPERATURE_VALUE_MSG0": "get %1 temperature (°C, return int)",
    "UNIT_ROLLERCAN_SET_MOTOR_OUTPUT_STATE_MSG0": "Set %1 motor output status to %2",
    "UNIT_ROLLERCAN_SET_MOTOR_MODE_MSG0": "Set %1 motor mode to %2",
    "UNIT_ROLLERCAN_SET_MOTOR_OVER_RANGE_PROTECT_MSG0": "Set %1 motor over range protection to %2",
    "UNIT_ROLLERCAN_SET_BUTTON_CHANGE_MODE_MSG0": "Set %1 motor mode change via button to %2",
    "UNIT_ROLLERCAN_SET_REMOVE_PROTECT_MSG0": "Temporary remove %1 motor jam protect state",
    "UNIT_ROLLERCAN_SET_MOTOR_STALL_PROTECT_MSG0": "Set %1 motor jam protect to %2",
    "UNIT_ROLLERCAN_SET_MOTOR_ID_MSG0": "Set %1 motor CAN id to %2",
    "UNIT_ROLLERCAN_SET_CAN_BAUDRATE_MSG0": "Set %1 motor CAN baudrate to %2",
    "UNIT_ROLLERCAN_SET_RGB_MODE_MSG0": "Set %1 RGB mode to %2",
    "UNIT_ROLLERCAN_SET_RGB_COLOR_MSG0": "Set %1 RGB color to %2",
    "UNIT_ROLLERCAN_SET_RGB_BRIGHTNESS_MSG0": "Set %1 RGB LED brightness to %2 (0 ~ 100)",
    "UNIT_ROLLERCAN_SET_DATA_SAVE_IN_FLASH_MSG0": "Set %1 current setting save in flash",
    "UNIT_ROLLERCAN_GET_MOTOR_SPEED_READBACK_MSG0": "get %1 motor current speed(rpm) readback value(return float)",
    "UNIT_ROLLERCAN_GET_MOTOR_SPEED_PID_MSG0": "get %1 motor speed pid(return tuple)",
    "UNIT_ROLLERCAN_SET_MOTOR_SPEED_MSG0": "Set %1 motor speed %2 rpm",
    "UNIT_ROLLERCAN_SET_SPEED_MAX_CURRENT_MSG0": "Set %1 max current to %2 (mA) in speed mode",
    "UNIT_ROLLERCAN_SET_MOTOR_SPEED_PID_MSG0": "Set %1 motor speed P %2 I %3 D %4",
    "UNIT_ROLLERCAN_GET_MOTOR_POSITION_READBACK_MSG0": "get %1 motor current position readback value (return float)",
    "UNIT_ROLLERCAN_GET_MOTOR_POSITION_PID_MSG0": "get %1 motor position pid (return tuple)",
    "UNIT_ROLLERCAN_SET_MOTOR_POSITION_MSG0": "Set %1 motor position %2 count",
    "UNIT_ROLLERCAN_SET_POSITION_MAX_CURRENT_MSG0": "Set %1 max current to %2 in position mode",
    "UNIT_ROLLERCAN_SET_MOTOR_POSITION_PID_MSG0": "Set %1 motor position P %2 I %3 D %4",
    "UNIT_ROLLERCAN_GET_MOTOR_CURRENT_READBACK_MSG0": "get %1 motor current readback value (return float)",
    "UNIT_ROLLERCAN_SET_MOTOR_MAX_CURRENT_MSG0": "Set %1 motor max current to %2 mA",
    "UNIT_ROLLERCAN_GET_ENCODER_VALUE_MSG0": "get %1 motor encoder count value (return float)",
    "UNIT_ROLLERCAN_SET_ENCODER_VALUE_MSG0": "Set %1 motor encoder count to %2",
    "UNIT_ROLLERCAN_GET_MOTOR_SPEED_SETTING_MSG0": "get %1 motor speed(rpm) (return int)",
    "UNIT_ROLLERCAN_GET_MOTOR_SPEED_MAX_CURRENT_MSG0": "get %1 max current in speed mode (mA, return int)",
    "UNIT_ROLLERCAN_GET_MOTOR_POSITION_SETTING_MSG0": "get %1 motor position (return int)",
    "UNIT_ROLLERCAN_GET_MOTOR_POSITION_MAX_CURRENT_MSG0": "get %1 max current in position mode (mA, return int)",
    "UNIT_ROLLERCAN_GET_MOTOR_MAX_CURRENT_MSG0": "get %1 motor max current setting value (mA, return float)",
    "UNIT_ROLLERCAN_GET_FIRMWARE_VERSION_MSG0": "get %1 firmware version (return int)",
    "UNIT_ROLLERCAN_GET_I2C_ADDRESS_MSG0": "get %1 I2C Address (return int)",
    "UNIT_ROLLERCAN_SET_I2C_ADDRESS_MSG0": "Set %1 I2C address %2 (0x08 ~ 0x77)",
    "UNIT_ROLLERCAN_GET_MOTOR_OVER_RANGE_PROTECT_STATE_MSG0": "get %1 motor over range protect setting (return True or False)",
    "UNIT_ROLLERCAN_GET_BUTTON_CHANGE_MODE_MSG0": "get %1 button switching mode status (return True or False)",
    "UNIT_UHFRFID_INIT_MSG0": "Init %1 UART %2",
    "UNIT_UHFRFID_SLEEP_MSG0": "%1 module sleep",
    "UNIT_UHFRFID_WAKE_MSG0": "%1 module wake",
    "UNIT_UHFRFID_GET_CHANNEL_RSSI_MSG0": "get %1 rssi from channel %2 (0 ~ 19) (return int)",
    "UNIT_UHFRFID_GET_BLOCKING_SIGNAL_STRENGTH_MSG0": "get %1 blocking signal strength from channel %2 (0 ~ 19) (return int)",
    "UNIT_UHFRFID_GET_FIRMWARE_VERSION_MSG0": "get %1 firmware version (return string)",
    "UNIT_UHFRFID_GET_HARDWARE_VERSION_MSG0": "get %1 hardware version (return string)",
    "UNIT_UHFRFID_GET_MANUFACTURER_ID_MSG0": "get %1 manufacturer id (return string)",
    "UNIT_UHFRFID_GET_WORKING_REGION_MSG0": "get %1 working region (return int)",
    "UNIT_UHFRFID_GET_WORKING_CHANNEL_MSG0": "get %1 working channel (return 0 ~ 19)",
    "UNIT_UHFRFID_INVENTORY_MSG0": "get %1 inventory (hexadecimal, return string)",
    "UNIT_UHFRFID_CLEAR_WORKING_CHANNEL_MSG0": "%1 clear working channel",
    "UNIT_UHFRFID_SET_WORKING_REGION_MSG0": "Set %1 working region %2",
    "UNIT_UHFRFID_SET_WORKING_CHANNEL_MSG0": "Set %1 working channel %2 (0 ~ 19)",
    "UNIT_UHFRFID_INSERT_WORKING_CHANNEL_MSG0": "Insert %1 working channel %2 (0 ~ 19)",
    "UNIT_UHFRFID_SET_AUTOMATIC_HOPPING_MSG0": "Set %1 automatic hopping %2",
    "UNIT_UHFRFID_GET_DEMODULATOR_MIXER_MSG0": "get %1 demodulator mixer (return int)",
    "UNIT_UHFRFID_GET_DEMODULATOR_AMPLIFIER_MSG0": "get %1 demodulator amplifier (return int)",
    "UNIT_UHFRFID_GET_DEMODULATOR_THRESHOLD_MSG0": "get %1 demodulator threshold (return int)",
    "UNIT_UHFRFID_SET_DEMODULATOR_MIXER_MSG0": "Set %1 demodulator mixer gain %2",
    "UNIT_UHFRFID_SET_DEMODULATOR_AMPLIFIER_MSG0": "Set %1 demodulator amplifier gain %2",
    "UNIT_UHFRFID_SET_DEMODULATOR_THRESHOLD_MSG0": "Set %1 demodulator threshold %2 (0x01B0 ~ 0xFFFF)",
    "UNIT_UHFRFID_GET_TX_POWER_MSG0": "get %1 TX power (db, return int)",
    "UNIT_UHFRFID_SET_TX_POWER_MSG0": "Set %1 TX power %2 dBm (-7 ~ 26)",
    "UNIT_UHFRFID_SET_CONTINUOUS_WAVE_MSG0": "Set %1 continuous wave %2",
    "UNIT_UHFRFID_SET_ACCESS_PASSWORD_MSG0": "Set %1 access password %2 old password (hexadecimal) %3 new password (hexadecimal) %4",
    "UNIT_UHFRFID_SET_KILL_PASSWORD_MSG0": "Set %1 kill password to %2 (hexadecimal)",
    "UNIT_UHFRFID_KILL_MSG0": "Set %1 kill tag with access password %2 (hexadecimal)",
    "UNIT_UHFRFID_GET_IMPINJ_MONZA_QT_SR_MSG0": "get %1 Impinj Monza QT_SR with %2 persistence %3 access password (hexadecimal) %4 (return True or False)",
    "UNIT_UHFRFID_GET_IMPINJ_MONZA_QT_MEM_MSG0": "get %1 Impinj Monza QT_MEM with %2 persistence %3 access password (hexadecimal) %4 (return True or False)",
    "UNIT_UHFRFID_SET_IMPINJ_MONZA_QT_SR_MSG0": "Set %1 Impinj Monza QT_SR with %2 %3 %4 persistence %5 access password (hexadecimal) %6",
    "UNIT_UHFRFID_SET_IMPINJ_MONZA_QT_MEM_MSG0": "Set %1 Impinj Monza QT_MEM with %2 %3 %4 persistence %5 access password (hexadecimal) %6",
    "UNIT_UHFRFID_SET_QUERY_PARAM_MSG0": "Set %1 query command parameter with %2 DR %3 M %4 TRext %5 Sel %6 Session %7 Target %8 Q (0~8) %9",
    "UNIT_UHFRFID_LOCK_MEM_BANK_MSG0": "Set %1 kill password %2 access password %3 EPC %4 TID %5 USER %6 with access password (hexadecimal) %7",
    "UNIT_UHFRFID_SET_SELECT_MODE_MSG0": "Set %1 select mode to %2",
    "UNIT_UHFRFID_SELECT_MSG0": "%1 select Tag Target %2 Action %3 MemBank %4 Pointer (memory bit address) %5 Truncate %6 Mask %7",
    "UNIT_UHFRFID_SELECT_HEX_MSG0": "%1 select Tag Target %2 Action %3 MemBank %4 Pointer (memory bit address) %5 Truncate %6 Mask (hexadecimal) %7",
    "UNIT_UHFRFID_READ_MEM_BANK_MSG0": "%1 read MemBank %2 Pointer (memory bit address) %3 length %4 access password (hexadecimal) %5 (hexadecimal, return string)",
    "UNIT_UHFRFID_WRITE_MEM_BANK_MSG0": "%1 write MemBank %2 Pointer (memory bit address) %3 data (bytes) %4 access password (hexadecimal) %5",
    "UNIT_UHFRFID_WRITE_MEM_BANK_HEX_MSG0": "%1 write MemBank %2 Pointer (memory bit address) %3 data (hexadecimal) %4 access password (hexadecimal) %5",
    "UNIT_UHFRFID_GET_NXP_EAS_ALARM_MSG0": "get %1 NXP EAS-Alarm code (hexadecimal, return string)",
    "UNIT_UHFRFID_GET_NXP_CONFIG_WORD_MSG0": "get %1 NXP Config-Word with access password (hexadecimal) %2 (return int)",
    "UNIT_UHFRFID_SET_AUTOMATIC_SLEEP_TIME_MSG0": "Set %1 automatic sleep time %2 (1~30) minutes",
    "UNIT_UHFRFID_DISABLE_AUTOMATIC_SLEEP_MSG0": "%1 disable automatic sleep",
    "UNIT_UHFRFID_SET_NXP_CONFIG_WORD_MSG0": "Set %1 NXP Config-Word to %2 with access password (hexadecimal) %3",
    "UNIT_UHFRFID_NXP_READ_PROTECT_MSG0": "Set %1 NXP read protect with access password (hexadecimal) %2",
    "UNIT_UHFRFID_RESET_NXP_READ_PROTECT_MSG0": "Reset %1 NXP read protect with access password (hexadecimal) %2",
    "UNIT_UHFRFID_NXP_CHANGE_EAS_MSG0": "Set %1 NXP change EAS with access password (hexadecimal) %2",
    "UNIT_UHFRFID_RESET_NXP_CHANGE_EAS_MSG0": "Reset %1 NXP change EAS with access password (hexadecimal) %2",
    "UNIT_TIMERPWR_INIT_MSG0": "Init %1 I2C address %2",
    "UNIT_TIMERPWR_GET_FIRMWARE_VERSION_MSG0": "get %1 firmware version (return int)",
    "UNIT_TIMERPWR_GET_BATTERY_VOLTAGE_MSG0": "get %1 battery voltage in millivolt (return int)",
    "UNIT_TIMERPWR_GET_BATTERY_CURRENT_MSG0": "get %1 battery current in milliamperes (return int)",
    "UNIT_TIMERPWR_GET_USB_VOLTAGE_MSG0": "get %1 usb voltage in millivolt (return int)",
    "UNIT_TIMERPWR_GET_USB_CURRENT_MSG0": "get %1 usb current in milliamperes (return int)",
    "UNIT_TIMERPWR_GET_GROVE_VOLTAGE_MSG0": "get %1 grove voltage in millivolt (return int)",
    "UNIT_TIMERPWR_GET_GROVE_CURRENT_MSG0": "get %1 grove current in milliamperes (return int)",
    "UNIT_TIMERPWR_IS_CHARGING_MSG0": "%1 is battery charging (return True or False)",
    "UNIT_TIMERPWR_GET_BUTTON_STATUS_MSG0": "get %1 button %2 status (return True or False)",
    "UNIT_TIMERPWR_SAVE_DATA_TO_FLASH_MSG0": "Save %1 data to flash",
    "UNIT_TIMERPWR_GET_GROVE_OUTPUT_STATUS_MSG0": "get %1 grove output status (return True or False)",
    "UNIT_TIMERPWR_SET_GROVE_OUTPUT_STATUS_MSG0": "Set %1 grove output %2",
    "UNIT_TIMERPWR_GET_OLED_BACKLIGHT_STATUS_MSG0": "get %1 grove oled backlight status (return True or False)",
    "UNIT_TIMERPWR_SET_OLED_BACKLIGHT_STATUS_MSG0": "Set %1 oled backlight %2",
    "UNIT_TIMERPWR_SET_WAKEUP_TRIGGER_MSG0": "Set %1 wake-up trigger %2",
    "UNIT_TIMERPWR_SET_SLEEP_TRIGGER_MSG0": "Set %1 sleep trigger %2",
    "UNIT_TIMERPWR_SLEEP_ONCE_MSG0": "Set %1 %2 sleep once after %3 wake up in %4",
    "UNIT_TIMERPWR_SLEEP_CYCLE_MSG0": "Set %1 %2 sleep cycle after %3 wake up in %4",
    "UNIT_TIMERPWR_TIME_INPUT_MSG0": "hours (0 ~ 255)",
    "UNIT_TIMERPWR_TIME_INPUT_MSG1": "minutes (0 ~ 59)",
    "UNIT_TIMERPWR_TIME_INPUT_MSG2": "seconds (0 ~ 59)",
    "UNIT_TIMERPWR_USB_CALLBACK_MSG0": "When %1 was USB %2",
    "UNIT_TIMERPWR_CHARGING_CALLBACK_MSG0": "When %1 %2",
    "UNIT_TIMERPWR_BUTTON_CALLBACK_MSG0": "When %1 button %2 was %3",
    "UNIT_TIMERPWR_TICK_MSG0": "%1 check event in loop",
    "UNIT_PUZZLE_INIT_MSG0": "Init %1 nodes quantity is %2 (1 ~ 100)",
    "UNIT_PUZZLE_SET_COLOR_MSG0": "Set %1 RGB with %2 node (1 ~ 100) %3 index (1 ~ 64) %4 color %5",
    "UNIT_PUZZLE_FILL_COLOR_MSG0": "Fill %1 with RGB color %2",
    "UNIT_PUZZLE_SET_BRIGHTNESS_MSG0": "Set %1 brightness to %2 (0 ~ 100)",
    "UNIT_PUZZLE_SET_COLOR_FROM_MSG0": "Fill %1 with %2 node (1 ~ 100) %3 index (1 ~ 64) %4 RGB color %5 delay (ms) %6",
    "UNIT_PUZZLE_SET_COLOR_RUNNING_FROM_MSG0": "Set %1 running RGB with %2 node (1 ~ 100) %3 index (1 ~ 64) %4 color %5 delay (ms) %6",
    "UNIT_PUZZLE_SET_COLOR_SATURATION_FROM_MSG0": "Set %1 saturation RGB with %2 node (1 ~ 100) %3 index (1 ~ 64) %4 color %5 delay (ms) %6",
    "UNIT_PUZZLE_SET_RANDOM_COLOR_MSG0": "Set %1 random RGB color with %2 node (1 ~ 100) %3 index (1 ~ 64) %4",
    "UNIT_PUZZLE_SET_MATRIX_MSG0": "Set %1 pattern with %2 node (1 ~ 100) %3",
    "UNIT_PUZZLE_SET_MATRIX_MSG1": "RGB color",
    "UNIT_PUZZLE_INDEX_FROM_TO_MSG0": "from",
    "UNIT_PUZZLE_INDEX_FROM_TO_MSG1": "to",
    "UNIT_BYTEBUTTON_INIT_MSG0": "Init %1 I2C address %2 (0x08 ~ 0x77)",
    "UNIT_BYTEBUTTON_GET_BYTE_BUTTON_STATUS_MSG0": "get %1 all button status (return int)",
    "UNIT_BYTEBUTTON_GET_BUTTON_STATE_MSG0": "get %1 the status of %2 key (return True or False)",
    "UNIT_BYTEBUTTON_GET_LED_SHOW_MODE_MSG0": "get %1 the LED show mode (return 0 or 1)",
    "UNIT_BYTEBUTTON_SET_LED_SHOW_MODE_MSG0": "Set %1 the LED show mode to %2",
    "UNIT_BYTEBUTTON_SET_LED_BRIGHTNESS_MSG0": "Set %1 the brightness of %2 LED to %3 (0 ~ 255)",
    "UNIT_BYTEBUTTON_GET_LED_BRIGHTNESS_MSG0": "get %1 the brightness of %2 LED (return 0 ~ 255)",
    "UNIT_BYTEBUTTON_GET_FIRMWARE_VERSION_MSG0": "get %1 firmware version",
    "UNIT_BYTEBUTTON_GET_I2C_ADDRESS_MSG0": "get %1 I2C address",
    "UNIT_BYTEBUTTON_SET_I2C_ADDRESS_MSG0": "Set %1 I2C address to %2 (0x08 ~ 0x77)",
    "UNIT_BYTEBUTTON_SAVE_TO_FLASH_MSG0": "%1 save user settings to flash",
    "UNIT_BYTEBUTTON_GET_INDICATOR_COLOR_MSG0": "get %1 the color of the indicator LED (return RGB888)",
    "UNIT_BYTEBUTTON_SET_INDICATOR_COLOR_MSG0": "Set %1 the color of the indicator LED to %2",
    "UNIT_BYTEBUTTON_GET_INDICATOR_BRIGHTNESS_MSG0": "get %1 the brightness of the indicator LED (return 0 ~ 255)",
    "UNIT_BYTEBUTTON_SET_INDICATOR_BRIGHTNESS_MSG0": "Set %1 the brightness of the indicator LED to %2 (0 ~ 255)",
    "UNIT_BYTEBUTTON_GET_USER_MODE_LED_COLOR_MSG0": "get %1 the color of %2 LED in user mode",
    "UNIT_BYTEBUTTON_GET_SYS_MODE_LED_COLOR_MSG0": "get %1 the color of %2 LED when it %3 in sys mode",
    "UNIT_BYTEBUTTON_SET_USER_MODE_LED_COLOR_MSG0": "Set %1 the color of %2 LED to %3 in user mode",
    "UNIT_BYTEBUTTON_SET_SYS_MODE_LED_COLOR_MSG0": "Set %1 the color of %2 LED to %3 when it %4 in sys mode",
    "UNIT_BYTESWITCH_INIT_MSG0": "Init %1 I2C address %2 (0x08 ~ 0x77)",
    "UNIT_BYTESWITCH_GET_BYTE_SWITCH_STATUS_MSG0": "get %1 all switch status (return int)",
    "UNIT_BYTESWITCH_GET_SWITCH_STATE_MSG0": "get %1 the status of %2 key (return True or False)",
    "UNIT_BYTESWITCH_GET_LED_SHOW_MODE_MSG0": "get %1 the LED show mode (return 0 or 1)",
    "UNIT_BYTESWITCH_SET_LED_SHOW_MODE_MSG0": "Set %1 the LED show mode to %2",
    "UNIT_BYTESWITCH_SET_LED_BRIGHTNESS_MSG0": "Set %1 the brightness of %2 LED to %3 (0 ~ 255)",
    "UNIT_BYTESWITCH_GET_LED_BRIGHTNESS_MSG0": "get %1 the brightness of %2 LED (return 0 ~ 255)",
    "UNIT_BYTESWITCH_GET_FIRMWARE_VERSION_MSG0": "get %1 firmware version",
    "UNIT_BYTESWITCH_GET_I2C_ADDRESS_MSG0": "get %1 I2C address",
    "UNIT_BYTESWITCH_SET_I2C_ADDRESS_MSG0": "Set %1 I2C address to %2 (0x08 ~ 0x77)",
    "UNIT_BYTESWITCH_SAVE_TO_FLASH_MSG0": "%1 save user settings to flash",
    "UNIT_BYTESWITCH_GET_INDICATOR_COLOR_MSG0": "get %1 the color of the indicator LED (return RGB888)",
    "UNIT_BYTESWITCH_SET_INDICATOR_COLOR_MSG0": "Set %1 the color of the indicator LED to %2",
    "UNIT_BYTESWITCH_GET_INDICATOR_BRIGHTNESS_MSG0": "get %1 the brightness of the indicator LED (return 0 ~ 255)",
    "UNIT_BYTESWITCH_SET_INDICATOR_BRIGHTNESS_MSG0": "Set %1 the brightness of the indicator LED to %2 (0 ~ 255)",
    "UNIT_BYTESWITCH_GET_USER_MODE_LED_COLOR_MSG0": "get %1 the color of %2 LED in user mode",
    "UNIT_BYTESWITCH_GET_SYS_MODE_LED_COLOR_MSG0": "get %1 the color of %2 LED when it %3 in sys mode",
    "UNIT_BYTESWITCH_SET_USER_MODE_LED_COLOR_MSG0": "Set %1 the color of %2 LED to %3 in user mode",
    "UNIT_BYTESWITCH_SET_SYS_MODE_LED_COLOR_MSG0": "Set %1 the color of %2 LED to %3 when it %4 in sys mode",
    "UNIT_ASR_INIT_MSG0": "Init %1 UART %2",
    "UNIT_ASR_GET_CURRENT_RAW_MESSAGE_MSG0": "get %1 current raw message (return string)",
    "UNIT_ASR_GET_CURRENT_COMMAND_WORD_MSG0": "get %1 current command word (return string)",
    "UNIT_ASR_GET_CURRENT_COMMAND_NUM_MSG0": "get %1 current command num (return string)",
    "UNIT_ASR_GET_COMMAND_HANDLER_MSG0": "get %1 current command handler state (return True or False)",
    "UNIT_ASR_GET_RECEIVED_STATUS_MSG0": "get %1 status of the receive message (return True or False)",
    "UNIT_ASR_GET_COMMAND_LIST_MSG0": "get %1 current command list",
    "UNIT_ASR_SEND_MESSAGE_MSG0": "Send message to %1 with command number (hex) %2",
    "UNIT_ASR_REMOVE_COMMAND_WORD_MSG0": "Remove %1 command word %2",
    "UNIT_ASR_SEARCH_COMMAND_NUM_MSG0": "search %1 command number of the command word %2 (return int)",
    "UNIT_ASR_SEARCH_COMMAND_WORD_MSG0": "search %1 command word of the command number (hex) %2 (return string)",
    "UNIT_ASR_ADD_COMMAND_WORD_MSG0": "Add %1 command num (hex) %2 and the command word %3",
    "UNIT_ASR_EVENT_MSG0": "When %1 recognizes command word %2",
    "UNIT_PDM_INIT_MSG0": "Init %1 with I2S port %2 sample rate %3",
    "UNIT_PDM_SET_CONFIG_INT_MSG0": "%1 config %2 to %3",
    "UNIT_PDM_SET_CONFIG_BOOLEAN_MSG0": "%1 config %2 to %3",
    "UNIT_PDM_GET_CONFIG_INT_MSG0": "get %1 config %2 (return int)",
    "UNIT_PDM_GET_CONFIG_BOOLEAN_MSG0": "get %1 config %2 (return True or False)",
    "UNIT_PDM_BEGIN_MSG0": "%1 begin",
    "UNIT_PDM_END_MSG0": "%1 end",
    "UNIT_PDM_IS_RUNNING_MSG0": "%1 is running (return True or False)",
    "UNIT_PDM_IS_ENABLED_MSG0": "%1 is enabled (return True or False)",
    "UNIT_PDM_IS_RECORDING_MSG0": "%1 is recording (return int)",
    "UNIT_PDM_SET_SAMPLE_RATE_MSG0": "Set %1 sampling rate %2",
    "UNIT_PDM_SET_RECORD_MSG0": "%1 record into buf %2 rate %3 stereo %4",
    "UNIT_PDM_RECORD_WAV_FILE_MSG0": "%1 record WAV file %2 %3 sample rate %4 time (second) %5 stereo %6",
    "UNIT_PDM_CONFIG_OPTION_MSG0": "pin_data_in",
    "UNIT_PDM_CONFIG_OPTION_MSG1": "pin_bck",
    "UNIT_PDM_CONFIG_OPTION_MSG2": "pin_mck",
    "UNIT_PDM_CONFIG_OPTION_MSG3": "pin_ws",
    "UNIT_PDM_CONFIG_OPTION_MSG4": "sample_rate",
    "UNIT_PDM_CONFIG_OPTION_MSG5": "over_sampling",
    "UNIT_PDM_CONFIG_OPTION_MSG6": "magnification",
    "UNIT_PDM_CONFIG_OPTION_MSG7": "noise_filter_level",
    "UNIT_PDM_CONFIG_OPTION_MSG8": "dma_buf_len",
    "UNIT_PDM_CONFIG_OPTION_MSG9": "dma_buf_count",
    "UNIT_PDM_CONFIG_OPTION_MSG10": "task_priority",
    "UNIT_PDM_CONFIG_OPTION_MSG11": "task_pinned_core",
    "UNIT_PDM_CONFIG_OPTION_MSG12": "i2s_port",
    "UNIT_PDM_CONFIG_OPTION_MSG13": "stereo",
    "UNIT_PDM_CONFIG_OPTION_MSG14": "use_adc",
    "UNIT_PDM_IS_RECORDING_MSG1": "not recording",
    "UNIT_PDM_IS_RECORDING_MSG2": "recording (There's room in the queue)",
    "UNIT_PDM_IS_RECORDING_MSG3": "recording (There's no room in the queue)",
    "HAT_DAC2_INIT_MSG0": "Init %1 I2C address %2 (0x58 ~ 0x65)",
    "HAT_DAC2_SET_VOLTAGE_RANGE_MSG0": "Set %1 output voltage range %2",
    "HAT_DAC2_SET_VOLTAGE_MSG0": "Set %1 channel %2 output voltage %3 (V)",
    "HAT_DAC2_SET_VOLTAGE_BOTH_MSG0": "Set %1 channel0 output voltage %2 (V) channel1 output voltage %3 (V)",
    "HAT_DAC_INIT_MSG0": "Init %1",
    "HAT_DAC_GET_VALUE_MSG0": "get %1 DAC value (return int)",
    "HAT_DAC_GET_VOLTAGE_MSG0": "get %1 voltage (return float)",
    "HAT_DAC_GET_RAW_VALUE_MSG0": "get %1 raw value (return int)",
    "HAT_DAC_GET_NORMALIZED_VALUE_MSG0": "get %1 normalized value (return 0.0 ~ 1.0)",
    "HAT_DAC_SET_VALUE_MSG0": "%1 DAC value %2 (0 ~ 65535)",
    "HAT_DAC_SET_VOLTAGE_MSG0": "%1 voltage %2 (0 ~ 3.3)",
    "HAT_DAC_SET_RAW_VALUE_MSG0": "%1 raw value %2 (0 ~ 4095)",
    "HAT_DAC_SET_NORMALIZED_VALUE_MSG0": "%1 normalized value %2 (0.0 ~ 1.0)",
    "HAT_DAC_SAVE_TO_EEPROM_MSG0": "%1 save to eeprom",
    "HAT_ADC_INIT_MSG0": "Init %1",
    "HAT_ADC_GET_VALUE_MSG0": "get %1 value (return int)",
    "HAT_ADC_GET_VOLTAGE_MSG0": "get %1 voltage (return float)",
    "HAT_ADC_GET_RAW_VALUE_MSG0": "get %1 raw value (return int)",
    "HAT_ADC_GET_OPERATING_MODE_MSG0": "get %1 operating mode (return 0 or 1)",
    "HAT_ADC_GET_DATA_RATE_MSG0": "get %1 data rate (return int)",
    "HAT_ADC_GET_GAIN_MSG0": "get %1 gain (return int)",
    "HAT_ADC_SET_OPERATING_MODE_MSG0": "%1 operating mode %2",
    "HAT_ADC_SET_DATA_RATE_MSG0": "%1 data rate %2",
    "HAT_ADC_SET_GAIN_MSG0": "%1 gain %2",
    "HAT_DLIGHT_INIT_MSG0": "Init %1",
    "HAT_DLIGHT_GET_LUX_MSG0": "get %1 lux (return float)",
    "HAT_DLIGHT_CONFIGURE_MSG0": "%1 set mode %2 resolution %3",
    "HAT_NCIR_INIT_MSG0": "Init %1",
    "HAT_NCIR_GET_AMBIENT_TEMPERATURE_MSG0": "get %1 ambient temperature (°C, return float)",
    "HAT_NCIR_GET_OBJECT_TEMPERATURE_MSG0": "get %1 object temperature (°C, return float)",
    "HAT_TOF_INIT_MSG0": "Init %1",
    "HAT_TOF_GET_DATA_STATUS_MSG0": "get %1 data ready status (return True or False)",
    "HAT_TOF_GET_DISTANCE_MSG0": "get %1 distance (cm, return float)",
    "HAT_TOF_GET_RANGE_MSG0": "get %1 range (mm, return int)",
    "HAT_TOF_GET_CONTINUOUS_MODE_MSG0": "get %1 continuous mode (return True or False)",
    "HAT_TOF_GET_MEASUREMENT_TIMING_BUDGET_MSG0": "get %1 measurement timing budget (return int)",
    "HAT_TOF_SET_MEASUREMENT_TIMING_BUDGET_MSG0": "%1 measurement timing budget %2",
    "HAT_TOF_SET_ADDRESS_MSG0": "%1 set address %2",
    "HAT_TOF_GET_SIGNAL_RATE_LIMIT_MSG0": "get %1 signal rate limit (return float)",
    "HAT_TOF_SET_SIGNAL_RATE_LIMIT_MSG0": "%1 signal rate limit %2 MCPS (0.0 ~ 511.99)",
    "HAT_TOF_START_CONTINUOUS_MSG0": "%1 start continuous",
    "HAT_TOF_STOP_CONTINUOUS_MSG0": "%1 stop continuous",
    "HAT_RS485_INIT_MSG0": "Init",
    "HAT_RS485_CONFIGURE_MSG0": "Configure",
    "HAT_RS485_CONFIGURE_MSG1": "UART",
    "HAT_RS485_CONFIGURE_MSG2": "baudrate",
    "HAT_RS485_CONFIGURE_MSG3": "data bits",
    "HAT_RS485_CONFIGURE_MSG4": "stop bits",
    "HAT_RS485_CONFIGURE_MSG5": "parity",
    "HAT_RS485_CONFIGURE_MSG6": "TX pin",
    "HAT_RS485_CONFIGURE_MSG7": "RX pin",
    "HAT_RS485_CONFIGURE_MSG8": "ctrl pin",
    "HAT_RS485_READ_ALL_BYTES_MSG0": "read all bytes (return bytes)",
    "HAT_RS485_READ_BYTES_MSG0": "read",
    "HAT_RS485_READ_BYTES_MSG1": "bytes (return bytes)",
    "HAT_RS485_READ_LINE_MSG0": "read line (return bytes)",
    "HAT_RS485_REMAIN_CACHE_MSG0": "number of bytes available",
    "HAT_RS485_WRITE_MSG0": "write",
    "HAT_RS485_WRITE_LINE_MSG0": "write a line",
    "HAT_RS485_WRITE_LIST_BYTES_MSG0": "write list of bytes",
    "HAT_RS485_READ_COILS_MSG0": "read coils",
    "HAT_RS485_READ_COILS_MSG1": "slave address (0 ~ 247)",
    "HAT_RS485_READ_COILS_MSG2": "starting address (0 ~ 9999)",
    "HAT_RS485_READ_COILS_MSG3": "coil quantity",
    "HAT_RS485_READ_COILS_MSG4": "timeout",
    "HAT_RS485_READ_COILS_MSG5": "(return list)",
    "HAT_RS485_READ_DISCRETE_INPUTS_MSG0": "read discrete inputs",
    "HAT_RS485_READ_DISCRETE_INPUTS_MSG1": "slave address (0 ~ 247)",
    "HAT_RS485_READ_DISCRETE_INPUTS_MSG2": "starting address (0 ~ 9999)",
    "HAT_RS485_READ_DISCRETE_INPUTS_MSG3": "input quantity",
    "HAT_RS485_READ_DISCRETE_INPUTS_MSG4": "timeout",
    "HAT_RS485_READ_DISCRETE_INPUTS_MSG5": "(return list)",
    "HAT_RS485_READ_HOLDING_REGISTERS_MSG0": "read holding registers",
    "HAT_RS485_READ_HOLDING_REGISTERS_MSG1": "slave address (0 ~ 247)",
    "HAT_RS485_READ_HOLDING_REGISTERS_MSG2": "starting address (0 ~ 9999)",
    "HAT_RS485_READ_HOLDING_REGISTERS_MSG3": "register quantity",
    "HAT_RS485_READ_HOLDING_REGISTERS_MSG4": "signed",
    "HAT_RS485_READ_HOLDING_REGISTERS_MSG5": "timeout",
    "HAT_RS485_READ_HOLDING_REGISTERS_MSG6": "(return list)",
    "HAT_RS485_READ_INPUT_REGISTERS_MSG0": "read input registers",
    "HAT_RS485_READ_INPUT_REGISTERS_MSG1": "slave address (0 ~ 247)",
    "HAT_RS485_READ_INPUT_REGISTERS_MSG2": "starting address (0 ~ 9999)",
    "HAT_RS485_READ_INPUT_REGISTERS_MSG3": "register quantity",
    "HAT_RS485_READ_INPUT_REGISTERS_MSG4": "signed",
    "HAT_RS485_READ_INPUT_REGISTERS_MSG5": "timeout",
    "HAT_RS485_READ_INPUT_REGISTERS_MSG6": "(return list)",
    "HAT_RS485_WRITE_SINGLE_COIL_MSG0": "write single coil",
    "HAT_RS485_WRITE_SINGLE_COIL_MSG1": "slave address (0 ~ 247)",
    "HAT_RS485_WRITE_SINGLE_COIL_MSG2": "output address (0 ~ 9999)",
    "HAT_RS485_WRITE_SINGLE_COIL_MSG3": "output",
    "HAT_RS485_WRITE_SINGLE_COIL_MSG4": "timeout",
    "HAT_RS485_WRITE_SINGLE_REGISTER_MSG0": "write single register",
    "HAT_RS485_WRITE_SINGLE_REGISTER_MSG1": "slave address (0 ~ 247)",
    "HAT_RS485_WRITE_SINGLE_REGISTER_MSG2": "register address (0 ~ 9999)",
    "HAT_RS485_WRITE_SINGLE_REGISTER_MSG3": "register value",
    "HAT_RS485_WRITE_SINGLE_REGISTER_MSG4": "signed",
    "HAT_RS485_WRITE_SINGLE_REGISTER_MSG5": "timeout",
    "HAT_RS485_WRITE_MULTIPLE_COILS_MSG0": "write multiple coils",
    "HAT_RS485_WRITE_MULTIPLE_COILS_MSG1": "slave address (0 ~ 247)",
    "HAT_RS485_WRITE_MULTIPLE_COILS_MSG2": "starting address (0 ~ 9999)",
    "HAT_RS485_WRITE_MULTIPLE_COILS_MSG3": "output value",
    "HAT_RS485_WRITE_MULTIPLE_COILS_MSG4": "timeout",
    "HAT_RS485_WRITE_MULTIPLE_REGISTER_MSG0": "write multiple register",
    "HAT_RS485_WRITE_MULTIPLE_REGISTER_MSG1": "slave address (0 ~ 247)",
    "HAT_RS485_WRITE_MULTIPLE_REGISTER_MSG2": "starting address (0 ~ 9999)",
    "HAT_RS485_WRITE_MULTIPLE_REGISTER_MSG3": "register value",
    "HAT_RS485_WRITE_MULTIPLE_REGISTER_MSG4": "signed",
    "HAT_RS485_WRITE_MULTIPLE_REGISTER_MSG5": "timeout",
    "HAT_RS485_READ_INTO_BUF_MSG0": "%1 read into buf %2",
    "HAT_RS485_SEND_BREAK_MSG0": "%1 send break single",
    "HAT_RS485_FLUSH_MSG0": "%1 flush",
    "HAT_RS485_TXDONE_MSG0": "%1 is transfer done (return True or False)",
    "HAT_VIBRATOR_INIT_MSG0": "Init %1",
    "HAT_VIBRATOR_DEINIT_MSG0": "%1 deinit",
    "HAT_VIBRATOR_TURN_OFF_MSG0": "%1 turn off vibrator",
    "HAT_VIBRATOR_SET_FREQ_MSG0": "%1 set freq %2 Hz(10 ~ 55)",
    "HAT_VIBRATOR_SET_DUTY_MSG0": "%1 set duty %2 %",
    "HAT_VIBRATOR_SET_ONCE_MSG0": "play once with",
    "HAT_VIBRATOR_SET_ONCE_MSG1": "freq (10 ~ 55 Hz)",
    "HAT_VIBRATOR_SET_ONCE_MSG2": "duty (%)",
    "HAT_VIBRATOR_SET_ONCE_MSG3": "duration (ms)",
    "HAT_YUN_INIT_MSG0": "Init %1",
    "HAT_YUN_GET_BMP280_TEMPERATURE_MSG0": "get %1 temperature from BMP280 (°C, return float)",
    "HAT_YUN_GET_SHT20_TEMPERATURE_MSG0": "get %1 temperature from SHT20 (°C, return float)",
    "HAT_YUN_GET_PRESSURE_MSG0": "get %1 pressure (hPa, return float)",
    "HAT_YUN_GET_HUMIDITY_MSG0": "get %1 humidity (%, return float)",
    "HAT_YUN_GET_LIGHT_BRIGHTNESS_MSG0": "get %1 light ADC value (return int)",
    "HAT_YUN_FILL_COLOR_MSG0": "%1 fill RGB LED color %2",
    "HAT_YUN_SET_COLOR_MSG0": "%1 set RGB LED index %2 RGB color %3",
    "HAT_SERVOS8V11_INIT_MSG0": "Init %1 I2C address %2",
    "HAT_SERVOS8V11_GET_POWER_STATE_MSG0": "get %1 power state",
    "HAT_SERVOS8V11_POWER_CTRL_MSG0": "%1 set power state %2",
    "HAT_SERVOS8V11_ON_MSG0": "%1 power on",
    "HAT_SERVOS8V11_OFF_MSG0": "%1 power off",
    "HAT_SERVOS8V11_WRITE_ANGLE_MSG0": "%1 set channel %2 servo angle %3 (0 ~ 180)",
    "HAT_SERVOS8V11_WRITE_PULSE_MSG0": "%1 set channel %2 servo pulse %3 (500 ~ 2500)",
    "HAT_SERVOS8V11_READ_ANGLE_MSG0": "read %1 channel %2 servo angle (return 0 ~ 180)",
    "HAT_SERVOS8V11_READ_PULSE_MSG0": "read %1 channel %2 servo pulse (return 500 ~ 2500)",
    "HAT_MINIENCODERC_INIT_MSG0": "Init %1 I2C address %2 (0x08 ~ 0x77)",
    "HAT_MINIENCODERC_GET_ROTARY_STATUS_MSG0": "get %1 rotary status (return True or False)",
    "HAT_MINIENCODERC_GET_ROTARY_VALUE_MSG0": "get %1 rotary value (return int)",
    "HAT_MINIENCODERC_GET_INCREMENTS_MSG0": "get %1 increments (return int)",
    "HAT_MINIENCODERC_GET_BUTTON_STATUS_MSG0": "get %1 button status (return int)",
    "HAT_MINIENCODERC_RESET_VALUE_MSG0": "%1 reset value",
    "HAT_MINIENCODERC_FILL_COLOR_MSG0": "%1 fill RGB LED color %2",
    "HAT_MINIENCODERC_SET_ADDRESS_MSG0": "Set %1 I2C address %2 (0x08 ~ 0x77)",
    "HAT_MINIENCODERC_SET_ROTARY_VALUE_MSG0": "Set %1 rotary value",
    "HAT_MINIENCODERC_READ_FW_VERSION_MSG0": "get %1 firmware version (return string)",
    "HAT_ENV_INIT_MSG0": "Init %1",
    "HAT_ENV_GET_TEMPERATURE_MSG0": "get %1 temperature (°C, return float)",
    "HAT_ENV_GET_PRESSURE_MSG0": "get %1 pressure (hPa, return float)",
    "HAT_ENV_GET_HUMIDITY_MSG0": "get %1 humidity (%, return float)",
    "HAT_PIR_INIT_MSG0": "Init %1",
    "HAT_PIR_ENABLE_IRQ_MSG0": "%1 enable irq",
    "HAT_PIR_DISABLE_IRQ_MSG0": "%1 disable irq",
    "HAT_PIR_CALLBACK_MSG0": "When PIR %1 was %2",
    "HAT_PIR_GET_STATUS_MSG0": "get %1 status (return True or False)",
    "HAT_NEOFLASH_INIT_MSG0": "Init %1",
    "HAT_NEOFLASH_SET_PIXEL_MSG0": "%1 set the pixel %2 X %3 Y %4 color %5",
    "HAT_NEOFLASH_SET_PIXELS_MSG0": "%1 set the pixels %2 each element is [x, y, color] %3",
    "HAT_JOYSTICK_INIT_MSG0": "Init %1 I2C address %2",
    "HAT_JOYSTICK_GET_X_RAW_MSG0": "get %1 x-axis raw value (return int)",
    "HAT_JOYSTICK_GET_Y_RAW_MSG0": "get %1 y-axis raw value (return int)",
    "HAT_JOYSTICK_GET_X_MSG0": "get %1 x-axis value (return int)",
    "HAT_JOYSTICK_GET_Y_MSG0": "get %1 y-axis value (return int)",
    "HAT_JOYSTICK_GET_BUTTON_STATUS_MSG0": "get %1 button status (return True or False)",
    "HAT_JOYSTICK_SET_SWAP_X_MSG0": "%1 swap x-axis direction %2",
    "HAT_JOYSTICK_SET_SWAP_Y_MSG0": "%1 swap y-axis direction %2",
    "HAT_JOYC_INIT_MSG0": "Init %1 I2C address %2",
    "HAT_JOYC_GET_X_RAW_MSG0": "get %1 channel %2 raw x-axis value (return int)",
    "HAT_JOYC_GET_Y_RAW_MSG0": "get %1 channel %2 raw y-axis value (return int)",
    "HAT_JOYC_GET_X_MSG0": "get %1 channel %2 x-axis value (return int)",
    "HAT_JOYC_GET_Y_MSG0": "get %1 channel %2 y-axis value (return int)",
    "HAT_JOYC_GET_BUTTON_STATUS_MSG0": "get %1 channel %2 button status (return True or False)",
    "HAT_JOYC_SET_SWAP_X_MSG0": "%1 swap x-axis direction %2",
    "HAT_JOYC_SET_SWAP_Y_MSG0": "%1 swap y-axis direction %2",
    "HAT_JOYC_FILL_COLOR_MSG0": "%1 fill color %2",
    "HAT_MINIJOYC_INIT_MSG0": "Init %1 I2C address %2 (0x08 ~ 0x77)",
    "HAT_MINIJOYC_GET_X_RAW_MSG0": "get %1 x-axis raw value (return int)",
    "HAT_MINIJOYC_GET_Y_RAW_MSG0": "get %1 y-axis raw value (return int)",
    "HAT_MINIJOYC_GET_X_MSG0": "get %1 x-axis value (return int)",
    "HAT_MINIJOYC_GET_Y_MSG0": "get %1 y-axis value (return int)",
    "HAT_MINIJOYC_GET_BUTTON_STATUS_MSG0": "get %1 button status (return True or False)",
    "HAT_MINIJOYC_SET_SWAP_X_MSG0": "%1 swap x-axis direction %2",
    "HAT_MINIJOYC_SET_SWAP_Y_MSG0": "%1 swap y-axis direction %2",
    "HAT_MINIJOYC_GET_FIRMWARE_VERSION_MSG0": "get %1 firmware version",
    "HAT_MINIJOYC_SET_I2C_ADDRESS_MSG0": "%1 set I2C address %2 (0x08 ~ 0x77)",
    "HAT_THERMAL_INIT_MSG0": "Init %1 I2C address %2",
    "HAT_THERMAL_GET_MAX_TEMPERATURE_MSG0": "get %1 maximum temperature in pixel array (return float)",
    "HAT_THERMAL_GET_MIN_TEMPERATURE_MSG0": "get %1 minimum temperature in pixel array (return float)",
    "HAT_THERMAL_GET_MIDPOINT_TEMPERATURE_MSG0": "get %1 midpoint temperature in pixel array (return float)",
    "HAT_THERMAL_GET_PIXEL_TEMPERATURE_MSG0": "get %1 temperature in pixel array x %2 y %3 position (return float)",
    "HAT_THERMAL_GET_TEMPERATURE_BUFFER_MSG0": "get %1 pixel array buffer (return list)",
    "HAT_THERMAL_GET_REFRESH_RATE_MSG0": "get %1 refresh rate in Hz (return int)",
    "HAT_THERMAL_SET_REFRESH_RATE_MSG0": "%1 set refresh rate %2 in Hz",
    "HAT_THERMAL_UPDATE_TEMPERATURE_BUFFER_MSG0": "%1 update temperature pixel buffer (in loop)",
    "HAT_SERVO_INIT_MSG0": "Init %1",
    "HAT_SERVO_SET_DUTY_MSG0": "%1 set the duty cycle %2 (26 ~ 127)",
    "HAT_SERVO_SET_PERCENT_MSG0": "%1 set the rotate percentage %2 (0 ~ 100)",
    "HAT_SERVO_SET_ANGLE_MSG0": "%1 set the rotate angle %2 (0 ~ 145)",
    "HAT_SERVO_DEINIT_MSG0": "%1 deinit",
    "HAT_FINGER_INIT_MSG0": "Init %1 UART ID %2",
    "HAT_FINGER_SLEEP_MSG0": "%1 sleep",
    "HAT_FINGER_DELETE_USER_MSG0": "%1 delete user %2 (0 ~ 149)",
    "HAT_FINGER_DELETE_ALL_USER_MSG0": "%1 delete all user",
    "HAT_FINGER_GET_ADD_MODE_MSG0": "get %1 add mode (return 0 or 1)",
    "HAT_FINGER_SET_ADD_MODE_MSG0": "Set %1 add mode %2",
    "HAT_FINGER_GET_USER_COUNT_MSG0": "get %1 user count",
    "HAT_FINGER_GET_USER_CAPACITY_MSG0": "get %1 user capacity",
    "HAT_FINGER_GET_MATCH_LEVEL_MSG0": "get %1 match level (return 0~9)",
    "HAT_FINGER_SET_MATCH_LEVEL_MSG0": "Set %1 match level %2 (0 ~ 9)",
    "HAT_FINGER_COMPARE_ID_MSG0": "%1 compare user %2 (0 ~ 149) (return True or False)",
    "HAT_FINGER_COMPARE_FINGER_MSG0": "%1 compare finger (return -1 or 0~149)",
    "HAT_FINGER_GET_USER_LIST_MSG0": "get %1 user list",
    "HAT_FINGER_GET_USER_INFO_MSG0": "get %1 user %2 (0 ~ 149) info (return None or tuple)",
    "HAT_FINGER_GET_USER_PERMISSION_MSG0": "get %1 user %2 (0 ~ 149) permission (return -1 or 1,2,3)",
    "HAT_FINGER_GET_USER_CHARACTERISTIC_MSG0": "get %1 user %2 (0 ~ 149) characteristic",
    "HAT_FINGER_ADD_USER_RETURN_MSG0": "%1 add user %2 (0 ~ 149) permission %3 (return -1 or 0~149)",
    "HAT_FINGER_ADD_USER_MSG0": "%1 add user %2 (0 ~ 149) permission %3",
    "HAT_FINGER_ADD_USER_INFO_MSG0": "%1 add user %2 (0 ~ 149) permission %3 characteristic %4",
    "HAT_CARDKB_INIT_MSG0": "Init %1 I2C address %2",
    "HAT_CARDKB_GET_KEY_MSG0": "get %1 key value (return int)",
    "HAT_CARDKB_GET_STRING_MSG0": "get %1 key string (return string)",
    "HAT_CARDKB_IS_PRESSED_MSG0": "has %1 pressed (return True or False)",
    "HAT_CARDKB_KEYCODE_MSG0": "KeyCode %1",
    "HAT_CARDKB_CALLBACK_MSG0": "When keyboard %1 was pressed",
    "HAT_CARDKB_TICK_MSG0": "%1 update in loop",
    "HAT_HEART_INIT_MSG0": "Init %1 I2C address %2",
    "HAT_HEART_STOP_MSG0": "%1 stop",
    "HAT_HEART_START_MSG0": "%1 start",
    "HAT_HEART_DEINIT_MSG0": "%1 deinit",
    "HAT_HEART_GET_HEART_RATE_MSG0": "get %1 heart rate (return int)",
    "HAT_HEART_GET_SPO2_MSG0": "get %1 SpO2 (return int)",
    "HAT_HEART_GET_IR_MSG0": "get %1 IR (return int)",
    "HAT_HEART_GET_RED_MSG0": "get %1 red (return int)",
    "HAT_HEART_SET_MODE_MSG0": "%1 set mode %2",
    "HAT_HEART_SET_LED_CURRENT_MSG0": "%1 set LED red current %2 IR current %3",
    "HAT_HEART_SET_PULSE_WIDTH_MSG0": "%1 set pulse width %2",
    "HAT_HEART_SET_SAMPLING_RATE_MSG0": "%1 set sampling rate %2",
    "HAT_SPK_INIT_MSG0": "Init %1",
    "HAT_SPK_STOP_MSG0": "%1 play stop",
    "HAT_SPK_BEGIN_MSG0": "%1 begin",
    "HAT_SPK_END_MSG0": "%1 end",
    "HAT_SPK_IS_RUNNING_MSG0": "%1 is running",
    "HAT_SPK_IS_ENABLED_MSG0": "%1 is enabled",
    "HAT_SPK_IS_PLAYING_MSG0": "%1 is playing",
    "HAT_SPK_GET_VOLUME_MSG0": "%1 get volume (return 0~255)",
    "HAT_SPK_GET_VOLUME_PERCENTAGE_MSG0": "%1 get volume percentage (return float)",
    "HAT_SPK_BEGIN_RETURN_MSG0": "%1 begin (return True or False)",
    "HAT_SPK_GET_PLAYING_CHANNELS_MSG0": "%1 get playing channels (return int)",
    "HAT_SPK_TONE_MSG0": "%1 play tone freq %2 millisecond %3",
    "HAT_SPK_PLAY_WAV_MSG0": "%1 play WAV (bytearray / bytes) %2",
    "HAT_SPK_PLAY_RAW_MSG0": "%1 play PCM (bytearray / bytes) %2 sample rate (Hz) %3",
    "HAT_SPK_SET_VOLUME_MSG0": "%1 set volume %2 (0 ~ 255)",
    "HAT_SPK_SET_VOLUME_PERCENTAGE_MSG0": "%1 set volume %2 %",
    "HAT_SPK_SET_ALL_CHANNEL_VOLUME_MSG0": "%1 set all channel volume %2 (0 ~ 255)",
    "HAT_SPK_SET_CHANNEL_VOLUME_MSG0": "%1 set channel %2 volume %3 (0 ~ 255)",
    "HAT_SPK_GET_CHANNEL_VOLUME_MSG0": "%1 get channel %2 volume (return int)",
    "HAT_SPK_PLAY_RAW_RETURN_MSG0": "%1 play PCM (bytearray / bytes) %2 sample rate (Hz) %3 (return True or False)",
    "HAT_SPK_PLAYWAV_FILE_MSG0": "%1 play WAV file %2 %3",
    "OPENMV_SENSOR_RESET_MSG0": "Reset camera sensor",
    "OPENMV_SENSOR_INIT_MSG0": "Init camera sensor",
    "OPENMV_SENSOR_SET_PIXFORMAT_MSG0": "Set the camera pixel format to %1",
    "OPENMV_SENSOR_SET_FRAMESIZE_MSG0": "Set the camera frame size to %1",
    "OPENMV_SENSOR_SET_CONTRAST_MSG0": "Set the camera image contrast to %1 (-3 ~ 3)",
    "OPENMV_SENSOR_SET_BRIGHTNESS_MSG0": "Set the camera image brightness to %1 (-3 ~ 3)",
    "OPENMV_SENSOR_SET_SATURATION_MSG0": "Set the camera image saturation to %1 (-3 ~ 3)",
    "OPENMV_SENSOR_SET_GAINCEILING_MSG0": "Set the camera image gainceiling to %1",
    "OPENMV_SENSOR_SET_QUALITY_MSG0": "Set the camera image JPEG compression quality to %1 (0 ~ 100)",
    "OPENMV_SENSOR_SET_COLORBAR_MSG0": "Turns color bar mode %1",
    "OPENMV_SENSOR_SET_AUTO_EXPOSURE_MSG0": "Turns auto exposure control %1 with fixed exposure time %2 (us)",
    "OPENMV_SENSOR_SET_AUTO_WHITEBAL_MSG0": "Turns auto white balance %1 with fixed gain in decibels for the R %2 G %3 B %4",
    "OPENMV_SENSOR_SET_HMIRROR_MSG0": "Turns horizontal mirror mode %1",
    "OPENMV_SENSOR_SET_VFLIP_MSG0": "Turns vertical flip mode %1",
    "OPENMV_SENSOR_SNAPSHOT_MSG0": "takes a picture using the camera",
    "OPENMV_IMAGE_HAARCASCADE_MSG0": "Create HaarCascade detector with path %1 and stages %2",
    "OPENMV_IMAGE_MATCH_DESCRIPTOR_MSG0": "match LBP descriptors %1 descritor0 %2 descriptor1 %3 threshold %4 (return int)",
    "OPENMV_IMAGE_DRAW_CROSS_MSG0": "%1 draw cross with %2 x %3 y %4 color %5 size %6 thickness %7",
    "OPENMV_IMAGE_DRAW_KEYPOINTS_MSG0": "%1 draw keypoints with %2 keypoints %3 color %4 size %5 thickness %6 fill %7",
    "OPENMV_IMAGE_FIND_FEATURES_MSG0": "%1 find features with %2 Haar Cascade object %3 threshold %4 scale %5 (return tuple)",
    "OPENMV_IMAGE_FIND_KEYPOINTS_MSG0": "%1 find keypoints with %2 region-of-interest %3 threshold %4 normalized %5 scale factor %6 max keypoints %7 corner detector %8",
    "OPENMV_IMAGE_DRAW_STRING_MSG0": "%1 draw string with %2 x %3 y %4 text %5 color %6 scale %7",
    "OPENMV_IMAGE_DRAW_RECTANGLE_MSG0": "%1 draw rectangle with %2 x %3 y %4 width %5 height %6 color %7 thickness %8 fill %9",
    "OPENMV_IMAGE_DRAW_LINE_MSG0": "%1 draw line with %2 x0 %3 y0 %4 x1 %5 y1 %6 color %7 thickness %8",
    "OPENMV_IMAGE_DRAW_CIRCLE_MSG0": "%1 draw circle with %2 x %3 y %4 radius %5 color %6 thickness %7 fill %8",
    "OPENMV_IMAGE_GET_WIDTH_MSG0": "get image %1 width in pixels",
    "OPENMV_IMAGE_GET_HEIGHT_MSG0": "get image %1 height in pixels",
    "OPENMV_IMAGE_GET_FORMAT_MSG0": "get image %1 format",
    "OPENMV_IMAGE_GET_SIZE_MSG0": "get image %1 size",
    "OPENMV_IMAGE_GET_BYTEARRAY_MSG0": "get image %1 bytearray",
    "OPENMV_IMAGE_FORMAT_OPTION_MSG0": "image format %1",
    "OPENMV_LCD_DISPLAY_WRITE_MSG0": "Display write %1 with x scale %2 and y scale %3",
    "OPENMV_CAMERA_INIT_MSG0": "Init camera with %1 pixel format %2 frame size %3",
    "OPENMV_CAMERA_SNAPSHOT_MSG0": "camera snapshot",
    "OPENMV_CAMERA_SET_HMIRROR_MSG0": "Set the camera horizontal mirror to %1",
    "OPENMV_CAMERA_SET_VFLIP_MSG0": "Set the camera vertical flip to %1",
    "OPENMV_CAMERA_GET_HMIRROR_MSG0": "get the camera horizontal mirror status (return True or False)",
    "OPENMV_CAMERA_GET_VFLIP_MSG0": "get the camera vertical flip status (return True or False)",
    "OPENMV_ESPDL_CREATE_OBJECT_DETECTORT_MSG0": "create ESP-DL detector object with %1 model",
    "OPENMV_ESPDL_DETECTOR_GET_RESULT_MSG0": "ESP-DL detector %1 inference %2 (return list)",
    "OPENMV_ESPDL_DETECTOR_RESULT_GET_BBOX_MSG0": "get bounding box in ESP-DL detector inference result %1 (return tuple, [x, y, width, height])",
    "OPENMV_ESPDL_DETECTOR_RESULT_GET_X_MSG0": "get x of the bounding box in ESP-DL detector inference result %1 (return int)",
    "OPENMV_ESPDL_DETECTOR_RESULT_GET_Y_MSG0": "get y of the bounding box in ESP-DL detector inference result %1 (return int)",
    "OPENMV_ESPDL_DETECTOR_RESULT_GET_W_MSG0": "get width of the bounding box in ESP-DL detector inference result %1 (return int)",
    "OPENMV_ESPDL_DETECTOR_RESULT_GET_H_MSG0": "get height of the bounding box in ESP-DL detector inference result %1 (return int)",
    "OPENMV_ESPDL_DETECTOR_RESULT_GET_CATEGORY_MSG0": "get category in ESP-DL detector inference result %1 (return int)",
    "OPENMV_ESPDL_DETECTOR_RESULT_GET_KEYPOINT_MSG0": "get keypoint in ESP-DL detector inference result %1 (return tuple)",
    "OPENMV_ESPDL_DETECTOR_RESULT_GET_SCORE_MSG0": "get score in ESP-DL detector inference result %1 (return 0.0 ~ 1.0)",
    "OPENMV_ESPDL_DETECTOR_RESULT_GET_METHOD_MSG0": "get %2 in ESP-DL detector inference result %1",
    "OPENMV_ESPDL_DETECTOR_RESULT_GET_METHOD_MSG1": "(return tuple, [x, y, width, height])",
    "OPENMV_ESPDL_DETECTOR_RESULT_GET_METHOD_MSG2": "(return int)",
    "OPENMV_ESPDL_DETECTOR_RESULT_GET_METHOD_MSG3": "(return tuple)",
    "OPENMV_ESPDL_DETECTOR_RESULT_GET_METHOD_MSG4": "(return 0.0 ~ 1.0)",
    "OPENMV_ESPDL_CREATE_FACE_RECOGNIZER_MSG0": "create ESP-DL human face recognizer object",
    "OPENMV_ESPDL_RECOGNIZER_DELETE_ID_MSG0": "recognizer %1 delete id %2",
    "OPENMV_ESPDL_RECOGNIZER_DELETE_LAST_ID_MSG0": "recognizer %1 delete last id",
    "OPENMV_ESPDL_RECOGNIZER_ENROLL_ID_MSG0": "recognizer %1 enroll id with %2 image %3 keypoint %4",
    "OPENMV_ESPDL_RECOGNIZER_CLEAR_ID_MSG0": "recognizer %1 clear id",
    "OPENMV_ESPDL_RECOGNIZER_ENROLLED_ID_NUM_MSG0": "get recognizer %1 enrolled id num",
    "OPENMV_ESPDL_RECOGNIZER_GET_RESULT_MSG0": "get recognizer %1 result with %2 image %3 keypoint %4",
    "OPENMV_ESPDL_RECOGNIZER_RESULT_GET_SIMILARITY_MSG0": "recognizer result %1 get similarity (return 0.0 ~ 1.0)",
    "OPENMV_ESPDL_RECOGNIZER_RESULT_GET_ID_MSG0": "recognizer result %1 get id (return int)",
    "OPENMV_CODE_SCANNER_FIND_QRCODES_MSG0": "Code Scanner find qrcode with image %1",
    "OPENMV_CODE_SCANNER_PAYLOAD_MSG0": "get %1 payload (return string)",
    "OPENMV_CODE_SCANNER_TYPE_NAME_MSG0": "get %1 type name (return string)",
    "OPENMV_JPG_ENCODE_MSG0": "encode %1 to jpg with quality %2 (1~100)",
    "OPENMV_JPG_DECODE_MSG0": "decode %1 to RGB565",
    "ADVANCED_USB_KEYBOARD_INIT_MSG0": "Init keyboard %1",
    "ADVANCED_USB_KEYBOARD_IS_OPEN_MSG0": "is %1 open",
    "ADVANCED_USB_KEYBOARD_SEND_REPORT_MSG0": "%1 send report",
    "ADVANCED_USB_KEYBOARD_INPUT_MSG0": "%1 input %2",
    "ADVANCED_USB_KEYBOARD_SET_MODIFIERS_MSG0": "%1 set modifiers with %2 right GUI %3 right Alt %4 right Shift %5 right Ctrl %6 left GUI %7 left Alt %8 left Shift %9 left Ctrl %10",
    "ADVANCED_USB_KEYBOARD_SET_KEYS_MSG0": "%1 set keys with %2 key1 %3 key2 %4 key3 %5 key4 %6 key5 %7 key6 %8",
    "ADVANCED_USB_KEYBOARD_KEYCODE_MSG0": "KeyCode. %1",
    "ADVANCED_USB_MOUSE_INIT_MSG0": "Init Mouse %1",
    "ADVANCED_USB_MOUSE_IS_OPEN_MSG0": "is %1 open",
    "ADVANCED_USB_MOUSE_SEND_REPORT_MSG0": "%1 send report",
    "ADVANCED_USB_MOUSE_SET_AXES_MSG0": "%1 set cursor x %2 (-127~127)  y %3 (-127~127)",
    "ADVANCED_USB_MOUSE_SET_WHEEL_MSG0": "%1 set wheel %2 (-127~127)",
    "ADVANCED_USB_MOUSE_SET_BUTTON_STATE_MSG0": "%1 set button state with %2 left %3 right %4 middle %5 forward %6 backward %7",
    "ADVANCED_USB_MOUSE_MOVE_MSG0": "%1 move cursor by x %2 (-127~127) y %3 (-127~127)",
    "ADVANCED_USB_MOUSE_CLICK_LEFT_MSG0": "%1 click and %2 the left button",
    "ADVANCED_USB_MOUSE_CLICK_RIGHT_MSG0": "%1 click and %2 the right button",
    "ADVANCED_USB_MOUSE_CLICK_MIDDLE_MSG0": "%1 click and %2 the middle button",
    "ADVANCED_USB_MOUSE_CLICK_FORWARD_MSG0": "%1 click and %2 the forward button",
    "ADVANCED_USB_MOUSE_CLICK_BACKWARD_MSG0": "%1 click and %2 the backward button",
    "ADVANCED_USB_MOUSE_SCROLL_MSG0": "%1 scroll to %2 (-127~127)"
}
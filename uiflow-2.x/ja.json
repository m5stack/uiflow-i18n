{
    "BACK_TO_ALPHA": "アルファバージョンに戻す",
    "USER_GUIDE": "ユーザーガイド",
    "DOCS": "製品ドキュメント",
    "API_DOCS": "APIドキュメント",
    "FORUM": "コミュニティ",
    "UPDATE_LOG": "ログを更新",
    "CONTRIBUTOR": "貢献者",
    "DEVICE_FILE_MANAGER": "デバイスファイルマネージャー",
    "FILE": "Project File",
    "MY_PROJECTS": "私のProject",
    "FAVORITE_PROJECTS": "好きなProject",
    "CREATE_NEW_PROJECT": "新規Project",
    "RENAME": "名前の変更",
    "DELETE": "削除",
    "SHARED": "共有済み",
    "PRIVATE": "プライベート",
    "CREATE_PROJECT": "新規Projectを作成",
    "SAVE_NEW_PROJECT": "新規Projectを保存",
    "SAVE_AS_NEW_PROJECT": "新規Projectとして保存",
    "CHANGE_PROJECT_PROFILE": "Project Profileを変更",
    "PROJECT_NAME": "名前",
    "PROJECT_REMARK": "説明",
    "PROJECT_COVER_IMAGE": "カバー画像",
    "PROJECT_DEVICE": "デバイス",
    "PROJECT_NAME_TIPS": "Projectをよりよく共有するために、ユニークな名前をつけることを検討してください。現在のデフォルトの名前は共有機能をサポートしていません。魅力的な名前をつけることで、Projectをよりよくアピールできると考えています",
    "PROJECT_REMARK_TIPS": "Projectを共有する前に、ProjecProjectの説明を充実させることを忘れないでください。よく練られた説明文は注目を集めるだけでなく、あなたのProjectの強みをアピールする鍵にもなります。説得力のある説明で、あなたのProjectを際立たせましょう。",
    "PROJECT_ZONE": "Project Zone",
    "EZDATA_MANAGER": "EzDataマネージャー",
    "WECHAT_TITLE": "WeChatのメッセージ通知を設定する",
    "WECHAT_OPERATION_DESC1": "1. WeChatでM5STACKの公式アカウントをフォローしてください。",
    "WECHAT_OPERATION_DESC2": "2. QRコードをスキャンしてEzDataとバインドする",
    "FILE_TOO_LARGE": "ファイルが大きすぎる場合、ストレージとしてSDカードを使うことが推奨されます。",
    "VERSION": "バージョンの比較",
    "GOTO_UIFLOW1": "UIFlow1.0に行く",
    "GET_STARTED": "はじめましょう",
    "INCOMPATIBLE_WARNING": "注意: UIFlow2.0とUIFlow1.0は互換性がありません。",
    "NEW_PROJECT": "新規Project",
    "OPEN_PROJECT": "読み込み",
    "SAVE_PROJECT": "保存",
    "SAVE_AS": "名前を変更して保存",
    "OPEN_FROM_COMPUTER": "コンピュータから読み込み",
    "SAVE_TO_COMPUTER": "コンピュータに書き出し",
    "LOGOUT": "ログアウト",
    "RUN": "実行",
    "RUN_TIPS": "プログラムを実行します。",
    "DOWNLOAD": "ダウンロード",
    "DOWNLOAD_TIPS": "プログラムをデバイスにダウンロードします。",
    "LOGIN": "ログイン",
    "EMAIL": "電子メール",
    "PASSWORD": "パスワード",
    "FORGOT_PW": "パスワードを忘れましたか?",
    "RESOURCE": "リソース",
    "ALL": "全て",
    "OFFICIAL": "公式",
    "NON_OFFICIAL": "非公式",
    "MODULE_CATEGORY_WIRELESS": "Wireless",
    "MODULE_CATEGORY_DRIVER": "Driver",
    "MODULE_CATEGORY_EXTENSION": "Extension",
    "MODULE_CATEGORY_BASE": "Base",
    "MODULE_CATEGORY_MEASURE": "Measure",
    "SELECT_DEVICE": "デバイスを選択",
    "CREATE_GUIDE": "ガイドラインを作成",
    "SETTING": "設定",
    "LANGUAGE": "言語",
    "DARK_MODE": "ダークモード",
    "DISABLE": "無効化",
    "ENABLE": "有効化",
    "ADD_NEW_DEVICE": "新しいデバイスを追加",
    "DEVICE_INFO": "デバイスの情報",
    "PUBLIC_DEVICE": "公開",
    "TOKEN_DEVICE": "トークンが必要",
    "PRIVATE_DEVICE": "プライベート",
    "MY_DEVICE": "私のデバイス",
    "OTHER_DEVICE": "共有されたデバイス",
    "USB_DEVICE": "USBデバイス",
    "OFFICIAL_DEVICE": "公式",
    "THIRD_PARTY_DEVICE": "サードパーティ",
    "NICKNAME": "ニックネーム",
    "PERMISSIONS": "権限",
    "REMOVE_DEVICE": "デバイスを削除",
    "UNREGISTER_DEVICE": "登録されていないデバイス",
    "DEVICE": "デバイス",
    "ENGINE_USED_TIPS": "GFXとLVGLは併用できません!",
    "TERMINAL": "ターミナル",
    "CONFIRM": "Confirm",
    "CANCEL": "キャンセル",
    "id": "id",
    "name": "名前",
    "color": "色",
    "borderColor": "枠の色",
    "backgroundColor": "背景色",
    "bodyFillColor": "塗りつぶしの色",
    "text": "テキスト",
    "textOffset": "Text Offset",
    "layer": "レイヤー",
    "createTime": "作成時間",
    "rotation": "向き",
    "dataSource": "データソース (URL)",
    "interval": "時間間隔 (ms)",
    "is_update": "自動更新",
    "use_json": "Jsonを使う",
    "json_key": "JsonのKey",
    "error_msg": "エラーメッセージ",
    "error_msg_color": "エラーメッセージの色",
    "errorImagePath": "エラー画像",
    "type": "type",
    "x": "X",
    "y": "Y",
    "x1": "X1",
    "y1": "Y1",
    "x2": "X2",
    "y2": "Y2",
    "x3": "X3",
    "y3": "Y3",
    "font": "フォント",
    "width": "幅",
    "height": "高さ",
    "radius": "半径",
    "imagePath": "画像名",
    "imageSize": "出力画像のサイズ",
    "imagePixelFormat": "画像データのフォーマット",
    "frameBufferNumber": "フレームバッファーの数",
    "frameBufferWhere": "フレームバッファーがどこにあるか",
    "imageWidth": "画像の幅",
    "imageHeight": "画像の高さ",
    "lineWidth": "線の幅",
    "visibility": "Visibility",
    "scaleX": "Scale X",
    "scaleY": "Scale Y",
    "FIRMWARE_VERSION": "Firmware version >=",
    "INIT": "初期化",
    "READ": "読み込み/取得",
    "WRITE": "書き出し/設定",
    "CONSTANTS": "定数",
    "COMMON": "共通",
    "ADVANCED": "アドバンス",
    "SUPPORT": "Only support",
    "RECEIVE": "Receive",
    "SEND": "Send",
    "GET_CONFIG": "Get Config",
    "CONFIG_SETTING": "Config Setting",
    "GET_STATUS": "Get Status",
    "CONTROL_SETTING": "Control Setting",
    "VOLUME_SETTING": "Volume Setting",
    "STATUS": "Status",
    "CONTROL": "Control",
    "MODE": "Mode",
    "SWITCH_ENDPOINT": "Switch Endpoint",
    "ENCODER_4_MOTOR_NORMAL": "Normal",
    "ENCODER_4_MOTOR_POSITION": "Position",
    "ENCODER_4_MOTOR_SPEED": "Speed",
    "ENCODER_4_MOTOR_SUPPORT": "Only supported by 4EncoderMotor with firmware version v3 or later",
    "UNIT_EXTIO2_SUPPORT": "Only supported by EXT.IO2 with firmware version v3 or later",
    "UNIT_PBHUB_SUPPORT": "Only supported by PbHub v1.1 with firmware version v2 or later",
    "DRAW_TEXT": "Draw Text",
    "DRAW_GRAPHICS": "Draw Graphics",
    "DRAW_IMAGE": "Draw Image",
    "I2C_COMMAND_MAP": "I2Cコマンド一覧",
    "LORAWAN": "LoRaWAN",
    "P2P": "P2P",
    "BASE_PUBLIC_RS485": "RS485",
    "EVENT": "イベント",
    "SYSTEM": "システム",
    "UI": "UI",
    "UICOLOR": "UIの色",
    "UI_LCD": "LCD",
    "TITLE": "タイトル",
    "LABEL": "ラベル",
    "LABEL_PLUS": "ラベル+",
    "RECT": "四角形",
    "CIRCLE": "円",
    "IMAGE": "画像",
    "IMAGE_PLUS": "画像+",
    "CAMERA_IMAGE": "カメラ画像",
    "TRIANGLE": "三角形",
    "LINE": "線",
    "SCREEN": "画面",
    "HARDWARE": "ハードウエア",
    "MODULE": "Module",
    "BASE": "Base",
    "SOFTWARE": "ソフトウエア",
    "UNIT": "Unit",
    "HAT": "Hat",
    "STAMP": "Stamp",
    "CUSTOM": "Custom",
    "EZDATA": "EzData2.0",
    "VARIABLES": "変数",
    "MATH": "数学",
    "TEXT": "テキスト",
    "LOOPS": "ループ",
    "LOGIC": "論理",
    "LISTS": "リスト",
    "GRAPHIC": "グラフィック",
    "EMOJI": "絵文字",
    "FUNCTIONS": "関数",
    "MAP": "Map",
    "JSON": "JSON",
    "BYTE_ARRAY": "Bytearray",
    "BYTES": "Bytes",
    "POWER": "電源",
    "AUDIO": "Audio",
    "PLAYER": "Player",
    "RECORDER": "Recorder",
    "TIME": "時間",
    "BLE": "BLE",
    "BLE_UART": "BLE UART",
    "BLE_UART_SERVER": "BLE UARTサーバー",
    "BLE_UART_CLIENT": "BLE UARTクライアント",
    "MQTT": "MQTT",
    "HTTP": "HTTP",
    "UDP": "UDP",
    "UDP_SERVER": "UDPサーバー",
    "UDP_CLIENT": "UDPクライアント",
    "TCP": "TCP",
    "TCP_SERVER": "TCPサーバー",
    "TCP_CLIENT": "TCPクライアント",
    "FILEIO": "FileIO",
    "MODBUS": "Modbus",
    "MODBUS_RTU_MASTER": "Modbus RTU Master",
    "MODBUS_RTU_SLAVE": "Modbus RTU Slave",
    "MODBUS_TCP_SERVER": "Modbus TCP Server",
    "MODBUS_TCP_CLIENT": "Modbus TCP Client",
    "WLAN": "WLAN",
    "WLAN_STA": "WLANステーション",
    "WLAN_AP": "WLANアクセスポイント",
    "ESPNOW": "ESP-NOW",
    "NVS": "NVS",
    "PIN": "デジタル入出力",
    "PWM": "PWM出力",
    "ADC": "アナログ入力",
    "DAC": "DAC出力",
    "BUTTON": "ボタン",
    "PIN_BUTTON": "ピンボタン",
    "UART": "UART",
    "RGB": "RGBカラー",
    "IMU": "IMU",
    "I2C": "I2C",
    "SPEAKER": "スピーカー",
    "TIMER": "タイマー",
    "USER_DISPLAY_PANEL": "User Displayパネル",
    "TOUCH": "タッチセンサー",
    "ALS": "ALS",
    "WDT": "Watch Dog Timer",
    "RTC": "RTC",
    "I2S": "I2S",
    "SPI": "SPI",
    "SDCARD": "SDCard",
    "ROTARY": "Rotary",
    "MATRIX_KEYBOARD": "Matrix Keyboard",
    "MICROPHONE": "マイク",
    "SCD40": "SCD40",
    "SEN55": "SEN55",
    "HARDWARE_PLCIO": "PLC IO",
    "HARDWARE_RELAY": "Relay",
    "DIGITAL_INPUT": "Digital Input",
    "HARDWARE_PWR485": "PWR485",
    "EASY_IO": "Easy I/O",
    "DUAL_KMETER": "DualKmeter",
    "RELAY4": "4Relay",
    "ENCODER_4_MOTOR": "4EncoderMotor",
    "PPS": "PPS",
    "MODULE_DISPLAY": "Display",
    "RCA": "RCA",
    "IOT_BASE_CATM": "IoT BASE CatM",
    "AIN4_20MA": "AIN4-20mA",
    "MODULE_HMI": "HMI",
    "MODULE_PLUS": "Plus",
    "MODULE_LAN": "LAN",
    "MODULE_RS232": "RS232",
    "MODULE_RS232F": "RS232F",
    "MODULE_RS232M": "RS232M",
    "MODULE_LORA433": "LoRa433",
    "MODULE_LORA433V11": "LoRa433 v1.1",
    "MODULE_LORA868": "LoRa868",
    "MODULE_LORA868V11": "LoRa868 v1.1",
    "MODULE_LORA868V12": "LoRa868 v1.2",
    "MODULE_4IN8OUT": "4IN8OUT",
    "MODULE_STEP_MOTOR_DRIVER": "StepMotor Driver",
    "MODULE_STEP_MOTOR_DRIVER_V11": "StepMotor Driver v1.1",
    "MODULE_COM_NBIOT": "COMX NB-IoT",
    "MODULE_COM_NBIOT_CN": "COMX NB-IoT CN",
    "MODULE_COM_LORAWAN470": "COMX LoRaWAN 470",
    "MODULE_COM_LORAWAN868": "COMX LoRaWAN 868",
    "MODULE_COM_LORAWAN868V2": "COMX LoRaWAN 868 v2.0",
    "MODULE_COM_LORAWAN915": "COMX LoRaWAN 915",
    "MODULE_GRBL": "GRBL",
    "MODULE_LLM": "LLM",
    "MODULE_GNSS": "GNSS",
    "MODULE_SERVO2": "Servo2",
    "MODULE_STEPMOTOR": "StepMotor",
    "MODULE_GPS": "GPS",
    "MODULE_GPSV2": "GPS v2.0",
    "MODULE_COM_GPS": "COMX GPS",
    "MODULE_GOPLUS2": "GoPlus2",
    "MODULE_PM25": "PM2.5",
    "MODULE_PM25_SHT20": "PM2.5 (SHT20)",
    "MODULE_PM25_SHT30": "PM2.5 (SHT30)",
    "MODULE_ODRIVE": "ODrive",
    "MODULE_DMX": "DMX",
    "MODULE_COM_ZIGBEE": "COMX Zigbee",
    "MODULE_PWRCAN": "PwrCAN",
    "MODULE_USB": "USB",
    "MODULE_USB_V12": "USB v1.2",
    "MODULE_BALA2": "Bala2",
    "MODULE_COM_LTE": "COMX LTE",
    "MODULE_COM_LTE_DATA": "COMX LTE-Data",
    "MODULE_FAN_V11": "Fan v1.1",
    "MODULE_COMMU": "COMMU",
    "MODULE_ECG": "ECG",
    "MODULE_QRCODE": "QRCode",
    "MODULE_GATEWAY_H2": "Gateway H2",
    "MODULE_AUDIO": "Audio",
    "MODULE_DCMOTOR": "DCMotor",
    "ATOM_SOCKET": "ATOM Socket",
    "BASE_MOTION": "Motion",
    "BASE_CAN": "CAN",
    "BASE_SPK": "Speaker",
    "BASE_ECHO": "Echo",
    "BASE_RS232": "RS232",
    "BASE_RS485": "RS485",
    "BASE_DISPLAY": "Display",
    "BASE_GPS": "GPS",
    "BASE_PWM": "PWM",
    "BASE_HDRIVER": "HDriver",
    "BASE_STEPMOTOR": "Stepmotor",
    "BASE_LORAWAN470": "DTU LoRaWAN470",
    "BASE_LORAWAN868": "DTU LoRaWAN868",
    "BASE_LORAWAN915": "DTU LoRaWAN915",
    "BASE_QRCODE": "QRCode",
    "BASE_QRCODE2": "QRCode2",
    "BASE_TFCARD": "TFCard",
    "BASE_NBIOT": "DTU NBIoT",
    "BASE_LORAWANCN470": "DTU LoRaWAN-CN470",
    "BASE_LORAWANEU868": "DTU LoRaWAN-EU868",
    "BASE_LORAWANUS915": "DTU LoRaWAN-US915",
    "ENV": "ENV",
    "ENV2": "ENV II",
    "ENV3": "ENV III",
    "ENV4": "ENV IV",
    "ENV_PRO": "ENV Pro",
    "PAHUB": "Pa.HUB",
    "COLOR": "COLOR",
    "TOF": "ToF",
    "EXTIO": "EXT.IO",
    "EXTIO2": "EXT.IO2",
    "EARTH": "EARTH",
    "ANGLE": "ANGLE",
    "FINGER": "FINGER",
    "IR": "IR",
    "PIR": "PIR",
    "DUAL_BUTTON": "Dual-BUTTON",
    "NCIR": "NCIR",
    "NCIR2": "NCIR2",
    "RELAY": "RELAY",
    "RELAY2": "2RELAY",
    "LIGHT": "LIGHT",
    "DLIGHT": "Dlight",
    "CARDKB": "CardKB",
    "CARDKB1": "CardKB v1.1",
    "ENCODER8": "8Encoder",
    "LORAWAN470": "LoRaWAN470",
    "LORAWAN868": "LoRaWAN868",
    "LORAWAN915": "LoRaWAN915",
    "GPS": "GPS",
    "GPS_V11": "GPS v1.1",
    "GPS_SMA": "GPS SMA",
    "HBRIDGE": "Hbridge",
    "PBHUB": "Pb.HUB",
    "UWB": "UWB",
    "AC_MEASURE": "AC Measure",
    "RS485": "RS485",
    "ISO485": "ISO RS485",
    "ULTRASONIC": "Ultrasonic",
    "SONIC_IO": "SONIC IO",
    "LIMIT": "Limit",
    "OP": "OP",
    "OP90": "OP.90",
    "OP180": "OP.180",
    "LORAE220": "LoRaE220",
    "LORAE220433": "LoRaE220-433",
    "RFID": "RFID",
    "WEIGHT": "Weight",
    "WEIGHT_I2C": "Weight I2C",
    "SCALES": "Scales",
    "GESTURE": "Gesture",
    "THERMAL": "Thermal",
    "THERMAL2": "Thermal2",
    "MINISCALES": "MiniScales",
    "SYNTH": "Synth",
    "SERVOS8": "8Servos",
    "VMETER": "VMeter",
    "AMETER": "AMeter",
    "KMETER": "KMeter",
    "KMETERISO": "KMeterISO",
    "TOF4M": "ToF4M",
    "ANGLE8": "8Angle",
    "CO2": "CO2",
    "CO2L": "CO2L",
    "CAN": "CAN",
    "MINI_CAN": "Mini CAN",
    "CATM": "CatM",
    "CATM_GNSS": "CatM+GNSS",
    "FADER": "Fader",
    "FAN": "Fan",
    "LASER_RX": "Laser.Rx",
    "LASER_TX": "Laser.Tx",
    "SSR": "SSR",
    "ENCODER": "Encoder",
    "UNIT_BUTTON": "BUTTON",
    "BLDC_DRIVER": "BLDC Driver",
    "REFLECTIVE_IR": "Reflective IR",
    "HALL_EFFECT": "Hall Effect",
    "BUZZER": "Buzzer",
    "ADC_V11": "ADC V1.1",
    "EXTENCODER": "ExtEncoder",
    "ACCEL": "ACCEL",
    "DDS": "DDS",
    "DIGI_CLOCK": "Digi-Clock",
    "FLASH_LIGHT": "FlashLight",
    "GROVE2GROVE": "Grove2Grove",
    "KEY": "Key",
    "TUBE_PRESSURE": "Tube Pressure",
    "NECO": "Neco",
    "TVOC": "TVOC/eCO2",
    "CATCH": "Catch",
    "JOYSTICK": "Joystick",
    "JOYSTICK2": "Joystick2",
    "WATERING": "Watering",
    "MQTT_POE": "MQTT PoE",
    "HEART": "Heart",
    "ACSSR": "ACSSR",
    "DCSSR": "DCSSR",
    "NBIOT": "NB-IoT",
    "NBIOT2": "NB-IoT2",
    "QRCODE": "QRCode",
    "IMUPRO": "IMU Pro",
    "GLASS": "Glass",
    "GLASS2": "Glass2",
    "OLED": "OLED",
    "MINIOLED": "MiniOLED",
    "LCD": "LCD",
    "ZIGBEE": "Zigbee",
    "TMOS": "TMOS",
    "BPS": "BPS",
    "UNIT_SCROLL": "Scroll",
    "UNIT_ID": "ID",
    "UNIT_DMX": "DMX",
    "MIDI": "MIDI",
    "ROLLER485": "Roller485",
    "ROLLERCAN": "RollerCAN",
    "UHFRFID": "UHF-RFID",
    "TIMERPWR": "TimerPWR",
    "PUZZLE": "Puzzle",
    "BYTEBUTTON": "ByteButton",
    "BYTESWITCH": "ByteSwitch",
    "LORAWANCN470": "LoRaWAN CN470",
    "LORAWANEU868": "LoRaWAN EU868",
    "LORAWANUS915": "LoRaWAN US915",
    "LORAWANAS923": "LoRaWAN AS923",
    "UNIT_ASR": "ASR",
    "UNIT_PDM": "PDM",
    "UNIT_RF433R": "RF433R",
    "UNIT_RF433T": "RF433T",
    "UNIT_GATEWAY_H2": "Gateway H2",
    "UNIT_MINI_TOF90": "Mini ToF-90°",
    "VIBRATOR": "Vibrator",
    "YUN": "Yun",
    "HAT_SERVOS8_V11": "8Servos v1.1",
    "MINI_ENCODERC": "MiniEncoderC",
    "NEOFLASH": "Neoflash",
    "JOYC": "JoyC",
    "MINIJOYC": "MiniJoyC",
    "SERVO": "Servo",
    "HAT_SPK": "スピーカー",
    "HAT_SPK2": "Speaker2",
    "OPENMV": "OpenMV",
    "OPENMV_SENSOR": "Sensor",
    "OPENMV_IMAGE": "画像",
    "OPENMV_CAMERA": "カメラ",
    "OPENMV_ESPDL": "ESP-DL",
    "OPENMV_CODE_SCANNER": "コードスキャナー",
    "OPENMV_JPG": "JPG",
    "ADVANCED_USB": "USBデバイス",
    "ADVANCED_USB_KEYBOARD": "キーボード",
    "ADVANCED_USB_MOUSE": "マウス",
    "ENTER_DOWNLOAD_MODE": "Please enter download mode",
    "WELCOME_TO": "UIFlow2.0にようこそ!",
    "QUICKLY_LEARN": "ここでは、UIFlow2.0の特徴についですばやく学ぶことができます。さらにどのようにしてプログラムするかも学びます。",
    "START_LEARN": "開始",
    "SKIP": "Skip",
    "DONT_SHOW_AGAIN": "これをもう一度表示しない。",
    "INTERFACE_NAVIGATION": "インターフェースの操作",
    "LOGIN_ACCOUNT": "ログインアカウント",
    "FIRMWARE_BURNING": "ファームウエアの書き込み",
    "DEVELOP": "開発",
    "INTERFACE_INTRO": "The UIFlow2.0のインターフェースには以下のものがあります: トップメニューバー [1], UI編集エリア [2], リソースパネル [3], ブロックツールボックス [4], プログラミングエリア [5], ボトムファンクションバー [6].",
    "TOP_BAR": "トップメニューバー",
    "UI_EDITING_AREA": "UI編集エリア",
    "RESOURCE_AND_BLOCK_PANEL": "リソースパネルとブロックツールボックス",
    "PROGRAMMING_AREA": "プログラミングエリア",
    "BOTTOM_BAR": "ボトムファンクションバー",
    "TOP_SETTING_INTRO": "言語やダークモードなどを設定します。",
    "TOP_HELP": "ヘルプ",
    "TOP_HELP_INTRO": "ヘルプメニューでは、ユーザーガイド、ドキュメント、フォーラム、更新ログなどが利用できます。",
    "TOP_FILE": "ファイル",
    "TOP_FILE_INTRO": "ファイルメニューでは、プロジェクトを作成したり、開いたり、保存したりできます。",
    "TOP_PROJECT_ZONE": "Project Zone",
    "TOP_PROJECT_ZONE_INTRO": "公式のプロジェクトとユーザが共有しているプロジェクトがあります。",
    "TOP_WORKSPACE_SWITCH": "プログラミングモードの変更",
    "TOP_WORKSPACE_SWITCH_INTRO": "ブロックプログラミング、Python、分割モードを変更します。",
    "TOP_PROJECT_NAME": "Project名",
    "TOP_PROJECT_NAME_INTRO": "現在のプロジェクトの名前です。",
    "TOP_SAVE": "保存",
    "TOP_SAVE_INTRO": "Projectを保存します。",
    "TOP_MY_PROJECT": "Cloud Project",
    "TOP_MY_PROJECT_INTRO": "私のProjectと好きなProjectです。",
    "TOP_LOGIN": "ログイン",
    "TOP_LOGIN_INTRO": "M5stackアカウントにログインします。",
    "UI_EDITING_AREA_DESC": "ドラッグアンドドロップでUIの部品をシミュレーション画面に配置します。もっと設定したい場合には、右上のボタンをクリックすることで、UI編集モードに入ることもできます。",
    "UI_EDITOR_DESC": "UI編集エディタには以下のものがあります: 部品ライブラリ [1], ファンクションバー [2], 操作エリア [3], UI部品のリスト [4], 属性編集パネル [5].",
    "RESOURCE_PANEL_DESC": "ソフトウエア、ハードウエア、ユニット、その他のリソースを追加します。対応するブロックはブロックツールボックスで確認できます。",
    "PROGRAMMING_AREA_DESC": "ブロックをブロックツールボックスからワークスペースにドラッグします。プログラムを作成するために、ブロックをくっつけます。",
    "BOTTOM_WEBTERMINAL_INTRO": "USBモードでデバイスを接続します。",
    "BOTTOM_WEBBURNER_INTRO": "ファームウエアの書き込みをします。(ESP32-S3シリーズだけサポートしています。もっと多くの機能が必要な時はM5Burnerをダウンロードしてください。)",
    "BOTTOM_EZDATA_MANAGER_INTRO": "EzData内のデータを管理します。",
    "BOTTOM_DEVICE_FILE_MANAGER_INTRO": "デバイス内のファイル(画像、認証情報など)を管理します。",
    "BOTTOM_SELECT_DEVICE": "デバイスの選択",
    "BOTTOM_SELECT_DEVICE_INTRO": "ボタンをクリックしてデバイス管理パネルを開きます。使用するデバイスを選択します。",
    "BOTTOM_RUN_INTRO": "クラウドモードを使ってデバイス上でプロジェクトを実行します。",
    "BOTTOM_DOWNLOAD_INTRO": "クラウドモードを使ってデバイスにProjectをダウンロードします。",
    "REGISTER_AND_LOGIN": "ユーザ登録とあなたのアカウントへのログイン",
    "LOGIN_DESC": "あなたのアカウントへログインした後で、デバイスを管理と共有し、EzDataのようなサービスを使うことができます。",
    "LOGIN_DESC_point1": "トップメニューバーの右側のログインボタンをクリックします。",
    "LOGIN_DESC_point2": "インターフェースの指示に従ってアカウントに登録/ログインします。",
    "LOGIN_DESC_point3": "ログインした後で、デバイスを管理することができます。",
    "MY_DEVICE_DESC": "あなたのアカウントに紐付けされたデバイスです。クラウドモードが使えます。",
    "OTHER_DEVICE_DESC": "他の人によって共有されているデバイスを追加できます。クラウドモードが使えます。",
    "USB_DEVICE_DESC": "USBデバイスを選択します。USBモードが使えます。",
    "DEVICE_CONNECTION_STATE": "デバイス接続状況",
    "RED_STATUS": "赤",
    "GREEN_STATUS": "緑",
    "DEVICE_OFFLINE": "デバイスはオフラインです。",
    "DEVICE_ONLINE": "デバイスはオンラインです。",
    "DEVICE_USAGE_PERMISSION": "デバイスを使うための権限",
    "PRIVATE_DEVICE_DESC": "あなただけが利用できます。",
    "TOKEN_DEVICE_DESC": "デバイストークンを持っている人が利用できます。",
    "PUBLIC_DEVICE_DESC": "デバイスのMACを持っている人が利用できます。",
    "USE_BURNING_TOOL": "UIFlow 2.0ファームウエアを書き込んでデバイスに紐付けます。",
    "BURNING_WAYS": "書き込みツールはWebBurnerとM5Burnerです。",
    "SET_DEVICE_TO_DOWNLOAD_MODE": "デバイスをダウンロードモードにします",
    "DEVICE_ESP32S3": "(ESP32-S3 chipのデバイス)",
    "PRESS_AND_HOLD": "",
    "RESET_BUTTON": "リセットボタン",
    "UNTIL_THE": "を",
    "INTERNAL_LIGHT": "LEDの光",
    "TURNS_GREEN": " が緑色に変わるまで押したままにしでください。",
    "BUTTON_OF_STAMPS3": "StampS3のボタン",
    "INSERT_THE_USB_PORT": " をUSBポートに入れるまで押したままにしてください。",
    "BURNING_TOOL": "書き込みツール",
    "IDE_WEBBURNER": "IDE内のWebBurner",
    "CLICK_COM_SELECT": "USBシリアル(COM)を選ぶために接続ボタンをクリックします。",
    "CLICK_FIRMWARE_SELECT": "書き込みボタンをクリックしてファームウエアを選択します。",
    "BIND_DEVICE": "デバイスをあなたのアカウントに紐付けます。",
    "CONFIGURE_WIFI": "WiFiやその他の設定をします。",
    "LOGIN_YOUR_ACCOUNT": "あなたのアカウントへログインします。",
    "SELECT_FIRMWARE": "UIFlow2.0のファームウエアを選択して、ダウンロードします。",
    "CLICK_BURN_SELECT": "書き込み(Burn)ボタンをクリックして、USBシリアル(COM)を選択し、Startボタンをクリックします。",
    "BURNING_FIRMWARE": "ファームウエアを書き込んでいます。",
    "CHECK_NETWORK": "ネットワークをチェックします。",
    "SEE_BOUND_DEVICE": "デバイスが正常にネットワーク接続されると、IDEデバイス管理パネルに表示されるようになります。",
    "CONNECTION_STATUS": "WiFi接続状態",
    "CONNECTING": "接続中",
    "CONNECTION_SUCCESSFUL": "接続成功",
    "CONNECTION_FAILURE": "接続失敗",
    "CONNECT_MODE": "デバイスに接続するには、CloudモードとUSBモードがあります。",
    "CLOUD_MODE": "Cloudモード",
    "USB_MODE": "USBモード",
    "SELECT_CLOUD_DEVICE": "私のデバイスか共有されたデバイスを選びます。",
    "SELECT_USB_DEVICE": "USBデバイスを選びます。",
    "PROGRAM_DESC": "ブロックをドラッグ&ドロップするか、カスタム編集して、プロジェクトをプログラムします。",
    "CLICK_RUN_DOWNLOAD": "下のファンクションバーで、実行(Run)ボタンかダウンロードボタンをクリックします。",
    "RUN_BTN_DESC": "(一度だけ)プログラムを実行します。",
    "DOWNLOAD_BTN_DESC": "プロジェクトをダウンロードします(いつも実行されます)。",
    "OPEN_WEBTERMINAL": "WebTerminalを開き、デバイスに接続するために接続ボタンをクリックし、実行ボタンかダウンロードボタンをクリックします。",
    "WEBTERMINAL_CONNECT": "接続",
    "WEBTERMINAL_CONNECT_DESC": "USBシリアル(COM)を選ぶためにボタンをクリックし、デバイスに接続します。",
    "WEBTERMINAL_CLEAR": "クリア",
    "WEBTERMINAL_CLEAR_DESC": "画面をクリアします。",
    "WEBTERMINAL_FILE": "ファイル(File)",
    "WEBTERMINAL_FILE_DESC": "ファイルマネージャー:ファイルを読み込み、書き込み、削除します。",
    "WEBTERMINAL_ROW_COL": "行(Row)と列(Col)",
    "WEBTERMINAL_ROW_COL_DESC": "WebTerminalの幅と高さを変更します。",
    "BUF_DESC": "\"バッファ\"は、bytearrayやarray などのバッファプロトコルをサポートする必要があります。",
    "UNIT_ASR_NOTICE1": "ASR cannot be used together with Timer(0), ",
    "UNIT_ASR_NOTICE2": "please use other timer than Timer(0).",
    "BASE_NBIOT_NOTICE": "Notice: NBIoT is activated and connected to the network by default after init.",
    "EXPORT_THIS_BLOCK_TO_IMG": "このブロックを画像としてExport",
    "EXPORT_THIS_BLOCK_TO_SVG": "このブロックをSVG画像としてExport",
    "EXPORT_ALL_BLOCK_TO_IMG": "全てのブロックを画像としてExport",
    "EXPORT_ALL_BLOCK_TO_SVG": "全てのブロックをSVG画像としてExport",
    "EXPORT_ALL_TOOLBOX_BLOCK_TO_SVG": "このツールボックスの全てのブロックをSVG画像としてExport",
    "EXPORT_ALL_TOOLBOX_BLOCK_TO_IMAGE": "このツールボックスの全てのブロックを画像としてExport",
    "BLOCK_CATEGORY": "カテゴリー: ",
    "NAME_ALREADY_EXISTS": "名前が既に存在します。",
    "NAME_EXISTS_FOR_ANOTHER_TYPE": "名前が既に別の型として使われています。",
    "FILE_SIZE_ERROR": "ファイルは %1 より小さくなければなりません。",
    "FILE_NAME_ERROR": "ファイル名は30文字より短くなければなりません。",
    "VARIABLES_DEFAULT_NAME": "item",
    "TODAY": "Today",
    "DUPLICATE_BLOCK": "ブロックを複製",
    "ADD_COMMENT": "コメントを追加",
    "REMOVE_COMMENT": "コメントを削除",
    "EXTERNAL_INPUTS": "External形式での入力",
    "INLINE_INPUTS": "Inline形式での入力",
    "DELETE_BLOCK": "ブロックを削除",
    "DELETE_X_BLOCKS": "%1 個のブロックを削除",
    "DELETE_ALL_BLOCKS": "%1 個のブロックを削除しますか?",
    "CLEAN_UP": "ブロックを整理",
    "COLLAPSE_BLOCK": "ブロックをCollapse",
    "COLLAPSE_ALL": "複数ブロックをCollapse",
    "EXPAND_BLOCK": "ブロックをExpand",
    "EXPAND_ALL": "複数ブロックをExpand",
    "DISABLE_BLOCK": "ブロックを無効化",
    "ENABLE_BLOCK": "ブロックを有効化",
    "HELP": "Help",
    "UNDO": "Undo",
    "REDO": "Redo",
    "PLEASE_INIT_A": "Please init a",
    "PLEASE_DRAG_AN_EVENT_BLOCK": "Please drag an event block",
    "CHANGE_VALUE_TITLE": "値を変更:",
    "RENAME_VARIABLE": "変数の名前を変更",
    "RENAME_VARIABLE_TITLE": "選択した%1の変数すべての名前を変える:",
    "NEW_VARIABLE": "変数の作成...",
    "NEW_STRING_VARIABLE": "文字列の変数を作る...",
    "NEW_NUMBER_VARIABLE": "数の変数を作る...",
    "NEW_COLOUR_VARIABLE": "色の変数を作る...",
    "NEW_VARIABLE_TYPE_TITLE": "新しい変数の型:",
    "NEW_VARIABLE_TITLE": "新しい変数の名前:",
    "VARIABLE_ALREADY_EXISTS": "変数名 '%1' は既に存在しています。",
    "VARIABLE_ALREADY_EXISTS_FOR_ANOTHER_TYPE": "'%2' 型の '%1' という名前の変数が既に存在します。",
    "DELETE_VARIABLE_CONFIRMATION": "%1か所で使われている変数 '%2' を削除しますか?",
    "CANNOT_DELETE_VARIABLE_PROCEDURE": "変数 '%1' は関数 '%2' の定義の一部であるため、削除できません",
    "DELETE_VARIABLE": "変数 '%1' を削除",
    "COLOUR_PICKER_HELPURL": "https://en.wikipedia.org/wiki/Color",
    "COLOUR_PICKER_TOOLTIP": "Choose a colour from the palette.",
    "COLOUR_RANDOM_HELPURL": "http://randomcolour.com",
    "COLOUR_RANDOM_TITLE": "random colour",
    "COLOUR_RANDOM_TOOLTIP": "Choose a colour at random.",
    "COLOUR_RGB_HELPURL": "http://www.december.com/html/spec/colorper.html",
    "COLOUR_RGB_TITLE": "色:",
    "COLOUR_RGB_RED": "赤",
    "COLOUR_RGB_GREEN": "緑",
    "COLOUR_RGB_BLUE": "青",
    "COLOUR_RGB_TOOLTIP": "赤、緑、および青の指定された量で色を作成します。すべての値は 0 ~ 100 の間でなければなりません。",
    "COLOUR_BLEND_HELPURL": "http://meyerweb.com/eric/tools/color-blend/",
    "COLOUR_BLEND_TITLE": "ブレンド",
    "COLOUR_BLEND_COLOUR1": "色 1",
    "COLOUR_BLEND_COLOUR2": "色 2",
    "COLOUR_BLEND_RATIO": "比率",
    "COLOUR_BLEND_TOOLTIP": "2色を与えられた比率（0.0~1.0）で混ぜます。",
    "CONTROLS_REPEAT_HELPURL": "https://en.wikipedia.org/wiki/For_loop",
    "CONTROLS_REPEAT_TITLE": "%1 回繰り返す",
    "CONTROLS_REPEAT_INPUT_DO": "実行",
    "CONTROLS_REPEAT_TOOLTIP": "いくつかのステートメントを数回実行します。",
    "CONTROLS_WHILEUNTIL_HELPURL": "https://github.com/google/blockly/wiki/Loops#repeat",
    "CONTROLS_WHILEUNTIL_OPERATOR_WHILE": "繰り返す:続ける条件",
    "CONTROLS_WHILEUNTIL_OPERATOR_UNTIL": "繰り返す:終わる条件",
    "CONTROLS_WHILEUNTIL_TOOLTIP_WHILE": "値がtrueの間、いくつかのステートメントを実行する。",
    "CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL": "値がfalseの間、いくつかのステートメントを実行する。",
    "CONTROLS_FOR_HELPURL": "https://github.com/google/blockly/wiki/Loops#count-with",
    "CONTROLS_FOR_TOOLTIP": "変数 '%1' が開始番号から終了番号まで指定した間隔での値をとって、指定したブロックを実行する。",
    "CONTROLS_FOR_TITLE": "%1 を %2 から %3 まで %4 ずつカウントする。",
    "CONTROLS_FOREACH_HELPURL": "https://github.com/google/blockly/wiki/Loops#for-each",
    "CONTROLS_FOREACH_TITLE": "リスト%2の各項目%1について",
    "CONTROLS_FOREACH_TOOLTIP": "リストの各項目について、その項目を変数'%1'として、いくつかのステートメントを実行します。",
    "CONTROLS_FLOW_STATEMENTS_HELPURL": "https://github.com/google/blockly/wiki/Loops#loop-termination-blocks",
    "CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK": "ループから抜け出す",
    "CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE": "ループの次の反復処理を続行",
    "CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK": "入っているループから抜け出します。",
    "CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE": "このループの残りの部分をスキップして、ループの繰り返しを続けます。",
    "CONTROLS_FLOW_STATEMENTS_WARNING": "注意: このブロックは、ループ内でのみ使用できます。",
    "CONTROLS_IF_HELPURL": "https://github.com/google/blockly/wiki/IfElse",
    "CONTROLS_IF_TOOLTIP_1": "値が true の場合、ステートメントを実行します。",
    "CONTROLS_IF_TOOLTIP_2": "値が true 場合は、ステートメントの最初のブロックを行います。それ以外の場合は、ステートメントの 2 番目のブロックを行います。",
    "CONTROLS_IF_TOOLTIP_3": "最初の値が true 場合は、ステートメントの最初のブロックを行います。それ以外の場合は、2 番目の値が true の場合、ステートメントの 2 番目のブロックをします。",
    "CONTROLS_IF_TOOLTIP_4": "最初の値が true 場合は、ステートメントの最初のブロックを行います。2 番目の値が true の場合は、ステートメントの 2 番目のブロックを行います。それ以外の場合は最後のブロックのステートメントを行います。",
    "CONTROLS_IF_MSG_IF": "もし",
    "CONTROLS_IF_MSG_ELSEIF": "そうでなくもし",
    "CONTROLS_IF_MSG_ELSE": "そうでなければ",
    "CONTROLS_IF_IF_TOOLTIP": "追加、削除、またはセクションを順序変更して、ブロックをこれを再構成します。",
    "CONTROLS_IF_ELSEIF_TOOLTIP": "「もし」のブロックに条件を追加します。",
    "CONTROLS_IF_ELSE_TOOLTIP": "「もし」ブロックに、すべてをキャッチする条件を追加。",
    "IOS_OK": "OK",
    "IOS_CANCEL": "Cancel",
    "IOS_ERROR": "Error",
    "IOS_PROCEDURES_INPUTS": "INPUTS",
    "IOS_PROCEDURES_ADD_INPUT": "+ Add Input",
    "IOS_PROCEDURES_ALLOW_STATEMENTS": "Allow statements",
    "IOS_PROCEDURES_DUPLICATE_INPUTS_ERROR": "This function has duplicate inputs.",
    "IOS_VARIABLES_ADD_VARIABLE": "変数の追加",
    "IOS_VARIABLES_ADD_BUTTON": "追加",
    "IOS_VARIABLES_RENAME_BUTTON": "名前の変更",
    "IOS_VARIABLES_DELETE_BUTTON": "削除",
    "IOS_VARIABLES_VARIABLE_NAME": "変数名",
    "IOS_VARIABLES_EMPTY_NAME_ERROR": "変数名をつけずに使うことはできません。",
    "LOGIC_COMPARE_HELPURL": "https://en.wikipedia.org/wiki/Inequality_(mathematics)",
    "LOGIC_COMPARE_TOOLTIP_EQ": "両方の入力が互いに等しい場合に true を返します。",
    "LOGIC_COMPARE_TOOLTIP_NEQ": "両方の入力が互いに等しくない場合に true を返します。",
    "LOGIC_COMPARE_TOOLTIP_LT": "最初の入力が 2 番目の入力よりも小さい場合は true を返します。",
    "LOGIC_COMPARE_TOOLTIP_LTE": "最初の入力が 2 番目の入力以下の場合に true を返します。",
    "LOGIC_COMPARE_TOOLTIP_GT": "最初の入力が 2 番目の入力よりも大きい場合は true を返します。.",
    "LOGIC_COMPARE_TOOLTIP_GTE": "最初の入力が 2 番目の入力以上の場合に true を返します。",
    "LOGIC_OPERATION_HELPURL": "https://github.com/google/blockly/wiki/Logic#logical-operations",
    "LOGIC_OPERATION_TOOLTIP_AND": "両方の入力が true のときに true を返します。",
    "LOGIC_OPERATION_AND": "かつ",
    "LOGIC_OPERATION_TOOLTIP_OR": "少なくとも 1 つの入力が true のときに true を返します。",
    "LOGIC_OPERATION_OR": "または",
    "LOGIC_NEGATE_HELPURL": "https://github.com/google/blockly/wiki/Logic#not",
    "LOGIC_NEGATE_TITLE": "%1 ではない",
    "LOGIC_NEGATE_TOOLTIP": "入力が false の場合は、true を返します。入力が true の場合は false を返します。",
    "LOGIC_BOOLEAN_HELPURL": "https://github.com/google/blockly/wiki/Logic#values",
    "LOGIC_BOOLEAN_TRUE": "true",
    "LOGIC_BOOLEAN_FALSE": "false",
    "LOGIC_BOOLEAN_TOOLTIP": "true または false を返します。",
    "LOGIC_NULL_HELPURL": "https://en.wikipedia.org/wiki/Nullable_type",
    "LOGIC_NULL": "null",
    "LOGIC_NULL_TOOLTIP": "null を返します。",
    "LOGIC_TERNARY_HELPURL": "https://en.wikipedia.org/wiki/%3F:",
    "LOGIC_TERNARY_CONDITION": "テスト",
    "LOGIC_TERNARY_IF_TRUE": "trueの場合",
    "LOGIC_TERNARY_IF_FALSE": "falseの場合",
    "LOGIC_TERNARY_TOOLTIP": "'テスト' の条件をチェックします。条件が true の場合、'true' の値を返します。それ以外の場合 'false' のを返します。",
    "MATH_NUMBER_HELPURL": "https://en.wikipedia.org/wiki/Number",
    "MATH_NUMBER_TOOLTIP": "数です('0b'(2進)と'0x'(16進)表現が使えます)。",
    "MATH_ADDITION_SYMBOL": "+",
    "MATH_SUBTRACTION_SYMBOL": "-",
    "MATH_DIVISION_SYMBOL": "÷",
    "MATH_MULTIPLICATION_SYMBOL": "×",
    "MATH_POWER_SYMBOL": "^",
    "MATH_TRIG_SIN": "sin",
    "MATH_TRIG_COS": "cos",
    "MATH_TRIG_TAN": "tan",
    "MATH_TRIG_ASIN": "asin",
    "MATH_TRIG_ACOS": "acos",
    "MATH_TRIG_ATAN": "atan",
    "MATH_ARITHMETIC_HELPURL": "https://en.wikipedia.org/wiki/Arithmetic",
    "MATH_ARITHMETIC_TOOLTIP_ADD": "2つの数の合計を返します。",
    "MATH_ARITHMETIC_TOOLTIP_MINUS": "2つの数の差を返します。",
    "MATH_ARITHMETIC_TOOLTIP_MULTIPLY": "2つの数の積を返します。",
    "MATH_ARITHMETIC_TOOLTIP_DIVIDE": "2つの数の商を返します。",
    "MATH_ARITHMETIC_TOOLTIP_POWER": "最初の数を2番目の値で累乗した結果を返します。",
    "MATH_SINGLE_HELPURL": "https://en.wikipedia.org/wiki/Square_root",
    "MATH_SINGLE_OP_ROOT": "平方根",
    "MATH_SINGLE_TOOLTIP_ROOT": "平方根を返す。",
    "MATH_SINGLE_OP_ABSOLUTE": "絶対値",
    "MATH_SINGLE_TOOLTIP_ABS": "絶対値を返す。",
    "MATH_SINGLE_TOOLTIP_NEG": "負の数を返す。",
    "MATH_SINGLE_TOOLTIP_LN": "数値の自然対数を返す。",
    "MATH_SINGLE_TOOLTIP_LOG10": "底が10の対数を返す。",
    "MATH_SINGLE_TOOLTIP_EXP": "ネイピア数eの数値乗を返す。",
    "MATH_SINGLE_TOOLTIP_POW10": "10の数値乗を返す。",
    "MATH_TRIG_HELPURL": "https://en.wikipedia.org/wiki/Trigonometric_functions",
    "MATH_TRIG_TOOLTIP_SIN": "(ラジアンではなく)度数の正弦(sin)を返す。",
    "MATH_TRIG_TOOLTIP_COS": "(ラジアンではなく)度数の余弦(cos)を返す。",
    "MATH_TRIG_TOOLTIP_TAN": "(ラジアンではなく)度数の正接(tan)を返す。",
    "MATH_TRIG_TOOLTIP_ASIN": "アークサイン(arcsin)を返す。",
    "MATH_TRIG_TOOLTIP_ACOS": "アークコサイン(arccos)を返す。",
    "MATH_TRIG_TOOLTIP_ATAN": "アークタンジェント(arctan)を返す。",
    "MATH_CONSTANT_HELPURL": "https://en.wikipedia.org/wiki/Mathematical_constant",
    "MATH_CONSTANT_TOOLTIP": "いずれかの共通の定数を返す: π (3.141…), e (2.718…), φ (1.618…), sqrt(2) (1.414…), sqrt(½) (0.707…), or ∞ (無限)。",
    "MATH_IS_EVEN": "は偶数",
    "MATH_IS_ODD": "は奇数",
    "MATH_IS_PRIME": "は素数",
    "MATH_IS_WHOLE": "は整数",
    "MATH_IS_POSITIVE": "は正",
    "MATH_IS_NEGATIVE": "は負",
    "MATH_IS_DIVISIBLE_BY": "は以下で割りきれる:",
    "MATH_IS_TOOLTIP": "数字が、偶数、奇数、素数、整数、正数、負数、または特定の数で割り切れるかどうかを判定し、true か false を返します。",
    "MATH_CHANGE_HELPURL": "https://en.wikipedia.org/wiki/Programming_idiom#Incrementing_a_counter",
    "MATH_CHANGE_TITLE": "%1 を %2 増やす",
    "MATH_CHANGE_TOOLTIP": "変数'%1'に数をたす。",
    "MATH_ROUND_HELPURL": "https://en.wikipedia.org/wiki/Rounding",
    "MATH_ROUND_TOOLTIP": "数値を切り上げるか切り捨てる。",
    "MATH_ROUND_OPERATOR_ROUND": "四捨五入",
    "MATH_ROUND_OPERATOR_ROUNDUP": "切り上げ",
    "MATH_ROUND_OPERATOR_ROUNDDOWN": "切り捨て",
    "MATH_ONLIST_HELPURL": "",
    "MATH_ONLIST_OPERATOR_SUM": "リストの合計",
    "MATH_ONLIST_TOOLTIP_SUM": "リストの数値を足して返す。",
    "MATH_ONLIST_OPERATOR_MIN": "リストの最小値",
    "MATH_ONLIST_TOOLTIP_MIN": "リストの最小値を返す。",
    "MATH_ONLIST_OPERATOR_MAX": "リストの最大値",
    "MATH_ONLIST_TOOLTIP_MAX": "リストの最大値を返す。",
    "MATH_ONLIST_OPERATOR_AVERAGE": "リストの平均",
    "MATH_ONLIST_TOOLTIP_AVERAGE": "リストの数値の平均(算術平均)を返す。",
    "MATH_ONLIST_OPERATOR_MEDIAN": "リストの中央値",
    "MATH_ONLIST_TOOLTIP_MEDIAN": "リストの中央値を返す。",
    "MATH_ONLIST_OPERATOR_MODE": "リストの最頻値",
    "MATH_ONLIST_TOOLTIP_MODE": "リスト中の最頻項目のリストを返す。",
    "MATH_ONLIST_OPERATOR_STD_DEV": "リストの標準偏差",
    "MATH_ONLIST_TOOLTIP_STD_DEV": "リストの標準偏差を返す。",
    "MATH_ONLIST_OPERATOR_RANDOM": "リストからランダムに選ばれた項目",
    "MATH_ONLIST_TOOLTIP_RANDOM": "リストからランダムに選ばれた要素を返す。",
    "MATH_MODULO_HELPURL": "https://en.wikipedia.org/wiki/Modulo_operation",
    "MATH_MODULO_TITLE": "%1÷%2の余り",
    "MATH_MODULO_TOOLTIP": "2つの数値の割り算の余りを返す。",
    "MATH_CONSTRAIN_HELPURL": "https://en.wikipedia.org/wiki/Clamping_(graphics)",
    "MATH_CONSTRAIN_TITLE": "%1 を %2 以上 %3 以下の範囲に制限",
    "MATH_CONSTRAIN_TOOLTIP": "指定した上限と下限の間に値を制限する(上限と下限の値を含む)。",
    "MATH_RANDOM_INT_HELPURL": "https://en.wikipedia.org/wiki/Random_number_generation",
    "MATH_RANDOM_INT_TITLE": "%1から%2までのランダムな整数",
    "MATH_RANDOM_INT_TOOLTIP": "指定された(上下限を含む)範囲のランダムな整数を返します。",
    "MATH_RANDOM_FLOAT_HELPURL": "https://en.wikipedia.org/wiki/Random_number_generation",
    "MATH_RANDOM_FLOAT_TITLE_RANDOM": "1未満の正の乱数",
    "MATH_RANDOM_FLOAT_TOOLTIP": "0.0以上で1.0未満の範囲の乱数を返します。",
    "MATH_GET_BIT": "%1 の %2 ビット目",
    "MATH_SET_BIT": "%1 の %2 ビット目を1にした値",
    "MATH_CLEAR_BIT": "%1 の %2 ビット目を0にした値",
    "MATH_REVERSE_BIT": "%1 の %2 ビット目を反転した値",
    "MATH_BIT_OPERATION": "%1 %2 %3",
    "MATH_INT_FROM_BYTES": "int from bytes %1 %2",
    "TEXT_TEXT_HELPURL": "https://en.wikipedia.org/wiki/String_(computer_science)",
    "TEXT_TEXT_TOOLTIP": "文字、単語、または行のテキスト。",
    "TEXT_JOIN_HELPURL": "https://github.com/google/blockly/wiki/Text#text-creation",
    "TEXT_JOIN_TITLE_CREATEWITH": "テキストの作成:",
    "TEXT_JOIN_TOOLTIP": "任意の数の項目一部を一緒に接合してテキストを作成。",
    "TEXT_CREATE_JOIN_TITLE_JOIN": "結合",
    "TEXT_CREATE_JOIN_TOOLTIP": "セクションを追加、削除、または順序変更して、ブロックを再構成。",
    "TEXT_CREATE_JOIN_ITEM_TOOLTIP": "テキストへ項目を追加。",
    "TEXT_APPEND_HELPURL": "https://github.com/google/blockly/wiki/Text#text-modification",
    "TEXT_APPEND_TITLE": "項目 %1 へテキストを追加 %2",
    "TEXT_APPEND_TOOLTIP": "変数 '%1' にテキストを追加。",
    "TEXT_LENGTH_HELPURL": "https://github.com/google/blockly/wiki/Text#text-modification",
    "TEXT_LENGTH_TITLE": "%1の長さ",
    "TEXT_LENGTH_TOOLTIP": "与えられたテキストの(スペースを含む)文字数を返す。",
    "TEXT_ISEMPTY_HELPURL": "https://github.com/google/blockly/wiki/Text#checking-for-empty-text",
    "TEXT_ISEMPTY_TITLE": "%1が空",
    "TEXT_ISEMPTY_TOOLTIP": "与えられたテキストが空の場合は true を返す。",
    "TEXT_INDEXOF_HELPURL": "https://github.com/google/blockly/wiki/Text#finding-text",
    "TEXT_INDEXOF_TOOLTIP": "二番目のテキストの中で一番目のテキストが最初／最後に出現したインデックスを返す。テキストが見つからない場合は%1を返す。",
    "TEXT_INDEXOF_TITLE": "テキスト %1 %2 %3",
    "TEXT_INDEXOF_OPERATOR_FIRST": "で以下のテキストの最初の出現箇所を検索:",
    "TEXT_INDEXOF_OPERATOR_LAST": "で以下のテキストの最後の出現箇所を検索:",
    "TEXT_CHARAT_HELPURL": "https://github.com/google/blockly/wiki/Text#extracting-text",
    "TEXT_CHARAT_TITLE": "テキスト %1 %2",
    "TEXT_CHARAT_FROM_START": "の、以下の数字番目の文字:",
    "TEXT_CHARAT_FROM_END": "の、後ろから以下の数字番目の文字:",
    "TEXT_CHARAT_FIRST": "最初の文字を得る",
    "TEXT_CHARAT_LAST": "最後の文字を得る",
    "TEXT_CHARAT_RANDOM": "ランダムな文字を得る",
    "TEXT_CHARAT_TAIL": "",
    "TEXT_CHARAT_TOOLTIP": "指定された位置の文字を返します。",
    "TEXT_GET_SUBSTRING_TOOLTIP": "テキストの指定部分を返します。",
    "TEXT_GET_SUBSTRING_HELPURL": "https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text",
    "TEXT_GET_SUBSTRING_INPUT_IN_TEXT": "テキスト",
    "TEXT_GET_SUBSTRING_START_FROM_START": "の部分文字列を取得l;開始位置:",
    "TEXT_GET_SUBSTRING_START_FROM_END": "の部分文字列を取得;開始位置:後ろから",
    "TEXT_GET_SUBSTRING_START_FIRST": "の部分文字列を取得;最初から",
    "TEXT_GET_SUBSTRING_END_FROM_START": "終了位置:",
    "TEXT_GET_SUBSTRING_END_FROM_END": "終了位置:後ろから",
    "TEXT_GET_SUBSTRING_END_LAST": "最後の文字",
    "TEXT_GET_SUBSTRING_TAIL": "",
    "TEXT_CHANGECASE_HELPURL": "https://github.com/google/blockly/wiki/Text#adjusting-text-case",
    "TEXT_CHANGECASE_TOOLTIP": "別のケースに、テキストのコピーを返します。",
    "TEXT_CHANGECASE_OPERATOR_UPPERCASE": "大文字に",
    "TEXT_CHANGECASE_OPERATOR_LOWERCASE": "小文字に",
    "TEXT_CHANGECASE_OPERATOR_TITLECASE": "タイトル ケースに",
    "TEXT_TRIM_HELPURL": "https://github.com/google/blockly/wiki/Text#trimming-removing-spaces",
    "TEXT_TRIM_TOOLTIP": "スペースを 1 つまたは両方の端から削除したのち、テキストのコピーを返します。",
    "TEXT_TRIM_OPERATOR_BOTH": "両端のスペースを取り除く",
    "TEXT_TRIM_OPERATOR_LEFT": "左端のスペースを取り除く",
    "TEXT_TRIM_OPERATOR_RIGHT": "右端のスペースを取り除く",
    "TEXT_PRINT_HELPURL": "https://github.com/google/blockly/wiki/Text#printing-text",
    "TEXT_PRINT_TITLE": "%1 をシリアル出力する",
    "TEXT_PRINT_TOOLTIP": "指定したテキスト、番号または他の値を印刷します。",
    "TEXT_PROMPT_HELPURL": "https://github.com/google/blockly/wiki/Text#getting-input-from-the-user",
    "TEXT_PROMPT_TYPE_TEXT": "メッセージでテキスト入力を求める",
    "TEXT_PROMPT_TYPE_NUMBER": "メッセージで番号の入力を求める",
    "TEXT_PROMPT_TOOLTIP_NUMBER": "ユーザーに数値のインプットを求める。",
    "TEXT_PROMPT_TOOLTIP_TEXT": "ユーザーにテキスト入力を求める。",
    "TEXT_COUNT_MESSAGE0": "%2に含まれる%1の数を数える",
    "TEXT_COUNT_HELPURL": "https://github.com/google/blockly/wiki/Text#counting-substrings",
    "TEXT_COUNT_TOOLTIP": "とある文が別の文のなかに使われた回数を数える。",
    "TEXT_REPLACE_MESSAGE0": "%3に含まれる%1を%2に置換",
    "TEXT_REPLACE_HELPURL": "https://github.com/google/blockly/wiki/Text#replacing-substrings",
    "TEXT_REPLACE_TOOLTIP": "文に含まれるキーワードを置換する。",
    "TEXT_REVERSE_MESSAGE0": "%1を逆順に",
    "TEXT_REVERSE_HELPURL": "https://github.com/google/blockly/wiki/Text#reversing-text",
    "TEXT_REVERSE_TOOLTIP": "文の文字を逆順にする。",
    "LISTS_CREATE_EMPTY_HELPURL": "https://github.com/google/blockly/wiki/Lists#create-empty-list",
    "LISTS_CREATE_EMPTY_TITLE": "空のリスト",
    "LISTS_CREATE_EMPTY_TOOLTIP": "長さ0でデータ・レコードを含まない空のリストを返す。",
    "LISTS_CREATE_WITH_HELPURL": "https://github.com/google/blockly/wiki/Lists#create-list-with",
    "LISTS_CREATE_WITH_TOOLTIP": "項目数が不定のリストを作成。",
    "LISTS_CREATE_WITH_INPUT_WITH": "以下を使ってリストを作成:",
    "LISTS_CREATE_WITH_CONTAINER_TITLE_ADD": "リスト",
    "LISTS_CREATE_WITH_CONTAINER_TOOLTIP": "追加、削除、またはセクションの順序変更をして、このリスト・ブロックを再構成する。",
    "LISTS_CREATE_WITH_ITEM_TOOLTIP": "リストに項目を追加。",
    "LISTS_REPEAT_HELPURL": "https://github.com/google/blockly/wiki/Lists#create-list-with",
    "LISTS_REPEAT_TOOLTIP": "与えられた値を指定された回数繰り返してリストを作成。",
    "LISTS_REPEAT_TITLE": "項目%1を%2回繰り返したリストを作成",
    "LISTS_LENGTH_HELPURL": "https://github.com/google/blockly/wiki/Lists#length-of",
    "LISTS_LENGTH_TITLE": "%1の長さ",
    "LISTS_LENGTH_TOOLTIP": "リストの長さを返します。",
    "LISTS_ISEMPTY_HELPURL": "https://github.com/google/blockly/wiki/Lists#is-empty",
    "LISTS_ISEMPTY_TITLE": "%1が空",
    "LISTS_ISEMPTY_TOOLTIP": "リストが空の場合は、true を返します。",
    "LISTS_INLIST": "リスト",
    "LISTS_INDEX_OF_HELPURL": "https://github.com/google/blockly/wiki/Lists#getting-items-from-a-list",
    "LISTS_INDEX_OF_FIRST": "で以下のアイテムの最初の出現箇所を検索:",
    "LISTS_INDEX_OF_LAST": "で以下のテキストの最後の出現箇所を検索:",
    "LISTS_INDEX_OF_TOOLTIP": "リスト項目の最初/最後に出現するインデックス位置を返します。項目が見つからない場合は %1 を返します。",
    "LISTS_GET_INDEX_GET": "取得",
    "LISTS_GET_INDEX_GET_REMOVE": "取得して削除",
    "LISTS_GET_INDEX_REMOVE": "削除",
    "LISTS_GET_INDEX_FROM_START": "#",
    "LISTS_GET_INDEX_FROM_END": "位置:後ろから",
    "LISTS_GET_INDEX_FIRST": "最初",
    "LISTS_GET_INDEX_LAST": "最後",
    "LISTS_GET_INDEX_RANDOM": "ランダム",
    "LISTS_GET_INDEX_TAIL": "",
    "LISTS_INDEX_FROM_START_TOOLTIP": "%1 は、最初の項目です。",
    "LISTS_INDEX_FROM_END_TOOLTIP": "%1 は、最後の項目です。",
    "LISTS_GET_INDEX_TOOLTIP_GET_FROM": "リスト内の指定位置にある項目を返します。",
    "LISTS_GET_INDEX_TOOLTIP_GET_FIRST": "リストの最初の項目を返します。",
    "LISTS_GET_INDEX_TOOLTIP_GET_LAST": "リストの最後の項目を返します。",
    "LISTS_GET_INDEX_TOOLTIP_GET_RANDOM": "リストからランダムに項目を返します。",
    "LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM": "リスト内の指定位置にある項目を削除し返します。",
    "LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST": "リスト内の最初の項目を削除し返します。",
    "LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST": "リスト内の最後の項目を削除し返します。",
    "LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM": "リスト内のランダムに選んだ項目を削除し返します。",
    "LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM": "リスト内の指定された項目を削除します。",
    "LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST": "リスト内の最初の項目を削除します。",
    "LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST": "リスト内の最後の項目を削除します。",
    "LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM": "リスト内にある項目をランダムに削除します。",
    "LISTS_SET_INDEX_HELPURL": "https://github.com/google/blockly/wiki/Lists#in-list--set",
    "LISTS_SET_INDEX_SET": "セット",
    "LISTS_SET_INDEX_INSERT": "挿入位置:",
    "LISTS_SET_INDEX_INPUT_TO": "値:",
    "LISTS_SET_INDEX_TOOLTIP_SET_FROM": "リスト内の指定された位置に項目を設定します。",
    "LISTS_SET_INDEX_TOOLTIP_SET_FIRST": "リスト内に最初の項目を設定します。",
    "LISTS_SET_INDEX_TOOLTIP_SET_LAST": "リスト内の最後の項目を設定します。",
    "LISTS_SET_INDEX_TOOLTIP_SET_RANDOM": "リスト内にランダムな項目を設定します。",
    "LISTS_SET_INDEX_TOOLTIP_INSERT_FROM": "リスト内の指定位置に項目を挿入します。",
    "LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST": "リストの先頭に項目を挿入します。",
    "LISTS_SET_INDEX_TOOLTIP_INSERT_LAST": "リストの末尾に項目を追加します。",
    "LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM": "リストに項目をランダムに挿入します。",
    "LISTS_GET_SUBLIST_HELPURL": "https://github.com/google/blockly/wiki/Lists#getting-a-sublist",
    "LISTS_GET_SUBLIST_START_FROM_START": "# からサブディレクトリのリストを取得します。",
    "LISTS_GET_SUBLIST_START_FROM_END": "末尾から #のサブリストを取得します。",
    "LISTS_GET_SUBLIST_START_FIRST": "最初からサブリストを取得する。",
    "LISTS_GET_SUBLIST_END_FROM_START": "終了位置:",
    "LISTS_GET_SUBLIST_END_FROM_END": "終了位置:後ろから",
    "LISTS_GET_SUBLIST_END_LAST": "最後まで",
    "LISTS_GET_SUBLIST_TAIL": "",
    "LISTS_GET_SUBLIST_TOOLTIP": "リストの指定された部分のコピーを作成する。",
    "LISTS_SORT_HELPURL": "https://github.com/google/blockly/wiki/Lists#sorting-a-list",
    "LISTS_SORT_TITLE": "%1 ( %2 ) に %3 を並び替える",
    "LISTS_SORT_TOOLTIP": "リストのコピーを並べ替え。",
    "LISTS_SORT_ORDER_ASCENDING": "昇順",
    "LISTS_SORT_ORDER_DESCENDING": "降順",
    "LISTS_SORT_TYPE_NUMERIC": "数値順",
    "LISTS_SORT_TYPE_TEXT": "アルファベット順",
    "LISTS_SORT_TYPE_IGNORECASE": "アルファベット順(大文字・小文字の区別無し)",
    "LISTS_SPLIT_HELPURL": "https://github.com/google/blockly/wiki/Lists#splitting-strings-and-joining-lists",
    "LISTS_SPLIT_LIST_FROM_TEXT": "テキストからリストを作る",
    "LISTS_SPLIT_TEXT_FROM_LIST": "リストからテキストを作る",
    "LISTS_SPLIT_WITH_DELIMITER": "区切り記号",
    "LISTS_SPLIT_TOOLTIP_SPLIT": "テキストを区切り記号で分割したリストにする。",
    "LISTS_SPLIT_TOOLTIP_JOIN": "テキストのリストを区切り記号で区切られた一つのテキストにする。",
    "LISTS_REVERSE_HELPURL": "https://github.com/google/blockly/wiki/Lists#reversing-a-list",
    "LISTS_REVERSE_MESSAGE0": "%1の逆順のリスト",
    "LISTS_REVERSE_TOOLTIP": "リストのコピーを逆順にする。",
    "ORDINAL_NUMBER_SUFFIX": "",
    "VARIABLES_GET_HELPURL": "https://github.com/google/blockly/wiki/Variables#get",
    "VARIABLES_GET_TOOLTIP": "この変数の値を返します。",
    "VARIABLES_GET_CREATE_SET": "'セット%1'を作成します。",
    "VARIABLES_SET_HELPURL": "https://github.com/google/blockly/wiki/Variables#set",
    "VARIABLES_SET": "%1 を %2 にする",
    "VARIABLES_SET_TOOLTIP": "この入力を変数と等しくなるように設定します。",
    "VARIABLES_SET_CREATE_GET": "' %1 を取得' を作成します。",
    "PROCEDURES_DEFNORETURN_HELPURL": "https://en.wikipedia.org/wiki/Subroutine",
    "PROCEDURES_DEFNORETURN_TITLE": "to",
    "PROCEDURES_DEFNORETURN_PROCEDURE": "dosomething",
    "PROCEDURES_BEFORE_PARAMS": "with:",
    "PROCEDURES_CALL_BEFORE_PARAMS": "with:",
    "PROCEDURES_DEFNORETURN_DO": "",
    "PROCEDURES_DEFNORETURN_TOOLTIP": "Creates a function with no output.",
    "PROCEDURES_DEFNORETURN_COMMENT": "Describe this function...",
    "PROCEDURES_DEFRETURN_HELPURL": "https://en.wikipedia.org/wiki/Subroutine",
    "PROCEDURES_DEFRETURN_RETURN": "return",
    "PROCEDURES_DEFRETURN_TOOLTIP": "Creates a function with an output.",
    "PROCEDURES_ALLOW_STATEMENTS": "allow statements",
    "PROCEDURES_DEF_DUPLICATE_WARNING": "Warning: This function has duplicate parameters.",
    "PROCEDURES_CALLNORETURN_HELPURL": "https://en.wikipedia.org/wiki/Subroutine",
    "PROCEDURES_CALLNORETURN_TOOLTIP": "Run the user-defined function '%1'.",
    "PROCEDURES_CALLRETURN_HELPURL": "https://en.wikipedia.org/wiki/Subroutine",
    "PROCEDURES_CALLRETURN_TOOLTIP": "Run the user-defined function '%1' and use its output.",
    "PROCEDURES_MUTATORCONTAINER_TITLE": "inputs",
    "PROCEDURES_MUTATORCONTAINER_TOOLTIP": "Add, remove, or reorder inputs to this function.",
    "PROCEDURES_MUTATORARG_TITLE": "input name:",
    "PROCEDURES_MUTATORARG_TOOLTIP": "Add an input to the function.",
    "PROCEDURES_HIGHLIGHT_DEF": "Highlight function definition",
    "PROCEDURES_CREATE_DO": "Create '%1'",
    "PROCEDURES_IFRETURN_TOOLTIP": "If a value is true, then return a second value.",
    "PROCEDURES_IFRETURN_HELPURL": "http://c2.com/cgi/wiki?GuardClause",
    "PROCEDURES_IFRETURN_WARNING": "Warning: This block may be used only within a function definition.",
    "PROCEDURES_DEFRETURN_TITLE": "to",
    "CONTROLS_IF_IF_TITLE_IF": "if",
    "CONTROLS_WHILEUNTIL_INPUT_DO": "do",
    "CONTROLS_IF_MSG_THEN": "do",
    "CONTROLS_IF_ELSE_TITLE_ELSE": "else",
    "PROCEDURES_DEFRETURN_PROCEDURE": "dosomething",
    "LISTS_GET_SUBLIST_INPUT_IN_LIST": "リスト",
    "LISTS_GET_INDEX_INPUT_IN_LIST": "リスト",
    "MATH_CHANGE_TITLE_ITEM": "item",
    "PROCEDURES_DEFRETURN_DO": "",
    "CONTROLS_IF_ELSEIF_TITLE_ELSEIF": "else if",
    "LISTS_GET_INDEX_HELPURL": "https://github.com/google/blockly/wiki/Lists#getting-items-from-a-list",
    "CONTROLS_FOREACH_INPUT_DO": "do",
    "LISTS_SET_INDEX_INPUT_IN_LIST": "リスト",
    "CONTROLS_FOR_INPUT_DO": "do",
    "LISTS_CREATE_WITH_ITEM_TITLE": "item",
    "TEXT_APPEND_VARIABLE": "item",
    "TEXT_CREATE_JOIN_ITEM_TITLE_ITEM": "item",
    "LISTS_INDEX_OF_INPUT_IN_LIST": "リスト",
    "PROCEDURES_DEFRETURN_COMMENT": "Describe this function...",
    "TEXT_ADD": "%1 + %2",
    "DECODE_STR": "decode %1 ",
    "ENCODE_STR": "encode %1 ",
    "LOGIC_TRY": "try  %1",
    "LOGIC_EXCEPT": "except %1",
    "LOGIC_SWITCH": "switch %1",
    "LOGIC_CASE": "case",
    "LOGIC_DEFAULT": "default",
    "DUMPS_JSON": "%1 をjson形式に変換したデータ",
    "LOADS_JSON": "json %1 を読み込んだデータ",
    "MAP_ON_LOOP": "マップを作成",
    "MAP_ON_func": "%1",
    "MAP_CLEAR": " マップ %1 をクリアする",
    "GET_MAP_IN": "マップ %1 に key %2 のデータが存在する",
    "CREATE_MAP_KEY": "key %1 の値 %2",
    "GET_MAP_KEY": "マップ %2 のkey %1 のvalue",
    "ADD_MAP_KEY": "マップ %1 に key %2 value %3 のデータを追加",
    "SET_MAP_KEY": "マップ %1 の key %2 のvalueを %3 に変更",
    "DELETE_MAP_KEY": "マップ %1 の key %2 のデータを削除",
    "LORAWAN470_MODE_OPTION_MSG0": "OTAA mode",
    "LORAWAN470_MODE_OPTION_MSG1": "ABP mode",
    "LORAWAN470_FREQ_MODE_OPTION_MSG0": "same frequency mode",
    "LORAWAN470_FREQ_MODE_OPTION_MSG1": "inter-frequency mode",
    "LORAWAN470_CONFIRM_OPTION_MSG0": "unconfirm",
    "LORAWAN470_CONFIRM_OPTION_MSG1": "confirm",
    "TEMPLATE_DISPLAY_MSG0": "Show",
    "TEMPLATE_DISPLAY_MSG1": "Delete",
    "TEMPLATE_DISPLAY_MSG2": "Create",
    "SYSTEM_M5_BEGIN_MSG0": "内蔵ハードウエアの初期化",
    "SYSTEM_M5_UPDATE_MSG0": "ループ中でボタンやタッチパネルなどの状態を更新",
    "EXECUTE_CODE_MSG0": "mpyコードを実行",
    "EXECUTE_CODE_IMPORT_MSG0": "mpyコードを実行(例えばimportなど)",
    "SYSTEM_BOOT_GET_OPTION_MSG0": "起動時オプション(0か1か2)を取得",
    "SYSTEM_BOOT_SET_OPTION_MSG0": "起動時オプションを設定",
    "SYSTEM_GET_FIRMWARE_VERSION_MSG0": "ファームウエアのバージョンを取得(return string)",
    "TIME_GET_UTC_TIME_MSG0": "UTCの時間を取得(return tuple)",
    "TIME_GET_LOCAL_TIME_STAMP_MSG0": "1970年1月1日からのローカル時間のタイムスタンプを取得",
    "TIME_GET_LOCAL_TIME_MSG0": "ローカル時間を取得(return tuple)",
    "TIME_GET_TIME_STAMP_MSG0": "以下の時間からのタイムスタンプを取得",
    "TIME_GET_TIME_STAMP_MSG1": "年",
    "TIME_GET_TIME_STAMP_MSG2": "月",
    "TIME_GET_TIME_STAMP_MSG3": "日",
    "TIME_GET_TIME_STAMP_MSG4": "時",
    "TIME_GET_TIME_STAMP_MSG5": "分",
    "TIME_GET_TIME_STAMP_MSG6": "秒",
    "TIME_GET_TIME_STAMP_MSG7": "曜日",
    "TIME_GET_TIME_STAMP_MSG8": "1月1日からの日数",
    "TIME_SLEEP_SECOND_MSG0": "",
    "TIME_SLEEP_SECOND_MSG1": "秒停止",
    "TIME_SLEEP_MILLISECOND_MSG0": "",
    "TIME_SLEEP_MILLISECOND_MSG1": "ミリ秒停止",
    "TIME_SLEEP_MICROSECOND_MSG0": "",
    "TIME_SLEEP_MICROSECOND_MSG1": "マイクロ秒停止",
    "TIME_GET_TICKS_MS_MSG0": "ticksをミリ秒で取得",
    "TIME_GET_TICKS_US_MSG0": "ticksをマイクロ秒で取得",
    "TIME_GET_TICKS_CPU_MSG0": "get CPU ticks count",
    "TIME_GET_TICKS_ADD_MSG0": "ticks",
    "TIME_GET_TICKS_ADD_MSG1": "add delta",
    "TIME_GET_TICKS_DIFF_MSG0": "ticks diff",
    "TIME_GET_SYSTEM_TIME_MSG0": "稼働時間(秒)",
    "TIME_GET_TIMEZONE_MSG0": "タイムゾーンを取得(return string)",
    "TIME_SET_TIMEZONE_MSG0": "タイムゾーンを設定",
    "BLE_UART_SERVER_INIT_MSG0": "BLE Uartサーバーを初期化",
    "BLE_UART_SERVER_INIT_MSG1": "名前:",
    "BLE_UART_SERVER_DEINIT_MSG0": "BLE Uartサーバーをdeinit",
    "BLE_UART_SERVER_AVAILABLE_CHAR_MSG0": "BLE Uartが有効か",
    "BLE_UART_SERVER_READ_ALL_MSG0": "BLE Uartサーバーで全てを読み込み",
    "BLE_UART_SERVER_READ_BYTES_MSG0": "BLE Uartで",
    "BLE_UART_SERVER_READ_BYTES_MSG1": "バイト読み込み",
    "BLE_UART_SERVER_READ_LINE_MSG0": "BLE Uartサーバで1行読み込み",
    "BLE_UART_SERVER_READ_RAW_DATA_MSG0": "BLE Uartサーバで生データ(0 ~ 255)を読み込み",
    "BLE_UART_SERVER_CLOSE_MSG0": "BLE Uartサーバーを切断",
    "BLE_UART_SERVER_WRITE_MSG0": "BLE Uartサーバーで書き込み:",
    "BLE_UART_SERVER_WRITE_LINE_MSG0": "BLE Uartサーバーで1行書き込み:",
    "BLE_UART_SERVER_WRITE_VAR_MSG0": "BLE Uartサーバーで書き込み:",
    "BLE_UART_SERVER_WRITE_LIST_TUPLE_MSG0": "BLE Uartサーバーでリストかタプルを書き込み:",
    "BLE_UART_SERVER_WRITE_LIST_MSG0": "BLE Uartサーバーで生データを書き込み:",
    "BLE_UART_CLIENT_INIT_MSG0": "BLE Uartクライアントを初期化",
    "BLE_UART_CLIENT_DEINIT_MSG0": "BLE Uartクライアントをdeinit",
    "BLE_UART_CLIENT_IS_CONNECTED_MSG0": "BLE Uartクライアントが接続されているか",
    "BLE_UART_CLIENT_AVAILABLE_CHAR_MSG0": "BLE Uartクライアントで利用可能なデータ数",
    "BLE_UART_CLIENT_READ_ALL_MSG0": "BLE Uartクライアントで全て読み込み",
    "BLE_UART_CLIENT_READ_BYTES_MSG0": "BLE Uartクライアントで",
    "BLE_UART_CLIENT_READ_BYTES_MSG1": "バイト読み込み",
    "BLE_UART_CLIENT_READ_LINE_MSG0": "BLE Uartクライアントで1行読み込み",
    "BLE_UART_CLIENT_READ_RAW_DATA_MSG0": "BLE Uartクライアントで生データ(0 ~ 255)を読み込み",
    "BLE_UART_CLIENT_CONNECT_MSG0": "BLE Uartクライアント",
    "BLE_UART_CLIENT_CONNECT_MSG1": "に接続:タイムアウト",
    "BLE_UART_CLIENT_CLOSE_MSG0": "BLE Uartクライアントを切断",
    "BLE_UART_CLIENT_WRITE_MSG0": "BLE Uartクライアントで書き込み:",
    "BLE_UART_CLIENT_WRITE_LINE_MSG0": "BLE Uartクライアントで1行書き込み:",
    "BLE_UART_CLIENT_WRITE_VAR_MSG0": "BLE Uartクライアントで書き込み:",
    "BLE_UART_CLIENT_WRITE_LIST_TUPLE_MSG0": "BLE Uartクライアントでリストかタプルを書き込み:",
    "BLE_UART_CLIENT_WRITE_LIST_MSG0": "BLE Uartクライアントで生データを書き込み:",
    "BLE_UART_CLIENT_SCAN_CALLBACK_MSG0": "When BLE Uart client scan to",
    "BLE_UART_CLIENT_SCAN_CALLBACK_MSG1": "addr type",
    "BLE_UART_CLIENT_SCAN_CALLBACK_MSG2": "addr",
    "BLE_UART_CLIENT_SCAN_CALLBACK_MSG3": "name",
    "BLE_UART_INIT_MSG0": "Init BLE Uart",
    "BLE_UART_DEINIT_MSG0": "deinit",
    "BLE_UART_IS_CONNECTED_MSG0": "is connected",
    "BLE_UART_AVAILABLE_CHAR_MSG0": "count of available",
    "BLE_UART_READ_ALL_MSG0": "read all",
    "BLE_UART_READ_BYTES_MSG0": "read",
    "BLE_UART_READ_BYTES_MSG1": "bytes",
    "BLE_UART_READ_LINE_MSG0": "read line",
    "BLE_UART_READ_RAW_DATA_MSG0": "read a raw data (return 0 ~ 255)",
    "BLE_UART_CONNECT_MSG0": "connect",
    "BLE_UART_CLOSE_MSG0": "close",
    "BLE_UART_WRITE_MSG0": "write",
    "BLE_UART_WRITE_LINE_MSG0": "write line",
    "BLE_UART_WRITE_VAR_MSG0": "write",
    "BLE_UART_WRITE_LIST_TUPLE_MSG0": "write list or tuple",
    "BLE_UART_WRITE_LIST_MSG0": "write raw data",
    "BLE_UART_SCAN_CALLBACK_MSG0": "When",
    "BLE_UART_SCAN_CALLBACK_MSG1": "addr type",
    "BLE_UART_SCAN_CALLBACK_MSG2": "addr",
    "BLE_UART_SCAN_CALLBACK_MSG3": "name",
    "WLAN_STA_INIT_MSG0": "WLANステーションの初期化",
    "WLAN_STA_SET_ACTIVE_MSG0": "WLANステーションを動作させる",
    "WLAN_STA_CONNECT_MSG0": "WLANステーションを接続:SSID",
    "WLAN_STA_CONNECT_MSG1": "password",
    "WLAN_STA_DISCONNECT_MSG0": "WLANステーションの接続を解除",
    "WLAN_STA_GET_RSSI_MSG0": "WLANステーションのRSSIを取得",
    "WLAN_STA_GET_STATUS_MSG0": "WLANステーションの接続状態を取得",
    "WLAN_STA_STATUS_MSG0": "接続状態",
    "WLAN_STA_IS_CONNECTED_MSG0": "WLANステーションが接続されているか",
    "WLAN_STA_GET_LOCALIP_MSG0": "WLANステーションのローカルIPを取得",
    "WLAN_STA_GET_SUBNET_MSG0": "WLANステーションのサブネットを取得",
    "WLAN_STA_GET_GATEWAY_MSG0": "WLANステーションのゲートウエイを取得",
    "WLAN_STA_GET_DNS_MSG0": "WLANステーションのDNSを取得",
    "WLAN_STA_GET_MAC_MSG0": "WLANステーションのMACアドレスを取得",
    "WLAN_STA_GET_DHCP_HOSTNAME_MSG0": "WLANステーションのDHCPホスト名を取得",
    "WLAN_STA_SET_DHCP_HOSTNAME_MSG0": "WLANステーションのDHCPホスト名を設定:",
    "WLAN_STA_GET_RECONNECTS_MSG0": "WLANステーションの再接続回数を取得(return int)",
    "WLAN_STA_SET_RECONNECTS_MSG0": "WLANステーションの再接続回数を設定:",
    "WLAN_STA_GET_TXPOWER_MSG0": "WLANステーションのTX出力電力を取得(return float)",
    "WLAN_STA_SET_TXPOWER_MSG0": "WLANステーションのTX出力電力を設定:",
    "WLAN_STA_SCAN_FOR_EACH_MSG0": "WLANステーションのスキャン結果、変数",
    "WLAN_STA_SCAN_FOR_EACH_MSG1": "の各要素に対して",
    "WLAN_STA_SCAN_FOR_EACH_MSG2": "実行",
    "WLAN_STA_SCAN_GET_VALUE_MSG0": "アクセスポイント",
    "WLAN_STA_SCAN_GET_VALUE_MSG1": "を取得",
    "WLAN_AP_INIT_MSG0": "WLANアクセスポイントを初期化",
    "WLAN_AP_SET_ACTIVE_MSG0": "WLANアクセスポイントが有効",
    "WLAN_AP_IS_CONNECTED_MSG0": "WLANアクセスポイントが接続されている",
    "WLAN_AP_GET_SSID_MSG0": "WLANアクセスポイントのSSIDを取得",
    "WLAN_AP_SET_SSID_MSG0": "WLANのアクセスポイントのSSIDを設定:",
    "WLAN_AP_GET_PASSWORD_MSG0": "WLANアクセスポイントのpasswordを取得",
    "WLAN_AP_SET_PASSWORD_MSG0": "WLANアクセスポイントのpasswordを設定:",
    "WLAN_AP_GET_LOCALIP_MSG0": "WLANアクセスポイントのローカルIPアドレスを取得",
    "WLAN_AP_GET_SUBNET_MSG0": "WLANアクセスポイントのサブネットを取得",
    "WLAN_AP_GET_GATEWAY_MSG0": "WLANアクセスポイントのゲートウエイを取得",
    "WLAN_AP_GET_DNS_MSG0": "WLANアクセスポイントのDNSを取得",
    "WLAN_AP_GET_MAC_MSG0": "WLANアクセスポイントのMACアドレスを取得",
    "WLAN_AP_GET_HIDDEN_MSG0": "WLANアクセスポイントの非公開状態を取得",
    "WLAN_AP_SET_HIDDEN_MSG0": "WLANアクセスポイントの非公開状態を設定",
    "WLAN_AP_GET_AUTHMODE_MSG0": "WLANアクセスポイントの認証モードを取得(return int)",
    "WLAN_AP_SET_AUTHMODE_MSG0": "WLANアクセスポイントの認証モードを設定:",
    "WLAN_AP_AUTHMODE_VALUE_MSG0": "認証モード",
    "WLAN_AP_GET_CHANNEL_MSG0": "WLANアクセスポイントのチャンネルを取得",
    "WLAN_AP_SET_CHANNEL_MSG0": "WLANアクセスポイントのチャンネルを",
    "WLAN_AP_SET_CHANNEL_MSG1": "(1 ~ 13)に設定",
    "WLAN_AP_GET_DHCP_HOSTNAME_MSG0": "WLANアクセスポイントのDHCPホスト名を取得",
    "WLAN_AP_SET_DHCP_HOSTNAME_MSG0": "WLANアクセスポイントのDHCPホスト名を設定:",
    "WLAN_AP_GET_MAX_CLIENTS_MSG0": "WLANアクセスポイントの最大クライアント数を取得",
    "WLAN_AP_SET_MAX_CLIENTS_MSG0": "WLANアクセスポイントの最大クライアント数を",
    "WLAN_AP_SET_MAX_CLIENTS_MSG1": "(1 ~ 10)に設定",
    "WLAN_AP_GET_TXPOWER_MSG0": "WLANアクセスポイントのTX出力電力を取得",
    "WLAN_AP_SET_TXPOWER_MSG0": "WLANアクセスポイントのTX出力電力を設定:",
    "WLAN_AP_SCAN_FOR_EACH_MSG0": "WLANアクセスポイントのスキャンしたステーションの結果、変数",
    "WLAN_AP_SCAN_FOR_EACH_MSG1": "の各要素に対して",
    "WLAN_AP_SCAN_FOR_EACH_MSG2": "実行",
    "WLAN_AP_SCAN_GET_VALUE_MSG0": "MAC address",
    "WLAN_AP_SCAN_GET_VALUE_MSG1": "を取得",
    "ESPNOW_INIT_WLAN_MSG0": "Init ESP-NOW WLAN mode %1",
    "ESPNOW_WLAN_ACTIVE_MSG0": "ESP-NOW WLAN active %1",
    "ESPNOW_WLAN_DISCONNECT_MSG0": "ESP-NOW WLAN disconnect",
    "ESPNOW_WLAN_GET_MAC_MSG0": "ESP-NOW WLAN get MAC address (return bytes)",
    "ESPNOW_INIT_MSG0": "Init ESP-NOW",
    "ESPNOW_ACTIVE_MSG0": "ESP-NOW active %1",
    "ESPNOW_CONFIG_MSG0": "Config ESP-NOW %1 RX buffer size %2 timeout (ms) %3 TX speed bit rate (0x00 ~ 0x2A) %4",
    "ESPNOW_GET_STATUS_MSG0": "ESP-NOW get communication status (return tuple)",
    "ESPNOW_GET_PEER_COUNT_MSG0": "ESP-NOW get number of registered peers (return tuple)",
    "ESPNOW_GET_PEERS_MSG0": "ESP-NOW get number of peers device info (return tuple)",
    "ESPNOW_ADD_PEER_MSG0": "ESP-NOW add peer MAC address %1 (bytes)",
    "ESPNOW_DELETE_PEER_MSG0": "ESP-NOW delete peer MAC address %1 (bytes)",
    "ESPNOW_SET_PMK_MSG0": "ESP-NOW set pmk encryption key %1 (string or bytes)",
    "ESPNOW_SEND_PEER_MSG0": "ESP-NOW send payload peer address %1 (bytes) data %2 (string or bytes)",
    "ESPNOW_GET_PEER_INFO_MSG0": "ESP-NOW get peered mac %1 device info (return tuple)",
    "ESPNOW_GET_ANY_MSG0": "ESP-NOW number of bytes available (return int)",
    "ESPNOW_GET_PEERS_TABLE_MSG0": "ESP-NOW get peers device info table (return dict)",
    "ESPNOW_GET_IRECV_MSG0": "ESP-NOW receive payload timeout %1 ms (return list)",
    "ESPNOW_SET_CALLBACK_MSG0": "ESP-NOW set IRQ callback",
    "ESPNOW_RECV_CALLBACK_MSG0": "When ESP-NOW received data %1 byte list %2",
    "ESPNOW_GET_FROM_BYTES_MSG0": "ESP-NOW get %1 %2 to bytes (return bytes)",
    "ESPNOW_GET_LIST_TO_BYTES_MSG0": "ESP-NOW get list %1 to bytes (return bytes)",
    "ESPNOW_GET_BYTES_TO_HEX_STR_MSG0": "ESP-NOW get bytes string %1 to hex string (return string)",
    "ESPNOW_GET_HEX_STR_TO_BYTES_MSG0": "ESP-NOW get hex string %1 to bytes string (return bytes)",
    "ESPNOW_GET_BYTES_TO_MSG0": "ESP-NOW get bytes %1 to %2 value (return int or float)",
    "ESPNOW_INIT_WIFI_CHANNEL_MSG0": "Init ESP-NOW wifi channel %1 (0 ~ 14)",
    "ESPNOW_DEINIT_MSG0": "ESP-NOW deinit",
    "ESPNOW_GET_MAC_MSG0": "ESP-NOW get %1 MAC address (return bytes)",
    "ESPNOW_GET_REMOTE_MAC_MSG0": "ESP-NOW get remote %1 address thru remote SSID %2 (return bytes)",
    "ESPNOW_SET_ADD_PEER_MSG0": "ESP-NOW add peer MAC address %1 peer ID (1~20) %2 ifidx %3",
    "ESPNOW_SET_ADD_PEER_MSG1": "encrypt",
    "ESPNOW_SET_ADD_PEER_MSG2": "local master key",
    "ESPNOW_SET_DELETE_PEER_MSG0": "ESP-NOW delete peered ID %1 (1 ~ 20)",
    "ESPNOW_SEND_DATA_MSG0": "ESP-NOW send data peer ID %1 (1 ~ 20)  data %2",
    "ESPNOW_SEND_BROADCAST_DATA_MSG0": "ESP-NOW send broadcast data %1",
    "ESPNOW_SET_PMK_ENCRYPT_MSG0": "ESP-NOW set pmk encryption key %1 (16 bytes)",
    "ESPNOW_GET_PEER_LIST_MSG0": "ESP-NOW get %1 peered device MAC list (return list)",
    "ESPNOW_RECEIVE_DATA_CALLBACK_MSG0": "When ESP-NOW receive data %1 MAC %2 data %3",
    "ESPNOW_GET_TO_BYTES_MSG0": "ESP-NOW get %1 (int or float or list) to bytes (return bytes)",
    "ESPNOW_SET_AP_SSID_MSG0": "ESP-NOW set AP mode ssid %1",
    "ESPNOW_STATS_MSG0": "ESP-NOW get status (return tuple)",
    "NVS_OPEN_MSG0": "",
    "NVS_OPEN_MSG1": "をオープン;名前空間:",
    "NVS_GET_I8_MSG0": "INT8値をキー",
    "NVS_GET_I8_MSG1": "から取得(return -128 ~ 127)",
    "NVS_SET_I8_MSG0": "キー",
    "NVS_SET_I8_MSG1": "をINT8値",
    "NVS_SET_I8_MSG2": "(-128 ~ 127)に設定",
    "NVS_GET_I32_MSG0": "INT32値をキー",
    "NVS_GET_I32_MSG1": "から取得(return -2,147,483,648 ~ 2,147,483,647)",
    "NVS_SET_I32_MSG0": "キー",
    "NVS_SET_I32_MSG1": "をINT32値",
    "NVS_SET_I32_MSG2": "(-2,147,483,648 ~ 2,147,483,647)に設定",
    "NVS_GET_U8_MSG0": "UINT8値をキー",
    "NVS_GET_U8_MSG1": "から取得(return 0 ~ 255)",
    "NVS_SET_U8_MSG0": "キー",
    "NVS_SET_U8_MSG1": "をUINT8値",
    "NVS_SET_U8_MSG2": "(0 ~ 255)に設定",
    "NVS_GET_U16_MSG0": "UINT16値をキー",
    "NVS_GET_U16_MSG1": "から取得(return 0 ~ 65535)",
    "NVS_SET_U16_MSG0": "キー",
    "NVS_SET_U16_MSG1": "をUINT16値",
    "NVS_SET_U16_MSG2": "(0 ~ 65535)に設定",
    "NVS_GET_U32_MSG0": "UINT32値をキー",
    "NVS_GET_U32_MSG1": "から取得(return 0 ~ 4,294,967,295)",
    "NVS_SET_U32_MSG0": "キー",
    "NVS_SET_U32_MSG1": "をUINT32値",
    "NVS_SET_U32_MSG2": "(0 ~ 4,294,967,295)に設定",
    "NVS_GET_STR_MSG0": "文字列を取得;キー",
    "NVS_SET_STR_MSG0": "キー",
    "NVS_SET_STR_MSG1": "を設定;文字列",
    "NVS_GET_BLOB_MSG0": "バイナリblob値を取得;キー",
    "NVS_SET_BLOB_MSG0": "キー",
    "NVS_SET_BLOB_MSG1": "を設定;バイナリblob値",
    "NVS_COMMIT_MSG0": "変更をフラッシュに書き込む",
    "NVS_ERASE_KEY_MSG0": "キーを削除",
    "POWER_SET_EXT_OUTPUT_MSG0": "外部ポートの電力を",
    "POWER_SET_EXT_OUTPUT_MSG1": "モードに設定",
    "POWER_SET_EXT_OUTPUT_PORT_MSG0": "ポートを",
    "POWER_SET_EXT_OUTPUT_PORT_MSG1": "電力出力に設定",
    "POWER_GET_EXT_OUTPUT_MSG0": "外部ポートが出力モードか? (return True or False)",
    "POWER_SET_USB_OUTPUT_MSG0": "USBポートの電力を",
    "POWER_SET_USB_OUTPUT_MSG1": "モードに設定",
    "POWER_GET_USB_OUTPUT_MSG0": "USBポートが出力モードか? (return True or False)",
    "POWER_SET_LED_BRIGHTNESS_MSG0": "電源LEDの輝度を設定:",
    "POWER_SET_LED_BRIGHTNESS_MSG1": "(0 ~ 255)",
    "POWER_SHUT_DOWN_MSG0": "デバイスの電源をオフ",
    "POWER_SET_TIMER_SLEEP_SECOND_MSG0": "デバイスの電源をオフにして",
    "POWER_SET_TIMER_SLEEP_SECOND_MSG1": "(1 ~ 15300) 秒後に起動",
    "POWER_SET_TIMER_SLEEP_HOUR_MSG0": "デバイスの電源をオフにして毎日",
    "POWER_SET_TIMER_SLEEP_HOUR_MSG1": "",
    "POWER_SET_TIMER_SLEEP_HOUR_MSG2": "時 (0 ~ 23)",
    "POWER_SET_TIMER_SLEEP_HOUR_MSG3": "分 (0 ~ 59)に起動",
    "POWER_SET_TIMER_SLEEP_DAY_MSG0": "デバイスの電源をオフにして以下のスケジュールで起動",
    "POWER_SET_TIMER_SLEEP_DAY_MSG1": "週 (0 ~ 6)",
    "POWER_SET_TIMER_SLEEP_DAY_MSG2": "日 (1 ~ 31)",
    "POWER_SET_TIMER_SLEEP_DAY_MSG3": "時 (0 ~ 23)",
    "POWER_SET_TIMER_SLEEP_DAY_MSG4": "分 (0 ~ 59)",
    "POWER_SET_DEEP_SLEEP_MSG0": "deep sleepモードに入り",
    "POWER_SET_DEEP_SLEEP_MSG1": "マイクロ秒後に起動、<touch/click>起動は",
    "POWER_SET_LIGHT_SLEEP_MSG0": "light sleepモードに入り",
    "POWER_SET_LIGHT_SLEEP_MSG1": "マイクロ秒後に起動、<touch/click>起動は",
    "POWER_GET_BATTERY_LEVEL_MSG0": "バッテリーの容量をパーセントで取得(return int)",
    "POWER_SET_BATTERY_CHARGE_MSG0": "バッテリーの充電を",
    "POWER_SET_CHARGE_CURRENT_MSG0": "バッテリーの充電電流を",
    "POWER_SET_CHARGE_CURRENT_MSG1": "(0 ~ 2000) mAに設定",
    "POWER_SET_CHARGE_VOLTAGE_MSG0": "バッテリーの充電電圧を",
    "POWER_SET_CHARGE_VOLTAGE_MSG1": "(4100 ~ 4600) mVに設定",
    "POWER_IS_CHARGING_MSG0": "バッテリーが充電されているか? (return True or False)",
    "POWER_GET_BATTERY_VOLTAGE_MSG0": "バッテリー電圧をミリボルトで取得(return int)",
    "POWER_GET_BATTERY_CURRENT_MSG0": "バッテリー電流を取得 (return int)",
    "POWER_GET_KEY_STATE_MSG0": "power keyの状態を取得 (return int)",
    "POWER_SET_VIBRATION_MSG0": "振動の強さを",
    "POWER_SET_VIBRATION_MSG1": "(0 ~ 255)に設定",
    "POWER_GET_PORT_VBUS_MSG0": "get port",
    "POWER_GET_PORT_VBUS_MSG1": "Vbus in Volt (return float)",
    "POWER_GET_PORT_CURRENT_MSG0": "get port",
    "POWER_GET_PORT_CURRENT_MSG1": "current in mA (return float)",
    "M5BLE_INIT_MSG0": "Init BLE name %1",
    "M5BLE_GET_MTU_MSG0": "BLE get mtu",
    "M5BLE_DEINIT_MSG0": "BLE deinit",
    "M5BLE_CLIENT_GET_SERVICES_MSG0": "BLE client get services (return list)",
    "M5BLE_CLIENT_GET_CHARACTERISTICS_MSG0": "BLE client get characteristics with service UUID",
    "M5BLE_CLIENT_GET_CHARACTERISTICS_MSG1": "(return list)",
    "M5BLE_CLIENT_GET_AVAILABLE_CHAR_MSG0": "BLE client number of bytes available",
    "M5BLE_CLIENT_GET_AVAILABLE_CHAR_MSG1": "characteristic UUID",
    "M5BLE_CLIENT_GET_AVAILABLE_CHAR_MSG2": "service UUID",
    "M5BLE_CLIENT_READ_MSG0": "BLE client read",
    "M5BLE_CLIENT_READ_MSG1": "characteristic UUID",
    "M5BLE_CLIENT_READ_MSG2": "service UUID",
    "M5BLE_CLIENT_READ_MSG3": "bytes",
    "M5BLE_CLIENT_READ_ALL_MSG0": "BLE client read all",
    "M5BLE_CLIENT_READ_ALL_MSG1": "characteristic UUID",
    "M5BLE_CLIENT_READ_ALL_MSG2": "service UUID",
    "M5BLE_CLIENT_SET_MTU_MSG0": "BLE client set the maximum transmission unit",
    "M5BLE_CLIENT_SET_CURRENT_SERVICE_UUID_MSG0": "BLE client set current service UUID",
    "M5BLE_CLIENT_SCAN_MSG0": "BLE client connect on found",
    "M5BLE_CLIENT_SCAN_MSG1": "timeout (ms)",
    "M5BLE_CLIENT_SCAN_MSG2": "automatically connect",
    "M5BLE_CLIENT_SCAN_MSG3": "name prefix",
    "M5BLE_CLIENT_CONNECT_MSG0": "BLE client connect",
    "M5BLE_CLIENT_CONNECT_MSG1": "address type",
    "M5BLE_CLIENT_CONNECT_MSG2": "address",
    "M5BLE_CLIENT_WRITE_MSG0": "BLE client write data",
    "M5BLE_CLIENT_WRITE_MSG1": "characteristic UUID",
    "M5BLE_CLIENT_WRITE_MSG2": "service UUID",
    "M5BLE_CLIENT_CLOSE_MSG0": "BLE client close",
    "M5BLE_CLIENT_ON_CONNECTED_MSG0": "When BLE client on connected",
    "M5BLE_CLIENT_ON_CONNECTED_MSG1": "client",
    "M5BLE_CLIENT_ON_DISCONNECTED_MSG0": "When BLE client on disconnected",
    "M5BLE_CLIENT_ON_DISCONNECTED_MSG1": "client",
    "M5BLE_CLIENT_ON_DISCONNECTED_MSG2": "conn handle",
    "M5BLE_CLIENT_ON_DISCONNECTED_MSG3": "addr type",
    "M5BLE_CLIENT_ON_DISCONNECTED_MSG4": "addr",
    "M5BLE_CLIENT_ON_SERVER_FOUND_MSG0": "When BLE client on server found",
    "M5BLE_CLIENT_ON_SERVER_FOUND_MSG1": "client",
    "M5BLE_CLIENT_ON_SERVER_FOUND_MSG2": "name",
    "M5BLE_CLIENT_ON_SERVER_FOUND_MSG3": "addr type",
    "M5BLE_CLIENT_ON_SERVER_FOUND_MSG4": "addr",
    "M5BLE_CLIENT_ON_SERVER_FOUND_MSG5": "adv type",
    "M5BLE_CLIENT_ON_SERVER_FOUND_MSG6": "rssi",
    "M5BLE_CLIENT_ON_SERVER_FOUND_MSG7": "adv data",
    "M5BLE_CLIENT_ON_SCAN_FINISHED_MSG0": "When BLE client on scan finished",
    "M5BLE_CLIENT_ON_SCAN_FINISHED_MSG1": "client",
    "M5BLE_CLIENT_ON_SCAN_FINISHED_MSG2": "scan result",
    "M5BLE_CLIENT_ON_READ_COMPLETE_MSG0": "When BLE client on read complete",
    "M5BLE_CLIENT_ON_READ_COMPLETE_MSG1": "client",
    "M5BLE_CLIENT_ON_READ_COMPLETE_MSG2": "conn handle",
    "M5BLE_CLIENT_ON_READ_COMPLETE_MSG3": "value handle",
    "M5BLE_CLIENT_ON_READ_COMPLETE_MSG4": "char data",
    "M5BLE_CLIENT_ON_NOTIFY_MSG0": "When BLE client on notify",
    "M5BLE_CLIENT_ON_NOTIFY_MSG1": "client",
    "M5BLE_SERVER_CLEAR_SERVICES_MSG0": "BLE server clear services",
    "M5BLE_SERVER_ADD_SERVICE_MSG0": "BLE server add service",
    "M5BLE_SERVER_ADD_SERVICE_MSG1": "service UUID",
    "M5BLE_SERVER_ADD_SERVICE_MSG2": "characteristics",
    "M5BLE_SERVER_CREATE_CHARACTERISTIC_MSG0": "BLE server create characteristics",
    "M5BLE_SERVER_CREATE_CHARACTERISTIC_MSG1": "characteristic UUID",
    "M5BLE_SERVER_CREATE_CHARACTERISTIC_MSG2": "is readable",
    "M5BLE_SERVER_CREATE_CHARACTERISTIC_MSG3": "can notify",
    "M5BLE_SERVER_CREATE_CHARACTERISTIC_MSG4": "is writable",
    "M5BLE_SERVER_START_MSG0": "BLE server start service interval",
    "M5BLE_SERVER_START_MSG1": "us",
    "M5BLE_SERVER_GET_CLIENT_MSG0": "BLE server get client with index",
    "M5BLE_SERVER_GET_CLIENT_LIST_MSG0": "BLE server get clients (return list)",
    "M5BLE_SERVER_ON_RECEIVE_MSG0": "When BLE server received data",
    "M5BLE_SERVER_ON_RECEIVE_MSG1": "server",
    "M5BLE_SERVER_ON_RECEIVE_MSG2": "connected client handle",
    "M5BLE_SERVER_ON_CONNECTED_MSG0": "When client connected to server",
    "M5BLE_SERVER_ON_CONNECTED_MSG1": "server",
    "M5BLE_SERVER_ON_CONNECTED_MSG2": "connected client handle",
    "M5BLE_SERVER_ON_DISCONNECTED_MSG0": "When client disconnected from server",
    "M5BLE_SERVER_ON_DISCONNECTED_MSG1": "server",
    "M5BLE_SERVER_ON_DISCONNECTED_MSG2": "connected client handle",
    "M5BLE_HANDLE_GET_AVAILABLE_CHAR_MSG0": "number of bytes available with char UUID",
    "M5BLE_HANDLE_CLOSE_MSG0": "close",
    "M5BLE_HANDLE_READ_MSG0": "read",
    "M5BLE_HANDLE_READ_MSG1": "bytes with characteristic UUID",
    "M5BLE_HANDLE_READ_ALL_MSG0": "read all with characteristic UUID",
    "M5BLE_HANDLE_WRITE_MSG0": "write data",
    "M5BLE_HANDLE_WRITE_MSG1": "with characteristic UUID",
    "PLAYER_INIT_MSG0": "Init Player",
    "PLAYER_GET_VOLUME_MSG0": "get Player volume (return 0 ~ 100)",
    "PLAYER_GET_POSITION_MSG0": "get Player current position (return int)",
    "PLAYER_PAUSE_MSG0": "Player pause",
    "PLAYER_STOP_MSG0": "Player stop",
    "PLAYER_RESUME_MSG0": "Player resume",
    "PLAYER_SET_VOLUME_MSG0": "Player set volume %1 (-1 ~ 100)",
    "PLAYER_PLAY_RAW_DATA_MSG0": "Player raw data (bytearray / bytes) %1 sample rate (Hz) %2 stereo %3 bits %4 start playing position (byte) %5 volume (-1 ~ 100) %6 sync %7",
    "PLAYER_PLAY_TONE_MSG0": "Player play tone %1 freq %2 time (second,float) %3 volume (-1 ~ 100) %4 sync %5",
    "PLAYER_PLAY_LOCAL_FILE_MSG0": "Player play local file %1 start playing position (byte) %2 volume (-1 ~ 100) %3 sync %4",
    "PLAYER_PLAY_SDCARD_FILE_MSG0": "Player play SDcard file %1 start playing position (byte) %2 volume (-1 ~ 100) %3 sync %4",
    "PLAYER_PLAY_CLOUD_FILE_MSG0": "Player play cloud file %1 start playing position (byte) %2 volume (-1 ~ 100) %3 sync %4",
    "PLAYER_PLAY_CLOUD_FILE_MSG1": "SSL",
    "PLAYER_PLAY_CLOUD_FILE_MSG2": "cert file",
    "RECORDER_INIT_MSG0": "Init Recorder with %1 sample (8000 ~ 96000 Hz) %2 bits %3 stereo %4",
    "RECORDER_PAUSE_MSG0": "Recorder pause",
    "RECORDER_STOP_MSG0": "Recorder stop",
    "RECORDER_RESUME_MSG0": "Recorder resume",
    "RECORDER_GET_VOLUME_MSG0": "get Recorder volume (return 0 ~ 100)",
    "RECORDER_IS_RECORDING_MSG0": "Recorder is recording (return True or False)",
    "RECORDER_GET_RMS_MSG0": "get Recorder root mean square (dB, return float)",
    "RECORDER_CONFIG_MSG0": "Configure Recorder %1 sample (8000 ~ 96000 Hz) %2 bits %3 stereo %4",
    "RECORDER_RECORD_INTO_MSG0": "Recorder record into buf %1 sync %2",
    "RECORDER_RECORD_LOCAL_FILE_MSG0": "Recorder record local file (amr or wav) %1 time (second) %2 sync %3",
    "RECORDER_RECORD_SDCARD_FILE_MSG0": "Recorder record SDcard file (amr or wav) %1 time (second) %2 sync %3",
    "RECORDER_CREATE_PCM_BUF_MSG0": "create Recorder pcm buf with time %1 (second)",
    "JSON_DUMSP_TO_JSON_MSG0": "dumps",
    "JSON_DUMSP_TO_JSON_MSG1": "to json",
    "JSON_LOADS_JSON_MSG0": "loads json",
    "MAP_CLEAR_MSG0": "マップをクリア",
    "MAP_GET_IN_MSG0": "マップ",
    "MAP_GET_IN_MSG1": "keyを含む",
    "MAP_GET_KEY_MSG0": "keyを取得",
    "MAP_GET_KEY_MSG1": "マップの中に",
    "MAP_ADD_KEY_VALUE_MSG0": "マップの中に",
    "MAP_ADD_KEY_VALUE_MSG1": "keyを加える",
    "MAP_ADD_KEY_VALUE_MSG2": "値",
    "MAP_SET_KEY_VALUE_MSG0": "マップの中に",
    "MAP_SET_KEY_VALUE_MSG1": "keyを設定",
    "MAP_SET_KEY_VALUE_MSG2": "値",
    "MAP_DEL_KEY_MSG0": "マップの中に",
    "MAP_DEL_KEY_MSG1": "keyを削除",
    "TEXT_CONVERT_STR_MSG0": "文字列に変換",
    "TEXT_ADD_STR_MSG0": "+",
    "TEXT_DECODE_STR_MSG0": "デコードする",
    "TEXT_ENCODE_STR_MSG0": "エンコードする",
    "TEXT_REDUCE_FLOAT_MSG0": "",
    "TEXT_REDUCE_FLOAT_MSG1": "を",
    "TEXT_REDUCE_FLOAT_MSG2": "桁に減らす",
    "TEXT_CHR_MSG0": "%1 を文字に変換",
    "TEXT_ORD_MSG0": "%1 をUnicodeに変換",
    "BYTEARRAY_CREATE_EMPTY_MSG0": "空のbytearrayを作成。長さ:",
    "BYTEARRAY_APPEND_MSG0": "Bytearray",
    "BYTEARRAY_APPEND_MSG1": "に追加:",
    "BYTEARRAY_EXTEND_MSG0": "Bytearray",
    "BYTEARRAY_EXTEND_MSG1": "を拡張:",
    "BYTEARRAY_DECODE_MSG0": "Bytearray",
    "BYTEARRAY_DECODE_MSG1": "をdecode:文字コード",
    "BYTES_LIST_TO_BYTES_MSG0": "バイトを作成",
    "BYTES_LIST_TO_BYTES_MSG1": "空のバイトを作成",
    "BYTES_DECODE_MSG0": "バイト %1 を %2 でdecode",
    "MATH_CONVENT_INT_MSG0": "整数に変換",
    "MATH_CONVENT_FLOAT_MSG0": "浮動小数点数(float)に変換",
    "MATH_GET_BIT_MSG0": "",
    "MATH_GET_BIT_MSG1": "ビット目を取得",
    "MATH_SET_BIT_MSG0": "",
    "MATH_SET_BIT_MSG1": "ビット目を設定",
    "MATH_CLEAR_BIT_MSG0": "",
    "MATH_CLEAR_BIT_MSG1": "ビット目をクリア",
    "MATH_REVERSE_BIT_MSG0": "",
    "MATH_REVERSE_BIT_MSG1": "ビット目を反転",
    "MATH_INT_FROM_BYTES_MSG0": "バイトから整数へ",
    "MATH_GET_MAP_MSG0": "マップする %1 元の下限 %2 元の上限 %3 結果の下限 %4 結果の上限 %5",
    "MATH_ROUND_DECIMAL_PLACE_MSG0": "%1 を小数点以下 %2 桁で丸める",
    "LOGIC_TRY_EXCEPT_MSG0": "try",
    "LOGIC_TRY_EXCEPT_MSG1": "except",
    "LOGIC_SWITCH_MSG0": "switch                ",
    "LOGIC_SWITCH_MSG1": "case",
    "LOGIC_SWITCH_MSG2": "default",
    "LOGIC_WHEN_MSG0": "When",
    "LOGIC_WHEN_MSG1": "is change",
    "LOGIC_WHEN_MSG2": "do",
    "LOGIC_WHEN_MSG3": "else",
    "CONTROLS_FOR_RANGE_MSG0": "for %1 in range %2",
    "EZDATA_INIT_MSG0": "Init",
    "EZDATA_INIT_MSG1": "device token",
    "EZDATA_INIT_MSG2": "key",
    "EZDATA_INIT_DATASET_KEY_MSG0": "Init",
    "EZDATA_INIT_DATASET_KEY_MSG1": "dataset",
    "EZDATA_INIT_DATASET_KEY_MSG2": "key",
    "EZDATA_INIT_DATA_TOKEN_MSG0": "Init",
    "EZDATA_INIT_DATA_TOKEN_MSG1": "data token",
    "EZDATA_GET_VALUE_MSG0": "get value",
    "EZDATA_GET_HISTORY_MSG0": "get history record (return list)",
    "EZDATA_SET_VALUE_MSG0": "set value",
    "EZDATA_SET_VALUE_FILE_MSG0": "set value (file)",
    "EZDATA_SAVE_FILE_MSG0": "save file to",
    "EZDATA_DELETE_KEY_MSG0": "delete key",
    "EZDATA_GET_UPDATE_TIME_MSG0": "get update time (return Unix timestamp)",
    "EZDATA_HAS_NEW_DATA_MSG0": "has new data (return True or False)",
    "EZDATA_FOR_EACH_LIST_MSG0": "for each item",
    "EZDATA_FOR_EACH_LIST_MSG1": "in EzData list of device",
    "EZDATA_FOR_EACH_LIST_MSG2": "do",
    "EZDATA_FOR_EACH_GET_KEY_MSG0": "get",
    "EZDATA_FOR_EACH_GET_KEY_MSG1": "key",
    "EZDATA_FOR_EACH_GET_VALUE_MSG0": "get",
    "EZDATA_FOR_EACH_GET_VALUE_MSG1": "value",
    "UI_LCD_SHOW_IMAGE_MSG0": "LCDに画像を表示 %1 %2 x %3 y %4 幅 %5 高さ %6",
    "UI_LCD_GET_WIDTH_MSG0": "get LCD width (return int)",
    "UI_LCD_GET_HEIGHT_MSG0": "get LCD height (return int)",
    "UI_LCD_GET_ROTATION_MSG0": "get LCD current rotation (return int)",
    "UI_LCD_GET_ROTATION_MSG1": "0° rotation",
    "UI_LCD_GET_ROTATION_MSG2": "90° rotation",
    "UI_LCD_GET_ROTATION_MSG3": "180° rotation",
    "UI_LCD_GET_ROTATION_MSG4": "270° rotation",
    "UI_LCD_GET_COLOR_DEPTH_MSG0": "get LCD color depth (return int)",
    "UI_LCD_SET_ROTATION_MSG0": "Set LCD current rotation to %1",
    "UI_LCD_SET_COLOR_DEPTH_MSG0": "Set LCD color depth to %1",
    "UI_LCD_SET_COLOR_DEPTH_MSG1": "Notes: For CoreS3 devices, the color depth is fixed at 16 bits, and this method has no effect.",
    "UI_LCD_SET_FONT_MSG0": "Set LCD font to %1",
    "UI_LCD_SET_TEXT_COLOR_MSG0": "Set LCD text color to %1 background color to %2",
    "UI_LCD_SET_TEXT_SCROLL_MSG0": "Set LCD text scrolling to %1",
    "UI_LCD_SET_TEXT_SIZE_MSG0": "Set LCD text size to %1",
    "UI_LCD_SET_CURSOR_MSG0": "Set LCD cursor x %1 y %2",
    "UI_LCD_DRAW_PIXEL_MSG0": "LCD draw pixel with x %1 y %2 color %3",
    "UI_LCD_DRAW_CIRCLE_MSG0": "LCD %1 circle with x %2 y %3 radius %4 color %5",
    "UI_LCD_DRAW_ELLIPSE_MSG0": "LCD %1 ellipse with x %2 y %3 horizontal semi-axis %4 vertical semi-axis %5 color %6",
    "UI_LCD_DRAW_LINE_MSG0": "LCD draw line with x0 %1 y0 %2 x1 %3 y1 %4 color %5",
    "UI_LCD_DRAW_RECT_MSG0": "LCD %1 rect with x %2 y %3 width %4 height %5 color %6",
    "UI_LCD_DRAW_ROUND_RECT_MSG0": "LCD %1 round rect with x %2 y %3 width %4 height %5 radius %6 color %7",
    "UI_LCD_DRAW_TRIANGLE_MSG0": "LCD %1 triangle with x0 %2 y0 %3 x1 %4 y1 %5 x2 %6 y2 %7 color %8",
    "UI_LCD_DRAW_ARC_MSG0": "LCD %1 arc with %2 coordinate %3 inner radius %4 outer radius %5 angle %6 color %7",
    "UI_LCD_DRAW_ELLIPTICAL_ARC_MSG0": "LCD %1 elliptical arc with %2 coordinate %3 inner radius %4 outer radius %5 angle %6 color %7",
    "UI_LCD_CONFIG_COORDINATE_MSG0": "x",
    "UI_LCD_CONFIG_COORDINATE_MSG1": "y",
    "UI_LCD_CONFIG_SIZE_MSG0": "width",
    "UI_LCD_CONFIG_SIZE_MSG1": "height",
    "UI_LCD_CONFIG_H_V_MSG0": "horizontal",
    "UI_LCD_CONFIG_H_V_MSG1": "vertical",
    "UI_LCD_CONFIG_ANGLE_MSG0": "start",
    "UI_LCD_CONFIG_ANGLE_MSG1": "end",
    "UI_LCD_FILL_SCREEN_MSG0": "LCD fill color %1",
    "UI_LCD_CLEAR_MSG0": "LCD clear with color %1",
    "UI_LCD_START_WRITE_MSG0": "LCD start writing",
    "UI_LCD_END_WRITE_MSG0": "LCD end writing",
    "UI_LCD_PRINT_MSG0": "LCD display string %1 with color %2",
    "UI_LCD_PRINTF_MSG0": "LCD display formatted string %1",
    "UI_LCD_DRAW_QR_MSG0": "LCD draw QR code with text %1 x %2 y %3 width %4 version %5",
    "UI_LCD_DRAW_PNG_MSG0": "LCD draw png with image %1 coordinate %2 max size %3 offset %4 scale %5",
    "UI_LCD_DRAW_RAW_BUF_MSG0": "LCD draw image with raw buffer data %1 coordinate %2 size %3 image data length %4 inverted %5",
    "UI_LCD_CREATE_CANVAS_MSG0": "LCD create canvas with width %1 height %2 color depth %3 use PSRAM %4",
    "UI_LCD_SET_EPD_MODE_MSG0": "Set LCD EPD refresh mode to %1",
    "UI_LCD_IS_EPD_MSG0": "LCD is EPD panel",
    "UI_LCD_DRAW_IMAGE_MSG0": "LCD draw image with local image %1 coordinate %2 max size %3 offset %4 scale %5",
    "UI_LCD_DRAW_IMAGE2_MSG0": "LCD draw image with local image %1 coordinate %2",
    "UI_LCD_DRAW_IMAGE_SDCARD_MSG0": "LCD draw image with SDcard image %1 coordinate %2 max size %3 offset %4 scale %5",
    "UI_LCD_DRAW_IMAGE_SDCARD2_MSG0": "LCD draw image with SDcard image %1 coordinate %2",
    "UI_LCD_DRAW_OPTION_MSG0": "draw",
    "UI_LCD_DRAW_OPTION_MSG1": "fill",
    "SET_SCREEN_COLOR_MSG0": "画面の背景色を設定",
    "SET_SCREEN_ROTATION_MSG0": "画面の向きを設定",
    "SET_SCREEN_BRIGHTNESS_MSG0": "画面の輝度を設定",
    "SET_SCREEN_BRIGHTNESS_MSG1": "(0 ~ 255)",
    "SET_SCREEN_COLOR_MULTIPLE_MSG0": "画面の背景色を設定",
    "TITLE_SET_COLOR_MSG0": "Set",
    "TITLE_SET_COLOR_MSG1": "text color",
    "TITLE_SET_COLOR_MSG2": "background color",
    "TITLE_SET_TEXT_MSG0": "設定",
    "TITLE_SET_TEXT_MSG1": "テキスト",
    "TITLE_SET_TEXT_POSITION_MSG0": "設定",
    "TITLE_SET_TEXT_POSITION_MSG1": "テキストのx座標",
    "TITLE_SET_VISIBLE_MSG0": "設定",
    "TITLE_SET_COLOR_MULTIPLE_MSG0": "設定",
    "TITLE_SET_COLOR_MULTIPLE_MSG1": "テキストの色",
    "TITLE_SET_COLOR_MULTIPLE_MSG2": "背景の色",
    "LABEL_SET_SIZE_MSG0": "",
    "LABEL_SET_SIZE_MSG1": "を設定:大きさ",
    "LABEL_SET_TEXT_MSG0": "",
    "LABEL_SET_TEXT_MSG1": "を設定:テキスト",
    "LABEL_SET_COLOR_MSG0": "",
    "LABEL_SET_COLOR_MSG1": "を設定:色",
    "LABEL_SET_POSITION_MSG0": "",
    "LABEL_SET_POSITION_MSG1": "を設定:x",
    "LABEL_SET_POSITION_MSG2": "y",
    "LABEL_SET_VISIBLE_MSG0": "表示状態:",
    "LABEL_SET_FONT_MSG0": "",
    "LABEL_SET_FONT_MSG1": "を設定:フォント",
    "LABEL_SET_COLOR_MULTIPLE_MSG0": "",
    "LABEL_SET_COLOR_MULTIPLE_MSG1": "を設定:テキストの色",
    "LABEL_SET_COLOR_MULTIPLE_MSG2": "背景の色",
    "LABEL_PLUS_SET_SIZE_MSG0": "",
    "LABEL_PLUS_SET_SIZE_MSG1": "を設定:大きさ",
    "LABEL_PLUS_SET_TEXT_MSG0": "",
    "LABEL_PLUS_SET_TEXT_MSG1": "を設定:テキスト",
    "LABEL_PLUS_SET_POSITION_MSG0": "",
    "LABEL_PLUS_SET_POSITION_MSG1": "を設定:x",
    "LABEL_PLUS_SET_POSITION_MSG2": "y",
    "LABEL_PLUS_SET_VISIBLE_MSG0": "表示状態:",
    "LABEL_PLUS_SET_FONT_MSG0": "",
    "LABEL_PLUS_SET_FONT_MSG1": "を設定:フォント",
    "LABEL_PLUS_SET_COLOR_MULTIPLE_MSG0": "",
    "LABEL_PLUS_SET_COLOR_MULTIPLE_MSG1": "を設定:テキストの色",
    "LABEL_PLUS_SET_COLOR_MULTIPLE_MSG2": "背景の色",
    "LABEL_PLUS_UPDATE_ENABLE_MSG0": "",
    "LABEL_PLUS_UPDATE_ENABLE_MSG1": "更新は可能か",
    "LABEL_PLUS_UPDATE_PERIOD_MSG0": "",
    "LABEL_PLUS_UPDATE_PERIOD_MSG1": "更新間隔",
    "LABEL_PLUS_IS_VALID_DATA_MSG0": "",
    "LABEL_PLUS_IS_VALID_DATA_MSG1": "が有効なデータか",
    "LABEL_PLUS_GET_DATA_MSG0": "",
    "LABEL_PLUS_GET_DATA_MSG1": "画面データを取得",
    "RECT_SET_COLOR_MSG0": "",
    "RECT_SET_COLOR_MSG1": "を設定:枠の色",
    "RECT_SET_COLOR_MSG2": "背景色",
    "RECT_SET_POSITION_MSG0": "",
    "RECT_SET_POSITION_MSG1": "を設定:x",
    "RECT_SET_POSITION_MSG2": "y",
    "RECT_SET_SIZE_MSG0": "",
    "RECT_SET_SIZE_MSG1": "を設定:幅",
    "RECT_SET_SIZE_MSG2": "高さ",
    "RECT_SET_VISIBLE_MSG0": "表示状態:",
    "RECT_SET_COLOR_MULTIPLE_MSG0": "",
    "RECT_SET_COLOR_MULTIPLE_MSG1": "を設定:枠の色",
    "RECT_SET_COLOR_MULTIPLE_MSG2": "塗りつぶしの色",
    "CIRCLE_SET_COLOR_MSG0": "",
    "CIRCLE_SET_COLOR_MSG1": "を設定:枠の色",
    "CIRCLE_SET_COLOR_MSG2": "背景色",
    "CIRCLE_SET_POSITION_MSG0": "",
    "CIRCLE_SET_POSITION_MSG1": "を設定:x",
    "CIRCLE_SET_POSITION_MSG2": "y",
    "CIRCLE_SET_RADIUS_MSG0": "",
    "CIRCLE_SET_RADIUS_MSG1": "を設定:半径",
    "CIRCLE_SET_VISIBLE_MSG0": "表示状態:",
    "CIRCLE_SET_COLOR_MULTIPLE_MSG0": "",
    "CIRCLE_SET_COLOR_MULTIPLE_MSG1": "を設定:枠の色",
    "CIRCLE_SET_COLOR_MULTIPLE_MSG2": "塗りつぶしの色",
    "IMAGE_SET_POSITION_MSG0": "",
    "IMAGE_SET_POSITION_MSG1": "を設定:x",
    "IMAGE_SET_POSITION_MSG2": "y",
    "IMAGE_SET_FILE_PATH_MSG0": "",
    "IMAGE_SET_FILE_PATH_MSG1": "を設定:画像",
    "IMAGE_SET_VISIBLE_MSG0": "表示状態:",
    "IMAGE_SET_FILE_NAME_MSG0": "",
    "IMAGE_SET_FILE_NAME_MSG1": "を設定:画像",
    "IMAGE_SET_SCALE_MSG0": "Set %1 scale x %2 (0.1~10.0) and scale y %3 (0.1~10.0)",
    "IMAGE_SET_FILE_NAME_SDCARD_MSG0": "Set %1 SDcard image %2",
    "IMAGE_PLUS_SET_POSITION_MSG0": "",
    "IMAGE_PLUS_SET_POSITION_MSG1": "を設定:x",
    "IMAGE_PLUS_SET_POSITION_MSG2": "y",
    "IMAGE_PLUS_SET_VISIBLE_MSG0": "表示状態:",
    "IMAGE_PLUS_UPDATE_ENABLE_MSG0": "",
    "IMAGE_PLUS_UPDATE_ENABLE_MSG1": "更新可能か",
    "IMAGE_PLUS_UPDATE_PERIOD_MSG0": "",
    "IMAGE_PLUS_UPDATE_PERIOD_MSG1": "更新間隔",
    "IMAGE_PLUS_IS_VALID_IMAGE_MSG0": "",
    "IMAGE_PLUS_IS_VALID_IMAGE_MSG1": "が有効な画像か?",
    "CAMERA_IMAGE_DISP_TO_LCD_MSG0": "カメラ画像を画面に表示",
    "CAMERA_IMAGE_CAPTURE_TO_JPG_MSG0": "品質",
    "CAMERA_IMAGE_CAPTURE_TO_JPG_MSG1": "(1 ~ 100)のカメラJPG画像(return bytes)",
    "CAMERA_IMAGE_CAPTURE_TO_BMP_MSG0": "カメラbmp画像を取得(return bytes)",
    "CAMERA_IMAGE_DEINIT_MSG0": "カメラdeinit",
    "CAMERA_IMAGE_SET_CONTRAST_MSG0": "カメラのコントラストを",
    "CAMERA_IMAGE_SET_CONTRAST_MSG1": "(-2 ~ 2)に設定",
    "CAMERA_IMAGE_SET_HMIRROR_MSG0": "カメラの水平方向のミラー状態を設定",
    "CAMERA_IMAGE_SET_GLOBAL_GAIN_MSG0": "カメラのグローバルゲインを",
    "CAMERA_IMAGE_SET_GLOBAL_GAIN_MSG1": "(0x0 ~ 0x3F)に設定",
    "CAMERA_IMAGE_SET_VFLIP_MSG0": "カメラの垂直方向の反転状態を設定",
    "CAMERA_IMAGE_SET_COLORBAR_MSG0": "カメラにカラーバーを設定",
    "CAMERA_IMAGE_SET_POSITION_MSG0": "カメラを設定",
    "CAMERA_IMAGE_SET_POSITION_MSG1": "x",
    "CAMERA_IMAGE_SET_POSITION_MSG2": "y",
    "CAMERA_IMAGE_SET_POSITION_MSG3": "最大幅",
    "CAMERA_IMAGE_SET_POSITION_MSG4": "最大高さ",
    "CAMERA_IMAGE_SET_VISIBLE_MSG0": "カメラ",
    "TRIANGLE_SET_COLOR_MSG0": "",
    "TRIANGLE_SET_COLOR_MSG1": "を設定:枠の色",
    "TRIANGLE_SET_COLOR_MSG2": "背景色",
    "TRIANGLE_SET_VISIBLE_MSG0": "表示状態:",
    "TRIANGLE_SET_POINTS_MSG0": "",
    "TRIANGLE_SET_POINTS_MSG1": "を設定:x0",
    "TRIANGLE_SET_POINTS_MSG2": "y0",
    "TRIANGLE_SET_POINTS_MSG3": "x1",
    "TRIANGLE_SET_POINTS_MSG4": "y1",
    "TRIANGLE_SET_POINTS_MSG5": "x2",
    "TRIANGLE_SET_POINTS_MSG6": "y2",
    "TRIANGLE_SET_COLOR_MULTIPLE_MSG0": "",
    "TRIANGLE_SET_COLOR_MULTIPLE_MSG1": "を設定:枠の色",
    "TRIANGLE_SET_COLOR_MULTIPLE_MSG2": "塗りつぶしの色",
    "LINE_SET_COLOR_MSG0": "",
    "LINE_SET_COLOR_MSG1": "を設定:色",
    "LINE_SET_VISIBLE_MSG0": "表示状態:",
    "LINE_SET_POINTS_MSG0": "",
    "LINE_SET_POINTS_MSG1": "を設定:x0",
    "LINE_SET_POINTS_MSG2": "y0",
    "LINE_SET_POINTS_MSG3": "x1",
    "LINE_SET_POINTS_MSG4": "y1",
    "LINE_SET_COLOR_MULTIPLE_MSG0": "",
    "LINE_SET_COLOR_MULTIPLE_MSG1": "を設定:色",
    "PIN_INIT_MSG0": "初期化",
    "PIN_INIT_MSG1": "モード",
    "PIN_INIT_MSG2": "プルアップ",
    "PIN_ON_MSG0": "オン",
    "PIN_OFF_MSG0": "オフ",
    "PIN_SET_VALUE_MSG0": "",
    "PIN_SET_VALUE_MSG1": "値",
    "PIN_SET_VALUE_MSG2": "(0 or 1)で設定",
    "PIN_GET_VALUE_MSG0": "",
    "PIN_GET_VALUE_MSG1": "の値",
    "PIN_INIT_INPUT_MSG0": "ピンを初期化",
    "PIN_UNUSED_MSG0": "ピンが使われていない",
    "ADC_INIT_MSG0": "初期化",
    "ADC_INIT_MSG1": "入力減衰率",
    "ADC_SET_ATTEN_MSG0": "設定:",
    "ADC_SET_ATTEN_MSG1": "入力減衰率",
    "ADC_SET_WIDTH_MSG0": "設定:",
    "ADC_SET_WIDTH_MSG1": "解像度",
    "ADC_READ_MSG0": "読み取り:",
    "ADC_READ_U16_MSG0": "",
    "ADC_READ_U16_MSG1": "u16で読み取り",
    "ADC_READ_UV_MSG0": "",
    "ADC_READ_UV_MSG1": "マイクロVで読み取り",
    "ADC_INIT_INPUT_MSG0": "初期化:ピン",
    "PWM_INIT_MSG0": "初期化:ピン",
    "PWM_INIT_MSG1": "周波数",
    "PWM_SET_DUTY_MSG0": "",
    "PWM_SET_DUTY_MSG1": "デューティ",
    "PWM_SET_DUTY_MSG2": "(0 ~ 1023)に設定",
    "PWM_SET_DUTY_U16_MSG0": "",
    "PWM_SET_DUTY_U16_MSG1": "デューティをu16",
    "PWM_SET_DUTY_U16_MSG2": "(0 ~ 65536)に設定",
    "PWM_SET_FREQ_MSG0": "",
    "PWM_SET_FREQ_MSG1": "周波数",
    "PWM_SET_FREQ_MSG2": "(1 ~ 40000000)Hzに設定",
    "PWM_GET_FREQ_MSG0": "",
    "PWM_GET_FREQ_MSG1": "周波数を取得",
    "PWM_GET_DUTY_MSG0": "",
    "PWM_GET_DUTY_MSG1": "デューティを取得",
    "PWM_GET_DUTY_U16_MSG0": "",
    "PWM_GET_DUTY_U16_MSG1": "デューティをu16で取得",
    "PWM_DEINIT_MSG0": "deinit",
    "PWM_INIT_INPUT_MSG0": "初期化:ピン",
    "PWM_INIT_INPUT_MSG1": "周波数",
    "PWM_INIT_INPUT_MSG2": "Hz (1 ~ 40000000)、デューティ",
    "PWM_INIT_INPUT_MSG3": "(0 ~ 1023)",
    "PWM_INIT_INPUT_MSG4": "(0 ~ 65536)",
    "BUTTON_IS_HOLDING_MSG0": "が押され続けている",
    "BUTTON_IS_PRESSED_MSG0": "が押されている",
    "BUTTON_IS_RELEASED_MSG0": "が離されている",
    "BUTTON_WAS_CLICKED_MSG0": "がクリックされた",
    "BUTTON_WAS_DOUBLE_CLICKED_MSG0": "がダブルクリックされた",
    "BUTTON_WAS_HOLD_MSG0": "が押され続けた",
    "BUTTON_WAS_PRESSED_MSG0": "が押された",
    "BUTTON_WAS_RELEASED_MSG0": "が離された",
    "BUTTON_WAS_SINGLE_CLICKED_MSG0": "が1度クリックされた",
    "BUTTON_CALLBACK_MSG0": "ボタン",
    "BUTTON_CALLBACK_MSG1": "が",
    "BUTTON_INIT_MSG0": "ボタン初期化:(pin)",
    "BUTTON_INIT_MSG1": "モード",
    "BUTTON_INIT_MSG2": "プルアップ",
    "BUTTON_TICK_MSG0": "ループ内で更新",
    "PIN_BUTTON_IS_HOLDING_MSG0": "が押され続けた",
    "PIN_BUTTON_IS_PRESSED_MSG0": "が押された",
    "PIN_BUTTON_IS_RELEASED_MSG0": "が離された",
    "PIN_BUTTON_WAS_CLICKED_MSG0": "がクリックされた",
    "PIN_BUTTON_WAS_DOUBLE_CLICKED_MSG0": "がダブルクリックされた",
    "PIN_BUTTON_CALLBACK_MSG0": "ボタン",
    "PIN_BUTTON_CALLBACK_MSG1": "が",
    "PIN_BUTTON_INIT_MSG0": "ボタン初期化:(pin)",
    "PIN_BUTTON_INIT_MSG1": "モード",
    "PIN_BUTTON_INIT_MSG2": "プルアップ",
    "PIN_BUTTON_TICK_MSG0": "ループ内で更新",
    "PIN_BUTTON_WAS_HOLD_MSG0": "が押され続けた",
    "PIN_BUTTON_WAS_PRESSED_MSG0": "が押された",
    "PIN_BUTTON_WAS_RELEASED_MSG0": "が離された",
    "PIN_BUTTON_WAS_SINGLE_CLICKED_MSG0": "が1度クリックされた",
    "UART_INIT_MSG0": "UART",
    "UART_INIT_MSG1": "を初期化",
    "UART_INIT_MSG2": "ボーレート",
    "UART_INIT_MSG3": "ビット",
    "UART_INIT_MSG4": "パリティ",
    "UART_INIT_MSG5": "ストップビット",
    "UART_INIT_MSG6": "TXピン",
    "UART_INIT_MSG7": "RXピン",
    "UART_INIT_MSG8": "RTS",
    "UART_INIT_MSG9": "CTS",
    "UART_INIT_MSG10": "TX buffer",
    "UART_INIT_MSG11": "RX buffer",
    "UART_INIT_MSG12": "timeout",
    "UART_INIT_MSG13": "timeout char",
    "UART_INIT_MSG14": "invert",
    "UART_INIT_MSG15": "flow",
    "UART_INIT_MSG16": "mode",
    "UART_INIT_SETUP_MSG0": "UART",
    "UART_INIT_SETUP_MSG1": "の設定",
    "UART_DEINIT_MSG0": "UART",
    "UART_DEINIT_MSG1": "deinit",
    "UART_AVAILABLE_CHAR_MSG0": "UART",
    "UART_AVAILABLE_CHAR_MSG1": "の読み込み可能なデータ数",
    "UART_READ_ALL_MSG0": "UART",
    "UART_READ_ALL_MSG1": "から全て読み込み",
    "UART_READ_BYTES_MSG0": "UART",
    "UART_READ_BYTES_MSG1": "から",
    "UART_READ_BYTES_MSG2": "バイト読み込み",
    "UART_READ_LINE_MSG0": "UART",
    "UART_READ_LINE_MSG1": "から一行読み込み",
    "UART_READ_RAW_DATA_MSG0": "UART",
    "UART_READ_RAW_DATA_MSG1": "から生データ(0 ~ 255)読み込み",
    "UART_WRITE_MSG0": "UART",
    "UART_WRITE_MSG1": "に書き込み:",
    "UART_WRITE_LINE_MSG0": "UART",
    "UART_WRITE_LINE_MSG1": "に一行書き込み:",
    "UART_WRITE_VAR_MSG0": "UART",
    "UART_WRITE_VAR_MSG1": "に書き込み:",
    "UART_WRITE_LIST_TUPLE_MSG0": "UART",
    "UART_WRITE_LIST_TUPLE_MSG1": "にリストかtupleを書き込み:",
    "UART_WRITE_LIST_MSG0": "UART",
    "UART_WRITE_LIST_MSG1": "に生データを書き込み:",
    "UART_READ_INTO_MSG0": "UART",
    "UART_READ_INTO_MSG1": "からバッファへ読み込み",
    "UART_READ_BYTES_INTO_MSG0": "UART",
    "UART_READ_BYTES_INTO_MSG1": "から",
    "UART_READ_BYTES_INTO_MSG2": "バイトバッファに読み込み",
    "UART_SET_READ_INTO_MSG0": "UART",
    "UART_SET_READ_INTO_MSG1": "からバッファに読み込み",
    "UART_SET_READ_BYTES_INTO_MSG0": "UART",
    "UART_SET_READ_BYTES_INTO_MSG1": "から",
    "UART_SET_READ_BYTES_INTO_MSG2": "バイトをバッファに読み込み:",
    "UART_SEND_BREAK_MSG0": "UART %1 send break single",
    "UART_FLUSH_MSG0": "UART %1 flush",
    "UART_TXDONE_MSG0": "UART %1 is transfer done (return True or False)",
    "IMU_GET_ACCEL_MSG0": "IMUの加速度値を取得(return tuple)",
    "IMU_GET_GYRO_MSG0": "IMUのジャイロ値を取得(return tuple)",
    "IMU_GET_MAG_MSG0": "IMUの地磁気の値を取得(return tuple)",
    "IMU_GET_ACCEL_VAR_MSG0": "IMUの加速度をX",
    "IMU_GET_ACCEL_VAR_MSG1": "Y",
    "IMU_GET_ACCEL_VAR_MSG2": "Z",
    "IMU_GET_ACCEL_VAR_MSG3": "で取得",
    "IMU_GET_GYRO_VAR_MSG0": "IMUのジャイロをX",
    "IMU_GET_GYRO_VAR_MSG1": "Y",
    "IMU_GET_GYRO_VAR_MSG2": "Z",
    "IMU_GET_GYRO_VAR_MSG3": "で取得",
    "IMU_GET_MAG_VAR_MSG0": "IMUの地磁気をX",
    "IMU_GET_MAG_VAR_MSG1": "Y",
    "IMU_GET_MAG_VAR_MSG2": "Z",
    "IMU_GET_MAG_VAR_MSG3": "で取得",
    "RGB_INIT_MSG0": "RGBの初期化",
    "RGB_SET_INDEX_COLOR_MSG0": "",
    "RGB_SET_INDEX_COLOR_MSG1": "番目の色を全て同じに設定:色",
    "RGB_FILL_COLOR_MSG0": "を全て設定:色",
    "RGB_SET_BRIGHTNESS_MSG0": "輝度を設定",
    "RGB_SET_BRIGHTNESS_MSG1": "% (0 ~ 100)",
    "RGB_SET_PORT_COLOR_MSG0": "set",
    "RGB_SET_PORT_COLOR_MSG1": "LED color",
    "RGB_ATOM_MATRIX_COLOR_MSG0": "set Atom Matrix",
    "I2C_INIT_MSG0": "",
    "I2C_INIT_MSG1": "初期化:SCL",
    "I2C_INIT_MSG2": "SDA",
    "I2C_INIT_MSG3": "freq",
    "I2C_SCAN_MSG0": "デバイスをスキャン(return 7-bit address list)",
    "I2C_START_MSG0": "START状態を生成",
    "I2C_STOP_MSG0": "STOP状態を生成",
    "I2C_READINTO_MSG0": "バッファから読み込み",
    "I2C_READINTO_MSG1": "NACK",
    "I2C_READFROM_MSG0": "アドレス",
    "I2C_READFROM_MSG1": "から",
    "I2C_READFROM_MSG2": "バイト、STOP",
    "I2C_READFROM_MSG3": "で読み込み(return bytes)",
    "I2C_READFROM_INTO_MSG0": "アドレス",
    "I2C_READFROM_INTO_MSG1": "からバッファ",
    "I2C_READFROM_INTO_MSG2": "へ読み込み:STOP",
    "I2C_READFROM_MEM_MSG0": "アドレス",
    "I2C_READFROM_MEM_MSG1": "メモリアドレス",
    "I2C_READFROM_MEM_MSG2": "から",
    "I2C_READFROM_MEM_MSG3": "バイト読み込み(return bytes)",
    "I2C_READFROM_MEM_INTO_MSG0": "アドレス",
    "I2C_READFROM_MEM_INTO_MSG1": "メモリアドレス",
    "I2C_READFROM_MEM_INTO_MSG2": "から読み込み:バッファー",
    "I2C_WRITE_RETURN_MSG0": "バッファー",
    "I2C_WRITE_RETURN_MSG1": "に書き込み(return nbytes written)",
    "I2C_WRITE_MSG0": "バッファに書き込み",
    "I2C_WRITETO_MSG0": "バッファ",
    "I2C_WRITETO_MSG1": "アドレス",
    "I2C_WRITETO_MSG2": "に書き込み:STOP",
    "I2C_WRITETO_RETURN_MSG0": "バッファ",
    "I2C_WRITETO_RETURN_MSG1": "アドレス",
    "I2C_WRITETO_RETURN_MSG2": "STOP",
    "I2C_WRITETO_RETURN_MSG3": "で書き込み(return nbytes written)",
    "I2C_WRITETO_MEM_MSG0": "バッファ",
    "I2C_WRITETO_MEM_MSG1": "アドレス",
    "I2C_WRITETO_MEM_MSG2": "に書き込み:メモリアドレス",
    "SPEAKER_STOP_MSG0": "スピーカーの実行を停止",
    "SPEAKER_TONE_MSG0": "スピーカーでトーンを周波数",
    "SPEAKER_TONE_MSG1": "で以下の時間(ミリ秒)鳴らす",
    "SPEAKER_PLAYWAV_MSG0": "スピーカーでWAV(bytearray / bytes)を鳴らす:データ",
    "SPEAKER_GET_VOLUME_MSG0": "スピーカーのボリュームを取得(return 0~255)",
    "SPEAKER_SET_VOLUME_MSG0": "スピーカーのボリュームを",
    "SPEAKER_SET_VOLUME_MSG1": "(0 ~ 255)に設定",
    "SPEAKER_GET_CONFIG_MSG0": "スピーカーの設定",
    "SPEAKER_GET_CONFIG_MSG1": "を取得(return int)",
    "SPEAKER_GET_CONFIG_RETURN_BOOLEAN_MSG0": "スピーカーの設定",
    "SPEAKER_GET_CONFIG_RETURN_BOOLEAN_MSG1": "を取得(return True or False)",
    "SPEAKER_SET_CONFIG_MSG0": "スピーカーの",
    "SPEAKER_SET_CONFIG_MSG1": "を設定:",
    "SPEAKER_SET_CONFIG_BOOLEAN_MSG0": "スピーカーの",
    "SPEAKER_SET_CONFIG_BOOLEAN_MSG1": "を設定:",
    "SPEAKER_USER_CONFIG_MSG0": "スピーカーの設定",
    "SPEAKER_USER_CONFIG_MSG1": "Dataピン",
    "SPEAKER_USER_CONFIG_MSG2": "Dataピン",
    "SPEAKER_USER_CONFIG_MSG3": "BCKピン",
    "SPEAKER_USER_CONFIG_MSG4": "WSピン",
    "SPEAKER_USER_CONFIG_MSG5": "サンプリングレート(Hz)",
    "SPEAKER_USER_CONFIG_MSG6": "ステレオ",
    "SPEAKER_USER_CONFIG_MSG7": "DMAバッファーの長さ",
    "SPEAKER_USER_CONFIG_MSG8": "DMAバッファーの数",
    "SPEAKER_USER_CONFIG_MSG9": "タスクの優先度",
    "SPEAKER_USER_CONFIG_MSG10": "タスクがコアに割り当てられているか",
    "SPEAKER_USER_CONFIG_MSG11": "I2Sポート",
    "SPEAKER_BEGIN_MSG0": "スピーカーを開始",
    "SPEAKER_BEGIN_RETURN_MSG0": "スピーカーが開始されているか(return True or False)",
    "SPEAKER_END_MSG0": "スピーカーを終了",
    "SPEAKER_IS_RUNNING_MSG0": "スピーカーが実行されているか",
    "SPEAKER_IS_ENABLED_MSG0": "スピーカーが有効になっているか",
    "SPEAKER_IS_PLAYING_MSG0": "スピーカーが鳴らされているか",
    "SPEAKER_GET_PLAYING_CHANNELS_MSG0": "スピーカーの鳴らされているチャンネルを取得(return int)",
    "SPEAKER_SET_VOLUME_PERCENTAGE_MSG0": "スピーカーのボリュームを",
    "SPEAKER_SET_VOLUME_PERCENTAGE_MSG1": "%に設定",
    "SPEAKER_GET_VOLUME_PERCENTAGE_MSG0": "スピーカーのボリュームをパーセントで取得(return float)",
    "SPEAKER_SET_ALL_CHANNEL_VOLUME_MSG0": "スピーカーの全てのチャンネルのボリュームを",
    "SPEAKER_SET_ALL_CHANNEL_VOLUME_MSG1": "(0 ~ 255)に設定",
    "SPEAKER_SET_CHANNEL_VOLUME_MSG0": "スピーカーのチャンネル",
    "SPEAKER_SET_CHANNEL_VOLUME_MSG1": "をボリューム",
    "SPEAKER_SET_CHANNEL_VOLUME_MSG2": "(0 ~ 255)に設定",
    "SPEAKER_GET_CHANNEL_VOLUME_MSG0": "スピーカーのチャンネル",
    "SPEAKER_GET_CHANNEL_VOLUME_MSG1": "のボリュームを取得(return int)",
    "SPEAKER_PLAY_RAW_MSG0": "スピーカーでPCM(bytearray / bytes)",
    "SPEAKER_PLAY_RAW_MSG1": "を以下のサンプリングレート(Hz)で鳴らす:データ",
    "SPEAKER_PLAY_RAW_RETURN_MSG0": "スピーカーでPCM(bytearray / bytes)",
    "SPEAKER_PLAY_RAW_RETURN_MSG1": "をサンプリングレート",
    "SPEAKER_PLAY_RAW_RETURN_MSG2": "(Hz)で鳴らす(return True or False)",
    "SPEAKER_PLAYWAV_FILE_MSG0": "Speaker play WAV file %1 %2",
    "TIMER_INIT_MSG0": "新規",
    "TIMER_SET_MODE_MSG0": "モード",
    "TIMER_SET_MODE_MSG1": "期間",
    "TIMER_SET_MODE_MSG2": "ミリ秒",
    "TIMER_DEINIT_MSG0": "deinit",
    "TIMER_CALLBACK_MSG0": "タイマーが呼び出された時",
    "DISPLAY_CONFIG_MSG0": "User Displayの設定",
    "DISPLAY_CONFIG_MSG1": "種類",
    "DISPLAY_CONFIG_MSG2": "解像度",
    "DISPLAY_CONFIG_MSG3": "色",
    "DISPLAY_CONFIG_MSG4": "SPIバス",
    "DISPLAY_CONFIG_MSG5": "ピンの設定",
    "DISPLAY_CONFIG_MSG6": "バックライト",
    "DISPLAY_CONFIG_RESOLUTION_MSG0": "幅",
    "DISPLAY_CONFIG_RESOLUTION_MSG1": "高さ",
    "DISPLAY_CONFIG_RESOLUTION_MSG2": "offset x",
    "DISPLAY_CONFIG_RESOLUTION_MSG3": "offset y",
    "DISPLAY_CONFIG_COLOR_ORDER_MSG0": "反転",
    "DISPLAY_CONFIG_COLOR_ORDER_MSG1": "RGBの順番",
    "DISPLAY_CONFIG_SPI_BUS_MSG0": "SPIホストID",
    "DISPLAY_CONFIG_SPI_BUS_MSG1": "SPI周波数",
    "DISPLAY_CONFIG_SPI_BUS_MSG2": "sclk",
    "DISPLAY_CONFIG_SPI_BUS_MSG3": "mosi",
    "DISPLAY_CONFIG_SPI_BUS_MSG4": "miso",
    "DISPLAY_CONFIG_SPI_BUS_MSG5": "dc",
    "DISPLAY_CONFIG_SPI_BUS_MSG6": "cs",
    "DISPLAY_CONFIG_SPI_BUS_MSG7": "rst",
    "DISPLAY_CONFIG_SPI_BUS_MSG8": "busy",
    "DISPLAY_CONFIG_BACKLIGHT_MSG0": "Pin",
    "DISPLAY_CONFIG_BACKLIGHT_MSG1": "反転",
    "DISPLAY_CONFIG_BACKLIGHT_MSG2": "PWM周波数",
    "DISPLAY_CONFIG_BACKLIGHT_MSG3": "PWMチャンネル",
    "TOUCH_GET_COUNT_MSG0": "タッチの回数を取得(return int)",
    "TOUCH_GET_X_MSG0": "タッチしたx座標を取得(return int)",
    "TOUCH_GET_Y_MSG0": "タッチしたy座標を取得(return int)",
    "TOUCH_GET_POINT_MSG0": "タッチした位置の生データを取得(return tuple)",
    "TOUCH_GET_POINT_VAR_MSG0": "X",
    "TOUCH_GET_POINT_VAR_MSG1": "Y",
    "TOUCH_GET_POINT_VAR_MSG2": "の場所を取得",
    "ALS_GET_LUS_MSG0": "LUX値を取得(return int)",
    "WDT_INIT_MSG0": "WDTをタイムアウト",
    "WDT_INIT_MSG1": "ミリ秒で初期化",
    "WDT_FEED_MSG0": "WDTをフィード",
    "RTC_INIT_MSG0": "RTCを初期化",
    "RTC_SET_UTC_TIME_MSG0": "UTCで時間を設定",
    "RTC_SET_UTC_TIME_MSG1": "年",
    "RTC_SET_UTC_TIME_MSG2": "月",
    "RTC_SET_UTC_TIME_MSG3": "日",
    "RTC_SET_UTC_TIME_MSG4": "時間",
    "RTC_SET_UTC_TIME_MSG5": "分",
    "RTC_SET_UTC_TIME_MSG6": "秒",
    "RTC_SET_UTC_TIME_MSG7": "マイクロ秒",
    "RTC_GET_UTC_TIME_MSG0": "UTCの時間を取得(return tuple)",
    "RTC_GET_LOCAL_TIME_MSG0": "ローカル時間を取得(return tuple)",
    "RTC_GET_TIMEZONE_MSG0": "タイムゾーンを取得(return string)",
    "RTC_SET_TIMEZONE_MSG0": "タイムゾーンを設定",
    "I2S_INIT_MSG0": "Init",
    "I2S_INIT_MSG1": "SCK",
    "I2S_INIT_MSG2": "WS",
    "I2S_INIT_MSG3": "SD",
    "I2S_INIT_MSG4": "mode",
    "I2S_INIT_MSG5": "bits",
    "I2S_INIT_MSG6": "format",
    "I2S_INIT_MSG7": "rate",
    "I2S_INIT_MSG8": "ibuf",
    "I2S_DEINIT_MSG0": "deinit",
    "I2S_READINTO_MSG0": "read into buf",
    "I2S_READINTO_MSG1": "(return length)",
    "I2S_WRITE_MSG0": "write buf",
    "SPI_INIT_MSG0": "Init",
    "SPI_INIT_MSG1": "baudrate",
    "SPI_INIT_MSG2": "SCK",
    "SPI_INIT_MSG3": "MISO",
    "SPI_INIT_MSG4": "MOSI",
    "SPI_INIT_MSG5": "firstbit",
    "SPI_INIT_MSG6": "mode",
    "SPI_DEINIT_MSG0": "deinit",
    "SPI_READINTO_MSG0": "read into buf",
    "SPI_READ_MSG0": "read nbytes",
    "SPI_READ_MSG1": "(return bytes)",
    "SPI_WRITE_MSG0": "write buf",
    "SPI_WRITE_READINTO_MSG0": "write buf",
    "SPI_WRITE_READINTO_MSG1": "read buf",
    "SDCARD_INIT_MSG0": "SDCardを以下の設定で初期化",
    "SDCARD_INIT_MSG1": "スロット",
    "SDCARD_INIT_MSG2": "SCKピン",
    "SDCARD_INIT_MSG3": "MISOピン",
    "SDCARD_INIT_MSG4": "MOSIピン",
    "SDCARD_INIT_MSG5": "CSピン",
    "SDCARD_INIT_MSG6": "クロック周波数",
    "SDCARD_CHDIR_MSG0": "SDCardのカレントディレクトリを変更:",
    "SDCARD_GET_CWD_MSG0": "SDCardのカレントディレクトリを取得",
    "SDCARD_LISTDIR_MSG0": "SDCardのディレクトリ一覧",
    "SDCARD_MKDIR_MSG0": "SDCardにディレクトリを作成:",
    "SDCARD_REMOVE_MSG0": "SDCardのファイルを削除:",
    "SDCARD_RMDIR_MSG0": "SDCardのディレクトリを削除:",
    "SDCARD_RENAME_MSG0": "SDCardの名前を変更:",
    "SDCARD_RENAME_MSG1": "から",
    "SDCARD_IS_FILE_MSG0": "以下がファイルか?",
    "SDCARD_IS_DIRECTORY_MSG0": "以下がディレクトリか?",
    "SDCARD_IS_EXIST_MSG0": "が以下に存在するか?",
    "IR_INIT_MSG0": "Init IR",
    "IR_SEND_DATA_MSG0": "IR send addr",
    "IR_SEND_DATA_MSG1": "data",
    "ROTARY_INIT_MSG0": "Rotary init",
    "ROTARY_GET_STATUS_MSG0": "had rotated (return True or False)",
    "ROTARY_GET_VALUE_MSG0": "get value (return int)",
    "ROTARY_GET_INCREMENTS_MSG0": "get increments (return int)",
    "ROTARY_SET_VALUE_MSG0": "set value",
    "ROTARY_RESET_VALUE_MSG0": "reset value",
    "RFID_INIT_MSG0": "RFID init",
    "RFID_IS_NEW_CARD_PRESENT_MSG0": "is new card present (return True or False)",
    "RFID_READ_CARD_UID_MSG0": "read card uid (return bytearray)",
    "RFID_READ_MSG0": "read from addr",
    "RFID_READ_MSG1": "(return bytearray)",
    "RFID_WRITE_MSG0": "write buffer",
    "RFID_WRITE_MSG1": "to addr",
    "RFID_WRITE_RETURN_MSG0": "write buffer",
    "RFID_WRITE_RETURN_MSG1": "to addr",
    "RFID_WRITE_RETURN_MSG2": "(return int)",
    "RFID_CLOSE_MSG0": "close",
    "MATRIXKEYBOARD_INIT_MSG0": "Init keyboard",
    "MATRIXKEYBOARD_GET_KEY_MSG0": "get keyboard key value (return int)",
    "MATRIXKEYBOARD_GET_STRING_MSG0": "get keyboard key string (return string)",
    "MATRIXKEYBOARD_IS_PRESSED_MSG0": "has keyboard pressed (return True or False)",
    "MATRIXKEYBOARD_KEYCODE_MSG0": "KeyCode",
    "MATRIXKEYBOARD_CALLBACK_MSG0": "When keyboard was pressed",
    "MATRIXKEYBOARD_TICK_MSG0": "Keyboard update in loop",
    "HARDWARE_CAN_INIT_BAUDRATE_MSG0": "Init CAN with",
    "HARDWARE_CAN_INIT_BAUDRATE_MSG1": "ID",
    "HARDWARE_CAN_INIT_BAUDRATE_MSG2": "mode",
    "HARDWARE_CAN_INIT_BAUDRATE_MSG3": "TX",
    "HARDWARE_CAN_INIT_BAUDRATE_MSG4": "RX",
    "HARDWARE_CAN_INIT_BAUDRATE_MSG5": "baudrate",
    "HARDWARE_CAN_INIT_MSG0": "Init CAN with",
    "HARDWARE_CAN_INIT_MSG1": "mode",
    "HARDWARE_CAN_INIT_MSG2": "TX",
    "HARDWARE_CAN_INIT_MSG3": "RX",
    "HARDWARE_CAN_INIT_MSG4": "prescaler",
    "HARDWARE_CAN_INIT_MSG5": "sjw",
    "HARDWARE_CAN_INIT_MSG6": "bs1",
    "HARDWARE_CAN_INIT_MSG7": "bs2",
    "HARDWARE_CAN_INIT_MSG8": "triple sampling",
    "HARDWARE_CAN_INIT_MSG9": "ID",
    "HARDWARE_CAN_DEINIT_MSG0": "CAN deinit",
    "HARDWARE_CAN_RESTART_MSG0": "CAN restart",
    "HARDWARE_CAN_GET_STATE_MSG0": "CAN get state (return int)",
    "HARDWARE_CAN_GET_INFO_MSG0": "CAN get error status information",
    "HARDWARE_CAN_ANY_MSG0": "CAN count of available (return True or False)",
    "HARDWARE_CAN_RECV_MESSAGE_MSG0": "CAN read message timeout",
    "HARDWARE_CAN_RECV_MESSAGE_MSG1": "(return tuple)",
    "HARDWARE_CAN_RECV_MESSAGE_INFO_MSG0": "CAN read message into",
    "HARDWARE_CAN_RECV_MESSAGE_INFO_MSG1": "timeout",
    "HARDWARE_CAN_SEND_DATA_MSG0": "CAN send",
    "HARDWARE_CAN_SEND_DATA_MSG1": "id",
    "HARDWARE_CAN_SEND_DATA_MSG2": "timeout",
    "HARDWARE_CAN_SEND_DATA_MSG3": "rtr",
    "HARDWARE_CAN_SEND_DATA_MSG4": "extframe",
    "MIC_SET_CONFIG_INT_MSG0": "マイクの %1 を %2 に設定",
    "MIC_SET_CONFIG_BOOLEAN_MSG0": "マイクの %1 を %2 に設定",
    "MIC_GET_CONFIG_INT_MSG0": "マイクの設定 %1 を取得(return int)",
    "MIC_GET_CONFIG_BOOLEAN_MSG0": "マイクの設定が %1 か? (return True or False)",
    "MIC_BEGIN_MSG0": "マイクを開始",
    "MIC_END_MSG0": "マイクを終了",
    "MIC_IS_RUNNING_MSG0": "マイクが実行されている時 (return True or False)",
    "MIC_IS_ENABLED_MSG0": "マイクが有効な時 (return True or False)",
    "MIC_IS_RECORDING_MSG0": "マイクが録音されている (return int)",
    "MIC_SET_SAMPLE_RATE_MSG0": "マイクのサンプリングレートを %1 に設定",
    "MIC_SET_RECORD_MSG0": "マイクでバッファー %1 に サンプリングレート %2 ステレオか %3 で録音",
    "MIC_CONFIG_OPTION_MSG0": "pin_data_in",
    "MIC_CONFIG_OPTION_MSG1": "pin_bck",
    "MIC_CONFIG_OPTION_MSG2": "pin_mck",
    "MIC_CONFIG_OPTION_MSG3": "pin_ws",
    "MIC_CONFIG_OPTION_MSG4": "sample_rate",
    "MIC_CONFIG_OPTION_MSG5": "over_sampling",
    "MIC_CONFIG_OPTION_MSG6": "magnification",
    "MIC_CONFIG_OPTION_MSG7": "noise_filter_level",
    "MIC_CONFIG_OPTION_MSG8": "dma_buf_len",
    "MIC_CONFIG_OPTION_MSG9": "dma_buf_count",
    "MIC_CONFIG_OPTION_MSG10": "task_priority",
    "MIC_CONFIG_OPTION_MSG11": "task_pinned_core",
    "MIC_CONFIG_OPTION_MSG12": "i2s_port",
    "MIC_CONFIG_OPTION_MSG13": "stereo",
    "MIC_CONFIG_OPTION_MSG14": "use_adc",
    "MIC_IS_RECORDING_MSG1": "not recording",
    "MIC_IS_RECORDING_MSG2": "recording (There's room in the queue)",
    "MIC_IS_RECORDING_MSG3": "recording (There's no room in the queue)",
    "MIC_RECORD_WAV_FILE_MSG0": "Mic record WAV file %1 %2 sample rate %3 time (second) %4 stereo %5",
    "HARDWARE_SCD40_INIT_MSG0": "Init SCD40",
    "HARDWARE_SCD40_IS_DATA_READY_MSG0": "SCD40 is sensor data ready (return True or False)",
    "HARDWARE_SCD40_GET_VALUE_MSG0": "SCD40 get value in ppm (return int, 400 ~ 2000)",
    "HARDWARE_SCD40_GET_TEMPERATURE_MSG0": "SCD40 get temperature in °C (return float, -10 ~ 60)",
    "HARDWARE_SCD40_GET_HUMIDITY_MSG0": "SCD40 get humidity in RH% (return float, 0 ~ 100)",
    "HARDWARE_SCD40_GET_TEMPERATURE_OFFSET_MSG0": "SCD40 get temperature offset in °C (return float)",
    "HARDWARE_SCD40_GET_SENSOR_ALTITUDE_MSG0": "SCD40 get sensor altitude in meters (return int)",
    "HARDWARE_SCD40_GET_CALIBRATION_ENABLED_MSG0": "SCD40 get automatic self calibration enabled (return True or False)",
    "HARDWARE_SCD40_GET_SERIAL_NUMBER_MSG0": "SCD40 get serial number (return tuple)",
    "HARDWARE_SCD40_SET_START_PERIODIC_MEASUREMENT_MSG0": "SCD40 set start periodic measurement",
    "HARDWARE_SCD40_SET_STOP_PERIODIC_MEASUREMENT_MSG0": "SCD40 set stop periodic measurement",
    "HARDWARE_SCD40_SET_TEMPERATURE_OFFSET_MSG0": "SCD40 set temperature offset %1 in °C",
    "HARDWARE_SCD40_SET_SENSOR_ALTITUDE_MSG0": "SCD40 set sensor altitude %1 in meters",
    "HARDWARE_SCD40_SET_AMBIENT_PRESSURE_MSG0": "SCD40 set ambient pressure %1 in hPa",
    "HARDWARE_SCD40_SET_FORCE_CALIBRATION_MSG0": "SCD40 set perform force calibration in co2 value %1",
    "HARDWARE_SCD40_SET_CALIBRATION_ENABLED_MSG0": "SCD40 set automatic self calibration %1",
    "HARDWARE_SCD40_SET_START_LOW_PERIODIC_MEASUREMENT_MSG0": "SCD40 set start low periodic measurement",
    "HARDWARE_SCD40_SAVE_TO_EEPROM_MSG0": "SCD40 save current configure settings to eeprom",
    "HARDWARE_SCD40_SET_SELF_TEST_MSG0": "SCD40 set perform self test",
    "HARDWARE_SCD40_SET_FACTORY_RESET_MSG0": "SCD40 set perform factory reset",
    "HARDWARE_SCD40_REINIT_MSG0": "SCD40 set sensor reinitializes",
    "HARDWARE_SEN55_INIT_MSG0": "Init SEN55",
    "HARDWARE_SEN55_GET_POWER_STATE_MSG0": "SEN55 get current power state of the sensor (return True or False)",
    "HARDWARE_SEN55_GET_DATA_READY_FLAG_MSG0": "SEN55 get sensor data ready flag and refresh data",
    "HARDWARE_SEN55_GET_PM1_0_MSG0": "SEN55 get PM1.0 concentration (µg/m³, return float)",
    "HARDWARE_SEN55_GET_PM2_5_MSG0": "SEN55 get PM2.5 concentration (µg/m³, return float)",
    "HARDWARE_SEN55_GET_PM4_0_MSG0": "SEN55 get PM4.0 concentration (µg/m³, return float)",
    "HARDWARE_SEN55_GET_PM10_0_MSG0": "SEN55 get PM10.0 concentration (µg/m³, return float)",
    "HARDWARE_SEN55_GET_HUMIDITY_MSG0": "SEN55 get humidity (RH%, return float)",
    "HARDWARE_SEN55_GET_TEMPERATURE_MSG0": "SEN55 get temperature (°C, return float)",
    "HARDWARE_SEN55_GET_VOC_MSG0": "SEN55 get VOC concentration (PPb, return float)",
    "HARDWARE_SEN55_GET_NOX_MSG0": "SEN55 get NOx concentration (PPb, return float)",
    "HARDWARE_SEN55_SET_POWER_STATE_MSG0": "SEN55 set sensor power state to %1",
    "HARDWARE_SEN55_SET_WORK_MODE_MSG0": "SEN55 set sensor work mode to %1",
    "HARDWARE_RELAY_INIT_MSG0": "Init Relay %1 with ID %2 (1~4)",
    "HARDWARE_RELAY_ON_MSG0": "%1 on",
    "HARDWARE_RELAY_OFF_MSG0": "%1 off",
    "HARDWARE_RELAY_GET_VALUE_MSG0": "get %1 output value (return 0 or 1)",
    "HARDWARE_RELAY_SET_VALUE_MSG0": "Set %1 output value to %2 (0 or 1)",
    "HARDWARE_RELAY_GET_STATUS_MSG0": "get %1 output status (return True or False)",
    "HARDWARE_RELAY_SET_STATUS_MSG0": "Set %1 output status to %2",
    "HARDWARE_DIGITALINPUT_INIT_MSG0": "Init DigitalInput %1 with ID %2 (1~8)",
    "HARDWARE_DIGITALINPUT_GET_VALUE_MSG0": "get %1 input value (return 0 or 1)",
    "HARDWARE_DIGITALINPUT_GET_STATUS_MSG0": "get %1 input status (return True or False)",
    "HARDWARE_DIGITALINPUT_EVENT_MSG0": "When %1 %2",
    "HARDWARE_DIGITALINPUT_EVENT_OPTION_MSG0": "FALLING",
    "HARDWARE_DIGITALINPUT_EVENT_OPTION_MSG1": "RISING",
    "HARDWARE_PWR485_INIT_MSG0": "Init PWR485 %1 with %2 UART %3 baudrate %4 bits %5 parity %6 stop %7 TX %8 RX %9",
    "HARDWARE_PWR485_INIT_MSG1": "RTS",
    "HARDWARE_PWR485_INIT_MSG2": "CTS",
    "HARDWARE_PWR485_INIT_MSG3": "TX buffer",
    "HARDWARE_PWR485_INIT_MSG4": "RX buffer",
    "HARDWARE_PWR485_INIT_MSG5": "timeout",
    "HARDWARE_PWR485_INIT_MSG6": "timeout char",
    "HARDWARE_PWR485_INIT_MSG7": "invert",
    "HARDWARE_PWR485_INIT_MSG8": "flow",
    "HARDWARE_PWR485_INIT_MSG9": "mode",
    "HARDWARE_PWR485_SETUP_MSG0": "%1 setup %2 baudrate %3 bits %4 parity %5 stop %6 TX %7 RX %8",
    "HARDWARE_PWR485_DEINIT_MSG0": "%1 deinit",
    "HARDWARE_PWR485_AVAILABLE_CHAR_MSG0": "%1 count of available",
    "HARDWARE_PWR485_READ_ALL_MSG0": "%1 read all bytes (return bytes)",
    "HARDWARE_PWR485_READ_BYTES_MSG0": "%1 read %2 bytes (return bytes)",
    "HARDWARE_PWR485_READ_LINE_MSG0": "%1 read line (return bytes)",
    "HARDWARE_PWR485_READ_RAW_DATA_MSG0": "%1 read a raw data (return 0 ~ 255)",
    "HARDWARE_PWR485_WRITE_MSG0": "%1 write %2",
    "HARDWARE_PWR485_WRITE_LINE_MSG0": "%1 write line %2",
    "HARDWARE_PWR485_WRITE_LIST_MSG0": "%1 write list or tuple %2",
    "HARDWARE_PWR485_WRITE_RAW_DATA_MSG0": "%1 write raw data %2",
    "HARDWARE_PWR485_READ_INTO_BUF_MSG0": "%1 read into buf %2",
    "HARDWARE_PWR485_SEND_BREAK_MSG0": "%1 send break single",
    "HARDWARE_PWR485_FLUSH_MSG0": "%1 flush",
    "HARDWARE_PWR485_TXDONE_MSG0": "%1 is transfer done (return True or False)",
    "MQTT_SET_CLIENT_MSG0": "Set MQTT client id",
    "MQTT_SET_CLIENT_MSG1": "サーバーアドレス",
    "MQTT_SET_CLIENT_MSG2": "ポート番号",
    "MQTT_SET_CLIENT_MSG3": "ユーザ名",
    "MQTT_SET_CLIENT_MSG4": "パスワード",
    "MQTT_SET_CLIENT_MSG5": "keepalive (0 ~ 65535)",
    "MQTT_SET_CLIENT_MSG6": "SSL",
    "MQTT_SET_CLIENT_MSG7": "サーバーのホスト名server hostname",
    "MQTT_SET_CLIENT_MSG8": "キーファイル",
    "MQTT_SET_CLIENT_MSG9": "証明書ファイル",
    "MQTT_SET_LAST_WILL_MSG0": "Last Will(LWT)をトピック",
    "MQTT_SET_LAST_WILL_MSG1": "以下のメッセージに設定:",
    "MQTT_CONNECT_MSG0": "MQTTをクリーンセッションで接続",
    "MQTT_DISCONNECT_MSG0": "MQTTを切断",
    "MQTT_RECONNECT_MSG0": "MQTTを再接続",
    "MQTT_PUBLISH_TOPIC_MSG0": "トピック",
    "MQTT_PUBLISH_TOPIC_MSG1": "データ",
    "MQTT_PUBLISH_TOPIC_MSG2": "QoS",
    "MQTT_PUBLISH_TOPIC_MSG3": "(0か1)でパブリッシュ",
    "MQTT_WAIT_MSG_MSG0": "MQTTでメッセージを適用",
    "MQTT_SUBSCRIBE_MSG0": "トピック",
    "MQTT_SUBSCRIBE_MSG1": "にサブスクライブして",
    "MQTT_SUBSCRIBE_MSG2": "QoS",
    "MQTT_SUBSCRIBE_MSG3": "(0か1)でデータを受信した時",
    "MQTT_GET_TOPIC_MSG0": "トピックを取得(return bytes)",
    "MQTT_GET_MSG_MSG0": "メッセージを取得(return bytes)",
    "MQTT_ISCONNECTED_MSG0": "MQTT is connected (return True or False)",
    "HTTP_REQUEST_MSG0": "HTTPリクエストを送信する",
    "HTTP_REQUEST_MSG1": "メソッド",
    "HTTP_REQUEST_MSG2": "URL",
    "HTTP_REQUEST_MSG3": "ヘッダー",
    "HTTP_REQUEST_MSG4": "ボディ",
    "HTTP_REQUEST_MSG5": "Content-Type",
    "HTTP_GET_STATUS_CODE_MSG0": "ステータスコードを読み取る(return int)",
    "HTTP_GET_REASON_MSG0": "ステータスコードの内容を読み取る(return bytes)",
    "HTTP_GET_HEADERS_MSG0": "ヘッダーを読み取る(return map)",
    "HTTP_GET_CONTENT_MSG0": "応答データを読み取る(return bytes)",
    "HTTP_GET_TEXT_MSG0": "テキスト形式に変換した応答データを読み取る(return bytes)",
    "HTTP_GET_JSON_MSG0": "JSON形式に変換した応答データを読み取る(return json object)",
    "HTTP_CLOSE_MSG0": "HTTPリクエストの接続を閉じる",
    "UDP_SERVER_START_MSG0": "UDPサーバーを開始する",
    "UDP_SERVER_START_MSG1": "IPアドレス",
    "UDP_SERVER_START_MSG2": "ポート",
    "UDP_SERVER_CLOSE_MSG0": "UDPサーバーを切断する",
    "UDP_SERVER_RECV_MSG0": "UDPサーバから",
    "UDP_SERVER_RECV_MSG1": "バイトデータを受け取る",
    "UDP_SERVER_READ_MSG0": "UDPサーバから",
    "UDP_SERVER_READ_MSG1": "バイトデータを読み込む",
    "UDP_SERVER_RECVFROM_MSG0": "UDPサーバから",
    "UDP_SERVER_RECVFROM_MSG1": "バイトデータを読み込む(return tuple)",
    "UDP_SERVER_SEND_MSG0": "UDPサーバからデータを送る:",
    "UDP_SERVER_WRITE_MSG0": "UDPサーバに書き込む:",
    "UDP_SERVER_SENDTO_MSG0": "UDPサーバからデータ",
    "UDP_SERVER_SENDTO_MSG1": "を送る:クライアント",
    "UDP_SERVER_SET_SOCKOPT_MSG0": "UDPサーバの設定アドレスを再利用するか?",
    "UDP_CLIENT_START_MSG0": "UDPクライアントを開始する",
    "UDP_CLIENT_START_MSG1": "IPアドレス",
    "UDP_CLIENT_START_MSG2": "ポート",
    "UDP_CLIENT_CLOSE_MSG0": "UDPクライアントを切断する",
    "UDP_CLIENT_RECV_MSG0": "UDPクライアントで",
    "UDP_CLIENT_RECV_MSG1": "バイトデータを受け取る",
    "UDP_CLIENT_READ_MSG0": "UDPクライアントで",
    "UDP_CLIENT_READ_MSG1": "バイトデータを読み込む",
    "UDP_CLIENT_SEND_MSG0": "UDPクライアントで送る:",
    "UDP_CLIENT_WRITE_MSG0": "UDPクライアントで書き込む:",
    "UDP_CLIENT_SET_SOCKOPT_MSG0": "UDPクライアントで設定アドレスを再利用するか?",
    "TCP_SERVER_START_MSG0": "TCPサーバーを開始する",
    "TCP_SERVER_START_MSG1": "IPアドレス",
    "TCP_SERVER_START_MSG2": "ポート",
    "TCP_SERVER_START_MSG3": "接続数",
    "TCP_SERVER_ACCEPT_MSG0": "TCPサーバーが受け入れたクライアント接続情報",
    "TCP_SERVER_CLOSE_MSG0": "TCPサーバーを切断する",
    "TCP_SERVER_CLOSE_CLIENT_MSG0": "",
    "TCP_SERVER_CLOSE_CLIENT_MSG1": "クライアントの接続を切断する",
    "TCP_SERVER_RECV_MSG0": "クライアントから",
    "TCP_SERVER_RECV_MSG1": "バイト受け取る",
    "TCP_SERVER_READ_MSG0": "クライアントから",
    "TCP_SERVER_READ_MSG1": "バイト読み込む",
    "TCP_SERVER_SEND_MSG0": "クライアントに送る:",
    "TCP_SERVER_WRITE_MSG0": "クライアントに書き込み",
    "TCP_SERVER_SET_SOCKOPT_MSG0": "TCPサーバーでアドレスを再利用する:",
    "TCP_SERVER_SET_BLOCKING_MSG0": "TCPサーバーでブロッキングモードを利用する:",
    "TCP_SERVER_SET_TIMEOUT_MSG0": "TCPサーバーのタイムアウトを",
    "TCP_SERVER_SET_TIMEOUT_MSG1": "(0 ~ 100)に設定する",
    "TCP_CLIENT_START_MSG0": "TCPクライアントを開始する",
    "TCP_CLIENT_START_MSG1": "IPアドレス",
    "TCP_CLIENT_START_MSG2": "ポート",
    "TCP_CLIENT_CLOSE_MSG0": "TCPクライアントを切断する",
    "TCP_CLIENT_RECV_MSG0": "TCPクライアントで",
    "TCP_CLIENT_RECV_MSG1": "バイト受け取る",
    "TCP_CLIENT_READ_MSG0": "TCPクライアントで",
    "TCP_CLIENT_READ_MSG1": "バイト読み込む",
    "TCP_CLIENT_READLINE_MSG0": "TCPクライアントで1行読み込む(return bytes)",
    "TCP_CLIENT_SEND_MSG0": "TCPクライアントで送る:",
    "TCP_CLIENT_WRITE_MSG0": "TCPクライアントで書き込む:",
    "TCP_CLIENT_SET_BLOCKING_MSG0": "TCPクライアントのブロッキングモードを設定:",
    "TCP_CLIENT_SET_TIMEOUT_MSG0": "TCPクライアントのタイムアウトを",
    "TCP_CLIENT_SET_TIMEOUT_MSG1": "(0 ~ 100)に設定",
    "FILEIO_OPEN_MSG0": "オープン",
    "FILEIO_OPEN_MSG1": "パス",
    "FILEIO_OPEN_MSG2": "モード",
    "FILEIO_CLOSE_MSG0": "をクローズ",
    "FILEIO_FLUSH_MSG0": "をフラッシュ",
    "FILEIO_READ_MSG0": "から",
    "FILEIO_READ_MSG1": "バイト読み込み(return bytes)",
    "FILEIO_READ_INTO_MSG0": "バッファ",
    "FILEIO_READ_INTO_MSG1": "から読み込み(return length)",
    "FILEIO_READ_LINE_MSG0": "行を読み込み(return bytes)",
    "FILEIO_READ_ALL_LINE_MSG0": "全ての行を読み込み(return list)",
    "FILEIO_SEEK_MSG0": "オフセットを",
    "FILEIO_SEEK_MSG1": "に設定:以下から",
    "FILEIO_TELL_MSG0": "現在の位置を取得",
    "FILEIO_WRITE_MSG0": "バッファに書き込み:",
    "FILEIO_WRITE_OUTPUT_MSG0": "バッファに",
    "FILEIO_WRITE_OUTPUT_MSG1": "で書き込み(return length)",
    "FILEIO_WRITE_NEWLINE_MSG0": "改行を書き込み",
    "MODBUS_RTU_MASTER_INIT_MSG0": "Init Modbus RTU master %1 with %2 UART %3 verbose %4",
    "MODBUS_RTU_MASTER_READ_COILS_MSG0": "%1 read coils (0x01) %2 slave address (0 ~ 247) %3 starting address (0x0 ~ 0xFFFF) %4 coil quantity %5 timeout (ms) %6 (return list)",
    "MODBUS_RTU_MASTER_READ_DISCRETE_INPUTS_MSG0": "%1 read discrete inputs (0x02) %2 slave address (0 ~ 247) %3 starting address (0x0 ~ 0xFFFF) %4 input quantity %5 timeout (ms) %6 (return list)",
    "MODBUS_RTU_MASTER_READ_HOLDING_REGISTERS_MSG0": "%1 read holding registers (0x03) %2 slave address (0 ~ 247) %3 starting address (0x0 ~ 0xFFFF) %4 register quantity %5 timeout (ms) %6 (return list)",
    "MODBUS_RTU_MASTER_READ_INPUT_REGISTERS_MSG0": "%1 read input registers (0x04) %2 slave address (0 ~ 247) %3 starting address (0x0 ~ 0xFFFF) %4 register quantity %5 timeout (ms) %6 (return list)",
    "MODBUS_RTU_MASTER_WRITE_SINGLE_COIL_MSG0": "%1 write single coil (0x05) %2 slave address (0 ~ 247) %3 output address (0x0 ~ 0xFFFF) %4 output %5 timeout (ms) %6",
    "MODBUS_RTU_MASTER_WRITE_SINGLE_REGISTER_MSG0": "%1 write single register (0x06) %2 slave address (0 ~ 247) %3 register address (0x0 ~ 0xFFFF) %4 register value %5 timeout (ms) %6",
    "MODBUS_RTU_MASTER_WRITE_MULTIPLE_COILS_MSG0": "%1 write multiple coils (0x0F) %2 slave address (0 ~ 247) %3 starting address (0x0 ~ 0xFFFF) %4 output value %5 timeout (ms) %6",
    "MODBUS_RTU_MASTER_WRITE_MULTIPLE_REGISTER_MSG0": "%1 write multiple register (0x10) %2 slave address (0 ~ 247) %3 starting address (0x0 ~ 0xFFFF) %4 register value %5 timeout (ms) %6",
    "MODBUS_RTU_SLAVE_INIT_MSG0": "Init Modbus RTU slave %1 with %2 UART %3 device address (1 ~ 247) %4 verbose %5",
    "MODBUS_RTU_SLAVE_ADD_COIL_MSG0": "Add %1 coil address %2 value %3",
    "MODBUS_RTU_SLAVE_SET_COIL_MSG0": "Set %1 coil address %2 value %3",
    "MODBUS_RTU_SLAVE_SET_MULTI_COILS_MSG0": "Set %1 multi coils starting address %2 value %3",
    "MODBUS_RTU_SLAVE_ADD_DISCRETE_INPUT_MSG0": "Add %1 discrete input address %2 value %3",
    "MODBUS_RTU_SLAVE_SET_MULTI_DISCRETE_INPUT_MSG0": "Set %1 multi discrete input starting address %2 value %3",
    "MODBUS_RTU_SLAVE_SET_DISCRETE_INPUT_MSG0": "Set %1 discrete input address %2 value %3",
    "MODBUS_RTU_SLAVE_ADD_HOLDING_REGISTER_MSG0": "Add %1 holding register %2 value %3",
    "MODBUS_RTU_SLAVE_SET_HOLDING_REGISTER_MSG0": "Set %1 holding register %2 value %3",
    "MODBUS_RTU_SLAVE_SET_MULTI_HOLDING_REGISTER_MSG0": "Set %1 multi holding register starting address %2 value %3",
    "MODBUS_RTU_SLAVE_ADD_INPUT_REGISTER_MSG0": "Add %1 input register %2 value %3",
    "MODBUS_RTU_SLAVE_SET_MULTI_INPUT_REGISTER_MSG0": "Set %1 multi input register starting address %2 value %3",
    "MODBUS_RTU_SLAVE_SET_INPUT_REGISTER_MSG0": "Set %1 input register %2 value %3",
    "MODBUS_RTU_SLAVE_REMOVE_COIL_MSG0": "Remove %1 coil %2",
    "MODBUS_RTU_SLAVE_REMOVE_DISCRETE_INPUT_MSG0": "Remove %1 discrete input %2",
    "MODBUS_RTU_SLAVE_REMOVE_HOLDING_REGISTER_MSG0": "Remove %1 holding register %2",
    "MODBUS_RTU_SLAVE_REMOVE_INPUT_REGISTER_MSG0": "Remove %1 input register %2",
    "MODBUS_RTU_SLAVE_GET_COIL_MSG0": "get %1 coil %2 (return True or False)",
    "MODBUS_RTU_SLAVE_GET_DISCRETE_INPUT_MSG0": "get %1 discrete input %2 (return True or False)",
    "MODBUS_RTU_SLAVE_GET_HOLDING_REGISTER_MSG0": "get %1 holding register %2 (return int)",
    "MODBUS_RTU_SLAVE_GET_INPUT_REGISTER_MSG0": "get %1 input register %2 (return int)",
    "MODBUS_RTU_SLAVE_TICK_MSG0": "%1 update in loop",
    "MODBUS_RTU_SLAVE_READ_COILS_CALLBACK_MSG0": "When %1 read coils (0x01) %2 starting register %3 value %4",
    "MODBUS_RTU_SLAVE_READ_DISCRETE_INPUTS_CALLBACK_MSG0": "When %1 read discrete inputs (0x02) %2 starting register %3 value %4",
    "MODBUS_RTU_SLAVE_READ_HOLDING_REGISTERS_CALLBACK_MSG0": "When %1 read holding registers (0x03) %2 starting register %3 value %4",
    "MODBUS_RTU_SLAVE_READ_INPUT_REGISTERS_CALLBACK_MSG0": "When %1 read input registers (0x04) %2 starting register %3 value %4",
    "MODBUS_RTU_SLAVE_WRITE_SINGLE_COIL_CALLBACK_MSG0": "When %1 write single coil (0x05) %2 register %3 value %4",
    "MODBUS_RTU_SLAVE_WRITE_SINGLE_REGISTER_CALLBACK_MSG0": "When %1 write single register (0x06) %2 register %3 value %4",
    "MODBUS_RTU_SLAVE_WRITE_MULTIPLE_COILS_CALLBACK_MSG0": "When %1 write multiple coils (0x0F) %2 starting register %3 value %4",
    "MODBUS_RTU_SLAVE_WRITE_MULTIPLE_REGISTERS_CALLBACK_MSG0": "When %1 write multiple registers (0x10) %2 starting register %3 value %4",
    "MODBUS_RTU_SLAVE_START_MSG0": "%1 start service",
    "MODBUS_RTU_SLAVE_STOP_MSG0": "%1 stop service",
    "MODBUS_TCP_SERVER_INIT_MSG0": "Init Modbus TCP server %1 with %2 host %3 port %4 device address (1 ~ 247) %5 verbose %6",
    "MODBUS_TCP_SERVER_ADD_COIL_MSG0": "Add %1 coil address %2 value %3",
    "MODBUS_TCP_SERVER_SET_COIL_MSG0": "Set %1 coil address %2 value %3",
    "MODBUS_TCP_SERVER_SET_MULTI_COILS_MSG0": "Set %1 multi coils starting address %2 value %3",
    "MODBUS_TCP_SERVER_ADD_DISCRETE_INPUT_MSG0": "Add %1 discrete input address %2 value %3",
    "MODBUS_TCP_SERVER_SET_MULTI_DISCRETE_INPUT_MSG0": "Set %1 multi discrete input starting address %2 value %3",
    "MODBUS_TCP_SERVER_SET_DISCRETE_INPUT_MSG0": "Set %1 discrete input address %2 value %3",
    "MODBUS_TCP_SERVER_ADD_HOLDING_REGISTER_MSG0": "Add %1 holding register %2 value %3",
    "MODBUS_TCP_SERVER_SET_HOLDING_REGISTER_MSG0": "Set %1 holding register %2 value %3",
    "MODBUS_TCP_SERVER_SET_MULTI_HOLDING_REGISTER_MSG0": "Set %1 multi holding register starting address %2 value %3",
    "MODBUS_TCP_SERVER_ADD_INPUT_REGISTER_MSG0": "Add %1 input register %2 value %3",
    "MODBUS_TCP_SERVER_SET_MULTI_INPUT_REGISTER_MSG0": "Set %1 multi input register starting address %2 value %3",
    "MODBUS_TCP_SERVER_SET_INPUT_REGISTER_MSG0": "Set %1 input register %2 value %3",
    "MODBUS_TCP_SERVER_REMOVE_COIL_MSG0": "Remove %1 coil %2",
    "MODBUS_TCP_SERVER_REMOVE_DISCRETE_INPUT_MSG0": "Remove %1 discrete input %2",
    "MODBUS_TCP_SERVER_REMOVE_HOLDING_REGISTER_MSG0": "Remove %1 holding register %2",
    "MODBUS_TCP_SERVER_REMOVE_INPUT_REGISTER_MSG0": "Remove %1 input register %2",
    "MODBUS_TCP_SERVER_GET_COIL_MSG0": "get %1 coil %2 (return True or False)",
    "MODBUS_TCP_SERVER_GET_DISCRETE_INPUT_MSG0": "get %1 discrete input %2 (return True or False)",
    "MODBUS_TCP_SERVER_GET_HOLDING_REGISTER_MSG0": "get %1 holding register %2 (return int)",
    "MODBUS_TCP_SERVER_GET_INPUT_REGISTER_MSG0": "get %1 input register %2 (return int)",
    "MODBUS_TCP_SERVER_TICK_MSG0": "%1 update in loop",
    "MODBUS_TCP_SERVER_READ_COILS_CALLBACK_MSG0": "When %1 read coils (0x01) %2 starting register %3 value %4",
    "MODBUS_TCP_SERVER_READ_DISCRETE_INPUTS_CALLBACK_MSG0": "When %1 read discrete inputs (0x02) %2 starting register %3 value %4",
    "MODBUS_TCP_SERVER_READ_HOLDING_REGISTERS_CALLBACK_MSG0": "When %1 read holding registers (0x03) %2 starting register %3 value %4",
    "MODBUS_TCP_SERVER_READ_INPUT_REGISTERS_CALLBACK_MSG0": "When %1 read input registers (0x04) %2 starting register %3 value %4",
    "MODBUS_TCP_SERVER_WRITE_SINGLE_COIL_CALLBACK_MSG0": "When %1 write single coil (0x05) %2 register %3 value %4",
    "MODBUS_TCP_SERVER_WRITE_SINGLE_REGISTER_CALLBACK_MSG0": "When %1 write single register (0x06) %2 register %3 value %4",
    "MODBUS_TCP_SERVER_WRITE_MULTIPLE_COILS_CALLBACK_MSG0": "When %1 write multiple coils (0x0F) %2 starting register %3 value %4",
    "MODBUS_TCP_SERVER_WRITE_MULTIPLE_REGISTERS_CALLBACK_MSG0": "When %1 write multiple registers (0x10) %2 starting register %3 value %4",
    "MODBUS_TCP_SERVER_START_MSG0": "%1 start service",
    "MODBUS_TCP_SERVER_STOP_MSG0": "%1 stop service",
    "MODBUS_TCP_CLIENT_INIT_MSG0": "Init Modbus TCP Client %1 with %2 host %3 port %4 verbose %5",
    "MODBUS_TCP_CLIENT_READ_COILS_MSG0": "%1 read coils (0x01) %2 slave address (0 ~ 247) %3 starting address (0x0 ~ 0xFFFF) %4 coil quantity %5 timeout (ms) %6 (return list)",
    "MODBUS_TCP_CLIENT_READ_DISCRETE_INPUTS_MSG0": "%1 read discrete inputs (0x02) %2 slave address (0 ~ 247) %3 starting address (0x0 ~ 0xFFFF) %4 input quantity %5 timeout (ms) %6 (return list)",
    "MODBUS_TCP_CLIENT_READ_HOLDING_REGISTERS_MSG0": "%1 read holding registers (0x03) %2 slave address (0 ~ 247) %3 starting address (0x0 ~ 0xFFFF) %4 register quantity %5 timeout (ms) %6 (return list)",
    "MODBUS_TCP_CLIENT_READ_INPUT_REGISTERS_MSG0": "%1 read input registers (0x04) %2 slave address (0 ~ 247) %3 starting address (0x0 ~ 0xFFFF) %4 register quantity %5 timeout (ms) %6 (return list)",
    "MODBUS_TCP_CLIENT_WRITE_SINGLE_COIL_MSG0": "%1 write single coil (0x05) %2 slave address (0 ~ 247) %3 output address (0x0 ~ 0xFFFF) %4 output %5 timeout (ms) %6",
    "MODBUS_TCP_CLIENT_WRITE_SINGLE_REGISTER_MSG0": "%1 write single register (0x06) %2 slave address (0 ~ 247) %3 register address (0x0 ~ 0xFFFF) %4 register value %5 timeout (ms) %6",
    "MODBUS_TCP_CLIENT_WRITE_MULTIPLE_COILS_MSG0": "%1 write multiple coils (0x0F) %2 slave address (0 ~ 247) %3 starting address (0x0 ~ 0xFFFF) %4 output value %5 timeout (ms) %6",
    "MODBUS_TCP_CLIENT_WRITE_MULTIPLE_REGISTER_MSG0": "%1 write multiple registers (0x10) %2 slave address (0 ~ 247) %3 starting address (0x0 ~ 0xFFFF) %4 register value %5 timeout (ms) %6",
    "MODBUS_TCP_CLIENT_CONNECT_MSG0": "%1 connect",
    "MODBUS_TCP_CLIENT_DISCONNECT_MSG0": "%1 disconnect",
    "DUALKMETER_INIT_MSG0": "Init DualKmeter",
    "DUALKMETER_INIT_MSG1": "I2C address",
    "DUALKMETER_INIT_MSG2": "(0x11 ~ 0x20)",
    "DUALKMETER_GET_THERMOCOUPLE_TEMPERATURE_MSG0": "get",
    "DUALKMETER_GET_THERMOCOUPLE_TEMPERATURE_MSG1": "thermocouple temperature",
    "DUALKMETER_GET_THERMOCOUPLE_TEMPERATURE_MSG2": "(return float)",
    "DUALKMETER_GET_KMETER_TEMPERATURE_MSG0": "get",
    "DUALKMETER_GET_KMETER_TEMPERATURE_MSG1": "internal temperature",
    "DUALKMETER_GET_KMETER_TEMPERATURE_MSG2": "(return float)",
    "DUALKMETER_GET_KMETER_CHANNEL_MSG0": "get",
    "DUALKMETER_GET_KMETER_CHANNEL_MSG1": "selected kmeter channel (return 0 or 1)",
    "DUALKMETER_SET_KMETER_CHANNEL_MSG0": "Set",
    "DUALKMETER_SET_KMETER_CHANNEL_MSG1": "kmeter channel",
    "DUALKMETER_IS_READY_MSG0": "is ready temperature measurement",
    "DUALKMETER_GET_THERMOCOUPLE_TEMPERATURE_STRING_MSG0": "get",
    "DUALKMETER_GET_THERMOCOUPLE_TEMPERATURE_STRING_MSG1": "thermocouple temperature",
    "DUALKMETER_GET_THERMOCOUPLE_TEMPERATURE_STRING_MSG2": "(return string)",
    "DUALKMETER_GET_KMETER_TEMPERATURE_STRING_MSG0": "get",
    "DUALKMETER_GET_KMETER_TEMPERATURE_STRING_MSG1": "internal temperature",
    "DUALKMETER_GET_KMETER_TEMPERATURE_STRING_MSG2": "(return string)",
    "DUALKMETER_GET_FW_VER_MSG0": "get",
    "DUALKMETER_GET_FW_VER_MSG1": "firmware version",
    "DUALKMETER_SET_ADDRESS_MSG0": "Set",
    "DUALKMETER_SET_ADDRESS_MSG1": "I2C address",
    "DUALKMETER_SET_ADDRESS_MSG2": "(0x11 ~ 0x20)",
    "MODULE_RELAY2_INIT_MSG0": "Init 2Relay %1 I2C address %2 (0x08 ~ 0x77)",
    "MODULE_RELAY2_GET_STATUS_MSG0": "get %1 the relay %2 state (return True or False)",
    "MODULE_RELAY2_SET_STATUS_MSG0": "Set %1 the relay %2 state %3",
    "MODULE_RELAY2_SET_ALL_STATUS_MSG0": "Set %1 all relay state %2",
    "MODULE_RELAY2_SET_ADDRESS_MSG0": "Set %1 I2C address %2 (0x08 ~ 0x77)",
    "MODULE_RELAY2_GET_I2C_ADDRESS_MSG0": "get %1 current I2C address (return int)",
    "MODULE_RELAY2_GET_FIRMWARE_VERSION_MSG0": "get %1 firmware version (return int)",
    "RELAY4_INIT_MSG0": "Init 4Relay",
    "RELAY4_INIT_MSG1": "I2C address",
    "RELAY4_INIT_MSG2": "(0x08 ~ 0x77)",
    "RELAY4_GET_STATUS_MSG0": "get",
    "RELAY4_GET_STATUS_MSG1": "relay",
    "RELAY4_GET_STATUS_MSG2": "status (return 0 or 1)",
    "RELAY4_SET_STATUS_MSG0": "Set",
    "RELAY4_SET_STATUS_MSG1": "relay",
    "RELAY4_SET_STATUS_MSG2": "state",
    "RELAY4_SET_ALL_STATUS_MSG0": "Set",
    "RELAY4_SET_ALL_STATUS_MSG1": "all relay state",
    "RELAY4_GET_ADC_8BIT_VOLTAGE_MSG0": "get",
    "RELAY4_GET_ADC_8BIT_VOLTAGE_MSG1": "ADC 8bit voltage value (V, return 0 ~ 26)",
    "RELAY4_GET_ADC_8BIT_RAW_MSG0": "get",
    "RELAY4_GET_ADC_8BIT_RAW_MSG1": "ADC 8bit raw value (return 0 ~ 255)",
    "RELAY4_GET_ADC_12BIT_VOLTAGE_MSG0": "get",
    "RELAY4_GET_ADC_12BIT_VOLTAGE_MSG1": "ADC 12bit voltage value (V, return 0 ~ 26)",
    "RELAY4_GET_ADC_12BIT_RAW_MSG0": "get",
    "RELAY4_GET_ADC_12BIT_RAW_MSG1": "ADC 12bit raw value (return 0 ~ 4095)",
    "RELAY4_SET_ADDRESS_MSG0": "Set",
    "RELAY4_SET_ADDRESS_MSG1": "I2C address",
    "RELAY4_SET_ADDRESS_MSG2": "(0x08 ~ 0x77)",
    "ENCODER4MOTOR_INIT_MSG0": "Init 4EncoderMotor",
    "ENCODER4MOTOR_INIT_MSG1": "I2C address",
    "ENCODER4MOTOR_INIT_MSG2": "(0x08 ~ 0x77)",
    "ENCODER4MOTOR_SET_MOTOR_MODE_MSG0": "Set",
    "ENCODER4MOTOR_SET_MOTOR_MODE_MSG1": "motor",
    "ENCODER4MOTOR_SET_MOTOR_MODE_MSG2": "mode",
    "ENCODER4MOTOR_SET_ALL_MOTORS_MODE_MSG0": "Set",
    "ENCODER4MOTOR_SET_ALL_MOTORS_MODE_MSG1": "all motors mode",
    "ENCODER4MOTOR_SET_ALL_MOTORS_MODE_MSG2": "Normal",
    "ENCODER4MOTOR_SET_ALL_MOTORS_MODE_MSG3": "Position",
    "ENCODER4MOTOR_SET_ALL_MOTORS_MODE_MSG4": "Speed",
    "ENCODER4MOTOR_GET_MOTOR_ENCODER_VALUE_MSG0": "get",
    "ENCODER4MOTOR_GET_MOTOR_ENCODER_VALUE_MSG1": "motor",
    "ENCODER4MOTOR_GET_MOTOR_ENCODER_VALUE_MSG2": "encoder value (return int)",
    "ENCODER4MOTOR_SET_MOTOR_ENCODER_VALUE_MSG0": "Set",
    "ENCODER4MOTOR_SET_MOTOR_ENCODER_VALUE_MSG1": "motor",
    "ENCODER4MOTOR_SET_MOTOR_ENCODER_VALUE_MSG2": "encoder value",
    "ENCODER4MOTOR_GET_ENCODER_MODE_DIRECTION_MSG0": "get",
    "ENCODER4MOTOR_GET_ENCODER_MODE_DIRECTION_MSG1": "encoder mode direction (return int)",
    "ENCODER4MOTOR_SET_ENCODER_MODE_DIRECTION_MSG0": "Set",
    "ENCODER4MOTOR_SET_ENCODER_MODE_DIRECTION_MSG1": "encoder mode direction",
    "ENCODER4MOTOR_SET_ADDRESS_MSG0": "Set",
    "ENCODER4MOTOR_SET_ADDRESS_MSG1": "I2C address",
    "ENCODER4MOTOR_SET_ADDRESS_MSG2": "(0x08 ~ 0x77)",
    "ENCODER4MOTOR_GET_VIN_CURRENT_FLOAT_VALUE_MSG0": "get",
    "ENCODER4MOTOR_GET_VIN_CURRENT_FLOAT_VALUE_MSG1": "Vin current value (A, return float)",
    "ENCODER4MOTOR_GET_VIN_CURRENT_INT_VALUE_MSG0": "get",
    "ENCODER4MOTOR_GET_VIN_CURRENT_INT_VALUE_MSG1": "Vin current value (mA, return int)",
    "ENCODER4MOTOR_GET_VIN_ADC_8BIT_RAW_VALUE_MSG0": "get",
    "ENCODER4MOTOR_GET_VIN_ADC_8BIT_RAW_VALUE_MSG1": "Vin adc 8bit raw value (return int)",
    "ENCODER4MOTOR_GET_VIN_ADC_12BIT_RAW_VALUE_MSG0": "get",
    "ENCODER4MOTOR_GET_VIN_ADC_12BIT_RAW_VALUE_MSG1": "Vin adc 12bit raw value (return int)",
    "ENCODER4MOTOR_GET_VIN_VOLTAGE_MSG0": "get",
    "ENCODER4MOTOR_GET_VIN_VOLTAGE_MSG1": "Vin voltage value (return int)",
    "ENCODER4MOTOR_GET_DEVICE_SPEC_DETAIL_MSG0": "get %1 %2 spec detail (return int)",
    "ENCODER4MOTOR_GET_DEVICE_SPEC_DETAIL_MSG1": "firmware version",
    "ENCODER4MOTOR_GET_DEVICE_SPEC_DETAIL_MSG2": "I2C address",
    "ENCODER4MOTOR_SET_MOTOR_PWM_DUTYCYCLE_MSG0": "Set",
    "ENCODER4MOTOR_SET_MOTOR_PWM_DUTYCYCLE_MSG1": "motor",
    "ENCODER4MOTOR_SET_MOTOR_PWM_DUTYCYCLE_MSG2": "PWM dutycycle",
    "ENCODER4MOTOR_SET_MOTOR_PWM_DUTYCYCLE_MSG3": "(-127 ~ 127)",
    "ENCODER4MOTOR_SET_POSITION_ENCODER_VALUE_MSG0": "Set",
    "ENCODER4MOTOR_SET_POSITION_ENCODER_VALUE_MSG1": "motor",
    "ENCODER4MOTOR_SET_POSITION_ENCODER_VALUE_MSG2": "position encoder value",
    "ENCODER4MOTOR_SET_POSITION_MAX_SPEED_VALUE_MSG0": "Set",
    "ENCODER4MOTOR_SET_POSITION_MAX_SPEED_VALUE_MSG1": "motor",
    "ENCODER4MOTOR_SET_POSITION_MAX_SPEED_VALUE_MSG2": "position maximum speed value",
    "ENCODER4MOTOR_SET_POSITION_MAX_SPEED_VALUE_MSG3": "(-127 ~ 127)",
    "ENCODER4MOTOR_SET_POSITION_PID_VALUE_MSG0": "Set",
    "ENCODER4MOTOR_SET_POSITION_PID_VALUE_MSG1": "motor",
    "ENCODER4MOTOR_SET_POSITION_PID_VALUE_MSG2": "position control P",
    "ENCODER4MOTOR_SET_POSITION_PID_VALUE_MSG3": "I",
    "ENCODER4MOTOR_SET_POSITION_PID_VALUE_MSG4": "D",
    "ENCODER4MOTOR_SET_POSITION_PID_VALUE_MSG5": "value",
    "ENCODER4MOTOR_GET_POSITION_PID_VALUE_MSG0": "get",
    "ENCODER4MOTOR_GET_POSITION_PID_VALUE_MSG1": "motor",
    "ENCODER4MOTOR_GET_POSITION_PID_VALUE_MSG2": "position control PID value (return list)",
    "ENCODER4MOTOR_GET_SPEED_PID_VALUE_MSG0": "get",
    "ENCODER4MOTOR_GET_SPEED_PID_VALUE_MSG1": "motor",
    "ENCODER4MOTOR_GET_SPEED_PID_VALUE_MSG2": "speed control PID value (return list)",
    "ENCODER4MOTOR_GET_MOTOR_SPEED_VALUE_MSG0": "get",
    "ENCODER4MOTOR_GET_MOTOR_SPEED_VALUE_MSG1": "motor",
    "ENCODER4MOTOR_GET_MOTOR_SPEED_VALUE_MSG2": "speed value (return int)",
    "ENCODER4MOTOR_SET_SPEED_PID_VALUE_MSG0": "Set",
    "ENCODER4MOTOR_SET_SPEED_PID_VALUE_MSG1": "motor",
    "ENCODER4MOTOR_SET_SPEED_PID_VALUE_MSG2": "speed control P",
    "ENCODER4MOTOR_SET_SPEED_PID_VALUE_MSG3": "I",
    "ENCODER4MOTOR_SET_SPEED_PID_VALUE_MSG4": "D",
    "ENCODER4MOTOR_SET_SPEED_PID_VALUE_MSG5": "value",
    "ENCODER4MOTOR_SET_SPEED_POINT_VALUE_MSG0": "Set",
    "ENCODER4MOTOR_SET_SPEED_POINT_VALUE_MSG1": "motor",
    "ENCODER4MOTOR_SET_SPEED_POINT_VALUE_MSG2": "speed point value",
    "ENCODER4MOTOR_SET_SPEED_POINT_VALUE_MSG3": "(-127 ~ 127)",
    "ENCODER4MOTOR_GET_SOFT_START_STATE_MSG0": "get %1 motor %2 soft start state (return True or False)",
    "ENCODER4MOTOR_SET_SOFT_START_STATE_MSG0": "Set %1 motor %2 soft start state to %3",
    "PPS_INIT_MSG0": "Init PPS",
    "PPS_INIT_MSG1": "I2C address",
    "PPS_INIT_MSG2": "(0x08 ~ 0x77)",
    "PPS_SET_OUTPUT_MSG0": "Set the output mode of",
    "PPS_SET_OUTPUT_MSG1": "to",
    "PPS_ENABLE_OUTPUT_MSG0": "Enable the output of",
    "PPS_DISABLE_OUTPUT_MSG0": "Disable the output of",
    "PPS_SET_OUTPUT_VOLTAGE_MSG0": "Set the output voltage of",
    "PPS_SET_OUTPUT_VOLTAGE_MSG1": "to",
    "PPS_SET_OUTPUT_VOLTAGE_MSG2": "(V, 0.0 ~ 30.0)",
    "PPS_SET_OUTPUT_CURRENT_MSG0": "Set the output current of",
    "PPS_SET_OUTPUT_CURRENT_MSG1": "to",
    "PPS_SET_OUTPUT_CURRENT_MSG2": "(A, 0.0 ~ 5.0)",
    "PPS_READ_PSU_RUNNING_MODE_MSG0": "read the PSU running mode of",
    "PPS_READ_PSU_RUNNING_MODE_MSG1": "(return int)",
    "PPS_READ_OUTPUT_CURRENT_MSG0": "read the output current of",
    "PPS_READ_OUTPUT_CURRENT_MSG1": "(return float)",
    "PPS_READ_OUTPUT_VOLTAGE_MSG0": "read the output voltage of",
    "PPS_READ_OUTPUT_VOLTAGE_MSG1": "(return float)",
    "PPS_READ_INPUT_VOLTAGE_MSG0": "read the input voltage of",
    "PPS_READ_INPUT_VOLTAGE_MSG1": "(return float)",
    "PPS_READ_DATA_UPDATE_FLAG_MSG0": "read the data update flag of",
    "PPS_READ_DATA_UPDATE_FLAG_MSG1": "(return int)",
    "PPS_READ_MCU_TEMPERATURE_MSG0": "read the MCU temperature of",
    "PPS_READ_MCU_TEMPERATURE_MSG1": "(return float)",
    "PPS_READ_MODULE_ID_MSG0": "read the module ID of",
    "PPS_READ_MODULE_ID_MSG1": "(return int)",
    "PPS_READ_UID_MSG0": "read the unique identifier (UID) of",
    "PPS_READ_UID_MSG1": "(return bytearray)",
    "PPS_GET_I2C_ADDRESS_MSG0": "get the current I2C address of",
    "PPS_GET_I2C_ADDRESS_MSG1": "(return int)",
    "PPS_SET_I2C_ADDRESS_MSG0": "Set",
    "PPS_SET_I2C_ADDRESS_MSG1": "I2C address",
    "PPS_SET_I2C_ADDRESS_MSG2": "(0x08 ~ 0x77)",
    "MODULE_DISPLAY_INIT_MSG0": "Module Display config",
    "MODULE_DISPLAY_INIT_MSG1": "size",
    "MODULE_DISPLAY_INIT_MSG2": "refresh rate",
    "MODULE_DISPLAY_INIT_MSG3": "scale (0 ~ 255)",
    "MODULE_DISPLAY_INIT_MSG4": "pixel clock",
    "MODULE_DISPLAY_INIT_MSG5": "output",
    "MODULE_DISPLAY_CONFIG_SIZE_MSG0": "width",
    "MODULE_DISPLAY_CONFIG_SIZE_MSG1": "height",
    "MODULE_DISPLAY_CONFIG_SCALE_MSG0": "width",
    "MODULE_DISPLAY_CONFIG_SCALE_MSG1": "height",
    "MODULE_DISPLAY_CONFIG_OUTPUT_MSG0": "width",
    "MODULE_DISPLAY_CONFIG_OUTPUT_MSG1": "height",
    "MODULE_RCA_INIT_MSG0": "Module RCA config",
    "MODULE_RCA_INIT_MSG1": "size",
    "MODULE_RCA_INIT_MSG2": "output",
    "MODULE_RCA_INIT_MSG3": "signal type",
    "MODULE_RCA_INIT_MSG4": "use psram",
    "MODULE_RCA_INIT_MSG5": "pin dac",
    "MODULE_RCA_INIT_MSG6": "output level",
    "MODULE_RCA_CONFIG_SIZE_MSG0": "width",
    "MODULE_RCA_CONFIG_SIZE_MSG1": "height",
    "MODULE_RCA_CONFIG_OUTPUT_MSG0": "width",
    "MODULE_RCA_CONFIG_OUTPUT_MSG1": "height",
    "IOT_BASE_CATM_INIT_MSG0": "Init IoT Base CatM",
    "IOT_BASE_CATM_CHECK_MODEM_IS_READY_MSG0": "check if modem is ready (return True or False)",
    "IOT_BASE_CATM_GET_SIGNAL_STRENGTH_MSG0": "get",
    "IOT_BASE_CATM_GET_SIGNAL_STRENGTH_MSG1": "signal strength (return int)",
    "IOT_BASE_CATM_GET_MODEL_IDENTIFICATION_MSG0": "get",
    "IOT_BASE_CATM_GET_MODEL_IDENTIFICATION_MSG1": "model identification (return string)",
    "IOT_BASE_CATM_GET_DATA_CONTENT_MSG0": "get",
    "IOT_BASE_CATM_GET_DATA_CONTENT_MSG1": "data content (return string)",
    "IOT_BASE_CATM_GET_GPRS_NETWORK_STATUS_MSG0": "get",
    "IOT_BASE_CATM_GET_GPRS_NETWORK_STATUS_MSG1": "gprs network status (return int)",
    "IOT_BASE_CATM_GET_SHOW_PDP_ADDRESS_MSG0": "get",
    "IOT_BASE_CATM_GET_SHOW_PDP_ADDRESS_MSG1": "show pdp address cid",
    "IOT_BASE_CATM_GET_SHOW_PDP_ADDRESS_MSG2": "(1 ~ 2) (return string)",
    "IOT_BASE_CATM_GET_SELECTED_OPERATOR_MSG0": "get",
    "IOT_BASE_CATM_GET_SELECTED_OPERATOR_MSG1": "selected operator (return string)",
    "IOT_BASE_CATM_GET_MODE_SELECTION_MSG0": "get",
    "IOT_BASE_CATM_GET_MODE_SELECTION_MSG1": "preferred mode selection (return int)",
    "IOT_BASE_CATM_GET_NETWORK_ACTIVATED_MSG0": "get",
    "IOT_BASE_CATM_GET_NETWORK_ACTIVATED_MSG1": "APP network activated pdp id",
    "IOT_BASE_CATM_GET_NETWORK_ACTIVATED_MSG2": "(0 ~ 3)",
    "IOT_BASE_CATM_GET_NETWORK_IP_MSG0": "get",
    "IOT_BASE_CATM_GET_NETWORK_IP_MSG1": "network ip pdp id",
    "IOT_BASE_CATM_GET_NETWORK_IP_MSG2": "(0 ~ 3) (return string)",
    "IOT_BASE_CATM_SET_MODEM_POWER_CTRL_MSG0": "set modem power control",
    "IOT_BASE_CATM_SET_COMMAND_ECHO_MODE_MSG0": "set echo command mode",
    "IOT_BASE_CATM_SET_GPRS_NETWORK_STATE_MSG0": "set gprs network state",
    "IOT_BASE_CATM_SET_PDP_CONTEXT_MSG0": "set define PDP context apn",
    "IOT_BASE_CATM_SET_MODE_SELECTION_MSG0": "set preferred mode selection",
    "IOT_BASE_CATM_SET_NETWORK_ACTIVE_MSG0": "set APP network active PDP id",
    "IOT_BASE_CATM_SET_NETWORK_ACTIVE_MSG1": "action",
    "IOT_BASE_CATM_SET_MODEM_DEBUG_MSG0": "set AT command debug print",
    "IOT_BASE_CATM_MQTT_SERVER_CONNECT_MSG0": "MQTT server connect",
    "IOT_BASE_CATM_MQTT_SERVER_CONNECT_MSG1": "server",
    "IOT_BASE_CATM_MQTT_SERVER_CONNECT_MSG2": "port",
    "IOT_BASE_CATM_MQTT_SERVER_CONNECT_MSG3": "client id",
    "IOT_BASE_CATM_MQTT_SERVER_CONNECT_MSG4": "username",
    "IOT_BASE_CATM_MQTT_SERVER_CONNECT_MSG5": "password",
    "IOT_BASE_CATM_MQTT_SERVER_CONNECT_MSG6": "keepalive (0 ~ 65535)",
    "IOT_BASE_CATM_MQTT_SERVER_DISCONNECT_MSG0": "MQTT server disconnect",
    "IOT_BASE_CATM_MQTT_UNSUBSCRIBE_TOPIC_MSG0": "MQTT unsubscribe topic",
    "IOT_BASE_CATM_MQTT_PUBLISH_TOPIC_MSG0": "MQTT publish topic",
    "IOT_BASE_CATM_MQTT_PUBLISH_TOPIC_MSG1": "msg",
    "IOT_BASE_CATM_MQTT_PUBLISH_TOPIC_MSG2": "QoS",
    "IOT_BASE_CATM_MQTT_PUBLISH_TOPIC_MSG3": "(0 ~ 2)",
    "IOT_BASE_CATM_MQTT_POLLING_LOOP_MSG0": "MQTT polling loop",
    "IOT_BASE_CATM_MQTT_SERVER_IS_CONNECT_MSG0": "check MQTT server is connect (return int)",
    "IOT_BASE_CATM_MQTT_SUBSCRIBE_MSG0": "MQTT subscribe topic",
    "IOT_BASE_CATM_MQTT_SUBSCRIBE_MSG1": "QoS",
    "IOT_BASE_CATM_MQTT_SUBSCRIBE_MSG2": "(0 ~ 2)",
    "IOT_BASE_CATM_MQTT_SUBSCRIBE_CALLBACK_MSG0": "MQTT subscribe callback topic",
    "IOT_BASE_CATM_MQTT_SUBSCRIBE_CALLBACK_MSG1": "msg",
    "IOT_BASE_CATM_HTTP_SERVER_CONNECT_MSG0": "HTTP server connect",
    "IOT_BASE_CATM_HTTP_SERVER_DISCONNECT_MSG0": "HTTP server disconnect",
    "IOT_BASE_CATM_HTTP_GET_RESPONSE_CODE_MSG0": "get",
    "IOT_BASE_CATM_HTTP_GET_RESPONSE_CODE_MSG1": "response status code (return int)",
    "IOT_BASE_CATM_IS_HTTP_SERVER_CONNECT_MSG0": "check HTTP server is connect (return True or False)",
    "IOT_BASE_CATM_HTTP_REQUEST_MSG0": "HTTP request",
    "IOT_BASE_CATM_HTTP_REQUEST_MSG1": "method",
    "IOT_BASE_CATM_HTTP_REQUEST_MSG2": "URL",
    "IOT_BASE_CATM_HTTP_REQUEST_MSG3": "headers",
    "IOT_BASE_CATM_HTTP_REQUEST_MSG4": "data",
    "IOT_BASE_CATM_CONFIGURE_RS485_MSG0": "init RS485",
    "IOT_BASE_CATM_CONFIGURE_RS485_MSG1": "baudrate",
    "IOT_BASE_CATM_CONFIGURE_RS485_MSG2": "data bits",
    "IOT_BASE_CATM_CONFIGURE_RS485_MSG3": "stop bits",
    "IOT_BASE_CATM_CONFIGURE_RS485_MSG4": "parity",
    "IOT_BASE_CATM_RS485_READ_ALL_BYTES_MSG0": "read all bytes (return bytes)",
    "IOT_BASE_CATM_RS485_READ_BYTES_MSG0": "read",
    "IOT_BASE_CATM_RS485_READ_BYTES_MSG1": "bytes (return bytes)",
    "IOT_BASE_CATM_RS485_READ_LINE_MSG0": "read line (return bytes)",
    "IOT_BASE_CATM_RS485_ANY_MSG0": "number of bytes available (return int)",
    "IOT_BASE_CATM_RS485_WRITE_MSG0": "write",
    "IOT_BASE_CATM_RS485_WRITE_LINE_MSG0": "write a line",
    "IOT_BASE_CATM_RS485_WRITE_LIST_BYTES_MSG0": "write list of bytes",
    "IOT_BASE_CATM_RS485_READ_COILS_MSG0": "read coils",
    "IOT_BASE_CATM_RS485_READ_COILS_MSG1": "slave address (0 ~ 247)",
    "IOT_BASE_CATM_RS485_READ_COILS_MSG2": "starting address (0 ~ 9999)",
    "IOT_BASE_CATM_RS485_READ_COILS_MSG3": "coil quantity",
    "IOT_BASE_CATM_RS485_READ_COILS_MSG4": "timeout",
    "IOT_BASE_CATM_RS485_READ_COILS_MSG5": "(return list)",
    "IOT_BASE_CATM_RS485_READ_DISCRETE_INPUTS_MSG0": "read discrete inputs",
    "IOT_BASE_CATM_RS485_READ_DISCRETE_INPUTS_MSG1": "slave address (0 ~ 247)",
    "IOT_BASE_CATM_RS485_READ_DISCRETE_INPUTS_MSG2": "starting address (0 ~ 9999)",
    "IOT_BASE_CATM_RS485_READ_DISCRETE_INPUTS_MSG3": "input quantity",
    "IOT_BASE_CATM_RS485_READ_DISCRETE_INPUTS_MSG4": "timeout",
    "IOT_BASE_CATM_RS485_READ_DISCRETE_INPUTS_MSG5": "(return list)",
    "IOT_BASE_CATM_RS485_READ_HOLDING_REGISTERS_MSG0": "read holding registers",
    "IOT_BASE_CATM_RS485_READ_HOLDING_REGISTERS_MSG1": "slave address (0 ~ 247)",
    "IOT_BASE_CATM_RS485_READ_HOLDING_REGISTERS_MSG2": "starting address (0 ~ 9999)",
    "IOT_BASE_CATM_RS485_READ_HOLDING_REGISTERS_MSG3": "register quantity",
    "IOT_BASE_CATM_RS485_READ_HOLDING_REGISTERS_MSG4": "signed",
    "IOT_BASE_CATM_RS485_READ_HOLDING_REGISTERS_MSG5": "timeout",
    "IOT_BASE_CATM_RS485_READ_HOLDING_REGISTERS_MSG6": "(return list)",
    "IOT_BASE_CATM_RS485_READ_INPUT_REGISTERS_MSG0": "read input registers",
    "IOT_BASE_CATM_RS485_READ_INPUT_REGISTERS_MSG1": "slave address (0 ~ 247)",
    "IOT_BASE_CATM_RS485_READ_INPUT_REGISTERS_MSG2": "starting address (0 ~ 9999)",
    "IOT_BASE_CATM_RS485_READ_INPUT_REGISTERS_MSG3": "register quantity",
    "IOT_BASE_CATM_RS485_READ_INPUT_REGISTERS_MSG4": "signed",
    "IOT_BASE_CATM_RS485_READ_INPUT_REGISTERS_MSG5": "timeout",
    "IOT_BASE_CATM_RS485_READ_INPUT_REGISTERS_MSG6": "(return list)",
    "IOT_BASE_CATM_RS485_WRITE_SINGLE_COIL_MSG0": "write single coil",
    "IOT_BASE_CATM_RS485_WRITE_SINGLE_COIL_MSG1": "slave address (0 ~ 247)",
    "IOT_BASE_CATM_RS485_WRITE_SINGLE_COIL_MSG2": "output address (0 ~ 9999)",
    "IOT_BASE_CATM_RS485_WRITE_SINGLE_COIL_MSG3": "output",
    "IOT_BASE_CATM_RS485_WRITE_SINGLE_COIL_MSG4": "timeout",
    "IOT_BASE_CATM_RS485_WRITE_SINGLE_REGISTER_MSG0": "write single register",
    "IOT_BASE_CATM_RS485_WRITE_SINGLE_REGISTER_MSG1": "slave address (0 ~ 247)",
    "IOT_BASE_CATM_RS485_WRITE_SINGLE_REGISTER_MSG2": "register address (0 ~ 9999)",
    "IOT_BASE_CATM_RS485_WRITE_SINGLE_REGISTER_MSG3": "register value",
    "IOT_BASE_CATM_RS485_WRITE_SINGLE_REGISTER_MSG4": "signed",
    "IOT_BASE_CATM_RS485_WRITE_SINGLE_REGISTER_MSG5": "timeout",
    "IOT_BASE_CATM_RS485_WRITE_MULTIPLE_COILS_MSG0": "write multiple coils",
    "IOT_BASE_CATM_RS485_WRITE_MULTIPLE_COILS_MSG1": "slave address (0 ~ 247)",
    "IOT_BASE_CATM_RS485_WRITE_MULTIPLE_COILS_MSG2": "starting address (0 ~ 9999)",
    "IOT_BASE_CATM_RS485_WRITE_MULTIPLE_COILS_MSG3": "output value",
    "IOT_BASE_CATM_RS485_WRITE_MULTIPLE_COILS_MSG4": "timeout",
    "IOT_BASE_CATM_RS485_WRITE_MULTIPLE_REGISTER_MSG0": "write multiple register",
    "IOT_BASE_CATM_RS485_WRITE_MULTIPLE_REGISTER_MSG1": "slave address (0 ~ 247)",
    "IOT_BASE_CATM_RS485_WRITE_MULTIPLE_REGISTER_MSG2": "starting address (0 ~ 9999)",
    "IOT_BASE_CATM_RS485_WRITE_MULTIPLE_REGISTER_MSG3": "register value",
    "IOT_BASE_CATM_RS485_WRITE_MULTIPLE_REGISTER_MSG4": "signed",
    "IOT_BASE_CATM_RS485_WRITE_MULTIPLE_REGISTER_MSG5": "timeout",
    "MODULE_AIN420MA_INIT_MSG0": "Init AIN4-20mA %1 I2C address %2 (0x08 ~ 0x77)",
    "MODULE_AIN420MA_GET_ADC_RAW_VALUE_MSG0": "get %1 12bit ADC raw value from channel %2 (return int)",
    "MODULE_AIN420MA_GET_CURRENT_VALUE_MSG0": "get %1 current value from channel %2 (mA, return int)",
    "MODULE_AIN420MA_GET_FIRMWARE_VERSION_MSG0": "get %1 firmware version (return int)",
    "MODULE_AIN420MA_GET_I2C_ADDRESS_MSG0": "get %1 current I2C address (return int)",
    "MODULE_AIN420MA_SET_I2C_ADDRESS_MSG0": "Set %1 I2C address %2 (0x08 ~ 0x77)",
    "MODULE_AIN420MA_SET_CAL_CURRENT_MSG0": "Set %1 channel %2 calibration current %3 (4 ~ 20) mA",
    "MODULE_HMI_INIT_MSG0": "Init HMI %1 I2C address %2 (0x08 ~ 0x77)",
    "MODULE_HMI_SET_I2C_ADDRESS_MSG0": "Set %1 I2C address %2 (0x08 ~ 0x77)",
    "MODULE_HMI_GET_I2C_ADDRESS_MSG0": "get %1 current I2C address (return int)",
    "MODULE_HMI_GET_FIRMWARE_VERSION_MSG0": "get %1 firmware version (return int)",
    "MODULE_HMI_GET_ENCODER_VALUE_MSG0": "get %1 rotary value (return int)",
    "MODULE_HMI_SET_ENCODER_VALUE_MSG0": "Set %1 rotary value to %2 (-2147483648 ~ 2147483647)",
    "MODULE_HMI_RESET_ENCODER_VALUE_MSG0": "Reset %1 rotary value",
    "MODULE_HMI_SET_LED_STATE_MSG0": "Set %1 LED %2 state %3",
    "MODULE_HMI_GET_INCREMENT_VALUE_MSG0": "get %1 rotary increment value (compared to last read) (return int)",
    "MODULE_HMI_GET_BUTTON_STATE_MSG0": "get %1 button %2 state (return int)",
    "MODULE_HMI_GET_LED_STATE_MSG0": "get %1 LED %2 state (return 0 or 1)",
    "MODULE_PLUS_INIT_MSG0": "Plus %1 をI2Cアドレス %2 で初期化",
    "MODULE_PLUS_GET_ENCODER_VALUE_MSG0": "%1 ロータリー値を取得",
    "MODULE_PLUS_GET_BUTTON_STATE_MSG0": "%1 ボタン状態を取得",
    "MODULE_PLUS_RESET_ENCODER_VALUE_MSG0": "%1 ロータリー値をリセット",
    "MODULE_PLUS_SET_ENCODER_VALUE_MSG0": "%1 ロータリー値を %2 に設定",
    "MODULE_PLUS_GET_INCREMENT_VALUE_MSG0": "%1 ロータリー値の増減値(前回読み取り値との比較)を取得(return int)",
    "MODULE_LAN_INIT_MSG0": "Init LAN %1 with %2 CS pin %3 reset pin %4 interrupt pin %5",
    "MODULE_LAN_DEINIT_MSG0": "%1 deinit",
    "MODULE_LAN_ISCONNECTED_MSG0": "%1 is connected (return True or False)",
    "MODULE_LAN_ACTIVE_MSG0": "%1 active %2",
    "MODULE_LAN_GET_STATUS_MSG0": "get %1 connect status (return int)",
    "MODULE_LAN_SET_DEFAULT_NETIF_MSG0": "Set %1 default network interface",
    "MODULE_LAN_GET_LOCALIP_MSG0": "get %1 local IP",
    "MODULE_LAN_GET_SUBNET_MSG0": "get %1 subnet",
    "MODULE_LAN_GET_GATEWAY_MSG0": "get %1 gateway",
    "MODULE_LAN_GET_DNS_MSG0": "get %1 DNS",
    "MODULE_LAN_GET_MAC_MSG0": "get %1 MAC address",
    "MODULE_LAN_SET_MAC_MSG0": "Set %1 MAC address to %2",
    "MODULE_LAN_ETH_STATUS_MSG0": "ethernet status %1",
    "MODULE_LAN_IFCONFIG_SUBNET_MSG0": "Set %1 ifconfig with %2 local IP %3 subnet %4 gateway %5 DNS %6",
    "MODULE_LAN_IFCONFIG_NETMASK_MSG0": "Set %1 ifconfig with %2 local IP %3 netmask %4 gateway %5 DNS %6",
    "MODULE_RS232_INIT_MSG0": "Init RS232 %1 with %2 UART %3 baudrate %4 bits %5 parity %6 stop %7 TX %8 RX %9",
    "MODULE_RS232_SETUP_MSG0": "%1 setup %2 baudrate %3 bits %4 parity %5 stop %6 TX %7 RX %8",
    "MODULE_RS232_DEINIT_MSG0": "%1 deinit",
    "MODULE_RS232_AVAILABLE_CHAR_MSG0": "%1 count of available",
    "MODULE_RS232_READ_ALL_MSG0": "%1 read all",
    "MODULE_RS232_READ_BYTES_MSG0": "%1 read %2 bytes",
    "MODULE_RS232_READ_LINE_MSG0": "%1 read line",
    "MODULE_RS232_READ_RAW_DATA_MSG0": "%1 read a raw data (return 0 ~ 255)",
    "MODULE_RS232_WRITE_MSG0": "%1 write %2",
    "MODULE_RS232_WRITE_LINE_MSG0": "%1 write line %2",
    "MODULE_RS232_WRITE_LIST_MSG0": "%1 write list or tuple %2",
    "MODULE_RS232_WRITE_RAW_DATA_LIST_MSG0": "%1 write raw data %2",
    "MODULE_RS232_WRITE_RAW_DATA_MSG0": "%1 write raw data %2",
    "MODULE_RS232_READ_INTO_BUF_MSG0": "%1 read into buf %2",
    "MODULE_RS232_SEND_BREAK_MSG0": "%1 send break single",
    "MODULE_RS232_FLUSH_MSG0": "%1 flush",
    "MODULE_RS232_TXDONE_MSG0": "%1 is transfer done (return True or False)",
    "MODULE_LORA433_INIT_MSG0": "Init LoRa433 %1 with %2 CS pin %3 interrupt pin %4 reset pin %5",
    "MODULE_LORA433_INIT_MSG1": "frequency",
    "MODULE_LORA433_INIT_MSG2": "spreading factor",
    "MODULE_LORA433_INIT_MSG3": "bandwidth",
    "MODULE_LORA433_INIT_MSG4": "coding rate",
    "MODULE_LORA433_INIT_MSG5": "preamble length",
    "MODULE_LORA433_INIT_MSG6": "output power (dBm)",
    "MODULE_LORA433_SEND_RETURN_MSG0": "%1 send packet %2 (return int)",
    "MODULE_LORA433_SEND_WITH_TIME_RETURN_MSG0": "%1 send packet %2 at %3 milliseconds (return int)",
    "MODULE_LORA433_SEND_MSG0": "%1 send packet %2 (return int)",
    "MODULE_LORA433_START_RECV_MSG0": "%1 start receive data",
    "MODULE_LORA433_STANDBY_MSG0": "Set %1 to standby mode",
    "MODULE_LORA433_SLEEP_MSG0": "%1 sleep",
    "MODULE_LORA433_IRQ_TRIGGERED_MSG0": "%1 check if the IRQ has been triggered (return True or False)",
    "MODULE_LORA433_RECV_MSG0": "%1 receive with timeout %2 milliseconds RX length %3 RX packet %4",
    "MODULE_LORA433_RECEIVE_DATA_EVENT_MSG0": "When %1 receive data %2",
    "MODULE_LORA868_INIT_MSG0": "Init LoRa868 %1 with %2 CS pin %3 interrupt pin %4 reset pin %5",
    "MODULE_LORA868_INIT_MSG1": "frequency",
    "MODULE_LORA868_INIT_MSG2": "spreading factor",
    "MODULE_LORA868_INIT_MSG3": "bandwidth",
    "MODULE_LORA868_INIT_MSG4": "coding rate",
    "MODULE_LORA868_INIT_MSG5": "preamble length",
    "MODULE_LORA868_INIT_MSG6": "output power (dBm)",
    "MODULE_LORA868_SEND_RETURN_MSG0": "%1 send packet %2 (return int)",
    "MODULE_LORA868_SEND_WITH_TIME_RETURN_MSG0": "%1 send packet %2 at %3 milliseconds (return int)",
    "MODULE_LORA868_SEND_MSG0": "%1 send packet %2 (return int)",
    "MODULE_LORA868_START_RECV_MSG0": "%1 start receive data",
    "MODULE_LORA868_STANDBY_MSG0": "Set %1 to standby mode",
    "MODULE_LORA868_SLEEP_MSG0": "%1 sleep",
    "MODULE_LORA868_IRQ_TRIGGERED_MSG0": "%1 check if the IRQ has been triggered (return True or False)",
    "MODULE_LORA868_RECV_MSG0": "%1 receive with timeout %2 milliseconds RX length %3 RX packet %4",
    "MODULE_LORA868_RECEIVE_DATA_EVENT_MSG0": "When %1 receive data %2",
    "MODULE_LORA868V12_INIT2_MSG0": "Init LoRa868 %1",
    "MODULE_LORA868V12_INIT2_MSG1": "reset pin",
    "MODULE_LORA868V12_INIT2_MSG2": "CS pin",
    "MODULE_LORA868V12_INIT2_MSG3": "interrupt pin",
    "MODULE_LORA868V12_INIT2_MSG4": "busy pin",
    "MODULE_LORA868V12_INIT2_MSG5": "frequency (850000 ~ 930000 kHz)",
    "MODULE_LORA868V12_INIT2_MSG6": "bandwidth",
    "MODULE_LORA868V12_INIT2_MSG7": "spreading factor (7 ~ 12)",
    "MODULE_LORA868V12_INIT2_MSG8": "coding rate (5 ~ 8)",
    "MODULE_LORA868V12_INIT2_MSG9": "preamble length (0 ~ 255)",
    "MODULE_LORA868V12_INIT2_MSG10": "syncword (0 ~ 0xff)",
    "MODULE_LORA868V12_INIT2_MSG11": "output power (-9 ~ 22 dBm)",
    "MODULE_LORA868V12_SEND_RETURN_MSG0": "%1 send packet %2 (return int)",
    "MODULE_LORA868V12_SEND_WITH_TIME_RETURN_MSG0": "%1 send packet %2 at %3 milliseconds (return int)",
    "MODULE_LORA868V12_SEND_MSG0": "%1 send packet %2",
    "MODULE_LORA868V12_START_RECV_MSG0": "%1 start receive data",
    "MODULE_LORA868V12_STANDBY_MSG0": "Set %1 to standby mode",
    "MODULE_LORA868V12_SLEEP_MSG0": "%1 sleep",
    "MODULE_LORA868V12_IRQ_TRIGGERED_MSG0": "%1 check if the IRQ has been triggered (return True or False)",
    "MODULE_LORA868V12_RECV_MSG0": "%1 receive with timeout %2 milliseconds RX length %3 RX packet %4",
    "MODULE_LORA868V12_RECEIVE_DATA_EVENT_MSG0": "When %1 receive data %2",
    "MODULE_LORA868V12_RECV_DATA_PARAM_MSG0": "get %2 in receive data %1",
    "MODULE_LORA868V12_SET_FREQ_MSG0": "%1 set frequency to %2 (850000 ~ 930000 kHz)",
    "MODULE_LORA868V12_SET_SF_MSG0": "%1 set spreading factor to %2 (7 ~ 12)",
    "MODULE_LORA868V12_SET_BW_MSG0": "%1 set bandwidth to %2",
    "MODULE_LORA868V12_SET_CODING_RATE_MSG0": "%1 set coding rate to %2 (5 ~ 8)",
    "MODULE_LORA868V12_SET_SYNCWORD_MSG0": "%1 set syncword to %2 (0 ~ 0xff)",
    "MODULE_LORA868V12_SET_PREAMBLE_LEN_MSG0": "%1 set preamble length to %2 (0 ~ 255)",
    "MODULE_LORA868V12_SET_OUTPUT_POWER_MSG0": "%1 set output power to %2 (-9 ~ 22 dBm)",
    "MODULE_LORA868V12_INIT_MSG0": "Init LoRa868 %1 with %2 CS pin %3 interrupt pin %4 reset pin %5 busy pin %6",
    "MODULE_LORA868V12_INIT_MSG1": "frequency (850000 ~ 930000 kHz)",
    "MODULE_LORA868V12_INIT_MSG2": "bandwidth",
    "MODULE_LORA868V12_INIT_MSG3": "spreading factor (7 ~ 12)",
    "MODULE_LORA868V12_INIT_MSG4": "coding rate (5 ~ 8)",
    "MODULE_LORA868V12_INIT_MSG5": "preamble length (0 ~ 255)",
    "MODULE_LORA868V12_INIT_MSG6": "syncword (0 ~ 0xff)",
    "MODULE_LORA868V12_INIT_MSG7": "output power (-9 ~ 22 dBm)",
    "MODULE_4IN8OUT_INIT_MSG0": "Init 4IN8OUT %1 I2C address %2 (0x08 ~ 0x77)",
    "MODULE_4IN8OUT_GET_I2C_ADDRESS_MSG0": "get %1 current I2C address (return int)",
    "MODULE_4IN8OUT_GET_FIRMWARE_VERSION_MSG0": "get %1 firmware version (return int)",
    "MODULE_4IN8OUT_SET_ADDRESS_MSG0": "Set %1 I2C address %2 (0x08 ~ 0x77)",
    "MODULE_4IN8OUT_GET_SWITCH_VALUE_MSG0": "get %1 the switch %2 state (return True or False)",
    "MODULE_4IN8OUT_GET_LOAD_STATE_MSG0": "get %1 the load %2 state (return True or False)",
    "MODULE_4IN8OUT_SET_LOAD_STATE_MSG0": "Set %1 the load %2 state %3",
    "MODULE_STEPMOTOR_DRIVER_INIT_MSG0": "Init StepMotor Driver %1 with %2 I2C address (0x08 ~ 0x77) %3 step pin %4 dir pin %5",
    "MODULE_STEPMOTOR_DRIVER_RESET_MOTOR_MSG0": "Reset %1 motor %2 to %3",
    "MODULE_STEPMOTOR_DRIVER_SET_MOTOR_STATE_MSG0": "Set %1 motor state to %2",
    "MODULE_STEPMOTOR_DRIVER_SET_ADDRESS_MSG0": "Set %1 I2C address %2 (0x08 ~ 0x77)",
    "MODULE_STEPMOTOR_DRIVER_SET_MICROSTEP_MSG0": "Set %1 microstep to %2",
    "MODULE_STEPMOTOR_DRIVER_SET_MOTOR_PWM_FREQ_MSG0": "Set %1 motor %2 PWM freq to %3",
    "MODULE_STEPMOTOR_DRIVER_SET_MOTOR_DIRECTION_MSG0": "Set %1 motor %2 direction to %3",
    "MODULE_STEPMOTOR_DRIVER_GET_FIRMWARE_VERSION_MSG0": "get %1 firmware version (return int)",
    "MODULE_STEPMOTOR_DRIVER_GET_ALL_LIMIT_SWITCH_STATE_MSG0": "get %1 all limit switch state (return True or False)",
    "MODULE_STEPMOTOR_DRIVER_GET_LIMIT_SWITCH_STATE_MSG0": "get %1 limit switch %2 state (return True or False)",
    "MODULE_STEPMOTOR_DRIVER_GET_FAULT_IO_STATE_MSG0": "get %1 fault IO %2 state (return True or False)",
    "MODULE_STEPMOTOR_DRIVER_MOTOR_CONTROL_MSG0": "Set %1 motor %2 to %3",
    "MODULE_COM_NBIOT_INIT_MSG0": "Init NB-IoT %1 with %2 UART %3 TX %4 RX %5",
    "MODULE_COM_NBIOT_CHECK_MODEM_IS_READY_MSG0": "check %1 if modem is ready (return True or False)",
    "MODULE_COM_NBIOT_GET_IMEI_NUMBER_MSG0": "get %1 identification (IMEI) number (return string)",
    "MODULE_COM_NBIOT_GET_SIGNAL_STRENGTH_MSG0": "get %1 signal strength (return int)",
    "MODULE_COM_NBIOT_GET_MODEL_IDENTIFICATION_MSG0": "get %1 model identification (return string)",
    "MODULE_COM_NBIOT_GET_GPRS_NETWORK_STATUS_MSG0": "get %1 gprs network status (return int)",
    "MODULE_COM_NBIOT_GET_SHOW_PDP_ADDRESS_MSG0": "get %1 show pdp address cid %2 (0~1) (return string)",
    "MODULE_COM_NBIOT_GET_PDP_CONTEXT_DYNAMIC_PARAMETERS_MSG0": "get %1 pdp context network %2 parameters (return string)",
    "MODULE_COM_NBIOT_SET_MODEM_DEBUG_MSG0": "%1 set AT command debug print %2",
    "MODULE_COM_NBIOT_SET_COMMAND_ECHO_MODE_MSG0": "%1 set echo command mode %2",
    "MODULE_COM_NBIOT_SET_GPRS_NETWORK_STATE_MSG0": "%1 set gprs network state %2",
    "MODULE_COM_NBIOT_SET_PDP_CONTEXT_APN_MSG0": "%1 set define PDP context apn %2",
    "MODULE_COM_NBIOT_MQTT_SERVER_CONFIGURE_MSG0": "%1 MQTT server configure %2 server %3 port %4 client id %5 username %6 password %7 keepalive(0 ~ 65535) %8",
    "MODULE_COM_NBIOT_MQTT_SERVER_CONNECT_MSG0": "%1 MQTT server connect clean session %2",
    "MODULE_COM_NBIOT_MQTT_SERVER_DISCONNECT_MSG0": "%1 MQTT server disconnect",
    "MODULE_COM_NBIOT_MQTT_POLLING_LOOP_MSG0": "%1 MQTT polling loop",
    "MODULE_COM_NBIOT_MQTT_SERVER_IS_CONNECT_MSG0": "%1 check MQTT server is connect (return int)",
    "MODULE_COM_NBIOT_MQTT_UNSUBSCRIBE_TOPIC_MSG0": "%1 MQTT unsubscribe topic %2",
    "MODULE_COM_NBIOT_SET_MQTT_PUBLISH_MSG0": "%1 MQTT publish topic %2 msg %3 QoS %4 (0 ~ 2)",
    "MODULE_COM_NBIOT_MQTT_SUBSCRIBE_CALLBACK_MSG0": "%1 MQTT subscribe %2 with topic QoS %3 (0 ~ 2)",
    "MODULE_COM_NBIOT_GET_TOPIC_MSG0": "get topic (return bytes)",
    "MODULE_COM_NBIOT_GET_MSG_MSG0": "get msg (return bytes)",
    "MODULE_COM_NBIOT_HTTP_REQUEST_MSG0": "HTTP request",
    "MODULE_COM_NBIOT_HTTP_REQUEST_MSG1": "method",
    "MODULE_COM_NBIOT_HTTP_REQUEST_MSG2": "URL",
    "MODULE_COM_NBIOT_HTTP_REQUEST_MSG3": "headers",
    "MODULE_COM_NBIOT_HTTP_REQUEST_MSG4": "data",
    "MODULE_COM_NBIOT_HTTP_TERMINATE_MSG0": "%1 HTTP server terminated",
    "MODULE_COM_NBIOT_HTTP_DATA_CONTENT_MSG0": "get %1 data content (return string)",
    "MODULE_COM_NBIOT_HTTP_RESPONSE_CODE_MSG0": "get %1 response status code (return int)",
    "MODULE_GRBL_INIT_MSG0": "Init GRBL %1 I2C address %2",
    "MODULE_GRBL_SEND_GCODE_MSG0": "%1 send the G-code command %2",
    "MODULE_GRBL_GET_CODE_TIME_MSG0": "get %1 the time of the G-code command %2 (return int)",
    "MODULE_GRBL_TURN_MSG0": "%1 turn motor with %2 x %3 y %4 z %5 speed %6",
    "MODULE_GRBL_SET_MODE_MSG0": "Set %1 mode %2",
    "MODULE_GRBL_SET_STEP_MSG0": "%1 init motor with %2 x step %3 y step %4 z step %5 acceleration %6",
    "MODULE_GRBL_FLUSH_MSG0": "%1 flush the buffer",
    "MODULE_GRBL_WAIT_IDLE_MSG0": "%1 wait until the motor is idle",
    "MODULE_GRBL_UNLOCK_ALARM_STATE_MSG0": "%1 unlock the alarm state",
    "MODULE_GRBL_GET_MESSAGE_MSG0": "get %1 message",
    "MODULE_GRBL_GET_STATUS_MSG0": "get %1 status",
    "MODULE_GRBL_GET_IDLE_STATE_MSG0": "get %1 idle state",
    "MODULE_GRBL_GET_LOCK_STATE_MSG0": "get %1 lock state",
    "MODULE_GRBL_LOCK_MSG0": "%1 lock motor",
    "MODULE_GRBL_UNLOCK_MSG0": "%1 unlock motor",
    "MODULE_LLM_INIT_MSG0": "Init LLM %1 with %2 UART %3 TX %4 RX %5",
    "MODULE_LLM_TICK_MSG0": "Update %1 in loop",
    "MODULE_LLM_CHECK_CONNECTION_MSG0": "%1 is connection normal (return True or False)",
    "MODULE_LLM_GET_RESPONSE_MSG_LIST_MSG0": "get %1 response msg list (return list)",
    "MODULE_LLM_CLEAR_RESPONSE_MSG_LIST_MSG0": "Clear %1 response msg list",
    "MODULE_LLM_SYS_PING_MSG0": "%1 send ping signal",
    "MODULE_LLM_SYS_RESET_MSG0": "Reset %1 wait reset finish %2",
    "MODULE_LLM_SYS_REBOOT_MSG0": "Reboot %1",
    "MODULE_LLM_SETUP_MSG0": "%1 setup LLM with %2 system prompt %3 version %4 %5 model %6 enoutput %7 enkws %8 max token length %9 request id %10",
    "MODULE_LLM_INFERENCE_MSG0": "%1 LLM inference with %2 work id %3 input data %4 request id %5",
    "MODULE_LLM_TTS_INFERENCE_MSG0": "%1 TTS inference with %2 work id %3 input data %4 timeout %5 request id %6",
    "MODULE_LLM_AUDIO_SETUP_MSG0": "%1 setup audio with %2 microphone input volume %3 speaker playback volume %4 request id %5",
    "MODULE_LLM_TTS_SETUP_MSG0": "%1 setup TTS with %2 model %3 input %4 enoutput %5 enkws %6 request id %7",
    "MODULE_LLM_KWS_SETUP_MSG0": "%1 setup KWS with %2 wake-up keyword %3 model %4 enoutput %5 enaudio %6 request id %7",
    "MODULE_LLM_ASR_SETUP_MSG0": "%1 setup ASR with %2 model %3 enoutput %4 enkws %5 wake-up no content timeout %6 ASR no content timeout %7 ASR max recognition timeout %8 request id %9",
    "MODULE_LLM_BEGIN_VOICE_ASSISTANT_MSG0": "%1 begin voice assistant preset with %2 wake-up keyword %3 system prompt %4 system language %5 (return True or False)",
    "MODULE_LLM_CAMERA_SETUP_MSG0": "%1 setup camera with %2 input %3 frame width %4 frame height %5 request id %6 enoutput %7",
    "MODULE_LLM_YOLO_SETUP_MSG0": "%1 setup YOLO with %2 model %3 enoutput %4 input %5 request id %6",
    "MODULE_LLM_KEYWORD_DETECTED_CALLBACK_MSG0": "When %1 detected keyword",
    "MODULE_LLM_ASR_DATA_INPUT_CALLBACK_MSG0": "When %1 ASR data input %2 data %3 finish %4 index %5",
    "MODULE_LLM_DATA_INPUT_CALLBACK_MSG0": "When %1 LLM data input %2 data %3 finish %4 index %5",
    "MODULE_LLM_GET_LATEST_LLM_WORK_ID_MSG0": "get %1 latest LLM work id (return string)",
    "MODULE_LLM_GET_LATEST_AUDIO_WORK_ID_MSG0": "get %1 latest audio work id (return string)",
    "MODULE_LLM_GET_LATEST_TTS_WORK_ID_MSG0": "get %1 latest TTS work id (return string)",
    "MODULE_LLM_GET_LATEST_KWS_WORK_ID_MSG0": "get %1 latest KWS work id (return string)",
    "MODULE_LLM_GET_LATEST_ASR_WORK_ID_MSG0": "get %1 latest ASR work id (return string)",
    "MODULE_LLM_GET_LATEST_ERROR_CODE_MSG0": "get %1 latest error code (return int)",
    "MODULE_LLM_GET_LATEST_CAMERA_WORK_ID_MSG0": "get %1 latest camera work id (return string)",
    "MODULE_LLM_GET_LATEST_YOLO_WORK_ID_MSG0": "get %1 latest YOLO work id (return string)",
    "MODULE_LLM_GET_MODEL_LIST_MSG0": "get %1 model list",
    "MODULE_LLM_REMOVE_MODE_MSG0": "Remove %1 model %2",
    "MODULE_LLM_MELOTTS_SETUP_MSG0": "%1 setup MeloTTS with %2 model %3 input %4 enoutput %5 enkws %6 request id %7",
    "MODULE_LLM_GET_LATEST_MELOTTS_WORK_ID_MSG0": "get %1 latest MeloTTS work id (return string)",
    "MODULE_LLM_MELOTTS_INFERENCE_MSG0": "%1 MeloTTS inference with %2 work id %3 input data %4 timeout %5 request id %6",
    "MODULE_LLM_VAD_SETUP_MSG0": "%1 setup VAD with %2 model %3 enoutput %4 enkws %5 request id %6",
    "MODULE_LLM_GET_LATEST_VAD_WORK_ID_MSG0": "get %1 latest VAD work id (return string)",
    "MODULE_LLM_WHISPER_SETUP_MSG0": "%1 setup Whisper with %2 model %3 enoutput %4 language %5 enkws %6 envad %7 request id %8",
    "MODULE_LLM_GET_LATEST_WHISPER_WORK_ID_MSG0": "get %1 latest Whisper work id (return string)",
    "MODULE_COM_LORAWAN470_INIT_MSG0": "Init LoRaWAN470 %1 with %2 UART %3 TX %4 RX %5",
    "MODULE_COM_LORAWAN470_GET_ABP_CONFIG_MSG0": "get %1 ABP config (return tuple)",
    "MODULE_COM_LORAWAN470_GET_OTAA_CONFIG_MSG0": "get %1 OTAA config (return tuple)",
    "MODULE_COM_LORAWAN470_CHECK_JOIN_STATUS_MSG0": "check %1 join status",
    "MODULE_COM_LORAWAN470_CHECK_UPLINK_STATUS_MSG0": "check %1 uplink data status",
    "MODULE_COM_LORAWAN470_CHECK_DOWNLINK_DATA_MSG0": "check and receive %1 downlink data",
    "MODULE_COM_LORAWAN470_SET_JOIN_MODE_MSG0": "Set %1 join mode %2",
    "MODULE_COM_LORAWAN470_STOP_JOIN_NETWORK_MSG0": "Stop %1 join LoRaWAN network",
    "MODULE_COM_LORAWAN470_SET_UPLINK_PORT_MSG0": "Set %1 uplink app port %2 (1 ~ 233)",
    "MODULE_COM_LORAWAN470_CONFIG_MSG0": "Config %1 %2 frequency band mask %3 RX window param: %4 RX1 offset %5 RX2 datarate %6 RX2 FREQ(Hz) %7 class mode %8 uplink downlink %9",
    "MODULE_COM_LORAWAN470_START_JOIN_NETWORK_MSG0": "Start %1 join LoRaWAN network %2 %3 %4 period (seconds) (7 ~ 255) %5 maximum number of attempts (1 ~ 256) %6",
    "MODULE_COM_LORAWAN470_CONFIG_MODE_MSG0": "config",
    "MODULE_COM_LORAWAN470_SEND_DATA_PAYLOAD_MSG0": "send data payload",
    "MODULE_COM_LORAWAN868_INIT_MSG0": "Init LoRaWAN868 %1 with %2 UART %3 TX %4 RX %5",
    "MODULE_COM_LORAWAN868_SET_MODE_MSG0": "Set %1 mode to %2",
    "MODULE_COM_LORAWAN868_SET_PARAMETERS_MSG0": "Set %1 parameters with %2 freq (Hz) %3 power (dBm) %4 spreading factor (5~12) %5 bandwidth %6 CRC check %7 preamble (8~65535) %8 crc %9 inverted %10 save parameters to flash %11",
    "MODULE_COM_LORAWAN868_WAKE_UP_MSG0": "%1 wake up",
    "MODULE_COM_LORAWAN868_SLEEP_MSG0": "%1 sleep",
    "MODULE_COM_LORAWAN868_RESET_MSG0": "%1 reset",
    "MODULE_COM_LORAWAN868_RESTORE_FACTORY_SETTINGS_MSG0": "Restore %1 to factory settings",
    "MODULE_COM_LORAWAN868_SET_COPYRIGHT_MSG0": "Set %1 copyright information print to %2",
    "MODULE_COM_LORAWAN868_SET_AUTO_LOW_POWER_MSG0": "Set %1 automatic low-power mode to %2",
    "MODULE_COM_LORAWAN868_QUERY_CHIP_ID_MSG0": "%1 query the unique ID of the chip",
    "MODULE_COM_LORAWAN868_ENABLE_RX_MSG0": "Enable %1 to receive data with timeout %2",
    "MODULE_COM_LORAWAN868_SET_DEVEUI_MSG0": "Set %1 DevEui to %2",
    "MODULE_COM_LORAWAN868_SET_APPEUI_MSG0": "Set %1 AppEui to %2",
    "MODULE_COM_LORAWAN868_SET_APPKEY_MSG0": "Set %1 AppKey to %2",
    "MODULE_COM_LORAWAN868_SET_APPSKEY_MSG0": "Set %1 AppSKey to %2",
    "MODULE_COM_LORAWAN868_SET_NWKSKEY_MSG0": "Set %1 NwkSKey to %2",
    "MODULE_COM_LORAWAN868_SET_DEVADDR_MSG0": "Set %1 DevAddr to %2",
    "MODULE_COM_LORAWAN868_SET_OTAA_MODE_MSG0": "Set %1 OTAA mode to %2",
    "MODULE_COM_LORAWAN868_SET_ADR_MSG0": "%1 ADR to %2",
    "MODULE_COM_LORAWAN868_SET_CHANNEL_MASK_MSG0": "Set %1 working channel mask to %2",
    "MODULE_COM_LORAWAN868_JOIN_NETWORK_MSG0": "%1 join the network using OTAA",
    "MODULE_COM_LORAWAN868_SET_DUTY_CYCLE_MSG0": "Set %1 duty cycle to %2",
    "MODULE_COM_LORAWAN868_SET_CLASS_MODE_MSG0": "Set %1 communication mode to %2",
    "MODULE_COM_LORAWAN868_SET_ACK_MSG0": "Set %1 the ACK receipt function to %2",
    "MODULE_COM_LORAWAN868_SET_APP_PORT_MSG0": "Set %1 the application port %2 (0 ~ 255) for upstream data",
    "MODULE_COM_LORAWAN868_SET_RETRANSMISSION_COUNT_MSG0": "Set %1 the number of retransmissions if communication fails to %2 (3 ~ 8)",
    "MODULE_COM_LORAWAN868_SEND_HEX_MSG0": "%1 send hex data %2",
    "MODULE_COM_LORAWAN868_SEND_STRING_MSG0": "%1 send string data %2",
    "MODULE_COM_LORAWAN868_QUERY_LORAWAN_MODE_MSG0": "%1 query if the device is in LoRaWAN or normal LoRa mode",
    "MODULE_COM_LORAWAN868_SAVE_PARAMETERS_TO_FLASH_MSG0": "%1 save the current parameters to flash",
    "MODULE_COM_LORAWAN868_AT_CMD_MSG0": "%1 send an AT command %2 and data %3",
    "MODULE_COM_LORAWAN868_AT_QUERY_MSG0": "%1 query the current settings %2",
    "MODULE_COM_LORAWAN868_AT_RECEIVE_MSG0": "%1 receive a response",
    "MODULE_COM_LORAWAN868_FLUSH_MSG0": "%1 clear the UART buffer",
    "MODULE_COM_LORAWAN868_ANY_MSG0": "%1 check if there is any data in the UART buffer",
    "MODULE_COM_LORAWAN868_RECEIVE_DATA_MSG0": "%1 receive data",
    "MODULE_COM_LORAWAN868V2_INIT_MSG0": "Init LoRaWAN868 v2.0 %1 with %2 UART %3 TX %4 RX %5",
    "MODULE_COM_LORAWAN868V2_GET_ABP_CONFIG_MSG0": "get %1 ABP config (return tuple)",
    "MODULE_COM_LORAWAN868V2_GET_OTAA_CONFIG_MSG0": "get %1 OTAA config (return tuple)",
    "MODULE_COM_LORAWAN868V2_CHECK_JOIN_STATUS_MSG0": "check %1 join status",
    "MODULE_COM_LORAWAN868V2_CHECK_UPLINK_STATUS_MSG0": "check %1 uplink data status",
    "MODULE_COM_LORAWAN868V2_CHECK_DOWNLINK_DATA_MSG0": "check and receive %1 downlink data",
    "MODULE_COM_LORAWAN868V2_SET_JOIN_MODE_MSG0": "Set %1 join mode %2",
    "MODULE_COM_LORAWAN868V2_STOP_JOIN_NETWORK_MSG0": "Stop %1 join LoRaWAN network",
    "MODULE_COM_LORAWAN868V2_SET_UPLINK_PORT_MSG0": "Set %1 uplink app port %2 (1 ~ 233)",
    "MODULE_COM_LORAWAN868V2_CONFIG_MSG0": "Config %1 %2 frequency band mask %3 RX window param: %4 RX1 offset %5 RX2 datarate %6 RX2 FREQ(Hz) %7 class mode %8 uplink downlink %9",
    "MODULE_COM_LORAWAN868V2_START_JOIN_NETWORK_MSG0": "Start %1 join LoRaWAN network %2 %3 %4 period (seconds) (7 ~ 255) %5 maximum number of attempts (1 ~ 256) %6",
    "MODULE_COM_LORAWAN868V2_CONFIG_MODE_MSG0": "config",
    "MODULE_COM_LORAWAN868V2_SEND_DATA_PAYLOAD_MSG0": "send data payload",
    "MODULE_COM_LORAWAN915_INIT_MSG0": "Init LoRaWAN915 %1 with %2 UART %3 TX %4 RX %5",
    "MODULE_COM_LORAWAN915_GET_ABP_CONFIG_MSG0": "get %1 ABP config (return tuple)",
    "MODULE_COM_LORAWAN915_GET_OTAA_CONFIG_MSG0": "get %1 OTAA config (return tuple)",
    "MODULE_COM_LORAWAN915_CHECK_JOIN_STATUS_MSG0": "check %1 join status",
    "MODULE_COM_LORAWAN915_CHECK_UPLINK_STATUS_MSG0": "check %1 uplink data status",
    "MODULE_COM_LORAWAN915_CHECK_DOWNLINK_DATA_MSG0": "check and receive %1 downlink data",
    "MODULE_COM_LORAWAN915_SET_JOIN_MODE_MSG0": "Set %1 join mode %2",
    "MODULE_COM_LORAWAN915_STOP_JOIN_NETWORK_MSG0": "Stop %1 join LoRaWAN network",
    "MODULE_COM_LORAWAN915_SET_UPLINK_PORT_MSG0": "Set %1 uplink app port %2 (1 ~ 233)",
    "MODULE_COM_LORAWAN915_CONFIG_MSG0": "Config %1 %2 frequency band mask %3 RX window param: %4 RX1 offset %5 RX2 datarate %6 RX2 FREQ(Hz) %7 class mode %8 uplink downlink %9",
    "MODULE_COM_LORAWAN915_START_JOIN_NETWORK_MSG0": "Start %1 join LoRaWAN network %2 %3 %4 period (seconds) (7 ~ 255) %5 maximum number of attempts (1 ~ 256) %6",
    "MODULE_COM_LORAWAN915_CONFIG_MODE_MSG0": "config",
    "MODULE_COM_LORAWAN915_SEND_DATA_PAYLOAD_MSG0": "send data payload",
    "MODULE_GNSS_INIT_MSG0": "Init GNSS %1 with %2 UART %3 TX %4 RX %5 BMI270 I2C address %6",
    "MODULE_GNSS_GET_GYROSCOPE_MSG0": "get %1 gyroscope value (return tuple)",
    "MODULE_GNSS_GET_ACCELEROMETER_MSG0": "get %1 accelerometer value (m/s^2, return tuple)",
    "MODULE_GNSS_GET_MAGNETOMETER_MSG0": "get %1 magnetometer value (uT, return tuple)",
    "MODULE_GNSS_GET_COMPASS_MSG0": "get %1 compass heading angle (0 to 360 degree, return float)",
    "MODULE_GNSS_GET_ATTITUDE_MSG0": "get %1 attitude (return tuple, [yaw, pitch, roll])",
    "MODULE_GNSS_GET_TEMPERATURE_MSG0": "get %1 temperature (°C, return float)",
    "MODULE_GNSS_GET_PRESSURE_MSG0": "get %1 pressure (hPa, return float)",
    "MODULE_GNSS_GET_TIME_ZONE_MSG0": "get %1 time zone (return int)",
    "MODULE_GNSS_GET_SATELLITE_NUM_MSG0": "get %1 satellite numbers (return string)",
    "MODULE_GNSS_GET_ALTITUDE_MSG0": "get %1 altitude (meter, return string)",
    "MODULE_GNSS_GET_TIME_MSG0": "get %1 time (return string, format is hh:mm:ss)",
    "MODULE_GNSS_GET_DATE_MSG0": "get %1 date (return string, format is dd/mm/yy)",
    "MODULE_GNSS_GET_LATITUDE_MSG0": "get %1 latitude (return string, format is ddmm.mmmmmN/S)",
    "MODULE_GNSS_GET_LONGITUDE_MSG0": "get %1 longitude (return string, format is ddmm.mmmmmE/W)",
    "MODULE_GNSS_GET_LATITUDE_DECIMAL_MSG0": "get %1 latitude decimal (return float, format is dd.dddd)",
    "MODULE_GNSS_GET_LONGITUDE_DECIMAL_MSG0": "get %1 longitude decimal (return float, format is dd.dddd)",
    "MODULE_GNSS_GET_SPEED_MSG0": "get %1 speed %2 (return string)",
    "MODULE_GNSS_GET_COURSE_MSG0": "get %1 course (return string, 0 to 360 degree)",
    "MODULE_GNSS_IS_LOCATE_VALID_MSG0": "get %1 locate status (return True or False)",
    "MODULE_GNSS_SET_TIME_ZONE_MSG0": "Set %1 time zone to %2",
    "MODULE_GNSS_SET_ACCEL_GYRO_ODR_MSG0": "Set %1 accelerometer ODR to %2 and gyroscope ODR to %3",
    "MODULE_GNSS_SET_ACCEL_RANGE_MSG0": "Set %1 accelerometer scale to %2",
    "MODULE_GNSS_SET_GYRO_RANGE_MSG0": "Set %1 gyroscope scale to %2",
    "MODULE_GNSS_SET_MAGNET_ODR_MSG0": "Set %1 magnetometer ODR to %2",
    "MODULE_GNSS_SET_GYRO_OFFSETS_MSG0": "Set %1 gyroscope offset calibration x %2 y %3 z %4",
    "MODULE_SERVO2_INIT_MSG0": "Init Servo2 %1 with %2 I2C address %3 frequency (Hz) %4 min pulse (us) %5 max pulse (us) %6 max degrees %7",
    "MODULE_SERVO2_SET_DEGREES_MSG0": "Set %1 channel %2 degrees %3",
    "MODULE_SERVO2_SET_RADIANS_MSG0": "Set %1 channel %2 radians %3",
    "MODULE_SERVO2_SET_PULSE_WIDTH_MSG0": "Set %1 channel %2 pulse width %3 microseconds",
    "MODULE_SERVO2_SET_DUTY_MSG0": "Set %1 channel %2 duty cycle %3 (0~100)",
    "MODULE_SERVO2_RELEASE_MSG0": "Release %1 channel %2",
    "STEPMOTOR_INIT_MSG0": "Init StepMotor %1 I2C address %2",
    "STEPMOTOR_SET_SPEED_MSG0": "Set %1 speed to %2",
    "STEPMOTOR_TURN_MSG0": "Set %1 turn x %2 y %3 z %4",
    "STEPMOTOR_SET_MODE_MSG0": "Set %1 mode to %2",
    "STEPMOTOR_READ_IDLE_MSG0": "get %1 rotation status",
    "MODULE_GPS_INIT_MSG0": "Init GPS %1 with %2 UART %3 TX %4 RX %5",
    "MODULE_GPS_SET_TIME_ZONE_MSG0": "Set %1 time zone to %2",
    "MODULE_GPS_GET_TIME_ZONE_MSG0": "get %1 time zone (return int)",
    "MODULE_GPS_GET_SATELLITE_NUM_MSG0": "get %1 satellite numbers (return string)",
    "MODULE_GPS_GET_ALTITUDE_MSG0": "get %1 altitude (meter, return string)",
    "MODULE_GPS_GET_TIME_MSG0": "get %1 time (return string, format is hh:mm:ss)",
    "MODULE_GPS_GET_DATE_MSG0": "get %1 date (return string, format is dd/mm/yy)",
    "MODULE_GPS_GET_LATITUDE_MSG0": "get %1 latitude (return string, format is ddmm.mmmmmN/S)",
    "MODULE_GPS_GET_LONGITUDE_MSG0": "get %1 longitude (return string, format is ddmm.mmmmmE/W)",
    "MODULE_GPS_GET_LATITUDE_DECIMAL_MSG0": "get %1 latitude decimal (return float, format is dd.dddd)",
    "MODULE_GPS_GET_LONGITUDE_DECIMAL_MSG0": "get %1 longitude decimal (return float, format is dd.dddd)",
    "MODULE_GPS_GET_SPEED_MSG0": "get %1 speed %2 (return string)",
    "MODULE_GPS_GET_COURSE_MSG0": "get %1 course (return string, 0 to 360 degree)",
    "MODULE_GPS_IS_LOCATE_VALID_MSG0": "get %1 locate status (return True or False)",
    "MODULE_GPSV2_INIT_MSG0": "Init GPS v2.0 %1 with %2 UART %3 TX %4 RX %5 PPS %6",
    "MODULE_GPSV2_DEINIT_MSG0": "%1 deinit",
    "MODULE_GPSV2_GET_ANTENNA_STATE_MSG0": "get %1 antenna state (return string)",
    "MODULE_GPSV2_GET_GPS_TIME_MSG0": "get %1 local time (return list [hour, min, second])",
    "MODULE_GPSV2_GET_GPS_DATE_MSG0": "get %1 date (return list [yyyy, mm, dd])",
    "MODULE_GPSV2_GET_GPS_DATE_TIME_MSG0": "get %1 date and local time (return list [yyyy, mm, dd, hour, min, second])",
    "MODULE_GPSV2_GET_TIMESTAMP_MSG0": "get %1 timestamp (return int)",
    "MODULE_GPSV2_GET_LATITUDE_MSG0": "get %1 latitude (return string)",
    "MODULE_GPSV2_GET_LONGITUDE_MSG0": "get %1 longitude (return string)",
    "MODULE_GPSV2_GET_ALTITUDE_MSG0": "get %1 altitude (return string)",
    "MODULE_GPSV2_GET_SATELLITE_NUM_MSG0": "get %1 satellite number (return int)",
    "MODULE_GPSV2_GET_POS_QUALITY_MSG0": "get %1 position quality (return int)",
    "MODULE_GPSV2_GET_CORSE_OVER_GROUND_MSG0": "get %1 course over ground degree (return string)",
    "MODULE_GPSV2_GET_SPEED_OVER_GROUND_MSG0": "get %1 speed over ground knot (return string)",
    "MODULE_GPSV2_GET_WORK_MODE_MSG0": "get %1 work mode (return int)",
    "MODULE_GPSV2_SET_WORK_MODE_MSG0": "Set %1 work mode to %2",
    "MODULE_GPSV2_GET_TIME_ZONE_MSG0": "get %1 current time zone offset (return int)",
    "MODULE_GPSV2_SET_TIME_ZONE_MSG0": "Set %1 time zone offset to %2",
    "MODULE_COM_GPS_INIT_MSG0": "Init GPS %1 with %2 UART %3 TX %4 RX %5",
    "MODULE_COM_GPS_SET_TIME_ZONE_MSG0": "Set %1 time zone to %2",
    "MODULE_COM_GPS_GET_TIME_ZONE_MSG0": "get %1 time zone (return int)",
    "MODULE_COM_GPS_GET_SATELLITE_NUM_MSG0": "get %1 satellite numbers (return string)",
    "MODULE_COM_GPS_GET_ALTITUDE_MSG0": "get %1 altitude (meter, return string)",
    "MODULE_COM_GPS_GET_TIME_MSG0": "get %1 time (return string, format is hh:mm:ss)",
    "MODULE_COM_GPS_GET_DATE_MSG0": "get %1 date (return string, format is dd/mm/yy)",
    "MODULE_COM_GPS_GET_LATITUDE_MSG0": "get %1 latitude (return string, format is ddmm.mmmmmN/S)",
    "MODULE_COM_GPS_GET_LONGITUDE_MSG0": "get %1 longitude (return string, format is ddmm.mmmmmE/W)",
    "MODULE_COM_GPS_GET_LATITUDE_DECIMAL_MSG0": "get %1 latitude decimal (return float, format is dd.dddd)",
    "MODULE_COM_GPS_GET_LONGITUDE_DECIMAL_MSG0": "get %1 longitude decimal (return float, format is dd.dddd)",
    "MODULE_COM_GPS_GET_SPEED_MSG0": "get %1 speed %2 (return string)",
    "MODULE_COM_GPS_GET_COURSE_MSG0": "get %1 course (return string, 0 to 360 degree)",
    "MODULE_COM_GPS_IS_LOCATE_VALID_MSG0": "get %1 locate status (return True or False)",
    "MODULE_GOPLUS2_INIT_MSG0": "GoPlus2 %1 をI2Cアドレス %2 で初期化",
    "MODULE_GOPLUS2_GET_DIGITAL_INPUT_MSG0": "%1 port B %2 からデジタル入力を取得",
    "MODULE_GOPLUS2_GET_ANALOG_INPUT_MSG0": "%1 port B %2 からアナログ入力を取得",
    "MODULE_GOPLUS2_SET_SERVO_ANGLE_MSG0": "%1 サーボ %2 を回転角 %3 (0 ~ 180)に設定",
    "MODULE_GOPLUS2_SET_SERVO_PULSE_WIDTH_MSG0": "%1 サーボ %2 のパルス幅を %3 (500 ~ 2500)に設定",
    "MODULE_GOPLUS2_SET_MOTOR_SPEED_MSG0": "%1 サーボ %2 のモーター速度を %3 (-127 ~ 127)に設定",
    "MODULE_GOPLUS2_SET_DIGITAL_OUTPUT_MSG0": "%1 port B %2 のデジタル出力を %3 に設定",
    "MODULE_PM25_INIT_MSG0": "Init PM2.5 %1 with UART %2",
    "MODULE_PM25_GET_MODULE_POWER_MSG0": "get %1 power state (return True or False)",
    "MODULE_PM25_GET_PM_DATA_MSG0": "get %1 %2 data",
    "MODULE_PM25_SET_MODULE_POWER_MSG0": "Set %1 power state to %2",
    "MODULE_PM25_SET_MODULE_MODE_MSG0": "Set %1 work mode to %2",
    "MODULE_PM25_REFRESH_DATA_MSG0": "Refresh %1 data",
    "MODULE_PM25_GET_TEMPERATURE_MSG0": "get %1 environmental temperature (°C, return float)",
    "MODULE_PM25_GET_HUMIDITY_MSG0": "get %1 environmental humidity (%, return float)",
    "MODULE_PM25_REQUEST_AIR_DATA_MSG0": "Request %1 air quality data",
    "MODULE_ODRIVE_INIT_MSG0": "Init ODrive %1 with %2 UART %3 TX %4 RX %5",
    "MODULE_ODRIVE_SET_POSITION_MSG0": "%1 set the target position with %2 position (counts or radians) %3 feedforward velocity (counts/s or radians/s) %4 feedforward current (A) %5",
    "MODULE_ODRIVE_SET_VELOCITY_MSG0": "%1 set the velocity with %2 velocity (counts/s or radians/s) %3 current (A) %4",
    "MODULE_ODRIVE_SET_CURRENT_MSG0": "%1 set the target current to %2 (A)",
    "MODULE_ODRIVE_SET_GAIN_MSG0": "%1 set gain with %2 pos gain %3 vel gain %4 vel integrator gain %5",
    "MODULE_ODRIVE_SET_CONTROL_MODE_MSG0": "%1 set the control mode to %2",
    "MODULE_ODRIVE_SET_CONTROL_INPUT_POS_MSG0": "%1 set the control input position to %2 (counts or radians)",
    "MODULE_ODRIVE_TRAPEZOIDAL_MOVE_MSG0": "%1 trapezoidal move to position %2 (counts or radians)",
    "MODULE_ODRIVE_RUN_STATE_MSG0": "%1 run axis to requested state %2 with timeout %3 (milliseconds)",
    "MODULE_ODRIVE_GET_VELOCITY_MSG0": "%1 get the estimated velocity of the motor (counts/s or radians/s, return float)",
    "MODULE_ODRIVE_GET_VBUS_VOLTAGE_MSG0": "%1 get the measured bus voltage (V, return float)",
    "MODULE_ODRIVE_GET_PHASE_CURRENT_MSG0": "%1 get the measured phase current of the motor (A, return float)",
    "MODULE_ODRIVE_GET_BUS_CURRENT_MSG0": "%1 get the bus current drawn by the motor (A, return float)",
    "MODULE_ODRIVE_GET_ENCODER_SHADOW_COUNT_MSG0": "%1 get the encoder's shadow count (return int)",
    "MODULE_ODRIVE_GET_ENCODER_POS_ESTIMATE_MSG0": "%1 get the estimated position from the encoder (counts or radians, return float)",
    "MODULE_ODRIVE_GET_MOTOR_TEMP_MSG0": "%1 get the temperature of the motor thermistor (°C, return float)",
    "MODULE_ODRIVE_ERASE_CONFIG_MSG0": "%1 erase current config settings",
    "MODULE_ODRIVE_SAVE_CONFIG_MSG0": "%1 save current config",
    "MODULE_ODRIVE_REBOOT_MSG0": "%1 reboot device",
    "MODULE_ODRIVE_SET_DEFAULT_CONFIG_MSG0": "%1 set default config params",
    "MODULE_ODRIVE_CHECK_ERROR_MSG0": "%1 check for any errors in the system components",
    "MODULE_ODRIVE_READ_FLUSH_MSG0": "%1 flush the UART read buffer",
    "MODULE_ODRIVE_READ_STRING_MSG0": "%1 read line (return string)",
    "MODULE_ODRIVE_READ_FLOAT_MSG0": "%1 read a float (return float)",
    "MODULE_ODRIVE_READ_INT_MSG0": "%1 read an int (return int)",
    "MODULE_ODRIVE_WRITE_TO_DEVICE_MSG0": "%1 write a command %2",
    "MODULE_ODRIVE_WRITE_CONFIG_MSG0": "%1 write config param with %2 key %3 value %4",
    "MODULE_ODRIVE_READ_CONFIG_INT_MSG0": "%1 read int config with key %2 (return int)",
    "MODULE_ODRIVE_READ_CONFIG_FLOAT_MSG0": "%1 read float config with key %2 (return float)",
    "MODULE_DMX_INIT_MSG0": "Init DMX %1 with %2 UART %3 mode %4",
    "MODULE_DMX_REINIT_MSG0": "Reinit %1 with %2 mode",
    "MODULE_DMX_DEINIT_MSG0": "%1 deinit",
    "MODULE_DMX_WRITE_DATA_MSG0": "%1 send %2 (0 ~ 255) to channel %3 (1 ~ 512)",
    "MODULE_DMX_READ_DATA_MSG0": "Read %1 data from channel %2 (1 ~ 512) (return int)",
    "MODULE_DMX_CLEAR_BUFFER_MSG0": "Reset %1 DMX buffer",
    "MODULE_DMX_RECEIVE_DATA_EVENT_MSG0": "When %1 channel %2 (1 ~ 512) receive data %3",
    "MODULE_DMX_START_RECEIVE_MSG0": "%1 start receive data",
    "MODULE_DMX_STOP_RECEIVE_MSG0": "%1 stop receive data",
    "MODULE_COM_ZIGBEE_INIT_MSG0": "Init Zigbee %1 with %2 UART %3 TX %4 RX %5 verbose %6",
    "MODULE_COM_ZIGBEE_SET_MODULE_PARAM_MSG0": "%1 set module parameters %2 device type %3 PAN ID %4 channel (11 ~ 26) %5 transfer mode %6 custom address %7",
    "MODULE_COM_ZIGBEE_SET_MODULE_PARAM_MSG1": "ANT type",
    "MODULE_COM_ZIGBEE_SET_MODULE_PARAM_MSG2": "encryption enable",
    "MODULE_COM_ZIGBEE_SET_MODULE_PARAM_MSG3": "encryption key",
    "MODULE_COM_ZIGBEE_SET_MODULE_PARAM_MSG4": "Subnode preset parameters",
    "MODULE_COM_ZIGBEE_SET_NODE_PARAM_MSG0": "device type",
    "MODULE_COM_ZIGBEE_SET_NODE_PARAM_MSG1": "ANT type",
    "MODULE_COM_ZIGBEE_SET_NODE_PARAM_MSG2": "transfer mode",
    "MODULE_COM_ZIGBEE_SET_NODE_PARAM_MSG3": "custom address",
    "MODULE_COM_ZIGBEE_SET_DEVICE_TYPE_MSG0": "%1 set device type %2",
    "MODULE_COM_ZIGBEE_SET_CHANNEL_MSG0": "%1 set channel %2",
    "MODULE_COM_ZIGBEE_SET_TRANSFER_MODE_MSG0": "%1 set transfer mode %2",
    "MODULE_COM_ZIGBEE_SET_CUSTOM_ADDRESS_MSG0": "%1 set custom address %2",
    "MODULE_COM_ZIGBEE_SET_PAN_ID_MSG0": "%1 set PAN ID %2",
    "MODULE_COM_ZIGBEE_SET_ANT_TYPE_MSG0": "%1 set ANT type %2",
    "MODULE_COM_ZIGBEE_GET_SHORT_ADDRESS_MSG0": "get %1 short address (return int)",
    "MODULE_COM_ZIGBEE_GET_CUSTOM_ADDRESS_MSG0": "get %1 custom address (return int)",
    "MODULE_COM_ZIGBEE_ISCONNECTED_MSG0": "%1 is connected (return True or False)",
    "MODULE_COM_ZIGBEE_START_RECEIVE_MSG0": "%1 start receive data",
    "MODULE_COM_ZIGBEE_RECEIVE_DATA_EVENT_MSG0": "when %1 receive data (bytes) %2 data %3 dest address %4 src address %5",
    "MODULE_COM_ZIGBEE_RECEIVE_DATA_STR_EVENT_MSG0": "when %1 receive data (string) %2 data %3 dest address %4 src address %5",
    "MODULE_COM_ZIGBEE_STOP_RECEIVE_MSG0": "%1 stop receive data",
    "MODULE_COM_ZIGBEE_SEND_DATA_MSG0": "%1 send (string or bytes) %2 custom address %3",
    "MODULE_COM_ZIGBEE_BROADCAST_MSG0": "%1 broadcast (string or bytes) %2",
    "MODULE_PWRCAN_INIT_MSG0": "Init PwrCAN %1 %2 with",
    "MODULE_PWRCAN_INIT_MSG1": "ID",
    "MODULE_PWRCAN_INIT_MSG2": "mode",
    "MODULE_PWRCAN_INIT_MSG3": "TX",
    "MODULE_PWRCAN_INIT_MSG4": "RX",
    "MODULE_PWRCAN_INIT_MSG5": "baudrate",
    "MODULE_PWRCAN_INIT_MSG6": "prescaler",
    "MODULE_PWRCAN_INIT_MSG7": "sjw",
    "MODULE_PWRCAN_INIT_MSG8": "bs1",
    "MODULE_PWRCAN_INIT_MSG9": "bs2",
    "MODULE_PWRCAN_INIT_MSG10": "triple sampling",
    "MODULE_PWRCAN_INIT_MSG11": "UART",
    "MODULE_PWRCAN_INIT_MSG12": "baudrate",
    "MODULE_PWRCAN_INIT_MSG13": "bits",
    "MODULE_PWRCAN_INIT_MSG14": "parity",
    "MODULE_PWRCAN_INIT_MSG15": "stop",
    "MODULE_PWRCAN_INIT_MSG16": "TX",
    "MODULE_PWRCAN_INIT_MSG17": "RX",
    "MODULE_PWRCAN_INIT_MSG18": "RTS",
    "MODULE_PWRCAN_INIT_MSG19": "CTS",
    "MODULE_PWRCAN_INIT_MSG20": "TX buffer",
    "MODULE_PWRCAN_INIT_MSG21": "RX buffer",
    "MODULE_PWRCAN_INIT_MSG22": "timeout",
    "MODULE_PWRCAN_INIT_MSG23": "timeout char",
    "MODULE_PWRCAN_INIT_MSG24": "invert",
    "MODULE_PWRCAN_INIT_MSG25": "flow",
    "MODULE_PWRCAN_SETUP_MSG0": "%1 setup %2 baudrate %3 bits %4 parity %5 stop %6 TX %7 RX %8",
    "MODULE_PWRCAN_DEINIT_MSG0": "%1 deinit",
    "MODULE_PWRCAN_RESTART_MSG0": "%1 restart",
    "MODULE_PWRCAN_GET_STATE_MSG0": "%1 get state (return int)",
    "MODULE_PWRCAN_GET_INFO_MSG0": "%1 get error status information",
    "MODULE_PWRCAN_ANY_MSG0": "%1 count of available (return True or False)",
    "MODULE_PWRCAN_RECV_MESSAGE_MSG0": "%1 read message timeout %2 (return tuple)",
    "MODULE_PWRCAN_RECV_MESSAGE_INFO_MSG0": "%1 read message into %2 timeout %3",
    "MODULE_PWRCAN_SEND_DATA_MSG0": "%1 send %2 id %3 timeout %4 rtr %5 extframe %6",
    "MODULE_PWRCAN_RS485_READ_ALL_BYTES_MSG0": "%1 read all bytes (return bytes)",
    "MODULE_PWRCAN_RS485_READ_BYTES_MSG0": "%1 read %2 bytes (return bytes)",
    "MODULE_PWRCAN_RS485_READ_LINE_MSG0": "%1 read line (return bytes)",
    "MODULE_PWRCAN_RS485_ANY_MSG0": "%1 number of bytes available",
    "MODULE_PWRCAN_RS485_WRITE_MSG0": "%1 write %2",
    "MODULE_PWRCAN_RS485_WRITE_LINE_MSG0": "%1 write a line %2",
    "MODULE_PWRCAN_RS485_WRITE_LIST_BYTES_MSG0": "%1 write list of bytes %2",
    "MODULE_PWRCAN_RS485_READ_INTO_BUF_MSG0": "%1 read into buf %2",
    "MODULE_PWRCAN_RS485_SEND_BREAK_MSG0": "%1 send break single",
    "MODULE_PWRCAN_RS485_FLUSH_MSG0": "%1 flush",
    "MODULE_PWRCAN_RS485_TXDONE_MSG0": "%1 is transfer done (return True or False)",
    "MODULE_USB_INIT_MSG0": "Init USB %1 with %2 CS pin %3 interrupt pin %4",
    "MODULE_USB_POLL_DATA_MSG0": "%1 poll data in loop ",
    "MODULE_USB_IS_LEFT_BTN_PRESSED_MSG0": "%1 mouse left button is pressed (return True or False)",
    "MODULE_USB_IS_RIGHT_BTN_PRESSED_MSG0": "%1 mouse right button is pressed (return True or False)",
    "MODULE_USB_IS_MIDDLE_BTN_PRESSED_MSG0": "%1 mouse middle button is pressed (return True or False)",
    "MODULE_USB_IS_FORWARD_BTN_PRESSED_MSG0": "%1 mouse forward button is pressed (return True or False)",
    "MODULE_USB_IS_BACK_BTN_PRESSED_MSG0": "%1 mouse back button is pressed (return True or False)",
    "MODULE_USB_READ_MOUSE_MOVE_MSG0": "%1 read mouse cursor movement (return tuple)",
    "MODULE_USB_READ_WHEEL_MOVE_MSG0": "%1 read mouse wheel movement (return -127~127)",
    "MODULE_USB_READ_KB_INPUT_MSG0": "%1 read keyboard input %2 convert HID KeyCode to string %3",
    "MODULE_USB_READ_KB_MODIFIER_MSG0": "%1 read keyboard modifier (return int)",
    "MODULE_USB_READ_GPIN_MSG0": "%1 read input pin %2 value (return 0 or 1)",
    "MODULE_USB_WRITE_GPOUT_MSG0": "%1 set output pin %2 value %3 (0 or 1)",
    "MODULE_BALA2_INIT_MSG0": "Init Bala2 %1 with timer %2 (0~3)",
    "MODULE_BALA2_SET_MOTOR_SPEED_MSG0": "Set %1 left motor speed to %2 (-1023~1023) and right motor speed to %3 (-1023~1023)",
    "MODULE_BALA2_SET_ENCODER_VALUE_MSG0": "Set %1 left encoder value to %2 and right encoder value to %3",
    "MODULE_BALA2_GET_ENCODER_VALUE_MSG0": "get %1 encoder value (return tuple)",
    "MODULE_BALA2_SET_SERVO_ANGLE_MSG0": "Set %1 servo pos to %2 (1~4) and angle to %3 (0~180)",
    "MODULE_BALA2_START_MSG0": "%1 start",
    "MODULE_BALA2_STOP_MSG0": "%1 stop",
    "MODULE_BALA2_GET_ANGLE_MSG0": "get %1 tilt angle",
    "MODULE_BALA2_SET_ANGLE_PID_MSG0": "Set %1 angle PID parameters with %2 proportional gain %3 integral gain %4 derivative gain %5",
    "MODULE_BALA2_GET_ANGLE_PID_MSG0": "get %1 angle PID parameters (return tuple)",
    "MODULE_BALA2_SET_ANGLE_PID_TARGET_MSG0": "Set %1 target angle for angle PID control to %2",
    "MODULE_BALA2_GET_ANGLE_PID_TARGET_MSG0": "get %1 target angle for angle PID control (return float)",
    "MODULE_BALA2_SET_SPEED_PID_MSG0": "Set %1 speed PID parameters with %2 proportional gain %3 integral gain %4 derivative gain %5",
    "MODULE_BALA2_GET_SPEED_PID_MSG0": "get %1 speed PID parameters (return tuple)",
    "MODULE_BALA2_SET_SPEED_PID_TARGET_MSG0": "Set %1 target speed for speed PID control to %2",
    "MODULE_BALA2_GET_SPEED_PID_TARGET_MSG0": "get %1 target speed for speed PID control (return float)",
    "MODULE_BALA2_SET_TURN_SPEED_MSG0": "Set %1 turning speed to %2 (-1023~1023)",
    "MODULE_BALA2_CALIBRATE_MSG0": "%1 sensor calibrate",
    "MODULE_COM_LTE_INIT_MSG0": "Init LTE %1 with %2 UART %3 TX %4 RX %5 verbose %6",
    "MODULE_COM_LTE_CHAT_MSG0": "%1 chat to modem with script %2",
    "MODULE_COM_LTE_CHAT_PDP_MSG0": "%1 chat to modem with PDP type %2 APN %3",
    "MODULE_COM_LTE_ACTIVE_MSG0": "%1 active %2",
    "MODULE_COM_LTE_DEINIT_MSG0": "%1 deinit",
    "MODULE_COM_LTE_ISCONNECTED_MSG0": "%1 is connected",
    "MODULE_COM_LTE_GET_LOCALIP_MSG0": "get %1 local IP",
    "MODULE_COM_LTE_GET_SUBNET_MSG0": "get %1 subnet",
    "MODULE_COM_LTE_GET_GATEWAY_MSG0": "get %1 gateway",
    "MODULE_COM_LTE_GET_DNS_MSG0": "get %1 DNS",
    "MODULE_COM_LTE_CONNECT_MSG0": "%1 connect to ppp with authmode %2 username %3 password %4",
    "MODULE_FANV11_INIT_MSG0": "Init Fan v1.1 %1 I2C address %2 (0x08 ~ 0x77)",
    "MODULE_FANV11_GET_I2C_ADDRESS_MSG0": "get %1 current I2C address (return int)",
    "MODULE_FANV11_SET_ADDRESS_MSG0": "Set %1 I2C address %2 (0x08 ~ 0x77)",
    "MODULE_FANV11_GET_FIRMWARE_VERSION_MSG0": "get %1 firmware version (return int)",
    "MODULE_FANV11_GET_FAN_STATE_MSG0": "get %1 current fan state (return True or False)",
    "MODULE_FANV11_SET_FAN_STATE_MSG0": "Set %1 fan state to %2",
    "MODULE_FANV11_GET_PWM_FREQUENCY_MSG0": "get %1 fan PWM frequency (return int)",
    "MODULE_FANV11_SET_PWM_FREQUENCY_MSG0": "Set %1 fan PWM frequency to %2",
    "MODULE_FANV11_GET_PWM_DUTY_CYCLE_MSG0": "get %1 current fan PWM duty cycle (return int)",
    "MODULE_FANV11_SET_PWM_DUTY_CYCLE_MSG0": "Set %1 fan PWM duty cycle to %2",
    "MODULE_FANV11_GET_FAN_RPM_MSG0": "get %1 current fan rpm (return int)",
    "MODULE_FANV11_GET_SINGLE_FREQUENCY_MSG0": "get %1 current fan single frequency (return int)",
    "MODULE_FANV11_WRITE_FLASH_MSG0": "Save %1 current setting to flash",
    "MODULE_COMMU_INIT_MSG0": "Init COMMU %1 %2 with",
    "MODULE_COMMU_INIT_MSG1": "mode",
    "MODULE_COMMU_INIT_MSG2": "baudrate",
    "MODULE_COMMU_INIT_MSG3": "UART",
    "MODULE_COMMU_INIT_MSG4": "baudrate",
    "MODULE_COMMU_INIT_MSG5": "bits",
    "MODULE_COMMU_INIT_MSG6": "parity",
    "MODULE_COMMU_INIT_MSG7": "stop",
    "MODULE_COMMU_INIT_MSG8": "TX",
    "MODULE_COMMU_INIT_MSG9": "RX",
    "MODULE_COMMU_INIT_MSG10": "RTS",
    "MODULE_COMMU_INIT_MSG11": "CTS",
    "MODULE_COMMU_INIT_MSG12": "TX buffer",
    "MODULE_COMMU_INIT_MSG13": "RX buffer",
    "MODULE_COMMU_INIT_MSG14": "timeout",
    "MODULE_COMMU_INIT_MSG15": "timeout char",
    "MODULE_COMMU_INIT_MSG16": "invert",
    "MODULE_COMMU_INIT_MSG17": "flow",
    "MODULE_COMMU_INIT_MSG18": "I2C ID",
    "MODULE_COMMU_INIT_MSG19": "SCL",
    "MODULE_COMMU_INIT_MSG20": "SDA",
    "MODULE_COMMU_INIT_MSG21": "freq",
    "MODULE_COMMU_DEINIT_MSG0": "%1 deinit",
    "MODULE_COMMU_GET_INFO_MSG0": "%1 get error status information",
    "MODULE_COMMU_ANY_MSG0": "%1 count of available (return True or False)",
    "MODULE_COMMU_RECV_MESSAGE_MSG0": "%1 read message timeout %2",
    "MODULE_COMMU_RECV_MESSAGE_INTO_MSG0": "%1 read message into %2 timeout %3",
    "MODULE_COMMU_SEND_DATA_MSG0": "%1 send %2 id %3 extframe %4",
    "MODULE_COMMU_RS485_SETUP_MSG0": "%1 setup %2 baudrate %3 bits %4 parity %5 stop %6 TX %7 RX %8",
    "MODULE_COMMU_RS485_READ_ALL_BYTES_MSG0": "%1 read all bytes (return bytes)",
    "MODULE_COMMU_RS485_READ_BYTES_MSG0": "%1 read %2 bytes (return bytes)",
    "MODULE_COMMU_RS485_READ_LINE_MSG0": "%1 read line (return bytes)",
    "MODULE_COMMU_RS485_ANY_MSG0": "%1 number of bytes available",
    "MODULE_COMMU_RS485_WRITE_MSG0": "%1 write %2",
    "MODULE_COMMU_RS485_WRITE_LINE_MSG0": "%1 write a line %2",
    "MODULE_COMMU_RS485_WRITE_LIST_BYTES_MSG0": "%1 write list of bytes %2",
    "MODULE_COMMU_RS485_READ_INTO_BUF_MSG0": "%1 read into buf %2",
    "MODULE_COMMU_RS485_SEND_BREAK_MSG0": "%1 send break single",
    "MODULE_COMMU_RS485_FLUSH_MSG0": "%1 flush",
    "MODULE_COMMU_RS485_TXDONE_MSG0": "%1 is transfer done (return True or False)",
    "MODULE_COMMU_I2C_SCAN_MSG0": "%1 scan device (return 7-bit address list)",
    "MODULE_COMMU_I2C_READFROM_MSG0": "%1 read from addr %2 nbytes %3 STOP %4 (return bytes)",
    "MODULE_COMMU_I2C_READFROM_INTO_MSG0": "%1 read from addr %2 into buf %3 STOP %4",
    "MODULE_COMMU_I2C_READFROM_MEM_MSG0": "%1 read from addr %2 memory addr %3 nbytes %4 (return bytes)",
    "MODULE_COMMU_I2C_READFROM_MEM_INTO_MSG0": "%1 read from addr %2 memory addr %3 into buf %4",
    "MODULE_COMMU_I2C_WRITETO_MSG0": "%1 write buf %2 to addr %3 stop %4",
    "MODULE_COMMU_I2C_WRITETO_RETURN_MSG0": "%1 write buf %2 to addr %3 STOP %4 (return nbytes written)",
    "MODULE_COMMU_I2C_WRITETO_MEM_MSG0": "%1 write buf %2 to addr %3 memory addr %4",
    "MODULE_ECG_INIT_MSG0": "Init ECG %1 with %2 UART %3 TX %4 RX %5",
    "MODULE_ECG_READ_HEARTRATE_MSG0": "read %1 heartrate",
    "MODULE_ECG_READ_RAW_ECG_DATA_MSG0": "read %1 raw ECG data",
    "MODULE_ECG_POLL_DATA_TICK_MSG0": "%1 poll data in loop",
    "MODULE_GATEWAY_H2_INIT_MSG0": "Init Gateway H2 %1 and create switch endpoint",
    "MODULE_GATEWAY_H2_INIT_MSG1": "UART",
    "MODULE_GATEWAY_H2_EP_ON_MSG0": "Switch endpoint of %1 turns on the light for the device at address %2",
    "MODULE_GATEWAY_H2_EP_ALL_ON_MSG0": "Switch endpoint of %1 turns on all the lights",
    "MODULE_GATEWAY_H2_EP_OFF_MSG0": "Switch endpoint of %1 turns off the light for the device at address %2",
    "MODULE_GATEWAY_H2_EP_ALL_OFF_MSG0": "Switch endpoint of %1 turns off all the lights",
    "MODULE_GATEWAY_H2_EP_TOGGLE_MSG0": "Switch endpoint of %1 toggles the light for the device at address %2",
    "MODULE_GATEWAY_H2_EP_ALL_TOGGLE_MSG0": "Switch endpoint of %1 toggles all the lights",
    "MODULE_GATEWAY_H2_EP_EVENT_MSG0": "When switch endpoint of %1 is bound to the device at address %2",
    "MODULE_AUDIO_INIT_MSG0": "Init Audio %1 with %2 sample rate %3",
    "MODULE_AUDIO_INIT_MSG1": "channel",
    "MODULE_AUDIO_INIT_MSG2": "offset",
    "MODULE_AUDIO_INIT_MSG3": "MUX",
    "MODULE_AUDIO_INIT_CORES3_MSG0": "Init Audio %1 with %2 sample rate %3 switch %4",
    "MODULE_AUDIO_SPEAKER_PLAYWAV_FILE_MSG0": "%1 play WAV file %2 %3",
    "MODULE_AUDIO_SPEAKER_TONE_MSG0": "%1 play tone freq %2 (Hz) millisecond %3",
    "MODULE_AUDIO_SPEAKER_PLAY_WAV_MSG0": "%1 play WAV (bytearray / bytes) %2 duration (millisecond) %3",
    "MODULE_AUDIO_SPEAKER_PLAY_RAW_MSG0": "%1 play PCM (bytearray / bytes) %2 sample rate (Hz) %3 channel %4 bit %5 duration (millisecond) %6",
    "MODULE_AUDIO_SPEAKER_PAUSE_MSG0": "%1 pause play",
    "MODULE_AUDIO_SPEAKER_RESUME_MSG0": "%1 resume play",
    "MODULE_AUDIO_SPEAKER_STOP_MSG0": "%1 stop play",
    "MODULE_AUDIO_SPEAKER_GET_VOLUME_PERCENTAGE_MSG0": "get %1 volume (return int, 0 ~ 100)",
    "MODULE_AUDIO_SPEAKER_SET_VOLUME_PERCENTAGE_MSG0": "Set %1 volume %2 %",
    "MODULE_AUDIO_RGB_SET_COLOR_MSG0": "Set %1 LED %2 (0~2) color %3",
    "MODULE_AUDIO_RGB_FILL_COLOR_MSG0": "Fill %1 all LED color %2",
    "MODULE_AUDIO_RGB_SET_BRIGHTNESS_MSG0": "Set %1 LED brightness %2 (0~100)",
    "MODULE_AUDIO_RECORD_WAV_FILE_MSG0": "%1 record WAV file %2 %3 sample rate %4 channel %5 bit %6 duration (millisecond) %7",
    "MODULE_AUDIO_RECORD_PCM_MSG0": "%1 record PCM with %2 sample rate %3 channel %4 bit %5 duration (millisecond) %6",
    "MODULE_AUDIO_MIC_GET_PCM_MSG0": "get %1 PCM buffer (return bytes)",
    "MODULE_DCMOTOR_INIT_MSG0": "Init DCMotor %1",
    "MODULE_DCMOTOR_SET_MOTOR_SPEED_MSG0": "Set %1 motor %2 speed to %3 (-255 ~ 255)",
    "MODULE_DCMOTOR_SET_MOTOR_SPEED_PERCENT_MSG0": "Set %1 motor %2 speed to %3 % (-100 ~ 100)",
    "MODULE_DCMOTOR_GET_ENCODER_MSG0": "get %1 motor %2 encoder value",
    "MODULE_DCMOTOR_CLEAR_ENCODER_MSG0": "Clear %1 motor %2 encoder value",
    "ATOM_SOCKET_INIT_MSG0": "Init ATOM Socket",
    "ATOM_SOCKET_INIT_MSG1": "TX pin",
    "ATOM_SOCKET_INIT_MSG2": "RX pin",
    "ATOM_SOCKET_INIT_MSG3": "relay pin",
    "ATOM_SOCKET_GET_DATA_MSG0": "get data timeout",
    "ATOM_SOCKET_GET_DATA_MSG1": "ms from ATOM Socket (return tuple)",
    "ATOM_SOCKET_GET_VOLTAGE_MSG0": "get voltage from ATOM Socket (V, return float)",
    "ATOM_SOCKET_GET_CURRENT_MSG0": "get current from ATOM Socket (A, return float)",
    "ATOM_SOCKET_GET_POWER_MSG0": "get power from ATOM Socket (W, return float)",
    "ATOM_SOCKET_GET_PF_MSG0": "get power factor from ATOM Socket (return int)",
    "ATOM_SOCKET_GET_INSPECTING_POWER_MSG0": "calculate the inspecting power of ATOM Socket (W, return float)",
    "ATOM_SOCKET_GET_POWER_FACTOR_MSG0": "calculate the power factor of ATOM Socket (return float)",
    "ATOM_SOCKET_GET_KWH_MSG0": "get the accumulated energy measurement in KWh from ATOM Socket (return float)",
    "ATOM_SOCKET_SET_RELAY_MSG0": "Set the relay status of ATOM Socket to",
    "ATOM_SOCKET_START_RECEIVE_DATA_MSG0": "Start receiving data from ATOM Socket",
    "ATOM_SOCKET_RECEIVE_DATA_EVENT_MSG0": "When ATOM Socket receive data",
    "ATOM_SOCKET_RECEIVE_DATA_EVENT_MSG1": "voltage",
    "ATOM_SOCKET_RECEIVE_DATA_EVENT_MSG2": "current",
    "ATOM_SOCKET_RECEIVE_DATA_EVENT_MSG3": "power",
    "ATOM_SOCKET_RECEIVE_DATA_EVENT_MSG4": "KWh",
    "ATOM_SOCKET_STOP_RECEIVE_DATA_MSG0": "Stop receiving data from ATOM Socket",
    "BASE_MOTION_INIT_MSG0": "Init Motion I2C address %1",
    "BASE_MOTION_GET_SERVO_ANGLE_MSG0": "Motion get channel %1 servo angle (return 0 ~ 180)",
    "BASE_MOTION_GET_SERVO_PULSE_MSG0": "Motion get channel %1 servo pulse (return 500 ~ 2500)",
    "BASE_MOTION_GET_MOTOR_SPEED_MSG0": "Motion get channel %1 motor speed (return -127 ~ 127)",
    "BASE_MOTION_SET_SERVO_ANGLE_MSG0": "Motion set channel %1 servo angle %2 (0 ~ 180)",
    "BASE_MOTION_SET_SERVO_PULSE_MSG0": "Motion set channel %1 servo pulse %2 (500 ~ 2500)",
    "BASE_MOTION_SET_MOTOR_SPEED_MSG0": "Motion set channel %1 motor speed %2 (-127 ~ 127)",
    "BASE_MOTION_READ_VOLTAGE_MSG0": "Motion read voltage (V, return float)",
    "BASE_MOTION_READ_CURRENT_MSG0": "Motion read current (A, return float)",
    "BASE_MOTION_READ_POWER_MSG0": "Motion read power (W, return float)",
    "BASE_CAN_INIT_MSG0": "Init CAN with %1 ID %2 mode %3 TX %4 RX %5 baudrate %6",
    "BASE_CAN_INIT_ADVANCED_MSG0": "Init CAN with %1 ID %2 mode %3 TX %4 RX %5 prescaler %6 sjw %7 bs1 %8 bs2 %9 triple sampling %10",
    "BASE_CAN_DEINIT_MSG0": "CAN deinit",
    "BASE_CAN_RESTART_MSG0": "CAN restart",
    "BASE_CAN_GET_STATE_MSG0": "CAN get state (return int)",
    "BASE_CAN_GET_INFO_MSG0": "CAN get error status information",
    "BASE_CAN_ANY_MSG0": "CAN count of available (return True or False)",
    "BASE_CAN_RECV_MESSAGE_MSG0": "CAN read message timeout %1 (return tuple)",
    "BASE_CAN_RECV_MESSAGE_INFO_MSG0": "CAN read message into %1 timeout %2",
    "BASE_CAN_SEND_DATA_MSG0": "CAN send %1 id %2 timeout %3 rtr %4 extframe %5",
    "BASE_SPK_INIT_MSG0": "Init Speaker with %1 ID %2 SCK %3 WS %4 SD %5",
    "BASE_SPK_STOP_MSG0": "SPK play stop",
    "BASE_SPK_BEGIN_MSG0": "SPK begin",
    "BASE_SPK_END_MSG0": "SPK end",
    "BASE_SPK_IS_RUNNING_MSG0": "SPK is running",
    "BASE_SPK_IS_ENABLED_MSG0": "SPK is enabled",
    "BASE_SPK_IS_PLAYING_MSG0": "SPK is playing",
    "BASE_SPK_GET_VOLUME_MSG0": "SPK get volume (return 0~255)",
    "BASE_SPK_GET_VOLUME_PERCENTAGE_MSG0": "SPK get volume percentage (return float)",
    "BASE_SPK_BEGIN_RETURN_MSG0": "SPK begin (return True or False)",
    "BASE_SPK_GET_PLAYING_CHANNELS_MSG0": "SPK get playing channels (return int)",
    "BASE_SPK_TONE_MSG0": "SPK play tone freq %1 millisecond %2",
    "BASE_SPK_PLAY_WAV_MSG0": "SPK play WAV (bytearray / bytes) %1",
    "BASE_SPK_PLAY_RAW_MSG0": "SPK play PCM (bytearray / bytes) %1 sample rate (Hz) %2",
    "BASE_SPK_SET_VOLUME_MSG0": "SPK set volume %1 (0 ~ 255)",
    "BASE_SPK_SET_VOLUME_PERCENTAGE_MSG0": "SPK set volume %1 %",
    "BASE_SPK_SET_ALL_CHANNEL_VOLUME_MSG0": "SPK set all channel volume %1 (0 ~ 255)",
    "BASE_SPK_SET_CHANNEL_VOLUME_MSG0": "SPK set channel %1 volume %2 (0 ~ 255)",
    "BASE_SPK_GET_CHANNEL_VOLUME_MSG0": "SPK get channel %1 volume (return int)",
    "BASE_SPK_PLAY_RAW_RETURN_MSG0": "SPK play PCM (bytearray / bytes) %1 sample rate (Hz) %2 (return True or False)",
    "BASE_SPK_PLAYWAV_FILE_MSG0": "SPK play WAV file %1 %2",
    "BASE_SPK_SDCARD_INIT_MSG0": "Init SDCard with %1 slot %2 SCK %3 MISO %4 MOSI %5 CS %6 freq %7",
    "BASE_SPK_SDCARD_CHDIR_MSG0": "SDCard change current dir %1",
    "BASE_SPK_SDCARD_GET_CWD_MSG0": "SDCard get current dir",
    "BASE_SPK_SDCARD_LISTDIR_MSG0": "SDCard listdir %1",
    "BASE_SPK_SDCARD_MKDIR_MSG0": "SDCard mkdir %1",
    "BASE_SPK_SDCARD_REMOVE_MSG0": "SDCard remove %1",
    "BASE_SPK_SDCARD_RMDIR_MSG0": "SDCard rmdir %1",
    "BASE_SPK_SDCARD_RENAME_MSG0": "SDCard rename %1 to %2",
    "BASE_SPK_SDCARD_IS_FILE_MSG0": "is file %1",
    "BASE_SPK_SDCARD_IS_DIRECTORY_MSG0": "is directory %1",
    "BASE_SPK_SDCARD_IS_EXIST_MSG0": "%1 is exist in %2",
    "BASE_ECHO_INIT2_MSG0": "Init Echo with I2S port %1 sample rate %2",
    "BASE_ECHO_PLAYWAV_FILE_MSG0": "Echo play WAV file %1 %2",
    "BASE_ECHO_PLAY_TONE_MSG0": "Echo play tone freq %1 (Hz) millisecond %2",
    "BASE_ECHO_PLAY_WAV_MSG0": "Echo play WAV (bytearray / bytes) %1 duration (millisecond) %2",
    "BASE_ECHO_PLAY_RAW_MSG0": "Echo play PCM (bytearray / bytes) %1 sample rate (Hz) %2 channel %3 bit %4 duration (millisecond) %5",
    "BASE_ECHO_PAUSE_MSG0": "Echo pause play",
    "BASE_ECHO_RESUME_MSG0": "Echo resume play",
    "BASE_ECHO_STOP_MSG0": "Echo stop play",
    "BASE_ECHO_GET_VOLUME_PERCENTAGE_MSG0": "get Echo volume (return int, 0 ~ 100)",
    "BASE_ECHO_SET_VOLUME_PERCENTAGE_MSG0": "Set Echo volume %1 %",
    "BASE_ECHO_RECORD_WAV_FILE_MSG0": "Echo record WAV file %1 %2 sample rate %3 channel %4 bit %5 duration (millisecond) %6",
    "BASE_ECHO_RECORD_PCM_MSG0": "Echo record PCM with %1 sample rate %2 channel %3 bit %4 duration (millisecond) %5",
    "BASE_ECHO_GET_PCM_MSG0": "get Echo PCM buffer (return bytes)",
    "BASE_ECHO_INIT_MSG0": "Init Echo with %1 I2C address %2 I2S port %3 sample rate %4 SCK %5 WS %6 DI %7 DO %8",
    "BASE_ECHO_SPEAKER_STOP_MSG0": "Echo play stop",
    "BASE_ECHO_SPEAKER_BEGIN_MSG0": "Echo begin",
    "BASE_ECHO_SPEAKER_END_MSG0": "Echo end",
    "BASE_ECHO_SPEAKER_IS_RUNNING_MSG0": "Echo is running",
    "BASE_ECHO_SPEAKER_IS_ENABLED_MSG0": "Echo is enabled",
    "BASE_ECHO_SPEAKER_IS_PLAYING_MSG0": "Echo is playing",
    "BASE_ECHO_SPEAKER_GET_VOLUME_MSG0": "Echo get volume (return 0~255)",
    "BASE_ECHO_SPEAKER_GET_VOLUME_PERCENTAGE_MSG0": "Echo get volume percentage (return float)",
    "BASE_ECHO_SPEAKER_BEGIN_RETURN_MSG0": "Echo begin (return True or False)",
    "BASE_ECHO_SPEAKER_GET_PLAYING_CHANNELS_MSG0": "Echo get playing channels (return int)",
    "BASE_ECHO_SPEAKER_TONE_MSG0": "Echo play tone freq %1 millisecond %2",
    "BASE_ECHO_SPEAKER_PLAY_WAV_MSG0": "Echo play WAV (bytearray / bytes) %1",
    "BASE_ECHO_SPEAKER_PLAY_RAW_MSG0": "Echo play PCM (bytearray / bytes) %1 sample rate (Hz) %2",
    "BASE_ECHO_SPEAKER_SET_VOLUME_MSG0": "Echo set volume %1 (0 ~ 255)",
    "BASE_ECHO_SPEAKER_SET_VOLUME_PERCENTAGE_MSG0": "Echo set volume %1 %",
    "BASE_ECHO_SPEAKER_SET_ALL_CHANNEL_VOLUME_MSG0": "Echo set all channel volume %1 (0 ~ 255)",
    "BASE_ECHO_SPEAKER_SET_CHANNEL_VOLUME_MSG0": "Echo set channel %1 volume %2 (0 ~ 255)",
    "BASE_ECHO_SPEAKER_GET_CHANNEL_VOLUME_MSG0": "Echo get channel %1 volume (return int)",
    "BASE_ECHO_SPEAKER_PLAY_RAW_RETURN_MSG0": "Echo play PCM (bytearray / bytes) %1 sample rate (Hz) %2 (return True or False)",
    "BASE_ECHO_SPEAKER_PLAYWAV_FILE_MSG0": "Echo play WAV file %1 %2",
    "BASE_RS232_INIT_MSG0": "Init RS232 with %1 UART %2 baudrate %3 bits %4 parity %5 stop %6 TX %7 RX %8",
    "BASE_RS232_INIT_MSG1": "TX buffer",
    "BASE_RS232_INIT_MSG2": "RX buffer",
    "BASE_RS232_INIT_MSG3": "timeout",
    "BASE_RS232_INIT_MSG4": "timeout char",
    "BASE_RS232_INIT_MSG5": "invert",
    "BASE_RS232_INIT_MSG6": "flow",
    "BASE_RS232_SETUP_MSG0": "RS232 setup %1 baudrate %2 bits %3 parity %4 stop %5 TX %6 RX %7",
    "BASE_RS232_DEINIT_MSG0": "RS232 deinit",
    "BASE_RS232_AVAILABLE_CHAR_MSG0": "RS232 count of available",
    "BASE_RS232_READ_ALL_MSG0": "RS232 read all",
    "BASE_RS232_READ_BYTES_MSG0": "RS232 read %1 bytes",
    "BASE_RS232_READ_LINE_MSG0": "RS232 read line",
    "BASE_RS232_READ_RAW_DATA_MSG0": "RS232 read a raw data (return 0 ~ 255)",
    "BASE_RS232_WRITE_MSG0": "RS232 write %1",
    "BASE_RS232_WRITE_LINE_MSG0": "RS232 write line %1",
    "BASE_RS232_WRITE_LIST_MSG0": "RS232 write list or tuple %1",
    "BASE_RS232_WRITE_RAW_DATA_LIST_MSG0": "RS232 write raw data %1",
    "BASE_RS232_WRITE_RAW_DATA_MSG0": "RS232 write raw data %1",
    "BASE_RS232_READ_INTO_BUF_MSG0": "RS232 read into buf %1",
    "BASE_RS232_SEND_BREAK_MSG0": "RS232 send break single",
    "BASE_RS232_FLUSH_MSG0": "RS232 flush",
    "BASE_RS232_TXDONE_MSG0": "RS232 is transfer done (return True or False)",
    "BASE_RS485_INIT_MSG0": "Init RS485 with %1 UART %2 baudrate %3 bits %4 parity %5 stop %6 TX %7 RX %8",
    "BASE_RS485_INIT_MSG1": "TX buffer",
    "BASE_RS485_INIT_MSG2": "RX buffer",
    "BASE_RS485_INIT_MSG3": "timeout",
    "BASE_RS485_INIT_MSG4": "timeout char",
    "BASE_RS485_INIT_MSG5": "invert",
    "BASE_RS485_INIT_MSG6": "flow",
    "BASE_RS485_SETUP_MSG0": "RS485 setup %1 baudrate %2 bits %3 parity %4 stop %5 TX %6 RX %7",
    "BASE_RS485_DEINIT_MSG0": "RS485 deinit",
    "BASE_RS485_AVAILABLE_CHAR_MSG0": "RS485 count of available",
    "BASE_RS485_READ_ALL_MSG0": "RS485 read all",
    "BASE_RS485_READ_BYTES_MSG0": "RS485 read %1 bytes",
    "BASE_RS485_READ_LINE_MSG0": "RS485 read line",
    "BASE_RS485_READ_RAW_DATA_MSG0": "RS485 read a raw data (return 0 ~ 255)",
    "BASE_RS485_WRITE_MSG0": "RS485 write %1",
    "BASE_RS485_WRITE_LINE_MSG0": "RS485 write line %1",
    "BASE_RS485_WRITE_LIST_MSG0": "RS485 write list or tuple %1",
    "BASE_RS485_WRITE_RAW_DATA_LIST_MSG0": "RS485 write raw data %1",
    "BASE_RS485_WRITE_RAW_DATA_MSG0": "RS485 write raw data %1",
    "BASE_RS485_READ_INTO_BUF_MSG0": "RS485 read into buf %1",
    "BASE_RS485_SEND_BREAK_MSG0": "RS485 send break single",
    "BASE_RS485_FLUSH_MSG0": "RS485 flush",
    "BASE_RS485_TXDONE_MSG0": "RS485 is transfer done (return True or False)",
    "BASE_DISPLAY_INIT_MSG0": "Base Display config",
    "BASE_DISPLAY_INIT_MSG1": "logical size",
    "BASE_DISPLAY_INIT_MSG2": "output",
    "BASE_DISPLAY_INIT_MSG3": "refresh rate",
    "BASE_DISPLAY_INIT_MSG4": "scale (0 ~ 255)",
    "BASE_DISPLAY_INIT_MSG5": "pixel clock (Hz)",
    "BASE_DISPLAY_CONFIG_SIZE_MSG0": "width (px)",
    "BASE_DISPLAY_CONFIG_SIZE_MSG1": "height (px)",
    "BASE_DISPLAY_CONFIG_SCALE_MSG0": "width (px)",
    "BASE_DISPLAY_CONFIG_SCALE_MSG1": "height (px)",
    "BASE_DISPLAY_CONFIG_OUTPUT_MSG0": "width (px)",
    "BASE_DISPLAY_CONFIG_OUTPUT_MSG1": "height (px)",
    "BASE_GPS_INIT_MSG0": "Init GPS with %1 UART %2 TX %3 RX %4",
    "BASE_GPS_DEINIT_MSG0": "GPS deinit",
    "BASE_GPS_GET_ANTENNA_STATE_MSG0": "get GPS antenna state (return string)",
    "BASE_GPS_GET_ANTENNA_STATE_MSG1": "antenna open circuit",
    "BASE_GPS_GET_ANTENNA_STATE_MSG2": "antenna good",
    "BASE_GPS_GET_ANTENNA_STATE_MSG3": "antenna short circuit",
    "BASE_GPS_GET_GPS_TIME_MSG0": "get GPS local time (return list [hour, min, second])",
    "BASE_GPS_GET_GPS_DATE_MSG0": "get GPS date (return list [yyyy, mm, dd])",
    "BASE_GPS_GET_GPS_DATE_TIME_MSG0": "get GPS date and local time (return list [yyyy, mm, dd, hour, min, second])",
    "BASE_GPS_GET_TIMESTAMP_MSG0": "get GPS timestamp (return int)",
    "BASE_GPS_GET_LATITUDE_MSG0": "get GPS latitude (return string)",
    "BASE_GPS_GET_LONGITUDE_MSG0": "get GPS longitude (return string)",
    "BASE_GPS_GET_ALTITUDE_MSG0": "get GPS altitude (return string)",
    "BASE_GPS_GET_SATELLITE_NUM_MSG0": "get GPS satellite number (return int)",
    "BASE_GPS_GET_POS_QUALITY_MSG0": "get GPS position quality (return int)",
    "BASE_GPS_GET_POS_QUALITY_MSG1": "Position not available or invalid",
    "BASE_GPS_GET_POS_QUALITY_MSG2": "SPS positioning mode, position valid",
    "BASE_GPS_GET_POS_QUALITY_MSG3": "Estimation mode (dead reckoning)",
    "BASE_GPS_GET_CORSE_OVER_GROUND_MSG0": "get GPS course over ground degree (return string)",
    "BASE_GPS_GET_SPEED_OVER_GROUND_MSG0": "get GPS speed over ground knot (return string)",
    "BASE_GPS_GET_TIME_ZONE_MSG0": "get GPS current time zone offset (return int)",
    "BASE_GPS_SET_TIME_ZONE_MSG0": "Set GPS time zone offset to %1",
    "BASE_PWM_INIT_MSG0": "Init PWM with output pin %1 and frequency %2",
    "BASE_PWM_GET_FREQ_MSG0": "get PWM frequency (Hz, return int)",
    "BASE_PWM_SET_FREQ_MSG0": "Set PWM frequency to %1 Hz",
    "BASE_PWM_GET_DUTY_U16_MSG0": "get PWM duty cycle (return 0 ~ 65535)",
    "BASE_PWM_SET_DUTY_U16_MSG0": "Set PWM duty cycle to %1 (0 ~ 65535)",
    "BASE_HDRIVER_INIT_MSG0": "Init HDriver with %1 PWM control pin1 %2 PWM control pin2 %3 driver status %4 driver input voltage detect %5 PWM frequency %6",
    "BASE_HDRIVER_GET_FREQ_MSG0": "get HDriver PWM frequency (Hz, return int)",
    "BASE_HDRIVER_SET_FREQ_MSG0": "Set HDriver PWM frequency to %1 Hz",
    "BASE_HDRIVER_GET_STATUS_MSG0": "get HDriver status (return True or False)",
    "BASE_HDRIVER_GET_VOLTAGE_MSG0": "get HDriver voltage (V, return float)",
    "BASE_HDRIVER_SET_SPEED_MSG0": "Set HDriver motor speed to %1 (-100 ~ 100)",
    "BASE_STEPMOTOR_INIT_MSG0": "Init Stepmotor with %1 enable pin %2 direction pin %3 step pin %4 fault pin %5 reset pin %6",
    "BASE_STEPMOTOR_GET_STATUS_MSG0": "get Stepmotor status (return True or False)",
    "BASE_STEPMOTOR_GET_VOLTAGE_MSG0": "get Stepmotor voltage (V, return float)",
    "BASE_STEPMOTOR_ENABLE_MSG0": "Enable Stepmotor driver",
    "BASE_STEPMOTOR_DISABLE_MSG0": "Disable Stepmotor driver",
    "BASE_STEPMOTOR_STEP_MSG0": "Move Stepmotor one step",
    "BASE_STEPMOTOR_STOP_MSG0": "Stop Stepmotor",
    "BASE_STEPMOTOR_RESET_MSG0": "Reset Stepmotor driver",
    "BASE_STEPMOTOR_SET_DIRECTION_MSG0": "Set Stepmotor direction to %1",
    "BASE_STEPMOTOR_ROTATE_MSG0": "Rotate Stepmotor with %1 steps %2 delay (ms) %3 direction %4",
    "BASE_LORAWAN470_INIT_MSG0": "Init LoRaWAN470 with UART %1 TX %2 RX %3",
    "BASE_LORAWAN470_GET_ABP_CONFIG_MSG0": "get LoRaWAN470 ABP config (return tuple)",
    "BASE_LORAWAN470_GET_OTAA_CONFIG_MSG0": "get LoRaWAN470 OTAA config (return tuple)",
    "BASE_LORAWAN470_CHECK_JOIN_STATUS_MSG0": "check LoRaWAN470 join status",
    "BASE_LORAWAN470_CHECK_UPLINK_STATUS_MSG0": "check LoRaWAN470 uplink data status",
    "BASE_LORAWAN470_CHECK_DOWNLINK_DATA_MSG0": "check and receive LoRaWAN470 downlink data",
    "BASE_LORAWAN470_SET_JOIN_MODE_MSG0": "Set LoRaWAN470 join mode %1",
    "BASE_LORAWAN470_STOP_JOIN_NETWORK_MSG0": "Stop LoRaWAN470 join LoRaWAN network",
    "BASE_LORAWAN470_SET_UPLINK_PORT_MSG0": "Set LoRaWAN470 uplink app port %1 (1 ~ 233)",
    "BASE_LORAWAN470_CONFIG_MSG0": "Config LoRaWAN470 %1 frequency band mask %2 RX window param: %3 RX1 offset %4 RX2 datarate %5 RX2 FREQ(Hz) %6 class mode %7 uplink downlink %8",
    "BASE_LORAWAN470_START_JOIN_NETWORK_MSG0": "Start LoRaWAN470 join LoRaWAN network %1 %2 auto join %3 period (seconds) (7 ~ 255) %4 maximum number of attempts (1 ~ 256) %5",
    "BASE_LORAWAN470_CONFIG_MODE_MSG0": "LoRaWAN470",
    "BASE_LORAWAN470_CONFIG_MODE_MSG1": "config",
    "BASE_LORAWAN470_CONFIG_MODE_MSG2": "device eui *",
    "BASE_LORAWAN470_CONFIG_MODE_MSG3": "app key *",
    "BASE_LORAWAN470_CONFIG_MODE_MSG4": "app eui",
    "BASE_LORAWAN470_CONFIG_MODE_MSG5": "device address",
    "BASE_LORAWAN470_CONFIG_MODE_MSG6": "app session key",
    "BASE_LORAWAN470_CONFIG_MODE_MSG7": "network session key",
    "BASE_LORAWAN470_SEND_DATA_PAYLOAD_MSG0": "LoRaWAN470 send data payload",
    "BASE_LORAWAN470_SEND_DATA_PAYLOAD_MSG1": "try times",
    "BASE_LORAWAN868_INIT_MSG0": "Init LoRaWAN868 with UART %1 TX %2 RX %3",
    "BASE_LORAWAN868_GET_ABP_CONFIG_MSG0": "get LoRaWAN868 ABP config (return tuple)",
    "BASE_LORAWAN868_GET_OTAA_CONFIG_MSG0": "get LoRaWAN868 OTAA config (return tuple)",
    "BASE_LORAWAN868_CHECK_JOIN_STATUS_MSG0": "check LoRaWAN868 join status",
    "BASE_LORAWAN868_CHECK_UPLINK_STATUS_MSG0": "check LoRaWAN868 uplink data status",
    "BASE_LORAWAN868_CHECK_DOWNLINK_DATA_MSG0": "check and receive LoRaWAN868 downlink data",
    "BASE_LORAWAN868_SET_JOIN_MODE_MSG0": "Set LoRaWAN868 join mode %1",
    "BASE_LORAWAN868_STOP_JOIN_NETWORK_MSG0": "Stop LoRaWAN868 join LoRaWAN network",
    "BASE_LORAWAN868_SET_UPLINK_PORT_MSG0": "Set LoRaWAN868 uplink app port %1 (1 ~ 233)",
    "BASE_LORAWAN868_CONFIG_MSG0": "Config LoRaWAN868 %1 RX window param: %2 RX1 offset %3 RX2 datarate %4 RX2 FREQ(Hz) %5 class mode %6 uplink downlink %7",
    "BASE_LORAWAN868_START_JOIN_NETWORK_MSG0": "Start LoRaWAN868 join LoRaWAN network %1 %2 auto join %3 period (seconds) (7 ~ 255) %4 maximum number of attempts (1 ~ 256) %5",
    "BASE_LORAWAN868_CONFIG_MODE_MSG0": "LoRaWAN868",
    "BASE_LORAWAN868_CONFIG_MODE_MSG1": "config",
    "BASE_LORAWAN868_CONFIG_MODE_MSG2": "device eui *",
    "BASE_LORAWAN868_CONFIG_MODE_MSG3": "app key *",
    "BASE_LORAWAN868_CONFIG_MODE_MSG4": "app eui",
    "BASE_LORAWAN868_CONFIG_MODE_MSG5": "device address",
    "BASE_LORAWAN868_CONFIG_MODE_MSG6": "app session key",
    "BASE_LORAWAN868_CONFIG_MODE_MSG7": "network session key",
    "BASE_LORAWAN868_SEND_DATA_PAYLOAD_MSG0": "LoRaWAN868 send data payload",
    "BASE_LORAWAN868_SEND_DATA_PAYLOAD_MSG1": "try times",
    "BASE_LORAWAN915_INIT_MSG0": "Init LoRaWAN915 with UART %1 TX %2 RX %3",
    "BASE_LORAWAN915_GET_ABP_CONFIG_MSG0": "get LoRaWAN915 ABP config (return tuple)",
    "BASE_LORAWAN915_GET_OTAA_CONFIG_MSG0": "get LoRaWAN915 OTAA config (return tuple)",
    "BASE_LORAWAN915_CHECK_JOIN_STATUS_MSG0": "check LoRaWAN915 join status",
    "BASE_LORAWAN915_CHECK_UPLINK_STATUS_MSG0": "check LoRaWAN915 uplink data status",
    "BASE_LORAWAN915_CHECK_DOWNLINK_DATA_MSG0": "check and receive LoRaWAN915 downlink data",
    "BASE_LORAWAN915_SET_JOIN_MODE_MSG0": "Set LoRaWAN915 join mode %1",
    "BASE_LORAWAN915_STOP_JOIN_NETWORK_MSG0": "Stop LoRaWAN915 join LoRaWAN network",
    "BASE_LORAWAN915_SET_UPLINK_PORT_MSG0": "Set LoRaWAN915 uplink app port %1 (1 ~ 233)",
    "BASE_LORAWAN915_CONFIG_MSG0": "Config LoRaWAN915 %1 frequency band mask %2 RX window param: %3 RX1 offset %4 RX2 datarate %5 RX2 FREQ(Hz) %6 class mode %7 uplink downlink %8",
    "BASE_LORAWAN915_START_JOIN_NETWORK_MSG0": "Start LoRaWAN915 join LoRaWAN network %1 %2 auto join %3 period (seconds) (7 ~ 255) %4 maximum number of attempts (1 ~ 256) %5",
    "BASE_LORAWAN915_CONFIG_MODE_MSG0": "LoRaWAN915",
    "BASE_LORAWAN915_CONFIG_MODE_MSG1": "config",
    "BASE_LORAWAN915_CONFIG_MODE_MSG2": "device eui *",
    "BASE_LORAWAN915_CONFIG_MODE_MSG3": "app key *",
    "BASE_LORAWAN915_CONFIG_MODE_MSG4": "app eui",
    "BASE_LORAWAN915_CONFIG_MODE_MSG5": "device address",
    "BASE_LORAWAN915_CONFIG_MODE_MSG6": "app session key",
    "BASE_LORAWAN915_CONFIG_MODE_MSG7": "network session key",
    "BASE_LORAWAN915_SEND_DATA_PAYLOAD_MSG0": "LoRaWAN915 send data payload",
    "BASE_LORAWAN915_SEND_DATA_PAYLOAD_MSG1": "try times",
    "BASE_QRCODE_INIT_MSG0": "Init QRCode with %1 UART %2 TX %3 RX %4 trigger pin %5 receive done pin %6",
    "BASE_QRCODE_SET_TRIG_MSG0": "Set QRCode trigger pin value to %1",
    "BASE_QRCODE_START_DECODE_MSG0": "Start QRCode decode",
    "BASE_QRCODE_STOP_DECODE_MSG0": "Stop QRCode decode",
    "BASE_QRCODE_READ_MSG0": "QRCode read",
    "BASE_QRCODE_SET_TRIGGER_MODE_MSG0": "Set QRCode trigger mode to %1",
    "BASE_QRCODE_SET_DECODE_CONTINUOUS_MSG0": "Set QRCode continuous decode time to %1 (100ms, 0~255)",
    "BASE_QRCODE_SET_DECODE_INTERVAL_MSG0": "Set QRCode decode interval to %1 (100ms, 0~99)",
    "BASE_QRCODE_SET_SAME_CODE_INTERVAL_MSG0": "Set QRCode same code interval to %1 (100ms, 0~99)",
    "BASE_QRCODE_SET_POS_LIGHT_MODE_MSG0": "Set QRCode positioning light mode to %1",
    "BASE_QRCODE_SET_FILL_LIGHT_MODE_MSG0": "Set QRCode fill light mode to %1",
    "BASE_QRCODE_SET_STARTUP_TONE_MSG0": "Set QRCode startup tone to %1",
    "BASE_QRCODE_SET_DECODE_SUCCESS_TONE_MSG0": "Set QRCode decode success tone to %1",
    "BASE_QRCODE_SET_CONFIG_TONE_MSG0": "Set QRCode config tone to %1",
    "BASE_QRCODE_LEVEL_OPTION_MSG0": "low level",
    "BASE_QRCODE_LEVEL_OPTION_MSG1": "high level",
    "BASE_QRCODE_TRIGGER_OPTION_MSG0": "key mode",
    "BASE_QRCODE_TRIGGER_OPTION_MSG1": "host mode",
    "BASE_QRCODE_TRIGGER_OPTION_MSG2": "auto mode",
    "BASE_QRCODE_TRIGGER_OPTION_MSG3": "pulse mode",
    "BASE_QRCODE_TRIGGER_OPTION_MSG4": "motion sensing mode",
    "BASE_QRCODE_FILL_LIGHT_OPTION_MSG0": "light on during decoding",
    "BASE_QRCODE_FILL_LIGHT_OPTION_MSG1": "light on",
    "BASE_QRCODE_FILL_LIGHT_OPTION_MSG2": "light off",
    "BASE_QRCODE_POS_LIGHT_OPTION_MSG0": "light on during decoding",
    "BASE_QRCODE_POS_LIGHT_OPTION_MSG1": "light on",
    "BASE_QRCODE_POS_LIGHT_OPTION_MSG2": "light off",
    "BASE_QRCODE2_INIT_MSG0": "Init QRCode2 with UART %1 TX %2 RX %3 trigger pin %4",
    "BASE_QRCODE2_SET_TRIG_MSG0": "Set QRCode2 trigger pin value to %1",
    "BASE_QRCODE2_START_DECODE_MSG0": "Start QRCode2 decode",
    "BASE_QRCODE2_STOP_DECODE_MSG0": "Stop QRCode2 decode",
    "BASE_QRCODE2_READ_MSG0": "QRCode2 read",
    "BASE_QRCODE2_SET_TRIGGER_MODE_MSG0": "Set QRCode2 trigger mode to %1",
    "BASE_QRCODE2_SET_DECODE_DELAY_MSG0": "Set QRCode2 decode delay to %1 (ms)",
    "BASE_QRCODE2_SET_TRIGGER_TIMEOUT_MSG0": "Set QRCode2 trigger timeout to %1 (ms)",
    "BASE_QRCODE2_SET_MOTION_SENSITIVITY_MSG0": "Set QRCode2 motion detection sensitivity to %1 (1~5)",
    "BASE_QRCODE2_SET_CONTINUOUS_DECODE_DELAY_MSG0": "Set QRCode2 continuous decode delay to %1 (100ms)",
    "BASE_QRCODE2_SET_TRIGGER_DECODE_DELAY_MSG0": "Set QRCode2 trigger decode delay to %1 (ms)",
    "BASE_QRCODE2_SET_SAME_CODE_INTERVAL_MSG0": "Set QRCode2 same code interval to %1 (ms)",
    "BASE_QRCODE2_SET_DIFF_CODE_INTERVAL_MSG0": "Set QRCode2 difference code interval to %1 (ms)",
    "BASE_QRCODE2_SET_SAME_CODE_NO_DELAY_MSG0": "Set QRCode2 same code no delay to %1",
    "BASE_QRCODE2_SET_FILL_LIGHT_MODE_MSG0": "Set QRCode2 fill light mode to %1",
    "BASE_QRCODE2_SET_FILL_LIGHT_BRIGHTNESS_MSG0": "Set QRCode2 fill light mode brightness to %1 (0~100)",
    "BASE_QRCODE2_SET_POS_LIGHT_MODE_MSG0": "Set QRCode2 positioning light mode to %1",
    "BASE_QRCODE2_SET_STARTUP_TONE_MSG0": "Set QRCode2 startup tone to %1",
    "BASE_QRCODE2_SET_DECODE_SUCCESS_BEEP_MSG0": "Set QRCode2 decode success beep to %1",
    "BASE_QRCODE2_SET_CASE_CONVERSION_MSG0": "Set QRCode2 case conversion to %1",
    "BASE_QRCODE2_SET_PROTOCOL_FORMAT_MSG0": "Set QRCode2 protocol format to %1 (0~3)",
    "BASE_QRCODE2_LEVEL_OPTION_MSG0": "low level",
    "BASE_QRCODE2_LEVEL_OPTION_MSG1": "high level",
    "BASE_QRCODE2_TRIGGER_OPTION_MSG0": "key mode",
    "BASE_QRCODE2_TRIGGER_OPTION_MSG1": "continuous mode",
    "BASE_QRCODE2_TRIGGER_OPTION_MSG2": "auto mode",
    "BASE_QRCODE2_TRIGGER_OPTION_MSG3": "pulse mode",
    "BASE_QRCODE2_TRIGGER_OPTION_MSG4": "motion sensing mode",
    "BASE_QRCODE2_FILL_LIGHT_OPTION_MSG0": "light off",
    "BASE_QRCODE2_FILL_LIGHT_OPTION_MSG1": "light on during decoding",
    "BASE_QRCODE2_FILL_LIGHT_OPTION_MSG2": "light always on when powered",
    "BASE_QRCODE2_POS_LIGHT_OPTION_MSG0": "light off",
    "BASE_QRCODE2_POS_LIGHT_OPTION_MSG1": "light flash during decoding",
    "BASE_QRCODE2_POS_LIGHT_OPTION_MSG2": "light on during decoding",
    "BASE_QRCODE2_TONE_OPTION_MSG0": "disable startup tone",
    "BASE_QRCODE2_TONE_OPTION_MSG1": "play 4 beeps",
    "BASE_QRCODE2_TONE_OPTION_MSG2": "play 2 beeps",
    "BASE_QRCODE2_BEEP_OPTION_MSG0": "no prompt sound",
    "BASE_QRCODE2_BEEP_OPTION_MSG1": "play prompt sound once",
    "BASE_QRCODE2_BEEP_OPTION_MSG2": "play prompt sound twice",
    "BASE_QRCODE2_CONVERSION_OPTION_MSG0": "off (Original data)",
    "BASE_QRCODE2_CONVERSION_OPTION_MSG1": "convert to uppercase",
    "BASE_QRCODE2_CONVERSION_OPTION_MSG2": "convert to lowercase",
    "BASE_TFCARD_INIT_MSG0": "Init TFCard with %1 slot %2 SCK %3 MISO %4 MOSI %5 freq %6",
    "BASE_TFCARD_CHDIR_MSG0": "TFCard change current dir %1",
    "BASE_TFCARD_GET_CWD_MSG0": "TFCard get current dir",
    "BASE_TFCARD_LISTDIR_MSG0": "TFCard listdir %1",
    "BASE_TFCARD_MKDIR_MSG0": "TFCard mkdir %1",
    "BASE_TFCARD_REMOVE_MSG0": "TFCard remove %1",
    "BASE_TFCARD_RMDIR_MSG0": "TFCard rmdir %1",
    "BASE_TFCARD_RENAME_MSG0": "TFCard rename %1 to %2",
    "BASE_TFCARD_IS_FILE_MSG0": "is file %1",
    "BASE_TFCARD_IS_DIRECTORY_MSG0": "is directory %1",
    "BASE_TFCARD_IS_EXIST_MSG0": "%1 is exist in %2",
    "BASE_NBIOT_INIT_MSG0": "Init NBIoT with UART %1",
    "BASE_NBIOT_CHECK_MODEM_IS_READY_MSG0": "check NBIoT if modem is ready (return True or False)",
    "BASE_NBIOT_GET_IMEI_NUMBER_MSG0": "get NBIoT identification (IMEI) number (return string)",
    "BASE_NBIOT_GET_SIGNAL_STRENGTH_MSG0": "get NBIoT signal strength (return int)",
    "BASE_NBIOT_GET_MODEL_IDENTIFICATION_MSG0": "get NBIoT model identification (return string)",
    "BASE_NBIOT_GET_GPRS_NETWORK_STATUS_MSG0": "get NBIoT GPRS network status (return int)",
    "BASE_NBIOT_GET_SHOW_PDP_ADDRESS_MSG0": "get NBIoT show PDP address CID %1 (1~2) (return string)",
    "BASE_NBIOT_GET_PDP_CONTEXT_STATUS_MSG0": "get NBIoT PDP context status (return int)",
    "BASE_NBIOT_GET_PDP_CONTEXT_DYNAMIC_PARAMETERS_MSG0": "get NBIoT PDP context network %1 parameters (return string)",
    "BASE_NBIOT_SET_COMMAND_ECHO_MODE_MSG0": "NBIoT set echo command mode %1",
    "BASE_NBIOT_SET_GPRS_NETWORK_STATE_MSG0": "NBIoT set GPRS network state %1",
    "BASE_NBIOT_SET_PDP_CONTEXT_APN_MSG0": "NBIoT set define PDP context apn %1",
    "BASE_NBIOT_SET_PDP_CONTEXT_MSG0": "NBIoT set PDP context state %1",
    "BASE_NBIOT_MQTT_SERVER_CONNECT_MSG0": "NBIoT MQTT server connect %1 server %2 port %3 client id %4 username %5 password %6 keepalive(0 ~ 65535) %7",
    "BASE_NBIOT_MQTT_SERVER_DISCONNECT_MSG0": "NBIoT MQTT server disconnect",
    "BASE_NBIOT_MQTT_POLLING_LOOP_MSG0": "NBIoT MQTT polling loop",
    "BASE_NBIOT_MQTT_SERVER_IS_CONNECT_MSG0": "NBIoT check MQTT server is connect (return int)",
    "BASE_NBIOT_MQTT_UNSUBSCRIBE_TOPIC_MSG0": "NBIoT MQTT unsubscribe topic %1",
    "BASE_NBIOT_SET_MQTT_PUBLISH_MSG0": "NBIoT MQTT publish topic %1 msg %2 QoS %3 (0 ~ 2)",
    "BASE_NBIOT_MQTT_SUBSCRIBE_CALLBACK_MSG0": "NBIoT MQTT subscribe %1 with topic QoS %2 (0 ~ 2)",
    "BASE_NBIOT_HTTP_REQUEST_MSG0": "NBIoT HTTP request",
    "BASE_NBIOT_HTTP_REQUEST_MSG1": "method",
    "BASE_NBIOT_HTTP_REQUEST_MSG2": "URL",
    "BASE_NBIOT_HTTP_REQUEST_MSG3": "headers",
    "BASE_NBIOT_HTTP_REQUEST_MSG4": "data",
    "BASE_NBIOT_HTTP_DATA_CONTENT_MSG0": "get NBIoT data content (return string)",
    "BASE_NBIOT_HTTP_RESPONSE_CODE_MSG0": "get NBIoT response status code (return int)",
    "BASE_NBIOT_GET_TOPIC_MSG0": "get topic (return bytes)",
    "BASE_NBIOT_GET_MSG_MSG0": "get msg (return bytes)",
    "BASE_NBIOT_SET_ACTIVE_MSG0": "NBIoT active and network %1",
    "BASE_LORAWANCN470_INIT_MSG0": "Init LoRaWAN-CN470 with %1 %2 RS485",
    "BASE_LORAWANCN470_LORAWAN_CONFIG_MSG0": "Config",
    "BASE_LORAWANCN470_LORAWAN_CONFIG_MSG1": "mode",
    "BASE_LORAWANCN470_LORAWAN_CONFIG_MSG2": "device eui *",
    "BASE_LORAWANCN470_LORAWAN_CONFIG_MSG3": "app key *",
    "BASE_LORAWANCN470_LORAWAN_CONFIG_MSG4": "app eui",
    "BASE_LORAWANCN470_LORAWAN_CONFIG_MSG5": "device address",
    "BASE_LORAWANCN470_LORAWAN_CONFIG_MSG6": "app session key",
    "BASE_LORAWANCN470_LORAWAN_CONFIG_MSG7": "network session key",
    "BASE_LORAWANCN470_LORAWAN_CONFIG_MSG8": "frequency band mask",
    "BASE_LORAWANCN470_LORAWAN_CONFIG_MSG9": "RX window param:",
    "BASE_LORAWANCN470_LORAWAN_CONFIG_MSG10": "RX1 delay (1~15)",
    "BASE_LORAWANCN470_LORAWAN_CONFIG_MSG11": "RX2 delay (2~16)",
    "BASE_LORAWANCN470_LORAWAN_CONFIG_MSG12": "RX2 datarate",
    "BASE_LORAWANCN470_LORAWAN_CONFIG_MSG13": "class mode",
    "BASE_LORAWANCN470_P2P_CONFIG_MSG0": "Config P2P parameters",
    "BASE_LORAWANCN470_P2P_CONFIG_MSG1": "frequency",
    "BASE_LORAWANCN470_P2P_CONFIG_MSG2": "spreading factor (5 ~ 12)",
    "BASE_LORAWANCN470_P2P_CONFIG_MSG3": "bandwidth",
    "BASE_LORAWANCN470_P2P_CONFIG_MSG4": "TX power (5 ~ 22)",
    "BASE_LORAWANCN470_P2P_CONFIG_MSG5": "code rate",
    "BASE_LORAWANCN470_P2P_CONFIG_MSG6": "preamble length",
    "BASE_LORAWANCN470_RS485_CONFIG_MSG0": "",
    "BASE_LORAWANCN470_RS485_CONFIG_MSG1": "Config RS485 with",
    "BASE_LORAWANCN470_RS485_CONFIG_MSG2": "baudrate",
    "BASE_LORAWANCN470_RS485_CONFIG_MSG3": "bits",
    "BASE_LORAWANCN470_RS485_CONFIG_MSG4": "parity",
    "BASE_LORAWANCN470_RS485_CONFIG_MSG5": "stop",
    "BASE_LORAWANCN470_RS485_CONFIG_MSG6": "RTS",
    "BASE_LORAWANCN470_RS485_CONFIG_MSG7": "CTS",
    "BASE_LORAWANCN470_RS485_CONFIG_MSG8": "TX buffer",
    "BASE_LORAWANCN470_RS485_CONFIG_MSG9": "RX buffer",
    "BASE_LORAWANCN470_RS485_CONFIG_MSG10": "timeout",
    "BASE_LORAWANCN470_RS485_CONFIG_MSG11": "timeout char",
    "BASE_LORAWANCN470_RS485_CONFIG_MSG12": "invert",
    "BASE_LORAWANCN470_RS485_CONFIG_MSG13": "flow",
    "BASE_LORAWANCN470_RS485_CONFIG_MSG14": "mode",
    "BASE_LORAWANCN470_GET_RECEIVED_DATA_MSG0": "get LoRaWAN-CN470 received data",
    "BASE_LORAWANCN470_GET_RECEIVED_DATA_STRING_MSG0": "get LoRaWAN-CN470 received data as string",
    "BASE_LORAWANCN470_GET_RECEIVED_DATA_COUNT_MSG0": "get LoRaWAN-CN470 received data count",
    "BASE_LORAWANCN470_SEND_DATA_PAYLOAD_MSG0": "LoRaWAN-CN470 send data %1 on port %2 (1 ~ 233)",
    "BASE_LORAWANCN470_SEND_DATA_PAYLOAD_RETURN_MSG0": "LoRaWAN-CN470 send data %1 on port %2 (1 ~ 233) wait %3 ms to confirm",
    "BASE_LORAWANCN470_START_JOIN_LORAWAN_NETWORK_MSG0": "Start LoRaWAN-CN470 join LoRaWAN network, wait %1 ms for response",
    "BASE_LORAWANCN470_START_JOIN_LORAWAN_NETWORK_MSG1": "Successed %1",
    "BASE_LORAWANCN470_START_JOIN_LORAWAN_NETWORK_MSG2": "Failed %1",
    "BASE_LORAWANCN470_SEND_P2P_DATA_MSG0": "Send LoRaWAN-CN470 P2P data %1 , convert to hex %2",
    "BASE_LORAWANCN470_SEND_P2P_DATA_RETURN_MSG0": "send LoRaWAN-CN470 P2P data %1 wait %2 ms to get send result, convert to hex %3 (return True or False)",
    "BASE_LORAWANCN470_GET_P2P_RECEIVE_DATA_MSG0": "get LoRaWAN-CN470 P2P mode receive data in %1 ms, convert to hex %2 (return tuple)",
    "BASE_LORAWANCN470_RS485_SETUP_MSG0": "LoRaWAN-CN470 RS485 setup %1 baudrate %2 bits %3 parity %4 stop %5 TX %6 RX %7",
    "BASE_LORAWANCN470_RS485_SETUP_MSG1": "RTS",
    "BASE_LORAWANCN470_RS485_SETUP_MSG2": "CTS",
    "BASE_LORAWANCN470_RS485_SETUP_MSG3": "TX buffer",
    "BASE_LORAWANCN470_RS485_SETUP_MSG4": "RX buffer",
    "BASE_LORAWANCN470_RS485_SETUP_MSG5": "timeout",
    "BASE_LORAWANCN470_RS485_SETUP_MSG6": "timeout char",
    "BASE_LORAWANCN470_RS485_SETUP_MSG7": "invert",
    "BASE_LORAWANCN470_RS485_SETUP_MSG8": "flow",
    "BASE_LORAWANCN470_RS485_SETUP_MSG9": "mode",
    "BASE_LORAWANCN470_RS485_DEINIT_MSG0": "LoRaWAN-CN470 RS485 deinit",
    "BASE_LORAWANCN470_RS485_AVAILABLE_CHAR_MSG0": "LoRaWAN-CN470 RS485 count of available",
    "BASE_LORAWANCN470_RS485_READ_ALL_MSG0": "LoRaWAN-CN470 RS485 read all bytes (return bytes)",
    "BASE_LORAWANCN470_RS485_READ_BYTES_MSG0": "LoRaWAN-CN470 RS485 read %1 bytes (return bytes)",
    "BASE_LORAWANCN470_RS485_READ_LINE_MSG0": "LoRaWAN-CN470 RS485 read line (return bytes)",
    "BASE_LORAWANCN470_RS485_READ_RAW_DATA_MSG0": "LoRaWAN-CN470 RS485 read a raw data (return 0 ~ 255)",
    "BASE_LORAWANCN470_RS485_WRITE_MSG0": "LoRaWAN-CN470 RS485 write %1",
    "BASE_LORAWANCN470_RS485_WRITE_LINE_MSG0": "LoRaWAN-CN470 RS485 write line %1",
    "BASE_LORAWANCN470_RS485_WRITE_LIST_MSG0": "LoRaWAN-CN470 RS485 write list or tuple %1",
    "BASE_LORAWANCN470_RS485_WRITE_RAW_DATA_LIST_MSG0": "LoRaWAN-CN470 RS485 write raw data %1",
    "BASE_LORAWANCN470_RS485_WRITE_RAW_DATA_MSG0": "LoRaWAN-CN470 RS485 write raw data %1",
    "BASE_LORAWANCN470_RS485_READ_INTO_BUF_MSG0": "LoRaWAN-CN470 RS485 read into buf %1",
    "BASE_LORAWANCN470_RS485_SEND_BREAK_MSG0": "LoRaWAN-CN470 RS485 send break single",
    "BASE_LORAWANCN470_RS485_FLUSH_MSG0": "LoRaWAN-CN470 RS485 flush",
    "BASE_LORAWANCN470_RS485_TXDONE_MSG0": "LoRaWAN-CN470 RS485 is transfer done (return True or False)",
    "BASE_LORAWANEU868_INIT_MSG0": "Init LoRaWAN-EU868 with %1 %2 RS485",
    "BASE_LORAWANEU868_LORAWAN_CONFIG_MSG0": "Config",
    "BASE_LORAWANEU868_LORAWAN_CONFIG_MSG1": "mode",
    "BASE_LORAWANEU868_LORAWAN_CONFIG_MSG2": "device eui *",
    "BASE_LORAWANEU868_LORAWAN_CONFIG_MSG3": "app key *",
    "BASE_LORAWANEU868_LORAWAN_CONFIG_MSG4": "app eui",
    "BASE_LORAWANEU868_LORAWAN_CONFIG_MSG5": "device address",
    "BASE_LORAWANEU868_LORAWAN_CONFIG_MSG6": "app session key",
    "BASE_LORAWANEU868_LORAWAN_CONFIG_MSG7": "network session key",
    "BASE_LORAWANEU868_LORAWAN_CONFIG_MSG8": "RX window param:",
    "BASE_LORAWANEU868_LORAWAN_CONFIG_MSG9": "RX1 delay (1~15)",
    "BASE_LORAWANEU868_LORAWAN_CONFIG_MSG10": "RX2 delay (2~16)",
    "BASE_LORAWANEU868_LORAWAN_CONFIG_MSG11": "RX2 datarate",
    "BASE_LORAWANEU868_LORAWAN_CONFIG_MSG12": "class mode",
    "BASE_LORAWANEU868_P2P_CONFIG_MSG0": "Config P2P parameters",
    "BASE_LORAWANEU868_P2P_CONFIG_MSG1": "frequency",
    "BASE_LORAWANEU868_P2P_CONFIG_MSG2": "spreading factor (5 ~ 12)",
    "BASE_LORAWANEU868_P2P_CONFIG_MSG3": "bandwidth",
    "BASE_LORAWANEU868_P2P_CONFIG_MSG4": "TX power (5 ~ 22)",
    "BASE_LORAWANEU868_P2P_CONFIG_MSG5": "code rate",
    "BASE_LORAWANEU868_P2P_CONFIG_MSG6": "preamble length",
    "BASE_LORAWANEU868_RS485_CONFIG_MSG0": "",
    "BASE_LORAWANEU868_RS485_CONFIG_MSG1": "Config RS485 with",
    "BASE_LORAWANEU868_RS485_CONFIG_MSG2": "baudrate",
    "BASE_LORAWANEU868_RS485_CONFIG_MSG3": "bits",
    "BASE_LORAWANEU868_RS485_CONFIG_MSG4": "parity",
    "BASE_LORAWANEU868_RS485_CONFIG_MSG5": "stop",
    "BASE_LORAWANEU868_RS485_CONFIG_MSG6": "RTS",
    "BASE_LORAWANEU868_RS485_CONFIG_MSG7": "CTS",
    "BASE_LORAWANEU868_RS485_CONFIG_MSG8": "TX buffer",
    "BASE_LORAWANEU868_RS485_CONFIG_MSG9": "RX buffer",
    "BASE_LORAWANEU868_RS485_CONFIG_MSG10": "timeout",
    "BASE_LORAWANEU868_RS485_CONFIG_MSG11": "timeout char",
    "BASE_LORAWANEU868_RS485_CONFIG_MSG12": "invert",
    "BASE_LORAWANEU868_RS485_CONFIG_MSG13": "flow",
    "BASE_LORAWANEU868_RS485_CONFIG_MSG14": "mode",
    "BASE_LORAWANEU868_GET_RECEIVED_DATA_MSG0": "get LoRaWAN-EU868 received data",
    "BASE_LORAWANEU868_GET_RECEIVED_DATA_STRING_MSG0": "get LoRaWAN-EU868 received data as string",
    "BASE_LORAWANEU868_GET_RECEIVED_DATA_COUNT_MSG0": "get LoRaWAN-EU868 received data count",
    "BASE_LORAWANEU868_SEND_DATA_PAYLOAD_MSG0": "LoRaWAN-EU868 send data %1 on port %2 (1 ~ 233)",
    "BASE_LORAWANEU868_SEND_DATA_PAYLOAD_RETURN_MSG0": "LoRaWAN-EU868 send data %1 on port %2 (1 ~ 233) wait %3 ms to confirm",
    "BASE_LORAWANEU868_START_JOIN_LORAWAN_NETWORK_MSG0": "Start LoRaWAN-EU868 join LoRaWAN network, wait %1 ms for response",
    "BASE_LORAWANEU868_START_JOIN_LORAWAN_NETWORK_MSG1": "Successed %1",
    "BASE_LORAWANEU868_START_JOIN_LORAWAN_NETWORK_MSG2": "Failed %1",
    "BASE_LORAWANEU868_SEND_P2P_DATA_MSG0": "Send LoRaWAN-EU868 P2P data %1 , convert to hex %2",
    "BASE_LORAWANEU868_SEND_P2P_DATA_RETURN_MSG0": "send LoRaWAN-EU868 P2P data %1 wait %2 ms to get send result, convert to hex %3 (return True or False)",
    "BASE_LORAWANEU868_GET_P2P_RECEIVE_DATA_MSG0": "get LoRaWAN-EU868 P2P mode receive data in %1 ms, convert to hex %2 (return tuple)",
    "BASE_LORAWANEU868_RS485_SETUP_MSG0": "LoRaWAN-EU868 RS485 setup %1 baudrate %2 bits %3 parity %4 stop %5 TX %6 RX %7",
    "BASE_LORAWANEU868_RS485_SETUP_MSG1": "RTS",
    "BASE_LORAWANEU868_RS485_SETUP_MSG2": "CTS",
    "BASE_LORAWANEU868_RS485_SETUP_MSG3": "TX buffer",
    "BASE_LORAWANEU868_RS485_SETUP_MSG4": "RX buffer",
    "BASE_LORAWANEU868_RS485_SETUP_MSG5": "timeout",
    "BASE_LORAWANEU868_RS485_SETUP_MSG6": "timeout char",
    "BASE_LORAWANEU868_RS485_SETUP_MSG7": "invert",
    "BASE_LORAWANEU868_RS485_SETUP_MSG8": "flow",
    "BASE_LORAWANEU868_RS485_SETUP_MSG9": "mode",
    "BASE_LORAWANEU868_RS485_DEINIT_MSG0": "LoRaWAN-EU868 RS485 deinit",
    "BASE_LORAWANEU868_RS485_AVAILABLE_CHAR_MSG0": "LoRaWAN-EU868 RS485 count of available",
    "BASE_LORAWANEU868_RS485_READ_ALL_MSG0": "LoRaWAN-EU868 RS485 read all bytes (return bytes)",
    "BASE_LORAWANEU868_RS485_READ_BYTES_MSG0": "LoRaWAN-EU868 RS485 read %1 bytes (return bytes)",
    "BASE_LORAWANEU868_RS485_READ_LINE_MSG0": "LoRaWAN-EU868 RS485 read line (return bytes)",
    "BASE_LORAWANEU868_RS485_READ_RAW_DATA_MSG0": "LoRaWAN-EU868 RS485 read a raw data (return 0 ~ 255)",
    "BASE_LORAWANEU868_RS485_WRITE_MSG0": "LoRaWAN-EU868 RS485 write %1",
    "BASE_LORAWANEU868_RS485_WRITE_LINE_MSG0": "LoRaWAN-EU868 RS485 write line %1",
    "BASE_LORAWANEU868_RS485_WRITE_LIST_MSG0": "LoRaWAN-EU868 RS485 write list or tuple %1",
    "BASE_LORAWANEU868_RS485_WRITE_RAW_DATA_LIST_MSG0": "LoRaWAN-EU868 RS485 write raw data %1",
    "BASE_LORAWANEU868_RS485_WRITE_RAW_DATA_MSG0": "LoRaWAN-EU868 RS485 write raw data %1",
    "BASE_LORAWANEU868_RS485_READ_INTO_BUF_MSG0": "LoRaWAN-EU868 RS485 read into buf %1",
    "BASE_LORAWANEU868_RS485_SEND_BREAK_MSG0": "LoRaWAN-EU868 RS485 send break single",
    "BASE_LORAWANEU868_RS485_FLUSH_MSG0": "LoRaWAN-EU868 RS485 flush",
    "BASE_LORAWANEU868_RS485_TXDONE_MSG0": "LoRaWAN-EU868 RS485 is transfer done (return True or False)",
    "BASE_LORAWANUS915_INIT_MSG0": "Init LoRaWAN-US915 with %1 %2 RS485",
    "BASE_LORAWANUS915_LORAWAN_CONFIG_MSG0": "Config",
    "BASE_LORAWANUS915_LORAWAN_CONFIG_MSG1": "mode",
    "BASE_LORAWANUS915_LORAWAN_CONFIG_MSG2": "device eui *",
    "BASE_LORAWANUS915_LORAWAN_CONFIG_MSG3": "app key *",
    "BASE_LORAWANUS915_LORAWAN_CONFIG_MSG4": "app eui",
    "BASE_LORAWANUS915_LORAWAN_CONFIG_MSG5": "device address",
    "BASE_LORAWANUS915_LORAWAN_CONFIG_MSG6": "app session key",
    "BASE_LORAWANUS915_LORAWAN_CONFIG_MSG7": "network session key",
    "BASE_LORAWANUS915_LORAWAN_CONFIG_MSG8": "frequency band mask",
    "BASE_LORAWANUS915_LORAWAN_CONFIG_MSG9": "RX window param:",
    "BASE_LORAWANUS915_LORAWAN_CONFIG_MSG10": "RX1 delay (1~15)",
    "BASE_LORAWANUS915_LORAWAN_CONFIG_MSG11": "RX2 delay (2~16)",
    "BASE_LORAWANUS915_LORAWAN_CONFIG_MSG12": "RX2 datarate",
    "BASE_LORAWANUS915_LORAWAN_CONFIG_MSG13": "class mode",
    "BASE_LORAWANUS915_P2P_CONFIG_MSG0": "Config P2P parameters",
    "BASE_LORAWANUS915_P2P_CONFIG_MSG1": "frequency",
    "BASE_LORAWANUS915_P2P_CONFIG_MSG2": "spreading factor (5 ~ 12)",
    "BASE_LORAWANUS915_P2P_CONFIG_MSG3": "bandwidth",
    "BASE_LORAWANUS915_P2P_CONFIG_MSG4": "TX power (5 ~ 22)",
    "BASE_LORAWANUS915_P2P_CONFIG_MSG5": "code rate",
    "BASE_LORAWANUS915_P2P_CONFIG_MSG6": "preamble length",
    "BASE_LORAWANUS915_RS485_CONFIG_MSG0": "",
    "BASE_LORAWANUS915_RS485_CONFIG_MSG1": "Config RS485 with",
    "BASE_LORAWANUS915_RS485_CONFIG_MSG2": "baudrate",
    "BASE_LORAWANUS915_RS485_CONFIG_MSG3": "bits",
    "BASE_LORAWANUS915_RS485_CONFIG_MSG4": "parity",
    "BASE_LORAWANUS915_RS485_CONFIG_MSG5": "stop",
    "BASE_LORAWANUS915_RS485_CONFIG_MSG6": "RTS",
    "BASE_LORAWANUS915_RS485_CONFIG_MSG7": "CTS",
    "BASE_LORAWANUS915_RS485_CONFIG_MSG8": "TX buffer",
    "BASE_LORAWANUS915_RS485_CONFIG_MSG9": "RX buffer",
    "BASE_LORAWANUS915_RS485_CONFIG_MSG10": "timeout",
    "BASE_LORAWANUS915_RS485_CONFIG_MSG11": "timeout char",
    "BASE_LORAWANUS915_RS485_CONFIG_MSG12": "invert",
    "BASE_LORAWANUS915_RS485_CONFIG_MSG13": "flow",
    "BASE_LORAWANUS915_RS485_CONFIG_MSG14": "mode",
    "BASE_LORAWANUS915_GET_RECEIVED_DATA_MSG0": "get LoRaWAN-US915 received data",
    "BASE_LORAWANUS915_GET_RECEIVED_DATA_STRING_MSG0": "get LoRaWAN-US915 received data as string",
    "BASE_LORAWANUS915_GET_RECEIVED_DATA_COUNT_MSG0": "get LoRaWAN-US915 received data count",
    "BASE_LORAWANUS915_SEND_DATA_PAYLOAD_MSG0": "LoRaWAN-US915 send data %1 on port %2 (1 ~ 233)",
    "BASE_LORAWANUS915_SEND_DATA_PAYLOAD_RETURN_MSG0": "LoRaWAN-US915 send data %1 on port %2 (1 ~ 233) wait %3 ms to confirm",
    "BASE_LORAWANUS915_START_JOIN_LORAWAN_NETWORK_MSG0": "Start LoRaWAN-US915 join LoRaWAN network, wait %1 ms for response",
    "BASE_LORAWANUS915_START_JOIN_LORAWAN_NETWORK_MSG1": "Successed %1",
    "BASE_LORAWANUS915_START_JOIN_LORAWAN_NETWORK_MSG2": "Failed %1",
    "BASE_LORAWANUS915_SEND_P2P_DATA_MSG0": "Send LoRaWAN-US915 P2P data %1 , convert to hex %2",
    "BASE_LORAWANUS915_SEND_P2P_DATA_RETURN_MSG0": "send LoRaWAN-US915 P2P data %1 wait %2 ms to get send result, convert to hex %3 (return True or False)",
    "BASE_LORAWANUS915_GET_P2P_RECEIVE_DATA_MSG0": "get LoRaWAN-US915 P2P mode receive data in %1 ms, convert to hex %2 (return tuple)",
    "BASE_LORAWANUS915_RS485_SETUP_MSG0": "LoRaWAN-US915 RS485 setup %1 baudrate %2 bits %3 parity %4 stop %5 TX %6 RX %7",
    "BASE_LORAWANUS915_RS485_SETUP_MSG1": "RTS",
    "BASE_LORAWANUS915_RS485_SETUP_MSG2": "CTS",
    "BASE_LORAWANUS915_RS485_SETUP_MSG3": "TX buffer",
    "BASE_LORAWANUS915_RS485_SETUP_MSG4": "RX buffer",
    "BASE_LORAWANUS915_RS485_SETUP_MSG5": "timeout",
    "BASE_LORAWANUS915_RS485_SETUP_MSG6": "timeout char",
    "BASE_LORAWANUS915_RS485_SETUP_MSG7": "invert",
    "BASE_LORAWANUS915_RS485_SETUP_MSG8": "flow",
    "BASE_LORAWANUS915_RS485_SETUP_MSG9": "mode",
    "BASE_LORAWANUS915_RS485_DEINIT_MSG0": "LoRaWAN-US915 RS485 deinit",
    "BASE_LORAWANUS915_RS485_AVAILABLE_CHAR_MSG0": "LoRaWAN-US915 RS485 count of available",
    "BASE_LORAWANUS915_RS485_READ_ALL_MSG0": "LoRaWAN-US915 RS485 read all bytes (return bytes)",
    "BASE_LORAWANUS915_RS485_READ_BYTES_MSG0": "LoRaWAN-US915 RS485 read %1 bytes (return bytes)",
    "BASE_LORAWANUS915_RS485_READ_LINE_MSG0": "LoRaWAN-US915 RS485 read line (return bytes)",
    "BASE_LORAWANUS915_RS485_READ_RAW_DATA_MSG0": "LoRaWAN-US915 RS485 read a raw data (return 0 ~ 255)",
    "BASE_LORAWANUS915_RS485_WRITE_MSG0": "LoRaWAN-US915 RS485 write %1",
    "BASE_LORAWANUS915_RS485_WRITE_LINE_MSG0": "LoRaWAN-US915 RS485 write line %1",
    "BASE_LORAWANUS915_RS485_WRITE_LIST_MSG0": "LoRaWAN-US915 RS485 write list or tuple %1",
    "BASE_LORAWANUS915_RS485_WRITE_RAW_DATA_LIST_MSG0": "LoRaWAN-US915 RS485 write raw data %1",
    "BASE_LORAWANUS915_RS485_WRITE_RAW_DATA_MSG0": "LoRaWAN-US915 RS485 write raw data %1",
    "BASE_LORAWANUS915_RS485_READ_INTO_BUF_MSG0": "LoRaWAN-US915 RS485 read into buf %1",
    "BASE_LORAWANUS915_RS485_SEND_BREAK_MSG0": "LoRaWAN-US915 RS485 send break single",
    "BASE_LORAWANUS915_RS485_FLUSH_MSG0": "LoRaWAN-US915 RS485 flush",
    "BASE_LORAWANUS915_RS485_TXDONE_MSG0": "LoRaWAN-US915 RS485 is transfer done (return True or False)",
    "UNIT_ENV_INIT_MSG0": "初期化 %1",
    "UNIT_ENV_GET_TEMPERATURE_MSG0": "%1 温度を取得(°C, return float)",
    "UNIT_ENV_GET_PRESSURE_MSG0": "%1 気圧を取得(hPa, return float)",
    "UNIT_ENV_GET_HUMIDITY_MSG0": "%1 湿度を取得(%, return float)",
    "UNIT_ENVPRO_INIT_MSG0": "初期化",
    "UNIT_ENVPRO_GET_TEMPERATURE_MSG0": "取得",
    "UNIT_ENVPRO_GET_TEMPERATURE_MSG1": "温度(°C, return float)",
    "UNIT_ENVPRO_GET_PRESSURE_MSG0": "取得",
    "UNIT_ENVPRO_GET_PRESSURE_MSG1": "気圧(hPa, return float)",
    "UNIT_ENVPRO_GET_HUMIDITY_MSG0": "取得",
    "UNIT_ENVPRO_GET_HUMIDITY_MSG1": "湿度(%, return float)",
    "UNIT_ENVPRO_GET_GAS_RESISTANCE_MSG0": "取得",
    "UNIT_ENVPRO_GET_GAS_RESISTANCE_MSG1": "ガス抵抗(kΩ, return float)",
    "UNIT_ENVPRO_GET_ALTITUDE_MSG0": "取得",
    "UNIT_ENVPRO_GET_ALTITUDE_MSG1": "標高(meters, return float)",
    "UNIT_ENVPRO_GET_IIR_FILTER_COEFFICIENT_MSG0": "取得",
    "UNIT_ENVPRO_GET_IIR_FILTER_COEFFICIENT_MSG1": "IIRフィルタ係数(return int)",
    "UNIT_ENVPRO_GET_OVER_SAMPLING_RATE_MSG0": "取得",
    "UNIT_ENVPRO_GET_OVER_SAMPLING_RATE_MSG1": "オーバーサンプ>リングレート(return int)",
    "UNIT_ENVPRO_SET_IIR_FILTER_COEFFICIENT_MSG0": "設定 IIRフィルタ係数",
    "UNIT_ENVPRO_SET_IIR_FILTER_COEFFICIENT_MSG1": "(0 ~ 127)",
    "UNIT_ENVPRO_SET_OVER_SAMPLING_RATE_MSG0": "設定",
    "UNIT_ENVPRO_SET_OVER_SAMPLING_RATE_MSG1": "オーバーサンプリングレート",
    "UNIT_ENVPRO_SET_OVER_SAMPLING_RATE_MSG2": "(1 ~ 16)",
    "UNIT_PAHUB_INIT_MSG0": "Init",
    "UNIT_PAHUB_SELECT_CHANNEL_MSG0": "select channel",
    "UNIT_PAHUB_RELEASE_CHANNEL_MSG0": "release channel",
    "UNIT_PAHUB_SCAN_MSG0": "scan",
    "UNIT_PAHUB_START_MSG0": "start",
    "UNIT_PAHUB_STOP_MSG0": "stop",
    "UNIT_PAHUB_READINTO_MSG0": "readinto",
    "UNIT_PAHUB_READINTO_MSG1": "NACK",
    "UNIT_PAHUB_WRITE_RETURN_MSG0": "write",
    "UNIT_PAHUB_WRITE_MSG0": "write",
    "UNIT_PAHUB_READFROM_MSG0": "read from",
    "UNIT_PAHUB_READFROM_MSG1": "addr",
    "UNIT_PAHUB_READFROM_MSG2": "nbytes",
    "UNIT_PAHUB_READFROM_MSG3": "stop",
    "UNIT_PAHUB_READFROM_INTO_MSG0": "read from",
    "UNIT_PAHUB_READFROM_INTO_MSG1": "addr",
    "UNIT_PAHUB_READFROM_INTO_MSG2": "into",
    "UNIT_PAHUB_READFROM_INTO_MSG3": "stop",
    "UNIT_PAHUB_WRITETO_MSG0": "write",
    "UNIT_PAHUB_WRITETO_MSG1": "addr",
    "UNIT_PAHUB_WRITETO_MSG2": "stop",
    "UNIT_PAHUB_WRITETO_RETURN_MSG0": "write",
    "UNIT_PAHUB_WRITETO_RETURN_MSG1": "addr",
    "UNIT_PAHUB_WRITETO_RETURN_MSG2": "stop",
    "UNIT_PAHUB_READFROM_MEM_MSG0": "read from addr",
    "UNIT_PAHUB_READFROM_MEM_MSG1": "mem addr",
    "UNIT_PAHUB_READFROM_MEM_MSG2": "nbytes",
    "UNIT_PAHUB_READFROM_MEM_INTO_MSG0": "read from addr",
    "UNIT_PAHUB_READFROM_MEM_INTO_MSG1": "mem addr",
    "UNIT_PAHUB_READFROM_MEM_INTO_MSG2": "into buf",
    "UNIT_PAHUB_WRITETO_MEM_MSG0": "write buf",
    "UNIT_PAHUB_WRITETO_MEM_MSG1": "to addr",
    "UNIT_PAHUB_WRITETO_MEM_MSG2": "mem addr",
    "UNIT_COLOR_INIT_MSG0": "初期化",
    "UNIT_COLOR_GET_LUX_MSG0": "",
    "UNIT_COLOR_GET_LUX_MSG1": "LUX値",
    "UNIT_COLOR_GET_TEMPERATURE_MSG0": "",
    "UNIT_COLOR_GET_TEMPERATURE_MSG1": "色温度",
    "UNIT_COLOR_GET_RGB_TYPE_MSG0": "",
    "UNIT_COLOR_GET_RGB_TYPE_MSG1": "RGB(バイト表現)",
    "UNIT_COLOR_GET_COLOR_MSG0": "",
    "UNIT_COLOR_GET_COLOR_MSG1": "色",
    "UNIT_COLOR_GET_COLOR565_MSG0": "",
    "UNIT_COLOR_GET_COLOR565_MSG1": "色(565形式)",
    "UNIT_COLOR_GET_COLOR_RAW_MSG0": "",
    "UNIT_COLOR_GET_COLOR_RAW_MSG1": "色(raw形式)",
    "UNIT_COLOR_GET_ACTIVE_MSG0": "get",
    "UNIT_COLOR_GET_ACTIVE_MSG1": "active",
    "UNIT_COLOR_SET_ACTIVE_MSG0": "active",
    "UNIT_COLOR_GET_INTEGRATION_TIME_MSG0": "get",
    "UNIT_COLOR_GET_INTEGRATION_TIME_MSG1": "integration time",
    "UNIT_COLOR_SET_INTEGRATION_TIME_MSG0": "integration time",
    "UNIT_COLOR_GET_GAIN_MSG0": "",
    "UNIT_COLOR_GET_GAIN_MSG1": "ゲイン",
    "UNIT_COLOR_SET_GAIN_MSG0": "ゲイン",
    "UNIT_COLOR_GET_CYCLES_MSG0": "get",
    "UNIT_COLOR_GET_CYCLES_MSG1": "cycles",
    "UNIT_COLOR_SET_CYCLES_MSG0": "cycles",
    "UNIT_COLOR_GET_MIN_VALUE_MSG0": "",
    "UNIT_COLOR_GET_MIN_VALUE_MSG1": "最小値",
    "UNIT_COLOR_SET_MIN_VALUE_MSG0": "最小値",
    "UNIT_COLOR_SET_MIN_VALUE_MSG1": "(0 ~ 65535)",
    "UNIT_COLOR_GET_MAX_VALUE_MSG0": "",
    "UNIT_COLOR_GET_MAX_VALUE_MSG1": "最大値",
    "UNIT_COLOR_SET_MAX_VALUE_MSG0": "最大値",
    "UNIT_COLOR_SET_MAX_VALUE_MSG1": "(0 ~ 65535)",
    "UNIT_COLOR_GET_GLASS_ATTENUATION_MSG0": "",
    "UNIT_COLOR_GET_GLASS_ATTENUATION_MSG1": "ガラス減衰",
    "UNIT_COLOR_SET_GLASS_ATTENUATION_MSG0": "ガラス減衰",
    "UNIT_COLOR_GET_INTERRUPT_MSG0": "get",
    "UNIT_COLOR_GET_INTERRUPT_MSG1": "interrupt",
    "UNIT_COLOR_CLEAR_INTERRUPT_MSG0": "clear interrupt",
    "UNIT_COLOR_GET_COLOR_R_MSG0": "",
    "UNIT_COLOR_GET_COLOR_R_MSG1": "R(int)",
    "UNIT_COLOR_GET_COLOR_G_MSG0": "",
    "UNIT_COLOR_GET_COLOR_G_MSG1": "G(int)",
    "UNIT_COLOR_GET_COLOR_B_MSG0": "",
    "UNIT_COLOR_GET_COLOR_B_MSG1": "B(int)",
    "UNIT_COLOR_GET_COLOR_H_MSG0": "",
    "UNIT_COLOR_GET_COLOR_H_MSG1": "Hue(int)",
    "UNIT_COLOR_GET_COLOR_S_MSG0": "",
    "UNIT_COLOR_GET_COLOR_S_MSG1": "Saturation(float)",
    "UNIT_COLOR_GET_COLOR_V_MSG0": "",
    "UNIT_COLOR_GET_COLOR_V_MSG1": "Value(float)",
    "UNIT_TOF_INIT_MSG0": "%1 初期化",
    "UNIT_TOF_GET_DATA_STATUS_MSG0": "%1 データ取得可能状態(True or False)",
    "UNIT_TOF_GET_DISTANCE_MSG0": "%1 距離(cm:float)",
    "UNIT_TOF_GET_RANGE_MSG0": "%1 範囲(mm:int)",
    "UNIT_TOF_GET_CONTINUOUS_MODE_MSG0": "%1 連続モードか(True or False)",
    "UNIT_TOF_GET_MEASUREMENT_TIMING_BUDGET_MSG0": "%1 measurement timing budget (return int)",
    "UNIT_TOF_SET_MEASUREMENT_TIMING_BUDGET_MSG0": "%1 measurement timing budget %2 に設定",
    "UNIT_TOF_SET_ADDRESS_MSG0": "%1 アドレスを %2 に設定",
    "UNIT_TOF_GET_SIGNAL_RATE_LIMIT_MSG0": "%1 signal rate limitを取得(return float)",
    "UNIT_TOF_SET_SIGNAL_RATE_LIMIT_MSG0": "%1 signal rate limit %2 MCPS (0.0 ~ 511.99)",
    "UNIT_TOF_START_CONTINUOUS_MSG0": "%1 連続モードを開始",
    "UNIT_TOF_STOP_CONTINUOUS_MSG0": "%1 連続モードを停止",
    "UNIT_ADC_INIT_MSG0": "Init %1",
    "UNIT_ADC_GET_VALUE_MSG0": "get %1 value (return int)",
    "UNIT_ADC_GET_VOLTAGE_MSG0": "get %1 voltage (return float)",
    "UNIT_ADC_GET_RAW_VALUE_MSG0": "get %1 16 bit ADC raw value (return int)",
    "UNIT_ADC_GET_OPERATING_MODE_MSG0": "get %1 operating mode (return 0 or 1)",
    "UNIT_ADC_SET_OPERATING_MODE_MSG0": "%1 operating mode %2",
    "UNIT_ADC_GET_DATA_RATE_MSG0": "get %1 data rate (return int)",
    "UNIT_ADC_SET_DATA_RATE_MSG0": "%1 data rate %2",
    "UNIT_ADC_GET_GAIN_MSG0": "get %1 gain (return int)",
    "UNIT_ADC_SET_GAIN_MSG0": "%1 gain %2",
    "UNIT_ADCV11_INIT_MSG0": "Init %1",
    "UNIT_ADCV11_GET_VOLTAGE_MSG0": "get %1 voltage (return float)",
    "UNIT_ADCV11_GET_ADC_RAW_VALUE_MSG0": "get %1 16 bit ADC raw value (return int)",
    "UNIT_ADCV11_SET_GAIN_MSG0": "%1 set gain x%2",
    "UNIT_ADCV11_SET_SAMPLE_RATE_MSG0": "%1 set sample rate %2",
    "UNIT_ADCV11_SET_MODE_MSG0": "%1 set mode %2",
    "UNIT_ADCV11_START_SINGLE_CONVERSION_MSG0": "%1 start single conversion",
    "UNIT_DAC_INIT_MSG0": "Init %1",
    "UNIT_DAC_GET_VALUE_MSG0": "get %1 DAC value (return int)",
    "UNIT_DAC_SET_VALUE_MSG0": "%1 DAC value %2 (0 ~ 65535)",
    "UNIT_DAC_GET_VOLTAGE_MSG0": "get %1 voltage (return float)",
    "UNIT_DAC_SET_VOLTAGE_MSG0": "%1 voltage %2 (0 ~ 3.3)",
    "UNIT_DAC_GET_RAW_VALUE_MSG0": "get %1 raw value (return int)",
    "UNIT_DAC_SET_RAW_VALUE_MSG0": "%1 raw value %2 (0 ~ 4095)",
    "UNIT_DAC_GET_NORMALIZED_VALUE_MSG0": "get %1 normalized value (return 0.0 ~ 1.0)",
    "UNIT_DAC_SET_NORMALIZED_VALUE_MSG0": "%1 normalized value %2 (0.0 ~ 1.0)",
    "UNIT_DAC_SAVE_TO_EEPROM_MSG0": "%1 save to eeprom",
    "UNIT_EXTIO_INIT_MSG0": "Init %1",
    "UNIT_EXTIO_SET_PORT_MODE_MSG0": "%1 set port mode %2",
    "UNIT_EXTIO_DIGIT_READ_PORT_MSG0": "get %1 port digit value",
    "UNIT_EXTIO_DIGIT_WRITE_PORT_MSG0": "%1 set digit value %2 (0 ~ 255)",
    "UNIT_EXTIO_SET_PIN_MODE_MSG0": "%1 set %2 mode %3",
    "UNIT_EXTIO_DIGIT_WRITE_MSG0": "%1 set %2 value %3",
    "UNIT_EXTIO_DIGIT_WRITE_INPUT_MSG0": "%1 set %2 value %3 (0 or 1)",
    "UNIT_EXTIO_DIGIT_READ_MSG0": "get %1 %2 value",
    "UNIT_EXTIO2_INIT_MSG0": "Init",
    "UNIT_EXTIO2_GET_CONFIG_MODE_MSG0": "get",
    "UNIT_EXTIO2_GET_CONFIG_MODE_MSG1": "mode (return 0~5)",
    "UNIT_EXTIO2_MODE_OPTION_MSG0": "IN",
    "UNIT_EXTIO2_MODE_OPTION_MSG1": "OUT",
    "UNIT_EXTIO2_MODE_OPTION_MSG2": "ANALOG",
    "UNIT_EXTIO2_MODE_OPTION_MSG3": "SERVO",
    "UNIT_EXTIO2_MODE_OPTION_MSG4": "NEOPIXEL",
    "UNIT_EXTIO2_MODE_OPTION_MSG5": "PWM",
    "UNIT_EXTIO2_READ_INPUT_PIN_MSG0": "get",
    "UNIT_EXTIO2_READ_INPUT_PIN_MSG1": "value (return 0 or 1)",
    "UNIT_EXTIO2_READ_ADC8_PIN_MSG0": "get",
    "UNIT_EXTIO2_READ_ADC8_PIN_MSG1": "adc 8b (return 0~255)",
    "UNIT_EXTIO2_READ_ADC12_PIN_MSG0": "get",
    "UNIT_EXTIO2_READ_ADC12_PIN_MSG1": "adc 12b (return 0~4095)",
    "UNIT_EXTIO2_READ_SERVO_ANGLE_MSG0": "get",
    "UNIT_EXTIO2_READ_SERVO_ANGLE_MSG1": "servo angle (return 0~180)",
    "UNIT_EXTIO2_READ_SERVO_PULSE_MSG0": "get",
    "UNIT_EXTIO2_READ_SERVO_PULSE_MSG1": "servo pulse (return 500~2500)",
    "UNIT_EXTIO2_READ_RGB_LED_MSG0": "get",
    "UNIT_EXTIO2_READ_RGB_LED_MSG1": "RGB888 (return 0~0xfffff)",
    "UNIT_EXTIO2_READ_FW_VERSION_MSG0": "get",
    "UNIT_EXTIO2_READ_FW_VERSION_MSG1": "firmware version",
    "UNIT_EXTIO2_GET_ADDRESS_MSG0": "get",
    "UNIT_EXTIO2_GET_ADDRESS_MSG1": "I2C address (return 0x01~0x7f)",
    "UNIT_EXTIO2_SET_CONFIG_MODE_MSG0": "set",
    "UNIT_EXTIO2_SET_CONFIG_MODE_MSG1": "mode",
    "UNIT_EXTIO2_SET_OUTPUT_PIN_MSG0": "set",
    "UNIT_EXTIO2_SET_OUTPUT_PIN_MSG1": "value",
    "UNIT_EXTIO2_SET_OUTPUT_PIN_INPUT_MSG0": "set",
    "UNIT_EXTIO2_SET_OUTPUT_PIN_INPUT_MSG1": "value",
    "UNIT_EXTIO2_SET_OUTPUT_PIN_INPUT_MSG2": "(0 or 1)",
    "UNIT_EXTIO2_SET_SERVO_ANGLE_MSG0": "set",
    "UNIT_EXTIO2_SET_SERVO_ANGLE_MSG1": "servo angle",
    "UNIT_EXTIO2_SET_SERVO_ANGLE_MSG2": "(0 ~ 180)",
    "UNIT_EXTIO2_SET_SERVO_PULSE_MSG0": "set",
    "UNIT_EXTIO2_SET_SERVO_PULSE_MSG1": "servo pulse",
    "UNIT_EXTIO2_SET_SERVO_PULSE_MSG2": "(500 ~ 2500)",
    "UNIT_EXTIO2_SET_RGB_LED_MSG0": "set",
    "UNIT_EXTIO2_SET_RGB_LED_MSG1": "RGB",
    "UNIT_EXTIO2_SET_ADDRESS_MSG0": "set I2C address",
    "UNIT_EXTIO2_SET_ADDRESS_MSG1": "(0x08 ~ 0x77)",
    "UNIT_EXTIO2_GET_PWM_FREQUENCY_MSG0": "get %1 pwm frequency (return int)",
    "UNIT_EXTIO2_SET_PWM_FREQUENCY_MSG0": "%1 set pwm frequency to %2",
    "UNIT_EXTIO2_GET_PWM_DUTY_CYCLE_MSG0": "get %1 %2 pwm dutycycle (return int)",
    "UNIT_EXTIO2_SET_PWM_DUTY_CYCLE_MSG0": "%1 set %2 pwm dutycycle to %3",
    "UNIT_EARTH_INIT_MSG0": "%1 初期化",
    "UNIT_EARTH_SET_CALIBRATE_MSG0": "%1 キャリブレーション最小値(0 ~ 3300) %2 最大値(0 ~ 3300) %3",
    "UNIT_EARTH_GET_HUMIDITY_MSG0": "%1 湿度(0.0~1.0)",
    "UNIT_EARTH_GET_ANALOG_VALUE_MSG0": "%1 アナログ値(0~65535)",
    "UNIT_EARTH_GET_VOLTAGE_MV_MSG0": "%1 電圧(mV:0~3300)",
    "UNIT_EARTH_GET_DIGITAL_VALUE_MSG0": "%1 デジタル値(0 or 1)",
    "UNIT_ANGLE_INIT_MSG0": "%1 初期化",
    "UNIT_ANGLE_GET_VOLTAGE_MSG0": "電圧 %1 を取得(return float)",
    "UNIT_ANGLE_GET_ANALOG_MSG0": "アナログ値 %1 を取得(return 0~65535)",
    "UNIT_RGB_INIT_MSG0": "%1 の個数を %2 で初期化",
    "UNIT_RGB_SET_INDEX_COLOR_MSG0": "%1 %2 番目のRGB LEDを色 %3 で設定",
    "UNIT_RGB_SET_FILL_COLOR_MSG0": "%1 RGB LEDを全て色 %2 で設定",
    "UNIT_RGB_SET_BRIGHTNESS_MSG0": "%1 set brightness %2 % (0 ~ 100)",
    "UNIT_FINGER_INIT_MSG0": "Init %1 UART %2",
    "UNIT_FINGER_SLEEP_MSG0": "sleep",
    "UNIT_FINGER_GET_ADD_MODE_MSG0": "get",
    "UNIT_FINGER_GET_ADD_MODE_MSG1": "add mode (return 0 or 1)",
    "UNIT_FINGER_SET_ADD_MODE_MSG0": "Set",
    "UNIT_FINGER_SET_ADD_MODE_MSG1": "add mode",
    "UNIT_FINGER_ADD_USER_MSG0": "add user",
    "UNIT_FINGER_ADD_USER_MSG1": "(0 ~ 149) permission",
    "UNIT_FINGER_ADD_USER_RETURN_MSG0": "add user",
    "UNIT_FINGER_ADD_USER_RETURN_MSG1": "(0 ~ 149) permission",
    "UNIT_FINGER_ADD_USER_RETURN_MSG2": "(return -1 or 0~149)",
    "UNIT_FINGER_DELETE_USER_MSG0": "delete user",
    "UNIT_FINGER_DELETE_USER_MSG1": "(0 ~ 149)",
    "UNIT_FINGER_DELETE_ALL_USER_MSG0": "delete all user",
    "UNIT_FINGER_GET_USER_COUNT_MSG0": "get",
    "UNIT_FINGER_GET_USER_COUNT_MSG1": "user count",
    "UNIT_FINGER_GET_USER_CAPACITY_MSG0": "get",
    "UNIT_FINGER_GET_USER_CAPACITY_MSG1": "user capacity",
    "UNIT_FINGER_COMPARE_ID_MSG0": "compare user",
    "UNIT_FINGER_COMPARE_ID_MSG1": "(0 ~ 149)",
    "UNIT_FINGER_COMPARE_ID_MSG2": "(return True or False)",
    "UNIT_FINGER_COMPARE_FINGER_MSG0": "compare finger (return -1 or 0~149)",
    "UNIT_FINGER_GET_USER_LIST_MSG0": "get",
    "UNIT_FINGER_GET_USER_LIST_MSG1": "user list",
    "UNIT_FINGER_GET_USER_INFO_MSG0": "get",
    "UNIT_FINGER_GET_USER_INFO_MSG1": "user",
    "UNIT_FINGER_GET_USER_INFO_MSG2": "(0 ~ 149) info",
    "UNIT_FINGER_GET_USER_INFO_MSG3": "(return None or tuple)",
    "UNIT_FINGER_GET_USER_PERMISSION_MSG0": "get",
    "UNIT_FINGER_GET_USER_PERMISSION_MSG1": "user",
    "UNIT_FINGER_GET_USER_PERMISSION_MSG2": "(0 ~ 149) permission",
    "UNIT_FINGER_GET_USER_PERMISSION_MSG3": "(return -1 or 1,2,3)",
    "UNIT_FINGER_GET_USER_CHARACTERISTIC_MSG0": "get",
    "UNIT_FINGER_GET_USER_CHARACTERISTIC_MSG1": "user",
    "UNIT_FINGER_GET_USER_CHARACTERISTIC_MSG2": "(0 ~ 149) characteristic",
    "UNIT_FINGER_ADD_USER_INFO_MSG0": "add user",
    "UNIT_FINGER_ADD_USER_INFO_MSG1": "(0 ~ 149) permission",
    "UNIT_FINGER_ADD_USER_INFO_MSG2": "characteristic",
    "UNIT_FINGER_GET_MATCH_LEVEL_MSG0": "get",
    "UNIT_FINGER_GET_MATCH_LEVEL_MSG1": "match level (return 0~9)",
    "UNIT_FINGER_SET_MATCH_LEVEL_MSG0": "Set",
    "UNIT_FINGER_SET_MATCH_LEVEL_MSG1": "match level",
    "UNIT_FINGER_SET_MATCH_LEVEL_MSG2": "(0 ~ 9)",
    "UNIT_PIR_INIT_MSG0": "初期化",
    "UNIT_PIR_ENABLE_IRQ_MSG0": "IRQを有効化",
    "UNIT_PIR_DISABLE_IRQ_MSG0": "IRQを無効化",
    "UNIT_PIR_CALLBACK_MSG0": "PIR",
    "UNIT_PIR_CALLBACK_MSG1": "が",
    "UNIT_PIR_GET_STATUS_MSG0": "取得",
    "UNIT_PIR_GET_STATUS_MSG1": "状態(True or False)",
    "UNIT_IR_INIT_MSG0": "初期化",
    "UNIT_IR_SEND_ADDR_MSG0": "アドレス",
    "UNIT_IR_SEND_ADDR_MSG1": "(0 ~ 255)",
    "UNIT_IR_SEND_ADDR_MSG2": "データ",
    "UNIT_IR_SEND_ADDR_MSG3": "(0 ~ 255)を送付",
    "UNIT_IR_CALLBACK_MSG0": "",
    "UNIT_IR_CALLBACK_MSG1": "データ",
    "UNIT_IR_CALLBACK_MSG2": "(0 ~ 255)",
    "UNIT_IR_CALLBACK_MSG3": "アドレス",
    "UNIT_IR_CALLBACK_MSG4": "(0 ~ 255)を受け取る",
    "UNIT_DUAL_BUTTON_INIT_MSG0": "初期化",
    "UNIT_DUAL_BUTTON_CALLBACK_MSG0": "以下の場合:",
    "UNIT_DUAL_BUTTON_CALLBACK_MSG1": "ボタンが",
    "UNIT_DUAL_BUTTON_TICK_MSG0": "ループ中に更新",
    "UNIT_NCIR_INIT_MSG0": "Init %1",
    "UNIT_NCIR_GET_AMBIENT_TEMPERATURE_MSG0": "get %1 ambient temperature (°C, return float)",
    "UNIT_NCIR_GET_OBJECT_TEMPERATURE_MSG0": "get %1 object temperature (°C, return float)",
    "UNIT_RELAY_INIT_MSG0": "Init %1",
    "UNIT_RELAY_ON_MSG0": "Set %1 on",
    "UNIT_RELAY_OFF_MSG0": "Set %1 off",
    "UNIT_RELAY_SET_STATUS_MSG0": "Set %1 status %2",
    "UNIT_RELAY_GET_VALUE_MSG0": "get %1 status (return True or False)",
    "UNIT_RELAY2_INIT_MSG0": "Init %1",
    "UNIT_RELAY2_GET_STATUS_MSG0": "get %1 relay %2 status (return True or False)",
    "UNIT_RELAY2_SET_CONTROL_MSG0": "Set %1 relay %2 status %3",
    "UNIT_RELAY4_INIT_MSG0": "Init %1 I2C address %2",
    "UNIT_RELAY4_SET_MODE_MSG0": "Set %1 relay mode to %2",
    "UNIT_RELAY4_GET_MODE_MSG0": "get %1 relay mode",
    "UNIT_RELAY4_GET_LED_STATE_MSG0": "get %1 LED %2 state (return True or False)",
    "UNIT_RELAY4_SET_LED_STATE_MSG0": "Set %1 LED %2 state %3",
    "UNIT_RELAY4_GET_RELAY_STATE_MSG0": "get %1 relay %2 state (return True or False)",
    "UNIT_RELAY4_SET_RELAY_STATE_MSG0": "Set %1 relay %2 state %3",
    "UNIT_RELAY4_SET_ALL_RELAY_STATE_MSG0": "Set %1 all relay state %2",
    "UNIT_LIGHT_INIT_MSG0": "初期化 %1",
    "UNIT_LIGHT_GET_DIGITAL_VALUE_MSG0": "%1 デジタル値を取得(return 0 or 1)",
    "UNIT_LIGHT_GET_ANALOG_VALUE_MSG0": "%1 アナログ値を取得(return 0~65535)",
    "UNIT_LIGHT_GET_OHM_MSG0": "%1 抵抗値を取得(return int)",
    "UNIT_DLIGHT_INIT_MSG0": "%1 初期化",
    "UNIT_DLIGHT_GET_LUX_MSG0": "%1 LUX値(return float)",
    "UNIT_DLIGHT_CONFIGURE_MSG0": "%1 モード %2 解像度 %3 に設定",
    "UNIT_CARDKB_INIT_MSG0": "初期化",
    "UNIT_CARDKB_GET_KEY_MSG0": "",
    "UNIT_CARDKB_GET_KEY_MSG1": "のキーの値を取得(return int)",
    "UNIT_CARDKB_GET_STRING_MSG0": "",
    "UNIT_CARDKB_GET_STRING_MSG1": "のキーの文字列を取得(return string)",
    "UNIT_CARDKB_IS_PRESSED_MSG0": "",
    "UNIT_CARDKB_IS_PRESSED_MSG1": "が押された(return True or False)",
    "UNIT_CARDKB_KEYCODE_MSG0": "キーコードが",
    "UNIT_CARDKB_CALLBACK_MSG0": "キーボード",
    "UNIT_CARDKB_CALLBACK_MSG1": "が押された",
    "UNIT_CARDKB_TICK_MSG0": "ループ内で更新",
    "UNIT_ENCODER8_INIT_MSG0": "初期化",
    "UNIT_ENCODER8_INIT_MSG1": "I2Cアドレス",
    "UNIT_ENCODER8_INIT_MSG2": "(0x08 ~ 0x77)",
    "UNIT_ENCODER8_GET_DEVICE_STATUS_MSG0": "",
    "UNIT_ENCODER8_GET_DEVICE_STATUS_MSG1": "デバイス状態",
    "UNIT_ENCODER8_GET_COUNTER_VALUE_MSG0": "",
    "UNIT_ENCODER8_GET_COUNTER_VALUE_MSG1": "チャンネル",
    "UNIT_ENCODER8_GET_COUNTER_VALUE_MSG2": "カウンタ値",
    "UNIT_ENCODER8_GET_INCREMENT_VALUE_MSG0": "",
    "UNIT_ENCODER8_GET_INCREMENT_VALUE_MSG1": "チャンネル",
    "UNIT_ENCODER8_GET_INCREMENT_VALUE_MSG2": "増減値",
    "UNIT_ENCODER8_GET_BUTTON_STATUS_MSG0": "",
    "UNIT_ENCODER8_GET_BUTTON_STATUS_MSG1": "チャンネル",
    "UNIT_ENCODER8_GET_BUTTON_STATUS_MSG2": "ボタン状態",
    "UNIT_ENCODER8_GET_SWITCH_STATUS_MSG0": "",
    "UNIT_ENCODER8_GET_SWITCH_STATUS_MSG1": "スイッチ状態",
    "UNIT_ENCODER8_SET_COUNTER_VALUE_MSG0": "設定",
    "UNIT_ENCODER8_SET_COUNTER_VALUE_MSG1": "チャンネル",
    "UNIT_ENCODER8_SET_COUNTER_VALUE_MSG2": "カウンタ値",
    "UNIT_ENCODER8_RESET_COUNTER_VALUE_MSG0": "",
    "UNIT_ENCODER8_RESET_COUNTER_VALUE_MSG1": "チャンネルリセット",
    "UNIT_ENCODER8_RESET_COUNTER_VALUE_MSG2": "カウンタ値",
    "UNIT_ENCODER8_SET_I2C_ADDR_MSG0": "設定",
    "UNIT_ENCODER8_SET_I2C_ADDR_MSG1": "I2Cアドレス",
    "UNIT_ENCODER8_SET_I2C_ADDR_MSG2": "(0x08 ~ 0x77)",
    "UNIT_ENCODER8_SET_RGB_LED_MSG0": "設定",
    "UNIT_ENCODER8_SET_RGB_LED_MSG1": "チャンネル",
    "UNIT_ENCODER8_SET_RGB_LED_MSG2": "RGB LEDの色",
    "UNIT_ENCODER8_SET_RGB_LED_FROM_MSG0": "設定",
    "UNIT_ENCODER8_SET_RGB_LED_FROM_MSG1": "チャンネル 開始",
    "UNIT_ENCODER8_SET_RGB_LED_FROM_MSG2": "終了",
    "UNIT_ENCODER8_SET_RGB_LED_FROM_MSG3": "LEDの色",
    "UNIT_LORAWAN470_INIT_MSG0": "Init %1 UART %2",
    "UNIT_LORAWAN470_GET_ABP_CONFIG_MSG0": "get",
    "UNIT_LORAWAN470_GET_ABP_CONFIG_MSG1": "ABP config (return tuple)",
    "UNIT_LORAWAN470_GET_OTAA_CONFIG_MSG0": "get",
    "UNIT_LORAWAN470_GET_OTAA_CONFIG_MSG1": "OTAA config (return tuple)",
    "UNIT_LORAWAN470_CHECK_JOIN_STATUS_MSG0": "check",
    "UNIT_LORAWAN470_CHECK_JOIN_STATUS_MSG1": "join status",
    "UNIT_LORAWAN470_CHECK_UPLINK_STATUS_MSG0": "check",
    "UNIT_LORAWAN470_CHECK_UPLINK_STATUS_MSG1": "uplink data status",
    "UNIT_LORAWAN470_CHECK_DOWNLINK_DATA_MSG0": "check and receive",
    "UNIT_LORAWAN470_CHECK_DOWNLINK_DATA_MSG1": "downlink data",
    "UNIT_LORAWAN470_SET_UART_PORT_MSG0": "Set",
    "UNIT_LORAWAN470_SET_UART_PORT_MSG1": "core uart ID num",
    "UNIT_LORAWAN470_SET_JOIN_MODE_MSG0": "Set",
    "UNIT_LORAWAN470_SET_JOIN_MODE_MSG1": "join mode",
    "UNIT_LORAWAN470_STOP_JOIN_NETWORK_MSG0": "Stop",
    "UNIT_LORAWAN470_STOP_JOIN_NETWORK_MSG1": "join LoRaWAN network",
    "UNIT_LORAWAN470_SET_UPLINK_PORT_MSG0": "Set",
    "UNIT_LORAWAN470_SET_UPLINK_PORT_MSG1": "uplink app port",
    "UNIT_LORAWAN470_SET_UPLINK_PORT_MSG2": "(1 ~ 233)",
    "UNIT_LORAWAN470_CONFIG_MSG0": "Config",
    "UNIT_LORAWAN470_CONFIG_MSG1": "frequency band mask",
    "UNIT_LORAWAN470_CONFIG_MSG2": "RX window param: ",
    "UNIT_LORAWAN470_CONFIG_MSG3": "RX1 offset",
    "UNIT_LORAWAN470_CONFIG_MSG4": "RX2 datarate",
    "UNIT_LORAWAN470_CONFIG_MSG5": "RX2 FREQ(Hz)",
    "UNIT_LORAWAN470_CONFIG_MSG6": "class mode",
    "UNIT_LORAWAN470_CONFIG_MSG7": "uplink downlink",
    "UNIT_LORAWAN470_START_JOIN_NETWORK_MSG0": "Start",
    "UNIT_LORAWAN470_START_JOIN_NETWORK_MSG1": "join LoRaWAN network",
    "UNIT_LORAWAN470_START_JOIN_NETWORK_MSG2": "period (seconds) (7 ~ 255)",
    "UNIT_LORAWAN470_START_JOIN_NETWORK_MSG3": "maximum number of attempts (1 ~ 256)",
    "UNIT_LORAWAN470_CONFIG_MODE_MSG0": "config",
    "UNIT_LORAWAN470_SEND_DATA_PAYLOAD_MSG0": "send data payload",
    "UNIT_LORAWANCN470_INIT_MSG0": "Init %1 UART %2",
    "UNIT_LORAWANCN470_GET_ABP_CONFIG_MSG0": "get %1 ABP config (return tuple)",
    "UNIT_LORAWANCN470_GET_OTAA_CONFIG_MSG0": "get %1 OTAA config (return tuple)",
    "UNIT_LORAWANCN470_GET_JOIN_STATE_MSG0": "check %1 join status",
    "UNIT_LORAWANCN470_SET_JOIN_MODE_MSG0": "Set %1 join mode %2",
    "UNIT_LORAWANCN470_CONFIG_MSG0": "Config %1 %2 frequency band mask %3 RX window param: %4 RX1 delay (1~15) %5 RX2 delay (2~16) %6 RX2 datarate %7 class mode %8",
    "UNIT_LORAWANCN470_START_JOIN_NETWORK_MSG0": "Start %1 join LoRaWAN network",
    "UNIT_LORAWANCN470_START_JOIN_NETWORK_RETURN_MSG0": "Start %1 join LoRaWAN network, wait %2 ms for response",
    "UNIT_LORAWANCN470_JOIN_MSG0": "Start %1 join LoRaWAN network %2 %3 %4 reattempt interval (seconds) (7 ~ 255) %5 maximum number of attempts (0 ~ 255) %6 wait (ms) %7",
    "UNIT_LORAWANCN470_CONFIG_MODE_MSG0": "config",
    "UNIT_LORAWANCN470_SEND_DATA_PAYLOAD_MSG0": "%1 send data %2 on port %3 (1 ~ 233)",
    "UNIT_LORAWANCN470_SEND_DATA_PAYLOAD_RETURN_MSG0": "%1 send data %2 on port %3 (1 ~ 233) wait %4 ms to confirm",
    "UNIT_LORAWANCN470_SET_NETWORK_MODE_MSG0": "Set %1 network mode to %2",
    "UNIT_LORAWANCN470_GET_LAST_RECEIVE_MSG0": "get %1 last received data (return tuple, [port, payload])",
    "UNIT_LORAWANCN470_GET_P2P_FREQUENCY_MSG0": "get %1 P2P mode frequency",
    "UNIT_LORAWANCN470_SET_P2P_FREQUENCY_MSG0": "Set %1 P2P mode frequency to %2",
    "UNIT_LORAWANCN470_GET_P2P_SPREADING_FACTOR_MSG0": "get %1 P2P mode spreading factor",
    "UNIT_LORAWANCN470_SET_P2P_SPREADING_FACTOR_MSG0": "Set %1 P2P mode spreading factor to %2 (5 ~ 12)",
    "UNIT_LORAWANCN470_GET_P2P_BANDWIDTH_MSG0": "get %1 P2P mode bandwidth",
    "UNIT_LORAWANCN470_SET_P2P_LORA_BANDWIDTH_MSG0": "Set %1 P2P LORA mode bandwidth to %2",
    "UNIT_LORAWANCN470_SET_P2P_FSK_BANDWIDTH_MSG0": "Set %1 P2P FSK mode bandwidth to %2 (4800 ~ 467000)",
    "UNIT_LORAWANCN470_GET_P2P_TX_POWER_MSG0": "get %1 P2P mode tx power",
    "UNIT_LORAWANCN470_SET_P2P_TX_POWER_MSG0": "Set %1 P2P mode tx power to %2 (5 ~ 22)",
    "UNIT_LORAWANCN470_GET_P2P_FSK_BITRATE_MSG0": "get %1 P2P mode FSK bitrate",
    "UNIT_LORAWANCN470_SET_P2P_FSK_BITRATE_MSG0": "Set %1 P2P mode FSK bitrate to %2 (600 ~ 300000)",
    "UNIT_LORAWANCN470_SEND_P2P_DATA_MSG0": "Send %1 P2P data %2 , convert to hex %3",
    "UNIT_LORAWANCN470_SEND_P2P_DATA_RETURN_MSG0": "Send %1 P2P data %2 wait %3 ms to get send result, convert to hex %4",
    "UNIT_LORAWANCN470_GET_P2P_RECEIVE_DATA_MSG0": "get %1 P2P mode receive data in %2 ms, convert to hex %3 (return tuple)",
    "UNIT_LORAWANCN470_GET_P2P_SYNC_WORD_MSG0": "get %1 P2P mode sync word",
    "UNIT_LORAWANCN470_SET_P2P_SYNC_WORD_MSG0": "Set %1 P2P mode sync word to %2 (0x0000 ~ 0xffff)",
    "UNIT_LORAWANCN470_RESET_MODULE_TO_DEFAULT_MSG0": "Restore %1 to default parameters",
    "UNIT_LORAWANCN470_GET_P2P_CODE_RATE_MSG0": "get %1 P2P mode code rate",
    "UNIT_LORAWANCN470_SET_P2P_CODE_RATE_MSG0": "Set %1 P2P mode code rate to %2",
    "UNIT_LORAWANCN470_GET_P2P_PREAMBLE_LENGTH_MSG0": "get %1 P2P mode preamble length",
    "UNIT_LORAWANCN470_SET_P2P_PREAMBLE_LENGTH_MSG0": "Set %1 P2P mode preamble length to %2",
    "UNIT_LORAWANEU868_CONFIG_MSG0": "Config %1 %2 RX window param: %3 RX1 delay (1~15) %4 RX2 delay (2~16) %5 RX2 datarate %6 class mode %7",
    "UNIT_GPS_INIT_MSG0": "Init %1 UART %2",
    "UNIT_GPS_GET_TIME_MSG0": "get",
    "UNIT_GPS_GET_TIME_MSG1": "time (string)",
    "UNIT_GPS_GET_DATE_MSG0": "get",
    "UNIT_GPS_GET_DATE_MSG1": "date (string)",
    "UNIT_GPS_GET_LATITUDE_MSG0": "get",
    "UNIT_GPS_GET_LATITUDE_MSG1": "latitude (string: ddmm.mmmmm<W/E>)",
    "UNIT_GPS_GET_LONGITUDE_MSG0": "get",
    "UNIT_GPS_GET_LONGITUDE_MSG1": "longitude (string: dddmm.mmmmm<S/N>)",
    "UNIT_GPS_GET_ALTITUDE_MSG0": "get",
    "UNIT_GPS_GET_ALTITUDE_MSG1": "altitude (string: meter)",
    "UNIT_GPS_GET_LATITUDE_DECIMAL_MSG0": "get",
    "UNIT_GPS_GET_LATITUDE_DECIMAL_MSG1": "latitude decimal (float:dd.dddd)",
    "UNIT_GPS_GET_LONGITUDE_DECIMAL_MSG0": "get",
    "UNIT_GPS_GET_LONGITUDE_DECIMAL_MSG1": "longitude decimal (float:dd.dddd)",
    "UNIT_GPS_GET_SATELLITE_NUM_MSG0": "get",
    "UNIT_GPS_GET_SATELLITE_NUM_MSG1": "satellite num (string)",
    "UNIT_GPS_GET_POSITIONING_QUALITY_MSG0": "get",
    "UNIT_GPS_GET_POSITIONING_QUALITY_MSG1": "positioning quality (string)",
    "UNIT_GPS_GET_SPEED_MSG0": "get",
    "UNIT_GPS_GET_SPEED_MSG1": "speed",
    "UNIT_GPS_GET_SPEED_MSG2": "(string)",
    "UNIT_GPS_GET_COURSE_MSG0": "get",
    "UNIT_GPS_GET_COURSE_MSG1": "course (string)",
    "UNIT_GPS_SET_UART_ID_MSG0": "Set",
    "UNIT_GPS_SET_UART_ID_MSG1": "core UART id num",
    "UNIT_GPS_SET_TIME_ZONE_MSG0": "Set",
    "UNIT_GPS_SET_TIME_ZONE_MSG1": "time zone",
    "UNIT_GPSV11_INIT_MSG0": "Init %1 UART %2",
    "UNIT_GPSV11_DEINIT_MSG0": "%1 deinit",
    "UNIT_GPSV11_GET_ANTENNA_STATE_MSG0": "get %1 antenna state (return string)",
    "UNIT_GPSV11_GET_GPS_TIME_MSG0": "get %1 local time (return list [hour, min, second])",
    "UNIT_GPSV11_GET_GPS_DATE_MSG0": "get %1 date (return list [yyyy, mm, dd])",
    "UNIT_GPSV11_GET_GPS_DATE_TIME_MSG0": "get %1 date and local time (return list [yyyy, mm, dd, hour, min, second])",
    "UNIT_GPSV11_GET_TIMESTAMP_MSG0": "get %1 timestamp (return int)",
    "UNIT_GPSV11_GET_LATITUDE_MSG0": "get %1 latitude (return string)",
    "UNIT_GPSV11_GET_LONGITUDE_MSG0": "get %1 longitude (return string)",
    "UNIT_GPSV11_GET_ALTITUDE_MSG0": "get %1 altitude (return string)",
    "UNIT_GPSV11_GET_SATELLITE_NUM_MSG0": "get %1 satellite number (return int)",
    "UNIT_GPSV11_GET_POS_QUALITY_MSG0": "get %1 position quality (return int)",
    "UNIT_GPSV11_GET_CORSE_OVER_GROUND_MSG0": "get %1 course over ground degree (return string)",
    "UNIT_GPSV11_GET_SPEED_OVER_GROUND_MSG0": "get %1 speed over ground knot (return string)",
    "UNIT_GPSV11_GET_WORK_MODE_MSG0": "get %1 work mode (return int)",
    "UNIT_GPSV11_SET_WORK_MODE_MSG0": "Set %1 work mode to %2",
    "UNIT_GPSV11_GET_TIME_ZONE_MSG0": "get %1 current time zone offset (return int)",
    "UNIT_GPSV11_SET_TIME_ZONE_MSG0": "Set %1 time zone offset to %2",
    "UNIT_GPSSMA_INIT_MSG0": "Init %1 UART %2",
    "UNIT_GPSSMA_DEINIT_MSG0": "%1 deinit",
    "UNIT_GPSSMA_GET_ANTENNA_STATE_MSG0": "get %1 antenna state (return string)",
    "UNIT_GPSSMA_GET_GPS_TIME_MSG0": "get %1 local time (return list [hour, min, second])",
    "UNIT_GPSSMA_GET_GPS_DATE_MSG0": "get %1 date (return list [yyyy, mm, dd])",
    "UNIT_GPSSMA_GET_GPS_DATE_TIME_MSG0": "get %1 date and local time (return list [yyyy, mm, dd, hour, min, second])",
    "UNIT_GPSSMA_GET_TIMESTAMP_MSG0": "get %1 timestamp (return int)",
    "UNIT_GPSSMA_GET_LATITUDE_MSG0": "get %1 latitude (return string)",
    "UNIT_GPSSMA_GET_LONGITUDE_MSG0": "get %1 longitude (return string)",
    "UNIT_GPSSMA_GET_ALTITUDE_MSG0": "get %1 altitude (return string)",
    "UNIT_GPSSMA_GET_SATELLITE_NUM_MSG0": "get %1 satellite number (return int)",
    "UNIT_GPSSMA_GET_POS_QUALITY_MSG0": "get %1 position quality (return int)",
    "UNIT_GPSSMA_GET_CORSE_OVER_GROUND_MSG0": "get %1 course over ground degree (return string)",
    "UNIT_GPSSMA_GET_SPEED_OVER_GROUND_MSG0": "get %1 speed over ground knot (return string)",
    "UNIT_GPSSMA_GET_WORK_MODE_MSG0": "get %1 work mode (return int)",
    "UNIT_GPSSMA_SET_WORK_MODE_MSG0": "Set %1 work mode to %2",
    "UNIT_GPSSMA_GET_TIME_ZONE_MSG0": "get %1 current time zone offset (return int)",
    "UNIT_GPSSMA_SET_TIME_ZONE_MSG0": "Set %1 time zone offset to %2",
    "UNIT_HBRIDGE_INIT_MSG0": "Init",
    "UNIT_HBRIDGE_INIT_MSG1": "I2C address",
    "UNIT_HBRIDGE_INIT_MSG2": "(0x20 ~ 0x2f)",
    "UNIT_HBRIDGE_GET_CONFIGURE_VALUE_MSG0": "get",
    "UNIT_HBRIDGE_GET_CONFIGURE_VALUE_MSG1": "configure value",
    "UNIT_HBRIDGE_GET_ADC_VALUE_MSG0": "get",
    "UNIT_HBRIDGE_GET_ADC_VALUE_MSG1": "value resolution",
    "UNIT_HBRIDGE_GET_FW_VERSION_MSG0": "get",
    "UNIT_HBRIDGE_GET_FW_VERSION_MSG1": "firmware version",
    "UNIT_HBRIDGE_SET_DIRECTION_MSG0": "Set",
    "UNIT_HBRIDGE_SET_DIRECTION_MSG1": "direction",
    "UNIT_HBRIDGE_SET_8BIT_PWM_MSG0": "Set",
    "UNIT_HBRIDGE_SET_8BIT_PWM_MSG1": "PWM duty cycle 8bit value",
    "UNIT_HBRIDGE_SET_8BIT_PWM_MSG2": "(0 ~ 255)",
    "UNIT_HBRIDGE_SET_16BIT_PWM_MSG0": "Set",
    "UNIT_HBRIDGE_SET_16BIT_PWM_MSG1": "PWM duty cycle 16bit value",
    "UNIT_HBRIDGE_SET_16BIT_PWM_MSG2": "(0 ~ 65535)",
    "UNIT_HBRIDGE_SET_PWM_FREQ_MSG0": "Set",
    "UNIT_HBRIDGE_SET_PWM_FREQ_MSG1": "PWM frequency",
    "UNIT_HBRIDGE_SET_PWM_FREQ_MSG2": "(100 ~ 10000)",
    "UNIT_HBRIDGE_GET_VIN_CURRENT_MSG0": "get",
    "UNIT_HBRIDGE_GET_VIN_CURRENT_MSG1": "vin current (float) in amps",
    "UNIT_HBRIDGE_SET_PERCENTAGE_PWM_MSG0": "Set",
    "UNIT_HBRIDGE_SET_PERCENTAGE_PWM_MSG1": "PWM duty cycle",
    "UNIT_HBRIDGE_SET_PERCENTAGE_PWM_MSG2": "(%)  resolution",
    "UNIT_PBHUB_INIT_MSG0": "Init %1 I2C address %2",
    "UNIT_PBHUB_DIGITAL_READ_MSG0": "%1 get digital value CH %2 IO %3 (return 0 or 1)",
    "UNIT_PBHUB_ANALOG_READ_MSG0": "%1 get analog value CH %2",
    "UNIT_PBHUB_DIGITAL_WRITE_MSG0": "%1 set digital value CH %2 IO %3 value %4 (0 ~ 1)",
    "UNIT_PBHUB_SET_RGB_LED_MSG0": "%1 RGB pixel LED CH %2 total LED %3",
    "UNIT_PBHUB_SET_RGB_LED_COLOR_MSG0": "%1 RGB pixel LED CH %2 LED num %3 color %4",
    "UNIT_PBHUB_SET_RGB_LED_BEGIN_COLOR_MSG0": "%1 RGB pixel LED CH %2 begin %3 number %4 color %5",
    "UNIT_PBHUB_SET_RGB_LED_BRIGHTNESS_MSG0": "%1 RGB pixel LED CH %2 brightness %3 (0 ~ 100)",
    "UNIT_PBHUB_SET_I2C_ADDRESS_MSG0": "Set %1 I2C address %2",
    "UNIT_PBHUB_SERVO_ANGLE_MSG0": "%1 servo CH %2 IO %3 angle %4 (0 ~ 180)",
    "UNIT_PBHUB_SERVO_PULSE_MSG0": "%1 servo CH %2 IO %3 pulse %4 (500 ~ 2500)",
    "UNIT_PBHUB_PWM_WRITE_MSG0": "%1 set PWM write CH %2 IO %3 duty cycle %4 %",
    "UNIT_PBHUB_PWM_READ_MSG0": "%1 get PWM duty cycle CH %2 IO %3(return 0 ~ 100%)",
    "UNIT_PBHUB_READ_STATUS_MSG0": "%1 get device information %2",
    "UNIT_PBHUB_GET_RGB_MODE_MSG0": "get %1 RGB pixel LED mode (return int)",
    "UNIT_PBHUB_SET_RGB_MODE_MSG0": "%1 set RGB pixel LED mode to %2",
    "UNIT_UWB_INIT_MSG0": "Init %1 UART %2 as %3 with ID",
    "UNIT_UWB_INIT_MSG1": "(0 ~ 3)",
    "UNIT_UWB_INIT_MSG2": "verbose",
    "UNIT_UWB_SET_UART_ID_MSG0": "Set",
    "UNIT_UWB_SET_UART_ID_MSG1": "core uart ID num",
    "UNIT_UWB_SET_UART_ID_MSG2": "(1 ~ 2)",
    "UNIT_UWB_SET_TAG_MODE_MSG0": "Set",
    "UNIT_UWB_SET_TAG_MODE_MSG1": "to tag mode",
    "UNIT_UWB_SET_MEASURING_INTERVAL_MSG0": "Set",
    "UNIT_UWB_SET_MEASURING_INTERVAL_MSG1": "range interval",
    "UNIT_UWB_SET_MEASURING_INTERVAL_MSG2": "(5 ~ 50) times before value output",
    "UNIT_UWB_MEASUREMENT_CONTINUOUS_MSG0": "continuous value output",
    "UNIT_UWB_SET_ANCHOR_MODE_MSG0": "Set",
    "UNIT_UWB_SET_ANCHOR_MODE_MSG1": "to anchor mode with ID",
    "UNIT_UWB_SET_ANCHOR_MODE_MSG2": "(0 ~ 3)",
    "UNIT_UWB_CHECK_DEVICE_MSG0": "check",
    "UNIT_UWB_CHECK_DEVICE_MSG1": "device available (return True or False)",
    "UNIT_UWB_GET_VERSION_MSG0": "get",
    "UNIT_UWB_GET_VERSION_MSG1": "firmware version (return string)",
    "UNIT_UWB_GET_DISTANCE_MEASURE_MSG0": "get",
    "UNIT_UWB_GET_DISTANCE_MEASURE_MSG1": "distance (in Meter) to anchor ID",
    "UNIT_UWB_GET_DISTANCE_MEASURE_MSG2": "(0 ~ 3) (return float)",
    "UNIT_UWB_UPDATED_MEASURED_MSG0": "updated new distance value (in use loop)",
    "UNIT_UWB_RESET_MSG0": "Device reset",
    "UNIT_UWB_START_MEASURING_MSG0": "start measuring",
    "UNIT_UWB_STOP_MEASURING_MSG0": "stop measuring",
    "UNIT_UWB_GET_MEASURING_DATA_LIST_MSG0": "get",
    "UNIT_UWB_GET_MEASURING_DATA_LIST_MSG1": "measuring data list (return list)",
    "UNIT_UWB_GET_MEASURING_DATA_LIST_NUM_MSG0": "get",
    "UNIT_UWB_GET_MEASURING_DATA_LIST_NUM_MSG1": "measuring data list",
    "UNIT_UWB_GET_MEASURING_DATA_LIST_NUM_MSG2": "(return string)",
    "UNIT_UWB_GET_DEVICE_ID_MSG0": "get %1 device ID (return int)",
    "UNIT_UWB_GET_DEVICE_MODE_MSG0": "get %1 device mode (return int)",
    "UNIT_UWB_ISCONNECTED_MSG0": "check %1 is connected (return True or False)",
    "UNIT_UWB_SET_DEVICE_MODE_MSG0": "Set %1 as %2 with ID %3",
    "UNIT_UWB_GET_DISTANCE_MSG0": "get %1 distance to anchor ID %2 (0 ~ 3) (meters, return float)",
    "UNIT_UWB_SET_MEASUREMENT_MSG0": "Set %1 measurement output %2",
    "UNIT_UWB_TICK_MSG0": "%1 update in loop",
    "UNIT_UWB_CALLBACK_MSG0": "When %1 anchor ID %2 (0 ~ 3) %3",
    "UNIT_AC_MEASURE_INIT_MSG0": "Init",
    "UNIT_AC_MEASURE_INIT_MSG1": "I2C address",
    "UNIT_AC_MEASURE_INIT_MSG2": "(0x08 ~ 0x77)",
    "UNIT_AC_MEASURE_IS_READY_MSG0": "is data ready (return True or False)",
    "UNIT_AC_MEASURE_GET_VOLTAGE_MSG0": "get",
    "UNIT_AC_MEASURE_GET_VOLTAGE_MSG1": "voltage (in volts) (return string)",
    "UNIT_AC_MEASURE_GET_CURRENT_MSG0": "get",
    "UNIT_AC_MEASURE_GET_CURRENT_MSG1": "current (in Amps) (return string)",
    "UNIT_AC_MEASURE_GET_ACTIVE_POWER_MSG0": "get",
    "UNIT_AC_MEASURE_GET_ACTIVE_POWER_MSG1": "active power (in Watts) (return string)",
    "UNIT_AC_MEASURE_GET_POWER_FACTOR_MSG0": "get",
    "UNIT_AC_MEASURE_GET_POWER_FACTOR_MSG1": "power factor (return string)",
    "UNIT_AC_MEASURE_GET_APPARENT_POWER_MSG0": "get",
    "UNIT_AC_MEASURE_GET_APPARENT_POWER_MSG1": "apparent power (in VA) (return string)",
    "UNIT_AC_MEASURE_GET_KWH_MSG0": "get",
    "UNIT_AC_MEASURE_GET_KWH_MSG1": "KW/H (return string)",
    "UNIT_AC_MEASURE_GET_VOLTAGE_RAW_MSG0": "get",
    "UNIT_AC_MEASURE_GET_VOLTAGE_RAW_MSG1": "voltage × 100 (in Volts) (return int)",
    "UNIT_AC_MEASURE_GET_CURRENT_RAW_MSG0": "get",
    "UNIT_AC_MEASURE_GET_CURRENT_RAW_MSG1": "current × 100 (in Amps) (return int)",
    "UNIT_AC_MEASURE_GET_ACTIVE_POWER_RAW_MSG0": "get",
    "UNIT_AC_MEASURE_GET_ACTIVE_POWER_RAW_MSG1": "active power × 100 (in Watts) (return int)",
    "UNIT_AC_MEASURE_GET_APPARENT_POWER_RAW_MSG0": "get",
    "UNIT_AC_MEASURE_GET_APPARENT_POWER_RAW_MSG1": "apparent power × 100 (in VA) (return int)",
    "UNIT_AC_MEASURE_GET_POWER_FACTOR_RAW_MSG0": "get",
    "UNIT_AC_MEASURE_GET_POWER_FACTOR_RAW_MSG1": "power factor × 100 (return int)",
    "UNIT_AC_MEASURE_GET_KWH_RAW_MSG0": "get",
    "UNIT_AC_MEASURE_GET_KWH_RAW_MSG1": "KW/H × 100 (return int)",
    "UNIT_AC_MEASURE_GET_VOLTAGE_COEFFICIENT_MSG0": "get",
    "UNIT_AC_MEASURE_GET_VOLTAGE_COEFFICIENT_MSG1": "voltage coefficient (return int)",
    "UNIT_AC_MEASURE_GET_CURRENT_COEFFICIENT_MSG0": "get",
    "UNIT_AC_MEASURE_GET_CURRENT_COEFFICIENT_MSG1": "current coefficient (return int)",
    "UNIT_AC_MEASURE_GET_FW_VERSION_MSG0": "get",
    "UNIT_AC_MEASURE_GET_FW_VERSION_MSG1": "firmware version (return string)",
    "UNIT_AC_MEASURE_SET_VOLTAGE_COEFFICIENT_MSG0": "Set",
    "UNIT_AC_MEASURE_SET_VOLTAGE_COEFFICIENT_MSG1": "voltage coefficient",
    "UNIT_AC_MEASURE_SET_VOLTAGE_COEFFICIENT_MSG2": "(0 ~ 255)",
    "UNIT_AC_MEASURE_SET_CURRENT_COEFFICIENT_MSG0": "Set",
    "UNIT_AC_MEASURE_SET_CURRENT_COEFFICIENT_MSG1": "current coefficient",
    "UNIT_AC_MEASURE_SET_CURRENT_COEFFICIENT_MSG2": "(0 ~ 255)",
    "UNIT_AC_MEASURE_SAVE_COEFFICIENT_MSG0": "save voltage and current coefficient in flash",
    "UNIT_AC_MEASURE_SET_ADDRESS_MSG0": "Set",
    "UNIT_AC_MEASURE_SET_ADDRESS_MSG1": "I2C address",
    "UNIT_AC_MEASURE_SET_ADDRESS_MSG2": "(0x08 ~ 0x77)",
    "UNIT_RS485_INIT_MSG0": "Init %1 UART %2",
    "UNIT_RS485_CONFIGURE_MSG0": "Configure",
    "UNIT_RS485_CONFIGURE_MSG1": "UART",
    "UNIT_RS485_CONFIGURE_MSG2": "baudrate",
    "UNIT_RS485_CONFIGURE_MSG3": "data bits",
    "UNIT_RS485_CONFIGURE_MSG4": "stop bits",
    "UNIT_RS485_CONFIGURE_MSG5": "parity",
    "UNIT_RS485_CONFIGURE_MSG6": "TX pin",
    "UNIT_RS485_CONFIGURE_MSG7": "RX pin",
    "UNIT_RS485_CONFIGURE_MSG8": "ctrl pin",
    "UNIT_RS485_READ_ALL_BYTES_MSG0": "read all bytes (return bytes)",
    "UNIT_RS485_READ_BYTES_MSG0": "read",
    "UNIT_RS485_READ_BYTES_MSG1": "bytes (return bytes)",
    "UNIT_RS485_READ_LINE_MSG0": "read line (return bytes)",
    "UNIT_RS485_REMAIN_CACHE_MSG0": "number of bytes available",
    "UNIT_RS485_WRITE_MSG0": "write",
    "UNIT_RS485_WRITE_LINE_MSG0": "write a line",
    "UNIT_RS485_WRITE_LIST_BYTES_MSG0": "write list of bytes",
    "UNIT_RS485_READ_COILS_MSG0": "read coils",
    "UNIT_RS485_READ_COILS_MSG1": "slave address (0 ~ 247)",
    "UNIT_RS485_READ_COILS_MSG2": "starting address (0 ~ 9999)",
    "UNIT_RS485_READ_COILS_MSG3": "coil quantity",
    "UNIT_RS485_READ_COILS_MSG4": "timeout",
    "UNIT_RS485_READ_COILS_MSG5": "(return list)",
    "UNIT_RS485_READ_DISCRETE_INPUTS_MSG0": "read discrete inputs",
    "UNIT_RS485_READ_DISCRETE_INPUTS_MSG1": "slave address (0 ~ 247)",
    "UNIT_RS485_READ_DISCRETE_INPUTS_MSG2": "starting address (0 ~ 9999)",
    "UNIT_RS485_READ_DISCRETE_INPUTS_MSG3": "input quantity",
    "UNIT_RS485_READ_DISCRETE_INPUTS_MSG4": "timeout",
    "UNIT_RS485_READ_DISCRETE_INPUTS_MSG5": "(return list)",
    "UNIT_RS485_READ_HOLDING_REGISTERS_MSG0": "read holding registers",
    "UNIT_RS485_READ_HOLDING_REGISTERS_MSG1": "slave address (0 ~ 247)",
    "UNIT_RS485_READ_HOLDING_REGISTERS_MSG2": "starting address (0 ~ 9999)",
    "UNIT_RS485_READ_HOLDING_REGISTERS_MSG3": "register quantity",
    "UNIT_RS485_READ_HOLDING_REGISTERS_MSG4": "signed",
    "UNIT_RS485_READ_HOLDING_REGISTERS_MSG5": "timeout",
    "UNIT_RS485_READ_HOLDING_REGISTERS_MSG6": "(return list)",
    "UNIT_RS485_READ_INPUT_REGISTERS_MSG0": "read input registers",
    "UNIT_RS485_READ_INPUT_REGISTERS_MSG1": "slave address (0 ~ 247)",
    "UNIT_RS485_READ_INPUT_REGISTERS_MSG2": "starting address (0 ~ 9999)",
    "UNIT_RS485_READ_INPUT_REGISTERS_MSG3": "register quantity",
    "UNIT_RS485_READ_INPUT_REGISTERS_MSG4": "signed",
    "UNIT_RS485_READ_INPUT_REGISTERS_MSG5": "timeout",
    "UNIT_RS485_READ_INPUT_REGISTERS_MSG6": "(return list)",
    "UNIT_RS485_WRITE_SINGLE_COIL_MSG0": "write single coil",
    "UNIT_RS485_WRITE_SINGLE_COIL_MSG1": "slave address (0 ~ 247)",
    "UNIT_RS485_WRITE_SINGLE_COIL_MSG2": "output address (0 ~ 9999)",
    "UNIT_RS485_WRITE_SINGLE_COIL_MSG3": "output",
    "UNIT_RS485_WRITE_SINGLE_COIL_MSG4": "timeout",
    "UNIT_RS485_WRITE_SINGLE_REGISTER_MSG0": "write single register",
    "UNIT_RS485_WRITE_SINGLE_REGISTER_MSG1": "slave address (0 ~ 247)",
    "UNIT_RS485_WRITE_SINGLE_REGISTER_MSG2": "register address (0 ~ 9999)",
    "UNIT_RS485_WRITE_SINGLE_REGISTER_MSG3": "register value",
    "UNIT_RS485_WRITE_SINGLE_REGISTER_MSG4": "signed",
    "UNIT_RS485_WRITE_SINGLE_REGISTER_MSG5": "timeout",
    "UNIT_RS485_WRITE_MULTIPLE_COILS_MSG0": "write multiple coils",
    "UNIT_RS485_WRITE_MULTIPLE_COILS_MSG1": "slave address (0 ~ 247)",
    "UNIT_RS485_WRITE_MULTIPLE_COILS_MSG2": "starting address (0 ~ 9999)",
    "UNIT_RS485_WRITE_MULTIPLE_COILS_MSG3": "output value",
    "UNIT_RS485_WRITE_MULTIPLE_COILS_MSG4": "timeout",
    "UNIT_RS485_WRITE_MULTIPLE_REGISTER_MSG0": "write multiple register",
    "UNIT_RS485_WRITE_MULTIPLE_REGISTER_MSG1": "slave address (0 ~ 247)",
    "UNIT_RS485_WRITE_MULTIPLE_REGISTER_MSG2": "starting address (0 ~ 9999)",
    "UNIT_RS485_WRITE_MULTIPLE_REGISTER_MSG3": "register value",
    "UNIT_RS485_WRITE_MULTIPLE_REGISTER_MSG4": "signed",
    "UNIT_RS485_WRITE_MULTIPLE_REGISTER_MSG5": "timeout",
    "UNIT_RS485_READ_INTO_BUF_MSG0": "%1 read into buf %2",
    "UNIT_RS485_SEND_BREAK_MSG0": "%1 send break single",
    "UNIT_RS485_FLUSH_MSG0": "%1 flush",
    "UNIT_RS485_TXDONE_MSG0": "%1 is transfer done (return True or False)",
    "UNIT_RS485_INIT_2_MSG0": "Init %1 with %2 UART %3 baudrate %4 bits %5 parity %6 stop %7",
    "UNIT_RS485_SETUP_MSG0": "%1 setup %2 baudrate %3 bits %4 parity %5 stop %6",
    "UNIT_RS485_DEINIT_MSG0": "%1 deinit",
    "UNIT_ULTRASONIC_INIT_MSG0": "初期化",
    "UNIT_ULTRASONIC_GET_DISTANCE_MSG0": "",
    "UNIT_ULTRASONIC_GET_DISTANCE_MSG1": "目標の距離",
    "UNIT_ULTRASONIC_GET_DISTANCE_MSG2": "を取得(return float)",
    "UNIT_SONIC_IO_INIT_MSG0": "初期化",
    "UNIT_SONIC_IO_GET_DISTANCE_MSG0": "",
    "UNIT_SONIC_IO_GET_DISTANCE_MSG1": "目標の距離(return float)",
    "UNIT_SONIC_IO_GET_DISTANCE_MSG2": "を取得",
    "UNIT_LIMIT_INIT_MSG0": "初期化",
    "UNIT_LIMIT_INIT_MSG1": "active low",
    "UNIT_LIMIT_INIT_MSG2": "type",
    "UNIT_LIMIT_CALLBACK_MSG0": "",
    "UNIT_LIMIT_CALLBACK_MSG1": "が",
    "UNIT_LIMIT_TICK_MSG0": "ループでの更新",
    "UNIT_LIMIT_GET_COUNTER_VALUE_MSG0": "",
    "UNIT_LIMIT_GET_COUNTER_VALUE_MSG1": "カウンタ値を取得(return int)",
    "UNIT_LIMIT_RESET_COUNTER_VALUE_MSG0": "",
    "UNIT_LIMIT_RESET_COUNTER_VALUE_MSG1": "カウンタ値をリセット",
    "UNIT_OP_INIT_MSG0": "Init",
    "UNIT_OP_INIT_MSG1": "active low",
    "UNIT_OP_INIT_MSG2": "type",
    "UNIT_OP_GET_SWITCH_VALUE_MSG0": "get",
    "UNIT_OP_GET_SWITCH_VALUE_MSG1": "switch value (return 0 ~ 1)",
    "UNIT_OP_GET_COUNTER_VALUE_MSG0": "get",
    "UNIT_OP_GET_COUNTER_VALUE_MSG1": "counter value (return int)",
    "UNIT_OP_RESET_COUNTER_VALUE_MSG0": "Reset",
    "UNIT_OP_RESET_COUNTER_VALUE_MSG1": "counter value",
    "UNIT_OP_CALLBACK_MSG0": "When",
    "UNIT_OP_CALLBACK_MSG1": "was",
    "UNIT_OP_BUTTON_TICK_MSG0": "update in loop",
    "UNIT_RFID_INIT_MSG0": "初期化",
    "UNIT_RFID_IS_NEW_CARD_PRESENT_MSG0": "新しいカードがあるか(True or False)",
    "UNIT_RFID_READ_CARD_UID_MSG0": "カードのUID(bytearray)を取得",
    "UNIT_RFID_READ_MSG0": "アドレス(bytearray)を取得",
    "UNIT_RFID_READ_MSG1": "",
    "UNIT_RFID_WRITE_MSG0": "write buffer",
    "UNIT_RFID_WRITE_MSG1": "to addr",
    "UNIT_RFID_WRITE_RETURN_MSG0": "write buffer",
    "UNIT_RFID_WRITE_RETURN_MSG1": "to addr",
    "UNIT_RFID_WRITE_RETURN_MSG2": "(return int)",
    "UNIT_RFID_CLOSE_MSG0": "close",
    "UNIT_WEIGHT_INIT_MSG0": "Init",
    "UNIT_WEIGHT_GET_RAW_VALUE_MSG0": "get",
    "UNIT_WEIGHT_GET_RAW_VALUE_MSG1": "raw weight value (return int)",
    "UNIT_WEIGHT_GET_SCALE_VALUE_MSG0": "get",
    "UNIT_WEIGHT_GET_SCALE_VALUE_MSG1": "scale weight value (gm, return int)",
    "UNIT_WEIGHT_SET_TARE_MSG0": "set tare",
    "UNIT_WEIGHT_SET_CALIBRATE_SCALE_MSG0": "set calibrate scale weight",
    "UNIT_WEIGHT_SET_CALIBRATE_SCALE_MSG1": "gm",
    "UNIT_SCALES_INIT_MSG0": "Init",
    "UNIT_SCALES_INIT_MSG1": "I2C address",
    "UNIT_SCALES_INIT_MSG2": "(0x08 ~ 0x77)",
    "UNIT_SCALES_GET_BUTTON_STATUS_MSG0": "get",
    "UNIT_SCALES_GET_BUTTON_STATUS_MSG1": "button status",
    "UNIT_SCALES_GET_BUTTON_STATUS_MSG2": "(return int)",
    "UNIT_SCALES_SET_BUTTON_OFFSET_MSG0": "set offset with button",
    "UNIT_SCALES_SET_RGBLED_SYNC_MSG0": "set RGB led sync with weight",
    "UNIT_SCALES_SET_RGBLED_COLOR_MSG0": "set RGB led color",
    "UNIT_SCALES_GET_RGB_LED_MSG0": "get",
    "UNIT_SCALES_GET_RGB_LED_MSG1": "RGB led color (return list)",
    "UNIT_SCALES_GET_SCALE_VALUE_MSG0": "get",
    "UNIT_SCALES_GET_SCALE_VALUE_MSG1": "scale",
    "UNIT_SCALES_GET_SCALE_VALUE_MSG2": "value (return int)",
    "UNIT_SCALES_SET_RAW_OFFSET_MSG0": "set Raw ADC offset value",
    "UNIT_SCALES_SET_CURRENT_RAW_OFFSET_MSG0": "set current Raw ADC offset value",
    "UNIT_SCALES_SET_CALIBRATION_ZERO_MSG0": "set calibration zero weight (tare)",
    "UNIT_SCALES_SET_CALIBRATION_LOAD_MSG0": "set calibration load weight",
    "UNIT_SCALES_SET_CALIBRATION_LOAD_MSG1": "gm",
    "UNIT_SCALES_SET_ADDRESS_MSG0": "set I2C address",
    "UNIT_SCALES_SET_ADDRESS_MSG1": "(0x08 ~ 0x77)",
    "UNIT_SCALES_GET_DEVICE_INFORM_MSG0": "get",
    "UNIT_SCALES_GET_DEVICE_INFORM_MSG1": "device information",
    "UNIT_SCALES_GET_DEVICE_INFORM_MSG2": "(return int)",
    "UNIT_GESTURE_INIT_MSG0": "初期化",
    "UNIT_GESTURE_GET_HAND_GESTURES_MSG0": "手のジェスチャー値を取得(return 0 ~ 512)",
    "UNIT_GESTURE_GET_TEXT_DESCRIPTION_MSG0": "ジェスチャーのテキスト表現を取得(return string)",
    "UNIT_GESTURE_GET_TEXT_DESCRIPTION_MSG1": "",
    "UNIT_GESTURE_MOVEMENTS_MSG0": "移動方向",
    "UNIT_GESTURE_MOVEMENTS_MSG1": "(return 0 ~ 512)",
    "UNIT_GESTURE_SET_GESTURE_HIGHRATE_MSG0": "ハイレートモード",
    "UNIT_THERMAL_INIT_MSG0": "Init",
    "UNIT_THERMAL_GET_MAX_TEMPERATURE_MSG0": "get",
    "UNIT_THERMAL_GET_MAX_TEMPERATURE_MSG1": "maximum temperature in pixel array (return float)",
    "UNIT_THERMAL_GET_MIN_TEMPERATURE_MSG0": "get",
    "UNIT_THERMAL_GET_MIN_TEMPERATURE_MSG1": "minimum temperature in pixel array (return float)",
    "UNIT_THERMAL_GET_MIDPOINT_TEMPERATURE_MSG0": "get",
    "UNIT_THERMAL_GET_MIDPOINT_TEMPERATURE_MSG1": "midpoint temperature in pixel array (return float)",
    "UNIT_THERMAL_GET_PIXEL_TEMPERATURE_MSG0": "get",
    "UNIT_THERMAL_GET_PIXEL_TEMPERATURE_MSG1": "temperature in pixel array x",
    "UNIT_THERMAL_GET_PIXEL_TEMPERATURE_MSG2": "y",
    "UNIT_THERMAL_GET_PIXEL_TEMPERATURE_MSG3": "position (return float)",
    "UNIT_THERMAL_GET_TEMPERATURE_BUFFER_MSG0": "get",
    "UNIT_THERMAL_GET_TEMPERATURE_BUFFER_MSG1": "pixel array buffer (return list)",
    "UNIT_THERMAL_GET_REFRESH_RATE_MSG0": "get",
    "UNIT_THERMAL_GET_REFRESH_RATE_MSG1": "refresh rate in Hz (return int)",
    "UNIT_THERMAL_SET_REFRESH_RATE_MSG0": "set refresh rate",
    "UNIT_THERMAL_SET_REFRESH_RATE_MSG1": "in Hz",
    "UNIT_THERMAL_UPDATE_TEMPERATURE_BUFFER_MSG0": "update temperature pixel buffer (in loop)",
    "UNIT_DAC2_INIT_MSG0": "Init %1 I2C address %2 (0x58 ~ 0x65)",
    "UNIT_DAC2_SET_VOLTAGE_RANGE_MSG0": "Set %1 output voltage range %2",
    "UNIT_DAC2_SET_VOLTAGE_MSG0": "Set %1 channel %2 output voltage %3 (V)",
    "UNIT_DAC2_SET_VOLTAGE_BOTH_MSG0": "Set %1 channel0 output voltage %2 (V) channel1 output voltage %3 (V)",
    "UNIT_MINISCALES_INIT_MSG0": "初期化",
    "UNIT_MINISCALES_GET_ADC_MSG0": "",
    "UNIT_MINISCALES_GET_ADC_MSG1": "生ADC値(return int)",
    "UNIT_MINISCALES_GET_WEIGHT_MSG0": "",
    "UNIT_MINISCALES_GET_WEIGHT_MSG1": "重さ(gram, return float)",
    "UNIT_MINISCALES_GET_BUTTON_MSG0": "",
    "UNIT_MINISCALES_GET_BUTTON_MSG1": "ボタンの状態(return True or False)",
    "UNIT_MINISCALES_GET_LOW_PASS_FILTER_MSG0": "",
    "UNIT_MINISCALES_GET_LOW_PASS_FILTER_MSG1": "ローパスフィルタの状態(return True or False)",
    "UNIT_MINISCALES_GET_AVERAGE_FILTER_LEVEL_MSG0": "",
    "UNIT_MINISCALES_GET_AVERAGE_FILTER_LEVEL_MSG1": "平均フィルタレベル(return 0 ~ 50)",
    "UNIT_MINISCALES_GET_EMA_FILTER_ALPHA_MSG0": "",
    "UNIT_MINISCALES_GET_EMA_FILTER_ALPHA_MSG1": "EMAフィルタのalpha値(return 0 ~ 99)",
    "UNIT_MINISCALES_RESET_MSG0": "リセット",
    "UNIT_MINISCALES_SET_LOW_PASS_FILTER_MSG0": "ローパスフィルタを設定",
    "UNIT_MINISCALES_SET_AVERAGE_FILTER_MSG0": "平均フィルタレベル(0 ~ 50)を設定",
    "UNIT_MINISCALES_SET_AVERAGE_FILTER_MSG1": "",
    "UNIT_MINISCALES_SET_EMA_FILTER_ALPHA_MSG0": "EMAフィルタのalpha値(0 ~ 99)を設定",
    "UNIT_MINISCALES_SET_EMA_FILTER_ALPHA_MSG1": "",
    "UNIT_MINISCALES_SET_RGB_LED_COLOR_MSG0": "RGB LEDの色を設定",
    "UNIT_MINISCALES_CALIBRATE_MSG0": "キャリブレーション",
    "UNIT_MINISCALES_CALIBRATE_MSG1": "weight1 (in grams)",
    "UNIT_MINISCALES_CALIBRATE_MSG2": "weight1 adc",
    "UNIT_MINISCALES_CALIBRATE_MSG3": "weight2 (in grams)",
    "UNIT_MINISCALES_CALIBRATE_MSG4": "weight2 adc",
    "UNIT_MINISCALES_SET_TARE_MSG0": "tare the scale",
    "UNIT_SYNTH_INIT_MSG0": "Init",
    "UNIT_SYNTH_INIT_MSG1": "UART",
    "UNIT_SYNTH_SET_NOTE_ON_MSG0": "set note on channel",
    "UNIT_SYNTH_SET_NOTE_ON_MSG1": "pitch",
    "UNIT_SYNTH_SET_NOTE_ON_MSG2": "(0 ~ 127)",
    "UNIT_SYNTH_SET_NOTE_ON_MSG3": "velocity",
    "UNIT_SYNTH_SET_NOTE_ON_MSG4": "(0 ~ 127)",
    "UNIT_SYNTH_SET_NOTE_ON_PITCH_MSG0": "set note on channel",
    "UNIT_SYNTH_SET_NOTE_ON_PITCH_MSG1": "pitch",
    "UNIT_SYNTH_SET_NOTE_ON_PITCH_MSG2": "velocity",
    "UNIT_SYNTH_SET_NOTE_ON_PITCH_MSG3": "(0 ~ 127)",
    "UNIT_SYNTH_SET_NOTE_OFF_MSG0": "set note off channel",
    "UNIT_SYNTH_SET_NOTE_OFF_MSG1": "pitch",
    "UNIT_SYNTH_SET_NOTE_OFF_MSG2": "(0 ~ 127)",
    "UNIT_SYNTH_SET_CHANGE_INSTRUMENT_MSG0": "set instrument bank",
    "UNIT_SYNTH_SET_CHANGE_INSTRUMENT_MSG1": "channel",
    "UNIT_SYNTH_SET_CHANGE_INSTRUMENT_MSG2": "program",
    "UNIT_SYNTH_SET_CHANGE_INSTRUMENT_MSG3": "(1 ~ 128)",
    "UNIT_SYNTH_SET_INSTRUMENT_GENERAL_MIDI_MSG0": "set general instrument channel",
    "UNIT_SYNTH_SET_INSTRUMENT_GENERAL_MIDI_MSG1": "name",
    "UNIT_SYNTH_SET_INSTRUMENT_VARIATION_MSG0": "set MT-32 instrument channel",
    "UNIT_SYNTH_SET_INSTRUMENT_VARIATION_MSG1": "name",
    "UNIT_SYNTH_SET_DRUMS_INSTRUMENT_MSG0": "set drums instrument name",
    "UNIT_SYNTH_SET_DRUMS_INSTRUMENT_MSG1": "velocity",
    "UNIT_SYNTH_SET_DRUMS_INSTRUMENT_MSG2": "(0 ~ 127)",
    "UNIT_SYNTH_SET_PITCH_BEND_MSG0": "set pitch bend channel",
    "UNIT_SYNTH_SET_PITCH_BEND_MSG1": "value",
    "UNIT_SYNTH_SET_PITCH_BEND_MSG2": "(0 ~ 1023)",
    "UNIT_SYNTH_SET_PITCH_BEND_RANGE_MSG0": "set pitch bend range channel",
    "UNIT_SYNTH_SET_PITCH_BEND_RANGE_MSG1": "value",
    "UNIT_SYNTH_SET_PITCH_BEND_RANGE_MSG2": "(0 ~ 255)",
    "UNIT_SYNTH_MIDI_RESET_MSG0": "reset",
    "UNIT_SYNTH_SET_CHANNEL_VOLUME_MSG0": "set channel",
    "UNIT_SYNTH_SET_CHANNEL_VOLUME_MSG1": "volume",
    "UNIT_SYNTH_SET_CHANNEL_VOLUME_MSG2": "(0 ~ 127)",
    "UNIT_SYNTH_SET_ALL_NOTES_OFF_MSG0": "set all notes off channel",
    "UNIT_SYNTH_SET_MASTER_VOLUME_MSG0": "set master volume",
    "UNIT_SYNTH_SET_MASTER_VOLUME_MSG1": "(0 ~ 127)",
    "UNIT_SYNTH_SET_ALL_DRUMS_MSG0": "set all channels drums",
    "UNIT_SYNTH_SET_REVERB_MSG0": "set reverb",
    "UNIT_SYNTH_SET_REVERB_MSG1": "channel",
    "UNIT_SYNTH_SET_REVERB_MSG2": "program",
    "UNIT_SYNTH_SET_REVERB_MSG3": "level (0 ~ 127)",
    "UNIT_SYNTH_SET_REVERB_MSG4": "delay feedback (0 ~ 255)",
    "UNIT_SYNTH_SET_CHORUS_MSG0": "set chorus",
    "UNIT_SYNTH_SET_CHORUS_MSG1": "channel",
    "UNIT_SYNTH_SET_CHORUS_MSG2": "program",
    "UNIT_SYNTH_SET_CHORUS_MSG3": "level (0 ~ 127)",
    "UNIT_SYNTH_SET_CHORUS_MSG4": "feedback (0 ~ 255)",
    "UNIT_SYNTH_SET_CHORUS_MSG5": "chorus delay (0 ~ 255)",
    "UNIT_SYNTH_SET_PAN_MSG0": "set pan channel",
    "UNIT_SYNTH_SET_PAN_MSG1": "value",
    "UNIT_SYNTH_SET_PAN_MSG2": "(0 ~ 127)",
    "UNIT_SYNTH_SET_EQUALIZER_MSG0": "set equalizer",
    "UNIT_SYNTH_SET_EQUALIZER_MSG1": "channel",
    "UNIT_SYNTH_SET_EQUALIZER_MSG2": "band (0 ~ 127)",
    "UNIT_SYNTH_SET_EQUALIZER_MSG3": "low band",
    "UNIT_SYNTH_SET_EQUALIZER_MSG4": "medium low band",
    "UNIT_SYNTH_SET_EQUALIZER_MSG5": "medium high band",
    "UNIT_SYNTH_SET_EQUALIZER_MSG6": "high band",
    "UNIT_SYNTH_SET_EQUALIZER_MSG7": "freq (0 ~ 127)",
    "UNIT_SYNTH_SET_EQUALIZER_MSG8": "low freq",
    "UNIT_SYNTH_SET_EQUALIZER_MSG9": "medium low freq",
    "UNIT_SYNTH_SET_EQUALIZER_MSG10": "medium high freq",
    "UNIT_SYNTH_SET_EQUALIZER_MSG11": "high freq",
    "UNIT_SYNTH_SET_TUNING_MSG0": "set tuning",
    "UNIT_SYNTH_SET_TUNING_MSG1": "channel",
    "UNIT_SYNTH_SET_TUNING_MSG2": "fine tuning (0 ~ 127)",
    "UNIT_SYNTH_SET_TUNING_MSG3": "coarse tuning (0 ~ 127)",
    "UNIT_SYNTH_SET_VIBRATE_MSG0": "set vibrate",
    "UNIT_SYNTH_SET_VIBRATE_MSG1": "channel",
    "UNIT_SYNTH_SET_VIBRATE_MSG2": "rate (0 ~ 127)",
    "UNIT_SYNTH_SET_VIBRATE_MSG3": "depth (0 ~ 127)",
    "UNIT_SYNTH_SET_VIBRATE_MSG4": "delay (0 ~ 127)",
    "UNIT_SYNTH_SET_TVF_MSG0": "set TVF",
    "UNIT_SYNTH_SET_TVF_MSG1": "channel",
    "UNIT_SYNTH_SET_TVF_MSG2": "cutoff freq (0 ~ 127)",
    "UNIT_SYNTH_SET_TVF_MSG3": "resonance (0 ~ 127)",
    "UNIT_SYNTH_SET_ENVELOPE_MSG0": "set envelope time",
    "UNIT_SYNTH_SET_ENVELOPE_MSG1": "channel",
    "UNIT_SYNTH_SET_ENVELOPE_MSG2": "attack (0 ~ 127)",
    "UNIT_SYNTH_SET_ENVELOPE_MSG3": "decay (0 ~ 127)",
    "UNIT_SYNTH_SET_ENVELOPE_MSG4": "release (0 ~ 127)",
    "UNIT_SYNTH_SET_SCALE_TUNING_MSG0": "set scale tuning",
    "UNIT_SYNTH_SET_SCALE_TUNING_MSG1": "channel",
    "UNIT_SYNTH_SET_MOD_WHEEL_MSG0": "set modulation wheel",
    "UNIT_SYNTH_SET_MOD_WHEEL_MSG1": "channel",
    "UNIT_SYNTH_SET_MOD_WHEEL_MSG2": "pitch (0 ~ 127)",
    "UNIT_SYNTH_SET_MOD_WHEEL_MSG3": "TVT cutoff (0 ~ 127)",
    "UNIT_SYNTH_SET_MOD_WHEEL_MSG4": "amplitude (0 ~ 127)",
    "UNIT_SYNTH_SET_MOD_WHEEL_MSG5": "rate (0 ~ 127)",
    "UNIT_SYNTH_SET_MOD_WHEEL_MSG6": "pitch depth (0 ~ 127)",
    "UNIT_SYNTH_SET_MOD_WHEEL_MSG7": "TVF depth (0 ~ 127)",
    "UNIT_SYNTH_SET_MOD_WHEEL_MSG8": "TVA depth (0 ~ 127)",
    "UNIT_SERVOS8_INIT_MSG0": "",
    "UNIT_SERVOS8_INIT_MSG1": "をI2Cアドレス",
    "UNIT_SERVOS8_INIT_MSG2": "(0x08 ~ 0x77)で初期化",
    "UNIT_SERVOS8_GET_MODE_MSG0": "",
    "UNIT_SERVOS8_GET_MODE_MSG1": "チャンネル",
    "UNIT_SERVOS8_GET_MODE_MSG2": "の設定モードを取得(return 0 ~ 5)",
    "UNIT_SERVOS8_SET_MODE_MSG0": "チャンネル",
    "UNIT_SERVOS8_SET_MODE_MSG1": "を設定:モード",
    "UNIT_SERVOS8_GET_DIGITAL_INPUT_MSG0": "",
    "UNIT_SERVOS8_GET_DIGITAL_INPUT_MSG1": "チャンネル",
    "UNIT_SERVOS8_GET_DIGITAL_INPUT_MSG2": "のデジタル入力値(return True or False)を取得",
    "UNIT_SERVOS8_SET_OUTPUT_VALUE_MSG0": "チャンネル",
    "UNIT_SERVOS8_SET_OUTPUT_VALUE_MSG1": "のデジタル出力値を",
    "UNIT_SERVOS8_SET_OUTPUT_VALUE_MSG2": "(0 ~ 1)に設定",
    "UNIT_SERVOS8_GET_8BIT_ADC_RAW_MSG0": "",
    "UNIT_SERVOS8_GET_8BIT_ADC_RAW_MSG1": "チャンネル",
    "UNIT_SERVOS8_GET_8BIT_ADC_RAW_MSG2": "の8bit A/Dコンバータの生データ(return 0 ~ 255)を取得",
    "UNIT_SERVOS8_GET_12BIT_ADC_RAW_MSG0": "",
    "UNIT_SERVOS8_GET_12BIT_ADC_RAW_MSG1": "チャンネル",
    "UNIT_SERVOS8_GET_12BIT_ADC_RAW_MSG2": "の12bit A/Dコンバータの生データ(return 0 ~ 4095)を取得",
    "UNIT_SERVOS8_GET_SERVO_ANGLE_MSG0": "",
    "UNIT_SERVOS8_GET_SERVO_ANGLE_MSG1": "チャンネル",
    "UNIT_SERVOS8_GET_SERVO_ANGLE_MSG2": "のサーボの角度(return 0 ~ 180)を取得",
    "UNIT_SERVOS8_GET_SERVO_PULSE_MSG0": "",
    "UNIT_SERVOS8_GET_SERVO_PULSE_MSG1": "チャンネル",
    "UNIT_SERVOS8_GET_SERVO_PULSE_MSG2": "のサーボのパルス値(return 500 ~ 2500)を取得",
    "UNIT_SERVOS8_SET_SERVO_ANGLE_MSG0": "チャンネル",
    "UNIT_SERVOS8_SET_SERVO_ANGLE_MSG1": "のサーボの角度",
    "UNIT_SERVOS8_SET_SERVO_ANGLE_MSG2": "(0 ~ 180)を設定",
    "UNIT_SERVOS8_SET_SERVO_PULSE_MSG0": "チャンネル",
    "UNIT_SERVOS8_SET_SERVO_PULSE_MSG1": "のサーボのパルス値",
    "UNIT_SERVOS8_SET_SERVO_PULSE_MSG2": "(500 ~ 2500)を設定",
    "UNIT_SERVOS8_GET_RGB_LED_MSG0": "",
    "UNIT_SERVOS8_GET_RGB_LED_MSG1": "チャンネル",
    "UNIT_SERVOS8_GET_RGB_LED_MSG2": "のRGB LEDの色(return [0,0,0])を取得",
    "UNIT_SERVOS8_SET_RGB_LED_MSG0": "チャンネル",
    "UNIT_SERVOS8_SET_RGB_LED_MSG1": "のRGB LEDの色を設定:",
    "UNIT_SERVOS8_SET_PWM_DUTYCYCLE_MSG0": "チャンネル",
    "UNIT_SERVOS8_SET_PWM_DUTYCYCLE_MSG1": "のPWMデューティサイクルを",
    "UNIT_SERVOS8_SET_PWM_DUTYCYCLE_MSG2": "%に設定",
    "UNIT_SERVOS8_GET_INPUT_CURRENT_MSG0": "",
    "UNIT_SERVOS8_GET_INPUT_CURRENT_MSG1": "入力電流値(return float)を取得",
    "UNIT_SERVOS8_GET_DEVICE_SPEC_DETAIL_MSG0": "",
    "UNIT_SERVOS8_GET_DEVICE_SPEC_DETAIL_MSG1": "の仕様の詳細(return int)を取得",
    "UNIT_SERVOS8_SET_I2C_ADDRESS_MSG0": "I2Cアドレスを",
    "UNIT_SERVOS8_SET_I2C_ADDRESS_MSG1": "(0x08 ~ 0x77)に設定",
    "UNIT_VMETER_INIT_MSG0": "Init",
    "UNIT_VMETER_GET_GAIN_MSG0": "get",
    "UNIT_VMETER_GET_GAIN_MSG1": "ads1115 chip gain value (return int)",
    "UNIT_VMETER_GET_DATA_RATE_MSG0": "get",
    "UNIT_VMETER_GET_DATA_RATE_MSG1": "ads1115 chip data rate (return int)",
    "UNIT_VMETER_GET_OPERATION_MODE_MSG0": "get",
    "UNIT_VMETER_GET_OPERATION_MODE_MSG1": "ads1115 chip operation mode (return int)",
    "UNIT_VMETER_GET_VOLTAGE_MSG0": "get",
    "UNIT_VMETER_GET_VOLTAGE_MSG1": "voltage value (mV, return float)",
    "UNIT_VMETER_GET_ADC_RAW_MSG0": "get",
    "UNIT_VMETER_GET_ADC_RAW_MSG1": "ADC raw value (return int)",
    "UNIT_VMETER_SET_GAIN_MSG0": "set ads1115 chip gain value",
    "UNIT_VMETER_SET_DATA_RATE_MSG0": "set ads1115 chip data rate",
    "UNIT_VMETER_SET_OPERATION_MODE_MSG0": "set operation mode",
    "UNIT_VMETER_SET_MEASUREMENT_RANGE_MSG0": "set max input voltage measurement range",
    "UNIT_VMETER_SET_CALIBRATION_MSG0": "set internal calibration",
    "UNIT_AMETER_INIT_MSG0": "Init %1",
    "UNIT_AMETER_GET_GAIN_MSG0": "get %1 ads1115 chip gain value (return int)",
    "UNIT_AMETER_GET_DATA_RATE_MSG0": "get %1 ads1115 chip data rate (return int)",
    "UNIT_AMETER_GET_OPERATION_MODE_MSG0": "get %1 ads1115 chip operation mode (return int)",
    "UNIT_AMETER_GET_CURRENT_MSG0": "get %1 current value (mA, return float)",
    "UNIT_AMETER_GET_ADC_RAW_MSG0": "get %1 ADC raw value (return int)",
    "UNIT_AMETER_SET_GAIN_MSG0": "%1 set ads1115 chip gain value %2",
    "UNIT_AMETER_SET_DATA_RATE_MSG0": "%1 set ads1115 chip data rate %2",
    "UNIT_AMETER_SET_OPERATION_MODE_MSG0": "%1 set operation mode %2",
    "UNIT_AMETER_SET_MEASUREMENT_RANGE_MSG0": "%1 set max input current measurement range %2",
    "UNIT_AMETER_SET_CALIBRATION_MSG0": "%1 set internal calibration %2",
    "UNIT_LORAE220_INIT_MSG0": "Init %1 UART %2",
    "UNIT_LORAE220_CONFIGURE_MSG0": "Configure",
    "UNIT_LORAE220_CONFIGURE_MSG1": "address (0x0000 ~ 0xFFFF)",
    "UNIT_LORAE220_CONFIGURE_MSG2": "channel (0 ~ 30)",
    "UNIT_LORAE220_CONFIGURE_MSG3": "encryption key (0x0000 ~ 0xFFFF)",
    "UNIT_LORAE220_CONFIGURE_MSG4": "data rate",
    "UNIT_LORAE220_CONFIGURE_MSG5": "subpacket Size",
    "UNIT_LORAE220_CONFIGURE_MSG6": "RSSI ambient noise flag",
    "UNIT_LORAE220_CONFIGURE_MSG7": "transmitting power",
    "UNIT_LORAE220_CONFIGURE_MSG8": "RSSI byte flag",
    "UNIT_LORAE220_CONFIGURE_MSG9": "transmission method type",
    "UNIT_LORAE220_CONFIGURE_MSG10": "LBT flag",
    "UNIT_LORAE220_CONFIGURE_MSG11": "WOR cycle",
    "UNIT_LORAE220_START_RECEIVE_MSG0": "start receive data",
    "UNIT_LORAE220_STOP_RECEIVE_MSG0": "stop receive data",
    "UNIT_LORAE220_RECEIVE_MSG0": "receive data timeout",
    "UNIT_LORAE220_RECEIVE_MSG1": "ms (return list [data, rssi])",
    "UNIT_LORAE220_SEND_LINE_MSG0": "send a line",
    "UNIT_LORAE220_SEND_RAW_DATA_MSG0": "send raw data",
    "UNIT_LORAE220_SEND_MSG0": "send",
    "UNIT_LORAE220_SEND_MSG1": "address",
    "UNIT_LORAE220_SEND_MSG2": "(0x0000 ~ 0xFFFF)",
    "UNIT_LORAE220_SEND_MSG3": "channel",
    "UNIT_LORAE220_SEND_MSG4": "(0 ~ 30)",
    "UNIT_LORAE220_RECEIVE_DATA_EVENT_MSG0": "When",
    "UNIT_LORAE220_RECEIVE_DATA_EVENT_MSG1": "receive data (bytes)",
    "UNIT_LORAE220_RECEIVE_DATA_EVENT_MSG2": "RSSI (in dB)",
    "UNIT_LORAE220_RECEIVE_DATA_STR_EVENT_MSG1": "receive data (string)",
    "UNIT_LORAE220433_INIT_MSG0": "Init %1 UART %2",
    "UNIT_LORAE220433_START_RECEIVE_MSG0": "%1 start receive data",
    "UNIT_LORAE220433_STOP_RECEIVE_MSG0": "%1 stop receive data",
    "UNIT_LORAE220433_CONFIGURE_MODULE_MSG0": "Setup %1 module %2 address (0x0000 ~ 0xFFFF) %3 channel (0 ~ 83) %4 encryption key (0x0000 ~ 0xFFFF) %5",
    "UNIT_LORAE220433_CONFIGURE_MODULE_MSG1": "data rate",
    "UNIT_LORAE220433_CONFIGURE_MODULE_MSG2": "subpacket size",
    "UNIT_LORAE220433_CONFIGURE_MODULE_MSG3": "RSSI ambient noise flag",
    "UNIT_LORAE220433_CONFIGURE_MODULE_MSG4": "TX power",
    "UNIT_LORAE220433_CONFIGURE_MODULE_MSG5": "RSSI byte flag",
    "UNIT_LORAE220433_CONFIGURE_MODULE_MSG6": "transmission method type",
    "UNIT_LORAE220433_CONFIGURE_MODULE_MSG7": "LBT flag",
    "UNIT_LORAE220433_CONFIGURE_MODULE_MSG8": "WOR cycle",
    "UNIT_LORAE220433_READ_CONFIGURE_PARAM_MSG0": "get %1 setup %2 parameter (return int)",
    "UNIT_LORAE220433_GET_AVAILABLE_DATA_MSG0": "%1 available of data count (return int)",
    "UNIT_LORAE220433_RECEIVE_MSG0": "%1 receive data timeout %2 ms (return list [data, rssi])",
    "UNIT_LORAE220433_SEND_MSG0": "%1 send %2 address %3 (0x0000 ~ 0xFFFF) channel %4 (0 ~ 83)",
    "UNIT_LORAE220433_SEND_LINE_MSG0": "%1 send a line %2 address %3 (0x0000 ~ 0xFFFF) channel %4 (0 ~ 83)",
    "UNIT_LORAE220433_SEND_RAW_DATA_MSG0": "%1 send raw data %2 address %3 (0x0000 ~ 0xFFFF) channel %4 (0 ~ 83)",
    "UNIT_LORAE220433_RECEIVE_DATA_EVENT_MSG0": "When %1 receive data (bytes) %2 RSSI (in dB) %3",
    "UNIT_LORAE220433_RECEIVE_DATA_STR_EVENT_MSG0": "When %1 receive data (string) %2 RSSI (in dB) %3",
    "UNIT_RTC_INIT_MSG0": "初期化",
    "UNIT_RTC_GET_DATE_TIME_MSG0": "",
    "UNIT_RTC_GET_DATE_TIME_MSG1": "値(return int)",
    "UNIT_RTC_GET_TIMER_VALUE_MSG0": "",
    "UNIT_RTC_GET_TIMER_VALUE_MSG1": "タイマーの値(return 0 ~ 255)",
    "UNIT_RTC_SET_DATE_TIME_MSG0": "時間の設定",
    "UNIT_RTC_SET_DATE_TIME_MSG1": "年",
    "UNIT_RTC_SET_DATE_TIME_MSG2": "月",
    "UNIT_RTC_SET_DATE_TIME_MSG3": "日",
    "UNIT_RTC_SET_DATE_TIME_MSG4": "曜日",
    "UNIT_RTC_SET_DATE_TIME_MSG5": "時",
    "UNIT_RTC_SET_DATE_TIME_MSG6": "分",
    "UNIT_RTC_SET_DATE_TIME_MSG7": "秒",
    "UNIT_RTC_CHECK_IF_ALARM_ON_MSG0": "アラームはオンか?(return True or False)",
    "UNIT_RTC_CHECK_IF_TIMER_ON_MSG0": "タイマーはオンか?(return True or False)",
    "UNIT_RTC_TURN_OFF_ALARM_MSG0": "アラームをオフ",
    "UNIT_RTC_TURN_OFF_TIMER_MSG0": "タイマーをオフ",
    "UNIT_RTC_CLEAR_ALARM_FLAG_MSG0": "アラームフラグをリセット",
    "UNIT_RTC_CLEAR_TIMER_FLAG_MSG0": "タイマーフラグをリセット",
    "UNIT_RTC_SET_DAILY_ALARM_MSG0": "1日分のアラームを設定",
    "UNIT_RTC_SET_DAILY_ALARM_MSG1": "時",
    "UNIT_RTC_SET_DAILY_ALARM_MSG2": "分",
    "UNIT_RTC_SET_DAILY_ALARM_MSG3": "日",
    "UNIT_RTC_SET_DAILY_ALARM_MSG4": "曜日",
    "UNIT_RTC_SET_TIMER_MODE_MSG0": "タイマーモードを設定",
    "UNIT_RTC_SET_TIMER_MODE_MSG1": "値",
    "UNIT_RTC_SET_TIMER_MODE_MSG2": "(0 ~ 255)",
    "UNIT_RTC_SET_INTERNET_TIME_MSG0": "日時と時間を設定",
    "UNIT_RTC_SET_INTERNET_TIME_MSG1": "NTPサーバ",
    "UNIT_RTC_SET_INTERNET_TIME_MSG2": "タイムゾーン",
    "UNIT_RTC_TIME_ZONE_MSG0": "時間",
    "UNIT_RTC_TIME_ZONE_MSG1": "分",
    "UNIT_WEIGHTI2C_INIT_MSG0": "Init",
    "UNIT_WEIGHTI2C_INIT_MSG1": "I2C address",
    "UNIT_WEIGHTI2C_INIT_MSG2": "(0x08 ~ 0x77)",
    "UNIT_WEIGHTI2C_GET_ADC_RAW_MSG0": "get",
    "UNIT_WEIGHTI2C_GET_ADC_RAW_MSG1": "ADC raw value (return int)",
    "UNIT_WEIGHTI2C_GET_WEIGHT_FLOAT_MSG0": "get",
    "UNIT_WEIGHTI2C_GET_WEIGHT_FLOAT_MSG1": "weight in float (return float)",
    "UNIT_WEIGHTI2C_GET_WEIGHT_INT_MSG0": "get",
    "UNIT_WEIGHTI2C_GET_WEIGHT_INT_MSG1": "weight in int (return int)",
    "UNIT_WEIGHTI2C_GET_WEIGHT_STR_MSG0": "get",
    "UNIT_WEIGHTI2C_GET_WEIGHT_STR_MSG1": "weight in string (return string)",
    "UNIT_WEIGHTI2C_GET_LOWPASS_FILTER_MSG0": "get",
    "UNIT_WEIGHTI2C_GET_LOWPASS_FILTER_MSG1": "low pass filter (return True or False)",
    "UNIT_WEIGHTI2C_GET_AVERAGE_FILTER_LEVEL_MSG0": "get",
    "UNIT_WEIGHTI2C_GET_AVERAGE_FILTER_LEVEL_MSG1": "average filter level (return int)",
    "UNIT_WEIGHTI2C_GET_EMA_FILTER_ALPHA_MSG0": "get",
    "UNIT_WEIGHTI2C_GET_EMA_FILTER_ALPHA_MSG1": "EMA filter alpha (return int)",
    "UNIT_WEIGHTI2C_GET_DEVICE_SPEC_MSG0": "get",
    "UNIT_WEIGHTI2C_GET_DEVICE_SPEC_MSG1": "spec detail (return int)",
    "UNIT_WEIGHTI2C_SET_RESET_OFFSET_MSG0": "reset offset value (Tare)",
    "UNIT_WEIGHTI2C_SET_CALIBRATE_MSG0": "set calibration",
    "UNIT_WEIGHTI2C_SET_CALIBRATE_MSG1": "zero weight in grams",
    "UNIT_WEIGHTI2C_SET_CALIBRATE_MSG2": "zero weight adc",
    "UNIT_WEIGHTI2C_SET_CALIBRATE_MSG3": "load weight in grams",
    "UNIT_WEIGHTI2C_SET_CALIBRATE_MSG4": "load weight adc",
    "UNIT_WEIGHTI2C_SET_LOW_PASS_FILTER_MSG0": "set low pass filter",
    "UNIT_WEIGHTI2C_SET_AVERAGE_FILTER_LEVEL_MSG0": "set average filter level value",
    "UNIT_WEIGHTI2C_SET_AVERAGE_FILTER_LEVEL_MSG1": "(0 ~ 50)",
    "UNIT_WEIGHTI2C_SET_EMA_FILTER_ALPHA_MSG0": "set EMA filter alpha value",
    "UNIT_WEIGHTI2C_SET_EMA_FILTER_ALPHA_MSG1": "(0 ~ 99)",
    "UNIT_WEIGHTI2C_SET_I2C_ADDRESS_MSG0": "set I2C address",
    "UNIT_WEIGHTI2C_SET_I2C_ADDRESS_MSG1": "(0x08 ~ 0x77)",
    "UNIT_KMETER_INIT_MSG0": "Init %1 I2C address %2 (0x08 ~ 0x77)",
    "UNIT_KMETER_GET_THERMO_TEMPERATURE_MSG0": "get %1 thermocouple temperature %2 (return float)",
    "UNIT_KMETER_GET_INTERNAL_TEMPERATURE_MSG0": "get %1 internal temperature %2 (return float)",
    "UNIT_KMETER_GET_SLEEP_TIME_MSG0": "get %1 sleep time (return int)",
    "UNIT_KMETER_GET_FIRMWARE_VERSION_MSG0": "get %1 firmware version (return float)",
    "UNIT_KMETER_GET_I2C_ADDRESS_MSG0": "get %1 I2C address (return int)",
    "UNIT_KMETER_SET_SLEEP_TIME_MSG0": "Set %1 sleep time %2 seconds",
    "UNIT_KMETER_SET_WAKEUP_TRIGGER_MSG0": "Set %1 wakeup trigger mode %2",
    "UNIT_KMETER_SET_I2C_ADDRESS_MSG0": "Set %1 I2C address %2 (0x08 ~ 0x77)",
    "UNIT_KMETERISO_INIT_MSG0": "Init",
    "UNIT_KMETERISO_INIT_MSG1": "I2C address",
    "UNIT_KMETERISO_INIT_MSG2": "(0x08 ~ 0x77)",
    "UNIT_KMETERISO_GET_THERMO_MSG0": "get",
    "UNIT_KMETERISO_GET_THERMO_MSG1": "thermocouple temperature format",
    "UNIT_KMETERISO_GET_THERMO_MSG2": "(return float)",
    "UNIT_KMETERISO_GET_INTERNAL_MSG0": "get",
    "UNIT_KMETERISO_GET_INTERNAL_MSG1": "internal temperature format",
    "UNIT_KMETERISO_GET_INTERNAL_MSG2": "(return float)",
    "UNIT_KMETERISO_GET_DATA_AVAILABLE_STATUS_MSG0": "is ready temperature measurement (return True or False)",
    "UNIT_KMETERISO_GET_KMETER_THERMO_STRING_MSG0": "get",
    "UNIT_KMETERISO_GET_KMETER_THERMO_STRING_MSG1": "thermocouple temperature format",
    "UNIT_KMETERISO_GET_KMETER_THERMO_STRING_MSG2": "(return string)",
    "UNIT_KMETERISO_GET_KMETER_INTERNAL_STRING_MSG0": "get",
    "UNIT_KMETERISO_GET_KMETER_INTERNAL_STRING_MSG1": "internal temperature format",
    "UNIT_KMETERISO_GET_KMETER_INTERNAL_STRING_MSG2": "(return string)",
    "UNIT_KMETERISO_GET_DEVICE_SPEC_MSG0": "get",
    "UNIT_KMETERISO_GET_DEVICE_SPEC_MSG1": "(return int)",
    "UNIT_KMETERISO_SET_I2C_ADDRESS_MSG0": "set I2C address",
    "UNIT_KMETERISO_SET_I2C_ADDRESS_MSG1": "(0x08 ~ 0x77)",
    "UNIT_THERMAL2_INIT_MSG0": "Init",
    "UNIT_THERMAL2_GET_BUTTON_STATE_MSG0": "get",
    "UNIT_THERMAL2_GET_BUTTON_STATE_MSG1": "button",
    "UNIT_THERMAL2_GET_BUTTON_STATE_MSG2": "state (return True or False)",
    "UNIT_THERMAL2_GET_TEMP_ALARM_STATUS_MSG0": "get",
    "UNIT_THERMAL2_GET_TEMP_ALARM_STATUS_MSG1": "temperature alarm status (return 0 ~ 255)",
    "UNIT_THERMAL2_GET_DEVICE_DETAIL_MSG0": "get",
    "UNIT_THERMAL2_GET_DEVICE_DETAIL_MSG1": "device",
    "UNIT_THERMAL2_GET_DEVICE_DETAIL_MSG2": "detail (return int)",
    "UNIT_THERMAL2_GET_I2C_ADDR_MSG0": "get",
    "UNIT_THERMAL2_GET_I2C_ADDR_MSG1": "I2C address",
    "UNIT_THERMAL2_GET_I2C_ADDR_MSG2": "(return int)",
    "UNIT_THERMAL2_GET_FUNC_CTRL_MSG0": "get",
    "UNIT_THERMAL2_GET_FUNC_CTRL_MSG1": "function control (return 0 ~ 7)",
    "UNIT_THERMAL2_GET_REFRESH_RATE_MSG0": "get",
    "UNIT_THERMAL2_GET_REFRESH_RATE_MSG1": "refresh rate in Hz (return 0 ~ 7)",
    "UNIT_THERMAL2_GET_NOISE_FILTER_MSG0": "get",
    "UNIT_THERMAL2_GET_NOISE_FILTER_MSG1": "noise filter range (return 0 ~ 15)",
    "UNIT_THERMAL2_GET_TEMP_MONITOR_MSG0": "get",
    "UNIT_THERMAL2_GET_TEMP_MONITOR_MSG1": "temperature monitor",
    "UNIT_THERMAL2_GET_TEMP_MONITOR_MSG2": "size (return 0 ~ 15)",
    "UNIT_THERMAL2_GET_BUZZER_FREQ_MSG0": "get",
    "UNIT_THERMAL2_GET_BUZZER_FREQ_MSG1": "buzzer frequency in Hz (return 20 ~ 20000)",
    "UNIT_THERMAL2_GET_BUZZER_DUTY_MSG0": "get",
    "UNIT_THERMAL2_GET_BUZZER_DUTY_MSG1": "buzzer dutycycle (return 0 ~ 255)",
    "UNIT_THERMAL2_GET_TEMP_THRESHOLD_MSG0": "get",
    "UNIT_THERMAL2_GET_TEMP_THRESHOLD_MSG1": "temperature threshold value (return int)",
    "UNIT_THERMAL2_GET_TEMP_ALARM_BUZZER_FREQ_MSG0": "get",
    "UNIT_THERMAL2_GET_TEMP_ALARM_BUZZER_FREQ_MSG1": "temperature alarm buzzer frequency (return int)",
    "UNIT_THERMAL2_GET_TEMP_ALARM_INTERVAL_MSG0": "get",
    "UNIT_THERMAL2_GET_TEMP_ALARM_INTERVAL_MSG1": "temperature alarm interval in ms (return int)",
    "UNIT_THERMAL2_GET_TEMP_ALARM_LED_MSG0": "get",
    "UNIT_THERMAL2_GET_TEMP_ALARM_LED_MSG1": "temperature alarm RGB LED color (return list)",
    "UNIT_THERMAL2_GET_DATA_REFRESH_CTRL_MSG0": "get",
    "UNIT_THERMAL2_GET_DATA_REFRESH_CTRL_MSG1": "data refresh control (return 0 or 1)",
    "UNIT_THERMAL2_GET_TEMP_MEASURE_MSG0": "get",
    "UNIT_THERMAL2_GET_TEMP_MEASURE_MSG1": "temperature value in °C (return float)",
    "UNIT_THERMAL2_GET_DIFFERENTIAL_TEMP_MEASURE_MSG0": "get",
    "UNIT_THERMAL2_GET_DIFFERENTIAL_TEMP_MEASURE_MSG1": "differential temperature value in °C (return float)",
    "UNIT_THERMAL2_GET_TEMP_DIFFERENTIAL_MSG0": "get",
    "UNIT_THERMAL2_GET_TEMP_DIFFERENTIAL_MSG1": "differential",
    "UNIT_THERMAL2_GET_TEMP_DIFFERENTIAL_MSG2": "position value (return int)",
    "UNIT_THERMAL2_SET_FUNC_CTRL_MSG0": "set function",
    "UNIT_THERMAL2_SET_FUNC_CTRL_MSG1": "control",
    "UNIT_THERMAL2_SET_REFRESH_RATE_MSG0": "set refresh rate",
    "UNIT_THERMAL2_SET_REFRESH_RATE_MSG1": "in Hz",
    "UNIT_THERMAL2_SET_NOISE_FILTER_MSG0": "set noise filter range",
    "UNIT_THERMAL2_SET_NOISE_FILTER_MSG1": "(0 ~ 15)",
    "UNIT_THERMAL2_SET_TEMP_MONITOR_MSG0": "set temperature monitor width",
    "UNIT_THERMAL2_SET_TEMP_MONITOR_MSG1": "(0 ~ 15) height",
    "UNIT_THERMAL2_SET_TEMP_MONITOR_MSG2": "(0 ~ 15)",
    "UNIT_THERMAL2_SET_TEMP_ALARM_CTR_MSG0": "set temperature alarm",
    "UNIT_THERMAL2_SET_TEMP_ALARM_CTR_MSG1": "control",
    "UNIT_THERMAL2_SET_BUZZER_DUTY_MSG0": "set buzzer dutycycle",
    "UNIT_THERMAL2_SET_BUZZER_DUTY_MSG1": "(0 ~ 255)",
    "UNIT_THERMAL2_SET_BUZZER_FREQ_MSG0": "set buzzer frequency in Hz",
    "UNIT_THERMAL2_SET_BUZZER_FREQ_MSG1": "(20 ~ 20000)",
    "UNIT_THERMAL2_SET_RGB_LED_MSG1": "set RGB LED Color",
    "UNIT_THERMAL2_SET_TEMP_THRESHOLD_MSG0": "set",
    "UNIT_THERMAL2_SET_TEMP_THRESHOLD_MSG1": "temperature threshold value",
    "UNIT_THERMAL2_SET_ALARM_BUZZER_FREQ_MSG0": "set",
    "UNIT_THERMAL2_SET_ALARM_BUZZER_FREQ_MSG1": "temperature alarm buzzer frequency",
    "UNIT_THERMAL2_SET_TEMP_ALARM_INTERVAL_MSG0": "set",
    "UNIT_THERMAL2_SET_TEMP_ALARM_INTERVAL_MSG1": "temperature alarm interval",
    "UNIT_THERMAL2_SET_TEMP_ALARM_INTERVAL_MSG2": "ms (10 ~ 2550)",
    "UNIT_THERMAL2_SET_TEMP_ALARM_LED_MSG0": "set",
    "UNIT_THERMAL2_SET_TEMP_ALARM_LED_MSG1": "temperature RGB LED Color",
    "UNIT_NCIR2_INIT_MSG0": "Init",
    "UNIT_NCIR2_INIT_MSG1": "I2C address",
    "UNIT_NCIR2_INIT_MSG2": "(0x08 ~ 0x77)",
    "UNIT_NCIR2_GET_TEMPERATURE_MSG0": "get",
    "UNIT_NCIR2_GET_TEMPERATURE_MSG1": "temperature value in °C (return float)",
    "UNIT_NCIR2_GET_EMISSIVITY_MSG0": "get",
    "UNIT_NCIR2_GET_EMISSIVITY_MSG1": "emissivity value (return float)",
    "UNIT_NCIR2_GET_TEMPERATURE_THRESHOLD_MSG0": "get",
    "UNIT_NCIR2_GET_TEMPERATURE_THRESHOLD_MSG1": "temperature threshold value (return float)",
    "UNIT_NCIR2_GET_TEMP_ALARM_LED_MSG0": "get",
    "UNIT_NCIR2_GET_TEMP_ALARM_LED_MSG1": "temperature alarm RGB LED color (return list)",
    "UNIT_NCIR2_GET_TEMP_BUZZER_FREQ_MSG0": "get",
    "UNIT_NCIR2_GET_TEMP_BUZZER_FREQ_MSG1": "temperature alarm buzzer frequency (return int)",
    "UNIT_NCIR2_GET_TEMP_ALARM_INTERVAL_MSG0": "get",
    "UNIT_NCIR2_GET_TEMP_ALARM_INTERVAL_MSG1": "temperature alarm interval in ms (return int)",
    "UNIT_NCIR2_GET_TEMP_BUZZER_DUTY_MSG0": "get",
    "UNIT_NCIR2_GET_TEMP_BUZZER_DUTY_MSG1": "temperature buzzer dutycycle (return 0 ~ 255)",
    "UNIT_NCIR2_GET_BUZZER_FREQ_MSG0": "get",
    "UNIT_NCIR2_GET_BUZZER_FREQ_MSG1": "buzzer frequency in Hz (return 20 ~ 20000)",
    "UNIT_NCIR2_GET_BUZZER_DUTY_MSG0": "get",
    "UNIT_NCIR2_GET_BUZZER_DUTY_MSG1": "buzzer dutycycle (return 0 ~ 255)",
    "UNIT_NCIR2_GET_BUZZER_CONTROL_MSG0": "get",
    "UNIT_NCIR2_GET_BUZZER_CONTROL_MSG1": "buzzer ON/OFF status (return True or False)",
    "UNIT_NCIR2_GET_RGB_LED_MSG0": "get",
    "UNIT_NCIR2_GET_RGB_LED_MSG1": "RGB LED color (return list)",
    "UNIT_NCIR2_GET_BUTTON_STATUS_MSG0": "get",
    "UNIT_NCIR2_GET_BUTTON_STATUS_MSG1": "button status (return True or False)",
    "UNIT_NCIR2_GET_CHIP_TEMPERATURE_MSG0": "get",
    "UNIT_NCIR2_GET_CHIP_TEMPERATURE_MSG1": "chip temperature value in °C (return float)",
    "UNIT_NCIR2_GET_DEVICE_SPEC_MSG0": "get",
    "UNIT_NCIR2_GET_DEVICE_SPEC_MSG1": "spec detail (return int)",
    "UNIT_NCIR2_SET_EMISSIVITY_VALUE_MSG0": "set emissivity",
    "UNIT_NCIR2_SET_EMISSIVITY_VALUE_MSG1": "(0.1 ~ 0.95)",
    "UNIT_NCIR2_SET_TEMP_THRESHOLD_MSG0": "set",
    "UNIT_NCIR2_SET_TEMP_THRESHOLD_MSG1": "temperature threshold",
    "UNIT_NCIR2_SET_TEMP_ALARM_LED_MSG0": "set",
    "UNIT_NCIR2_SET_TEMP_ALARM_LED_MSG1": "temperature alarm RGB LED color",
    "UNIT_NCIR2_SET_TEMP_BUZZER_FREQ_MSG0": "set",
    "UNIT_NCIR2_SET_TEMP_BUZZER_FREQ_MSG1": "temperature alarm buzzer frequency",
    "UNIT_NCIR2_SET_TEMP_BUZZER_FREQ_MSG2": "Hz",
    "UNIT_NCIR2_SET_TEMP_ALARM_INTERVAL_MSG0": "set",
    "UNIT_NCIR2_SET_TEMP_ALARM_INTERVAL_MSG1": "temperature alarm interval",
    "UNIT_NCIR2_SET_TEMP_ALARM_INTERVAL_MSG2": "ms",
    "UNIT_NCIR2_SET_TEMP_BUZZER_DUTY_MSG0": "set",
    "UNIT_NCIR2_SET_TEMP_BUZZER_DUTY_MSG1": "temperature buzzer dutycycle",
    "UNIT_NCIR2_SET_BUZZER_FREQ_MSG0": "set buzzer frequency",
    "UNIT_NCIR2_SET_BUZZER_FREQ_MSG1": "Hz",
    "UNIT_NCIR2_SET_BUZZER_DUTY_MSG0": "set buzzer dutycycle",
    "UNIT_NCIR2_SET_BUZZER_CONTROL_MSG0": "set buzzer control",
    "UNIT_NCIR2_SET_RGB_LED_MSG0": "set RGB LED Color",
    "UNIT_NCIR2_SAVE_CONFIG_SETTING_MSG0": "save current configure settings",
    "UNIT_NCIR2_SET_I2C_ADDR_MSG0": "set I2C address",
    "UNIT_NCIR2_SET_I2C_ADDR_MSG1": "(0x08 ~ 0x77)",
    "UNIT_TOF4M_INIT_MSG0": "",
    "UNIT_TOF4M_INIT_MSG1": "I2Cアドレス",
    "UNIT_TOF4M_INIT_MSG2": "(0x08 ~ 0x77)で初期化",
    "UNIT_TOF4M_GET_DISTANCE_MSG0": "",
    "UNIT_TOF4M_GET_DISTANCE_MSG1": "距離mm (return int)",
    "UNIT_TOF4M_GET_MEASUREMENT_TIMING_BUDGET_MSG0": "",
    "UNIT_TOF4M_GET_MEASUREMENT_TIMING_BUDGET_MSG1": "measurement timing budget (return int)",
    "UNIT_TOF4M_GET_DISTANCE_MODE_MSG0": "",
    "UNIT_TOF4M_GET_DISTANCE_MODE_MSG1": "距離モード(return int)",
    "UNIT_TOF4M_GET_DATA_READY_MSG0": "",
    "UNIT_TOF4M_GET_DATA_READY_MSG1": "データ準備状態(return int)",
    "UNIT_TOF4M_SET_CONTINUOUS_START_MEASUREMENT_MSG0": "連続データ取得モードを開始",
    "UNIT_TOF4M_SET_CONTINUOUS_STOP_MEASUREMENT_MSG0": "連続データ取得モードを停止",
    "UNIT_TOF4M_SET_MEASUREMENT_TIMING_BUDGET_MSG0": "measurement timing budgetを設定",
    "UNIT_TOF4M_SET_DISTANCE_MODE_MSG0": "距離を",
    "UNIT_TOF4M_SET_DISTANCE_MODE_MSG1": "モードに設定",
    "UNIT_TOF4M_SET_I2C_ADDRESS_MSG0": "I2Cアドレスを",
    "UNIT_TOF4M_SET_I2C_ADDRESS_MSG1": "(0x08 ~ 0x77)に設定",
    "UNIT_ANGLE8_INIT_MSG0": "初期化",
    "UNIT_ANGLE8_INIT_MSG1": "I2Cアドレス",
    "UNIT_ANGLE8_INIT_MSG2": "(0x08 ~ 0x77)",
    "UNIT_ANGLE8_GET_SWITCH_STATUS_MSG0": "",
    "UNIT_ANGLE8_GET_SWITCH_STATUS_MSG1": "スイッチの状態(return True or False)",
    "UNIT_ANGLE8_GET_ADC12_RAW_MSG0": "",
    "UNIT_ANGLE8_GET_ADC12_RAW_MSG1": "チャンネル",
    "UNIT_ANGLE8_GET_ADC12_RAW_MSG2": "A/Dの値(12bit)(return int)",
    "UNIT_ANGLE8_GET_ADC8_RAW_MSG0": "",
    "UNIT_ANGLE8_GET_ADC8_RAW_MSG1": "チャンネル",
    "UNIT_ANGLE8_GET_ADC8_RAW_MSG2": "A/Dの値(8bit)(return int)",
    "UNIT_ANGLE8_GET_DEVICE_SPEC_DETAIL_MSG0": "",
    "UNIT_ANGLE8_GET_DEVICE_SPEC_DETAIL_MSG1": "仕様詳細(return int)",
    "UNIT_ANGLE8_SET_I2C_ADDR_MSG0": "設定",
    "UNIT_ANGLE8_SET_I2C_ADDR_MSG1": "I2Cアドレス",
    "UNIT_ANGLE8_SET_I2C_ADDR_MSG2": "(0x08 ~ 0x77)",
    "UNIT_ANGLE8_SET_RGB_LED_MSG0": "設定",
    "UNIT_ANGLE8_SET_RGB_LED_MSG1": "チャンネル",
    "UNIT_ANGLE8_SET_RGB_LED_MSG2": "RGB LEDの色",
    "UNIT_ANGLE8_SET_RGB_LED_MSG3": "輝度(0 ~ 100)",
    "UNIT_ANGLE8_FROM_TO_CHANNEL_MSG0": "開始",
    "UNIT_ANGLE8_FROM_TO_CHANNEL_MSG1": "終了",
    "UNIT_ANGLE8_SET_RGB_LED_FROM_MSG0": "設定",
    "UNIT_ANGLE8_SET_RGB_LED_FROM_MSG1": "チャンネル",
    "UNIT_ANGLE8_SET_RGB_LED_FROM_MSG2": "RGB LEDの色",
    "UNIT_ANGLE8_SET_RGB_LED_FROM_MSG3": "輝度(0 ~ 100)",
    "UNIT_ANGLE8_SET_RGB_LED_FROM_MSG4": "遅延時間(ms)",
    "UNIT_ANGLE8_SET_ANGLE_SYNC_BRIGHT_MSG0": "設定",
    "UNIT_ANGLE8_SET_ANGLE_SYNC_BRIGHT_MSG1": "角度で輝度を制御",
    "UNIT_ANGLE8_SET_ANGLE_SYNC_BRIGHT_MSG2": "チャンネル",
    "UNIT_ANGLE8_SET_ANGLE_SYNC_BRIGHT_MSG3": "RGB LEDの色",
    "UNIT_CO2_INIT_MSG0": "Init",
    "UNIT_CO2_IS_DATA_READY_MSG0": "is sensor data ready (return True or False)",
    "UNIT_CO2_GET_VALUE_MSG0": "get",
    "UNIT_CO2_GET_VALUE_MSG1": "value in ppm (return int, 400 ~ 2000)",
    "UNIT_CO2_GET_TEMPERATURE_MSG0": "get",
    "UNIT_CO2_GET_TEMPERATURE_MSG1": "temperature in °C (return float, -10 ~ 60)",
    "UNIT_CO2_GET_HUMIDITY_MSG0": "get",
    "UNIT_CO2_GET_HUMIDITY_MSG1": "humidity in RH% (return float, 0 ~ 100)",
    "UNIT_CO2_GET_TEMPERATURE_OFFSET_MSG0": "get",
    "UNIT_CO2_GET_TEMPERATURE_OFFSET_MSG1": "temperature offset in °C (return float)",
    "UNIT_CO2_GET_SENSOR_ALTITUDE_MSG0": "get",
    "UNIT_CO2_GET_SENSOR_ALTITUDE_MSG1": "sensor altitude in meters (return int)",
    "UNIT_CO2_GET_CALIBRATION_ENABLED_MSG0": "get",
    "UNIT_CO2_GET_CALIBRATION_ENABLED_MSG1": "automatic self calibration enabled (return True or False)",
    "UNIT_CO2_GET_SERIAL_NUMBER_MSG0": "get",
    "UNIT_CO2_GET_SERIAL_NUMBER_MSG1": "serial number (return tuple)",
    "UNIT_CO2_SET_START_PERIODIC_MEASUREMENT_MSG0": "set start periodic measurement",
    "UNIT_CO2_SET_STOP_PERIODIC_MEASUREMENT_MSG0": "set stop periodic measurement",
    "UNIT_CO2_SET_TEMPERATURE_OFFSET_MSG0": "set temperature offset",
    "UNIT_CO2_SET_TEMPERATURE_OFFSET_MSG1": "in °C",
    "UNIT_CO2_SET_SENSOR_ALTITUDE_MSG0": "set sensor altitude",
    "UNIT_CO2_SET_SENSOR_ALTITUDE_MSG1": "in meters",
    "UNIT_CO2_SET_AMBIENT_PRESSURE_MSG0": "set ambient pressure",
    "UNIT_CO2_SET_AMBIENT_PRESSURE_MSG1": "in hPa",
    "UNIT_CO2_SET_FORCE_CALIBRATION_MSG0": "set perform force calibration in co2 value",
    "UNIT_CO2_SET_CALIBRATION_ENABLED_MSG0": "set automatic self calibration",
    "UNIT_CO2_SET_START_LOW_PERIODIC_MEASUREMENT_MSG0": "set start low periodic measurement",
    "UNIT_CO2_SAVE_TO_EEPROM_MSG0": "save current configure settings to eeprom",
    "UNIT_CO2_SET_SELF_TEST_MSG0": "set perform self test",
    "UNIT_CO2_SET_FACTORY_RESET_MSG0": "set perform factory reset",
    "UNIT_CO2_REINIT_MSG0": "set sensor reinitializes",
    "UNIT_CO2L_INIT_MSG0": "Init",
    "UNIT_CO2L_IS_DATA_READY_MSG0": "is sensor data ready (return True or False)",
    "UNIT_CO2L_GET_VALUE_MSG0": "get",
    "UNIT_CO2L_GET_VALUE_MSG1": "value in ppm (return int, 400 ~ 2000)",
    "UNIT_CO2L_GET_TEMPERATURE_MSG0": "get",
    "UNIT_CO2L_GET_TEMPERATURE_MSG1": "temperature in °C (return float, -10 ~ 60)",
    "UNIT_CO2L_GET_HUMIDITY_MSG0": "get",
    "UNIT_CO2L_GET_HUMIDITY_MSG1": "humidity in RH% (return float, 0 ~ 100)",
    "UNIT_CO2L_GET_TEMPERATURE_OFFSET_MSG0": "get",
    "UNIT_CO2L_GET_TEMPERATURE_OFFSET_MSG1": "temperature offset in °C (return float)",
    "UNIT_CO2L_GET_SENSOR_ALTITUDE_MSG0": "get",
    "UNIT_CO2L_GET_SENSOR_ALTITUDE_MSG1": "sensor altitude in meters (return int)",
    "UNIT_CO2L_GET_CALIBRATION_ENABLED_MSG0": "get",
    "UNIT_CO2L_GET_CALIBRATION_ENABLED_MSG1": "automatic self calibration enabled (return True or False)",
    "UNIT_CO2L_GET_SERIAL_NUMBER_MSG0": "get",
    "UNIT_CO2L_GET_SERIAL_NUMBER_MSG1": "serial number (return tuple)",
    "UNIT_CO2L_SET_START_PERIODIC_MEASUREMENT_MSG0": "set start periodic measurement",
    "UNIT_CO2L_SET_STOP_PERIODIC_MEASUREMENT_MSG0": "set stop periodic measurement",
    "UNIT_CO2L_SET_TEMPERATURE_OFFSET_MSG0": "set temperature offset",
    "UNIT_CO2L_SET_TEMPERATURE_OFFSET_MSG1": "in °C",
    "UNIT_CO2L_SET_SENSOR_ALTITUDE_MSG0": "set sensor altitude",
    "UNIT_CO2L_SET_SENSOR_ALTITUDE_MSG1": "in meters",
    "UNIT_CO2L_SET_AMBIENT_PRESSURE_MSG0": "set ambient pressure",
    "UNIT_CO2L_SET_AMBIENT_PRESSURE_MSG1": "in hPa",
    "UNIT_CO2L_SET_FORCE_CALIBRATION_MSG0": "set perform force calibration in co2 value",
    "UNIT_CO2L_SET_CALIBRATION_ENABLED_MSG0": "set automatic self calibration",
    "UNIT_CO2L_SET_START_LOW_PERIODIC_MEASUREMENT_MSG0": "set start low periodic measurement",
    "UNIT_CO2L_SAVE_TO_EEPROM_MSG0": "save current configure settings to eeprom",
    "UNIT_CO2L_SET_SELF_TEST_MSG0": "set perform self test",
    "UNIT_CO2L_SET_FACTORY_RESET_MSG0": "set perform factory reset",
    "UNIT_CO2L_REINIT_MSG0": "set sensor reinitializes",
    "UNIT_CO2L_SET_SINGLE_SHOT_MEASUREMENT_ALL_MSG0": "set single shot in all measurements",
    "UNIT_CO2L_SET_SINGLE_SHOT_MEASUREMENT_HT_MSG0": "set single shot in temperature and humidity measurements",
    "UNIT_CO2L_SET_SLEEP_MODE_MSG0": "set sensor sleep mode",
    "UNIT_CO2L_SET_WAKE_UP_MSG0": "set sensor wake up",
    "UNIT_CAN_INIT_MSG0": "Init",
    "UNIT_CAN_INIT_MSG1": "mode",
    "UNIT_CAN_INIT_MSG2": "baudrate",
    "UNIT_CAN_INIT_MSG3": "ID",
    "UNIT_CAN_INIT_MSG4": "prescaler",
    "UNIT_CAN_INIT_MSG5": "sjw",
    "UNIT_CAN_INIT_MSG6": "bs1",
    "UNIT_CAN_INIT_MSG7": "bs2",
    "UNIT_CAN_INIT_MSG8": "triple sampling",
    "UNIT_CAN_DEINIT_MSG0": "deinit",
    "UNIT_CAN_RESTART_MSG0": "restart",
    "UNIT_CAN_GET_STATE_MSG0": "get state (return int)",
    "UNIT_CAN_GET_INFO_MSG0": "get error status information",
    "UNIT_CAN_ANY_MSG0": "count of available (return True or False)",
    "UNIT_CAN_RECV_MESSAGE_MSG0": "read message timeout",
    "UNIT_CAN_RECV_MESSAGE_MSG1": "(return tuple)",
    "UNIT_CAN_RECV_MESSAGE_INFO_MSG0": "read message into",
    "UNIT_CAN_RECV_MESSAGE_INFO_MSG1": "timeout",
    "UNIT_CAN_SEND_DATA_MSG0": "send",
    "UNIT_CAN_SEND_DATA_MSG1": "id",
    "UNIT_CAN_SEND_DATA_MSG2": "timeout",
    "UNIT_CAN_SEND_DATA_MSG3": "rtr",
    "UNIT_CAN_SEND_DATA_MSG4": "extframe",
    "UNIT_MINICAN_INIT_MSG0": "Init",
    "UNIT_MINICAN_INIT_MSG1": "mode",
    "UNIT_MINICAN_INIT_MSG2": "baudrate",
    "UNIT_MINICAN_INIT_MSG3": "ID",
    "UNIT_MINICAN_INIT_MSG4": "prescaler",
    "UNIT_MINICAN_INIT_MSG5": "sjw",
    "UNIT_MINICAN_INIT_MSG6": "bs1",
    "UNIT_MINICAN_INIT_MSG7": "bs2",
    "UNIT_MINICAN_INIT_MSG8": "triple sampling",
    "UNIT_MINICAN_DEINIT_MSG0": "deinit",
    "UNIT_MINICAN_RESTART_MSG0": "restart",
    "UNIT_MINICAN_GET_STATE_MSG0": "get state (return int)",
    "UNIT_MINICAN_GET_INFO_MSG0": "get error status information",
    "UNIT_MINICAN_ANY_MSG0": "count of available (return True or False)",
    "UNIT_MINICAN_RECV_MESSAGE_MSG0": "read message timeout",
    "UNIT_MINICAN_RECV_MESSAGE_MSG1": "(return tuple)",
    "UNIT_MINICAN_RECV_MESSAGE_INFO_MSG0": "read message into",
    "UNIT_MINICAN_RECV_MESSAGE_INFO_MSG1": "timeout",
    "UNIT_MINICAN_SEND_DATA_MSG0": "send",
    "UNIT_MINICAN_SEND_DATA_MSG1": "id",
    "UNIT_MINICAN_SEND_DATA_MSG2": "timeout",
    "UNIT_MINICAN_SEND_DATA_MSG3": "rtr",
    "UNIT_MINICAN_SEND_DATA_MSG4": "extframe",
    "UNIT_CATM_INIT_MSG0": "Init %1 UART %2",
    "UNIT_CATM_CHECK_MODEM_IS_READY_MSG0": "check if modem is ready (return True or False)",
    "UNIT_CATM_GET_SIGNAL_STRENGTH_MSG0": "get",
    "UNIT_CATM_GET_SIGNAL_STRENGTH_MSG1": "signal strength (return int)",
    "UNIT_CATM_GET_MODEL_IDENTIFICATION_MSG0": "get",
    "UNIT_CATM_GET_MODEL_IDENTIFICATION_MSG1": "model identification (return string)",
    "UNIT_CATM_GET_DATA_CONTENT_MSG0": "get",
    "UNIT_CATM_GET_DATA_CONTENT_MSG1": "data content (return string)",
    "UNIT_CATM_GET_GPRS_NETWORK_STATUS_MSG0": "get",
    "UNIT_CATM_GET_GPRS_NETWORK_STATUS_MSG1": "gprs network status (return int)",
    "UNIT_CATM_GET_SHOW_PDP_ADDRESS_MSG0": "get",
    "UNIT_CATM_GET_SHOW_PDP_ADDRESS_MSG1": "show pdp address cid",
    "UNIT_CATM_GET_SHOW_PDP_ADDRESS_MSG2": "(1 ~ 2) (return string)",
    "UNIT_CATM_GET_SELECTED_OPERATOR_MSG0": "get",
    "UNIT_CATM_GET_SELECTED_OPERATOR_MSG1": "selected operator (return string)",
    "UNIT_CATM_GET_MODE_SELECTION_MSG0": "get",
    "UNIT_CATM_GET_MODE_SELECTION_MSG1": "preferred mode selection (return int)",
    "UNIT_CATM_GET_NETWORK_ACTIVATED_MSG0": "get",
    "UNIT_CATM_GET_NETWORK_ACTIVATED_MSG1": "APP network activated pdp id",
    "UNIT_CATM_GET_NETWORK_ACTIVATED_MSG2": "(0 ~ 3)",
    "UNIT_CATM_GET_NETWORK_IP_MSG0": "get",
    "UNIT_CATM_GET_NETWORK_IP_MSG1": "network ip pdp id",
    "UNIT_CATM_GET_NETWORK_IP_MSG2": "(0 ~ 3) (return string)",
    "UNIT_CATM_SET_COMMAND_ECHO_MODE_MSG0": "set echo command mode",
    "UNIT_CATM_SET_GPRS_NETWORK_STATE_MSG0": "set gprs network state",
    "UNIT_CATM_SET_PDP_CONTEXT_MSG0": "set define PDP context apn",
    "UNIT_CATM_SET_MODE_SELECTION_MSG0": "set preferred mode selection",
    "UNIT_CATM_SET_NETWORK_ACTIVE_MSG0": "set APP network active PDP id",
    "UNIT_CATM_SET_NETWORK_ACTIVE_MSG1": "action",
    "UNIT_CATM_SET_MODEM_DEBUG_MSG0": "set AT command debug print",
    "UNIT_CATM_MQTT_SERVER_CONNECT_MSG0": "MQTT server connect",
    "UNIT_CATM_MQTT_SERVER_CONNECT_MSG1": "server",
    "UNIT_CATM_MQTT_SERVER_CONNECT_MSG2": "port",
    "UNIT_CATM_MQTT_SERVER_CONNECT_MSG3": "client id",
    "UNIT_CATM_MQTT_SERVER_CONNECT_MSG4": "username",
    "UNIT_CATM_MQTT_SERVER_CONNECT_MSG5": "password",
    "UNIT_CATM_MQTT_SERVER_CONNECT_MSG6": "keepalive (0 ~ 65535)",
    "UNIT_CATM_MQTT_SERVER_DISCONNECT_MSG0": "MQTT server disconnect",
    "UNIT_CATM_MQTT_UNSUBSCRIBE_TOPIC_MSG0": "MQTT unsubscribe topic",
    "UNIT_CATM_MQTT_PUBLISH_TOPIC_MSG0": "MQTT publish topic",
    "UNIT_CATM_MQTT_PUBLISH_TOPIC_MSG1": "msg",
    "UNIT_CATM_MQTT_PUBLISH_TOPIC_MSG2": "QoS",
    "UNIT_CATM_MQTT_PUBLISH_TOPIC_MSG3": "(0 ~ 2)",
    "UNIT_CATM_MQTT_POLLING_LOOP_MSG0": "MQTT polling loop",
    "UNIT_CATM_MQTT_SERVER_IS_CONNECT_MSG0": "check MQTT server is connect (return int)",
    "UNIT_CATM_MQTT_SUBSCRIBE_MSG0": "MQTT subscribe topic",
    "UNIT_CATM_MQTT_SUBSCRIBE_MSG1": "QoS",
    "UNIT_CATM_MQTT_SUBSCRIBE_MSG2": "(0 ~ 2)",
    "UNIT_CATM_MQTT_SUBSCRIBE_CALLBACK_MSG0": "MQTT subscribe callback topic",
    "UNIT_CATM_MQTT_SUBSCRIBE_CALLBACK_MSG1": "msg",
    "UNIT_CATM_HTTP_SERVER_CONNECT_MSG0": "HTTP server connect",
    "UNIT_CATM_HTTP_SERVER_DISCONNECT_MSG0": "HTTP server disconnect",
    "UNIT_CATM_HTTP_GET_RESPONSE_CODE_MSG0": "get",
    "UNIT_CATM_HTTP_GET_RESPONSE_CODE_MSG1": "response status code (return int)",
    "UNIT_CATM_IS_HTTP_SERVER_CONNECT_MSG0": "check http server is connect (return True or False)",
    "UNIT_CATM_HTTP_REQUEST_MSG0": "HTTP request",
    "UNIT_CATM_HTTP_REQUEST_MSG1": "method",
    "UNIT_CATM_HTTP_REQUEST_MSG2": "URL",
    "UNIT_CATM_HTTP_REQUEST_MSG3": "headers",
    "UNIT_CATM_HTTP_REQUEST_MSG4": "data",
    "UNIT_CATM_SUBSCRIBE_CALLBACK_MSG0": "%1 MQTT subscribe %2 with topic QoS %3 (0 ~ 2)",
    "UNIT_CATM_GET_TOPIC_MSG0": "get topic (return bytes)",
    "UNIT_CATM_GET_MSG_MSG0": "get msg (return bytes)",
    "UNIT_CATMGNSS_INIT_MSG0": "Init %1 UART %2",
    "UNIT_CATMGNSS_CHECK_MODEM_IS_READY_MSG0": "check if modem is ready (return True or False)",
    "UNIT_CATMGNSS_GET_SIGNAL_STRENGTH_MSG0": "get",
    "UNIT_CATMGNSS_GET_SIGNAL_STRENGTH_MSG1": "signal strength (return int)",
    "UNIT_CATMGNSS_GET_MODEL_IDENTIFICATION_MSG0": "get",
    "UNIT_CATMGNSS_GET_MODEL_IDENTIFICATION_MSG1": "model identification (return string)",
    "UNIT_CATMGNSS_GET_DATA_CONTENT_MSG0": "get",
    "UNIT_CATMGNSS_GET_DATA_CONTENT_MSG1": "data content (return string)",
    "UNIT_CATMGNSS_GET_GPRS_NETWORK_STATUS_MSG0": "get",
    "UNIT_CATMGNSS_GET_GPRS_NETWORK_STATUS_MSG1": "gprs network status (return int)",
    "UNIT_CATMGNSS_GET_SHOW_PDP_ADDRESS_MSG0": "get",
    "UNIT_CATMGNSS_GET_SHOW_PDP_ADDRESS_MSG1": "show pdp address cid",
    "UNIT_CATMGNSS_GET_SHOW_PDP_ADDRESS_MSG2": "(1 ~ 2) (return string)",
    "UNIT_CATMGNSS_GET_SELECTED_OPERATOR_MSG0": "get",
    "UNIT_CATMGNSS_GET_SELECTED_OPERATOR_MSG1": "selected operator (return string)",
    "UNIT_CATMGNSS_GET_MODE_SELECTION_MSG0": "get",
    "UNIT_CATMGNSS_GET_MODE_SELECTION_MSG1": "preferred mode selection (return int)",
    "UNIT_CATMGNSS_GET_NETWORK_ACTIVATED_MSG0": "get",
    "UNIT_CATMGNSS_GET_NETWORK_ACTIVATED_MSG1": "APP network activated pdp id",
    "UNIT_CATMGNSS_GET_NETWORK_ACTIVATED_MSG2": "(0 ~ 3)",
    "UNIT_CATMGNSS_GET_NETWORK_IP_MSG0": "get",
    "UNIT_CATMGNSS_GET_NETWORK_IP_MSG1": "network ip pdp id",
    "UNIT_CATMGNSS_GET_NETWORK_IP_MSG2": "(0 ~ 3) (return string)",
    "UNIT_CATMGNSS_SET_COMMAND_ECHO_MODE_MSG0": "set echo command mode",
    "UNIT_CATMGNSS_SET_GPRS_NETWORK_STATE_MSG0": "set gprs network state",
    "UNIT_CATMGNSS_SET_PDP_CONTEXT_MSG0": "set define PDP context apn",
    "UNIT_CATMGNSS_SET_MODE_SELECTION_MSG0": "set preferred mode selection",
    "UNIT_CATMGNSS_SET_NETWORK_ACTIVE_MSG0": "set APP network active PDP id",
    "UNIT_CATMGNSS_SET_NETWORK_ACTIVE_MSG1": "action",
    "UNIT_CATMGNSS_SET_MODEM_DEBUG_MSG0": "set AT command debug print",
    "UNIT_CATMGNSS_MQTT_SERVER_CONNECT_MSG0": "MQTT server connect",
    "UNIT_CATMGNSS_MQTT_SERVER_CONNECT_MSG1": "server",
    "UNIT_CATMGNSS_MQTT_SERVER_CONNECT_MSG2": "port",
    "UNIT_CATMGNSS_MQTT_SERVER_CONNECT_MSG3": "client id",
    "UNIT_CATMGNSS_MQTT_SERVER_CONNECT_MSG4": "username",
    "UNIT_CATMGNSS_MQTT_SERVER_CONNECT_MSG5": "password",
    "UNIT_CATMGNSS_MQTT_SERVER_CONNECT_MSG6": "keepalive (0 ~ 65535)",
    "UNIT_CATMGNSS_MQTT_SERVER_DISCONNECT_MSG0": "MQTT server disconnect",
    "UNIT_CATMGNSS_MQTT_UNSUBSCRIBE_TOPIC_MSG0": "MQTT unsubscribe topic",
    "UNIT_CATMGNSS_MQTT_PUBLISH_TOPIC_MSG0": "MQTT publish topic",
    "UNIT_CATMGNSS_MQTT_PUBLISH_TOPIC_MSG1": "msg",
    "UNIT_CATMGNSS_MQTT_PUBLISH_TOPIC_MSG2": "QoS",
    "UNIT_CATMGNSS_MQTT_PUBLISH_TOPIC_MSG3": "(0 ~ 2)",
    "UNIT_CATMGNSS_MQTT_POLLING_LOOP_MSG0": "MQTT polling loop",
    "UNIT_CATMGNSS_MQTT_SERVER_IS_CONNECT_MSG0": "check MQTT server is connect (return int)",
    "UNIT_CATMGNSS_MQTT_SUBSCRIBE_MSG0": "MQTT subscribe topic",
    "UNIT_CATMGNSS_MQTT_SUBSCRIBE_MSG1": "QoS",
    "UNIT_CATMGNSS_MQTT_SUBSCRIBE_MSG2": "(0 ~ 2)",
    "UNIT_CATMGNSS_MQTT_SUBSCRIBE_CALLBACK_MSG0": "MQTT subscribe callback topic",
    "UNIT_CATMGNSS_MQTT_SUBSCRIBE_CALLBACK_MSG1": "msg",
    "UNIT_CATMGNSS_HTTP_SERVER_CONNECT_MSG0": "HTTP server connect",
    "UNIT_CATMGNSS_HTTP_SERVER_DISCONNECT_MSG0": "HTTP server disconnect",
    "UNIT_CATMGNSS_HTTP_GET_RESPONSE_CODE_MSG0": "get",
    "UNIT_CATMGNSS_HTTP_GET_RESPONSE_CODE_MSG1": "response status code (return int)",
    "UNIT_CATMGNSS_IS_HTTP_SERVER_CONNECT_MSG0": "check http server is connect (return True or False)",
    "UNIT_CATMGNSS_HTTP_REQUEST_MSG0": "HTTP request",
    "UNIT_CATMGNSS_HTTP_REQUEST_MSG1": "method",
    "UNIT_CATMGNSS_HTTP_REQUEST_MSG2": "URL",
    "UNIT_CATMGNSS_HTTP_REQUEST_MSG3": "headers",
    "UNIT_CATMGNSS_HTTP_REQUEST_MSG4": "data",
    "UNIT_CATMGNSS_GET_CHECK_GNSS_POWER_MSG0": "get",
    "UNIT_CATMGNSS_GET_CHECK_GNSS_POWER_MSG1": "check GNSS power status (return int)",
    "UNIT_CATMGNSS_SET_GNSS_POWER_CTRL_MSG0": "set GNSS power control",
    "UNIT_CATMGNSS_SET_GNSS_WORK_MODE_MSG0": "set GNSS work mode",
    "UNIT_CATMGNSS_GNSS_NMEA_OUTPUT_POLLING_MSG0": "GNSS NMEA output polling loop",
    "UNIT_CATMGNSS_GET_NMEA_PARAM_MSG0": "GNSS NMEA parameter",
    "UNIT_CATMGNSS_GET_NMEA_PARAM_MSG1": "(return string)",
    "UNIT_CATMGNSS_GET_GNSS_POSITION_MSG0": "get",
    "UNIT_CATMGNSS_GET_GNSS_POSITION_MSG1": "GNSS position",
    "UNIT_CATMGNSS_GET_GNSS_POSITION_MSG2": "format",
    "UNIT_CATMGNSS_GET_GNSS_POSITION_MSG3": "(return string)",
    "UNIT_CATMGNSS_SET_GNSS_START_MSG0": "set GNSS",
    "UNIT_CATMGNSS_SET_GNSS_START_MSG1": "start",
    "UNIT_CATMGNSS_SET_TIME_ZONE_MSG0": "set time zone hours",
    "UNIT_CATMGNSS_SET_TIME_ZONE_MSG1": "minutes",
    "UNIT_CATMGNSS_SUBSCRIBE_CALLBACK_MSG0": "%1 MQTT subscribe %2 with topic QoS %3 (0 ~ 2)",
    "UNIT_CATMGNSS_GET_TOPIC_MSG0": "get topic (return bytes)",
    "UNIT_CATMGNSS_GET_MSG_MSG0": "get msg (return bytes)",
    "UNIT_FADER_INIT_MSG0": "初期化 %1",
    "UNIT_FADER_GET_VOLTAGE_MSG0": "%1 電圧を取得(V, return float)",
    "UNIT_FADER_GET_RAW_MSG0": "%1 生データを取得(return int)",
    "UNIT_FADER_UPDATE_COLOR_MSG0": "%1 ADCの値に応じて色を更新",
    "UNIT_FADER_UPDATE_BRIGHTNESS_MSG0": "%1 ADCの値に応じて輝度を更新",
    "UNIT_FADER_SET_BRIGHTNESS_MSG0": "%1 輝度を %2 に設定(0 ~ 100)",
    "UNIT_FADER_FILL_COLOR_MSG0": "%1 RGB LEDを全て色 %2 に設定",
    "UNIT_FADER_SET_COLOR_MSG0": "%1 %2 番目のRGB LEDを色 %3 で設定",
    "UNIT_FAN_INIT_MSG0": "%1 初期化",
    "UNIT_FAN_SET_SPEED_CTRL_MSG0": "%1 スピード %2 (0 ~ 100)を設定",
    "UNIT_FAN_SET_PWM_FREQ_MSG0": "%1 PWMの周期を %2 (1 ~ 40000000)に設定",
    "UNIT_LASERRX_INIT_MSG0": "Init %1 with mode",
    "UNIT_LASERRX_INIT_MSG1": "id",
    "UNIT_LASERRX_CONFIGURE_UART_MSG0": "init uart with",
    "UNIT_LASERRX_CONFIGURE_UART_MSG1": "baudrate",
    "UNIT_LASERRX_CONFIGURE_UART_MSG2": "bits",
    "UNIT_LASERRX_CONFIGURE_UART_MSG3": "parity",
    "UNIT_LASERRX_CONFIGURE_UART_MSG4": "stop",
    "UNIT_LASERRX_UART_READ_BYTES_MSG0": "%1 read bytes (return bytes)",
    "UNIT_LASERRX_UART_ANY_MSG0": "%1 number of data available (return int)",
    "UNIT_LASERRX_GPIO_GET_VALUE_MSG0": "%1 get value (return 0 or 1)",
    "UNIT_LASERTX_INIT_MSG0": "Init %1 with mode",
    "UNIT_LASERTX_INIT_MSG1": "id",
    "UNIT_LASERTX_CONFIGURE_UART_MSG0": "init uart with",
    "UNIT_LASERTX_CONFIGURE_UART_MSG1": "baudrate",
    "UNIT_LASERTX_CONFIGURE_UART_MSG2": "bits",
    "UNIT_LASERTX_CONFIGURE_UART_MSG3": "parity",
    "UNIT_LASERTX_CONFIGURE_UART_MSG4": "stop",
    "UNIT_LASERTX_GPIO_ON_MSG0": "%1 on",
    "UNIT_LASERTX_GPIO_OFF_MSG0": "%1 off",
    "UNIT_LASERTX_GPIO_SET_VALUE_MSG0": "%1 set value %2 (0 ~ 1)",
    "UNIT_LASERTX_UART_WRITE_MESSAGE_MSG0": "%1 write message %2 in string",
    "UNIT_LASERTX_UART_WRITE_LIST_MSG0": "%1 write data in list %2",
    "UNIT_SSR_INIT_MSG0": "Init %1",
    "UNIT_SSR_ON_MSG0": "%1 on",
    "UNIT_SSR_OFF_MSG0": "%1 off",
    "UNIT_SSR_SET_STATE_MSG0": "%1 set state %2",
    "UNIT_ENCODER_INIT_MSG0": "初期化 %1 I2Cアドレス %2",
    "UNIT_ENCODER_GET_ROTARY_STATUS_MSG0": "%1 は回っているか(return True or False)",
    "UNIT_ENCODER_GET_ROTARY_VALUE_MSG0": "%1 の回転数(return int)",
    "UNIT_ENCODER_GET_BUTTON_STATUS_MSG0": "%1 ボタンの状態(return True or False)",
    "UNIT_ENCODER_FILL_COLOR_MSG0": "%1 RGB LEDを全て色 %2 に設定",
    "UNIT_ENCODER_SET_COLOR_MSG0": "%1 %2 番目のRGB LEDを色 %3 で設定",
    "UNIT_ENCODER_GET_INCREMENTS_MSG0": "%1 ロータリの増減値(return int)",
    "UNIT_ENCODER_RESET_VALUE_MSG0": "%1 ロータリ値をリセット",
    "UNIT_ENCODER_SET_VALUE_MSG0": "%1 ロータリ値を %2 に設定",
    "UNIT_BUTTON_INIT_MSG0": "Init %1 active low %2 type %3",
    "UNIT_BUTTON_GET_COUNTER_VALUE_MSG0": "get %1 counter value (return int)",
    "UNIT_BUTTON_RESET_COUNTER_VALUE_MSG0": "Reset %1 counter value",
    "UNIT_BUTTON_TICK_MSG0": "%1 update in loop",
    "UNIT_BUTTON_CALLBACK_MSG0": "When %1 %2",
    "UNIT_BLDCDRIVER_INIT_MSG0": "Init %1 I2C address %2 (0x08 ~ 0x77)",
    "UNIT_BLDCDRIVER_GET_CURRENT_MODE_MSG0": "get %1 current mode (return 0 or 1)",
    "UNIT_BLDCDRIVER_GET_MOTOR_CURRENT_DIRECTION_MSG0": "get %1 motor current direction (return 0 or 1)",
    "UNIT_BLDCDRIVER_GET_MOTOR_CURRENT_MODEL_MSG0": "get %1 motor current model (return 0 or 1)",
    "UNIT_BLDCDRIVER_GET_MOTOR_POLE_PAIRS_MSG0": "get %1 motor number of pole pairs (return int)",
    "UNIT_BLDCDRIVER_GET_MOTOR_STATUS_MSG0": "get %1 motor status (return int)",
    "UNIT_BLDCDRIVER_GET_OPEN_LOOP_PWM_MSG0": "get %1 open loop PWM value (return int)",
    "UNIT_BLDCDRIVER_GET_READ_BACK_RPM_FLOAT_MSG0": "get %1 read back rpm value in float (return float)",
    "UNIT_BLDCDRIVER_GET_READ_BACK_RPM_INT_MSG0": "get %1 read back rpm value in int (x100, return int)",
    "UNIT_BLDCDRIVER_GET_READ_BACK_RPM_STR_MSG0": "get %1 read back rpm value (return string)",
    "UNIT_BLDCDRIVER_GET_READ_BACK_FREQ_FLOAT_MSG0": "get %1 read back freq value in float (return float)",
    "UNIT_BLDCDRIVER_GET_READ_BACK_FREQ_INT_MSG0": "get %1 read back freq value in int (x100, return int)",
    "UNIT_BLDCDRIVER_GET_READ_BACK_FREQ_STR_MSG0": "get %1 read back freq value (return string)",
    "UNIT_BLDCDRIVER_GET_RPM_FLOAT_MSG0": "get %1 rpm value (return float)",
    "UNIT_BLDCDRIVER_GET_RPM_INT_MSG0": "get %1 rpm value (return int)",
    "UNIT_BLDCDRIVER_GET_PID_VALUE_MSG0": "get %1 PID value (return tuple)",
    "UNIT_BLDCDRIVER_GET_DEVICE_SPEC_MSG0": "get %1 %2 spec detail (return int)",
    "UNIT_BLDCDRIVER_SET_MODE_MSG0": "Set %1 %2 mode",
    "UNIT_BLDCDRIVER_SET_DIRECTION_MSG0": "Set %1 motor %2 direction",
    "UNIT_BLDCDRIVER_SET_MOTOR_MODEL_MSG0": "Set %1 motor %2 model",
    "UNIT_BLDCDRIVER_SAVE_DATA_IN_FLASH_MSG0": "%1 save current motor data in flash",
    "UNIT_BLDCDRIVER_SET_ADDRESS_MSG0": "Set %1 I2C address %2 (0x08 ~ 0x77)",
    "UNIT_BLDCDRIVER_SET_POLE_PAIRS_MSG0": "Set %1 %2 number of pole pairs",
    "UNIT_BLDCDRIVER_SET_OPEN_LOOP_PWM_MSG0": "Set %1 open loop PWM %2 (0 ~ 2047)",
    "UNIT_BLDCDRIVER_SET_RPM_FLOAT_MSG0": "Set %1 motor rpm %2 in float",
    "UNIT_BLDCDRIVER_SET_RPM_INT_MSG0": "Set %1 motor rpm %2 in int",
    "UNIT_BLDCDRIVER_SET_PID_VALUE_MSG0": "Set %1 P %2 I %3 D %4",
    "UNIT_REFLECTIVEIR_INIT_MSG0": "Init %1",
    "UNIT_REFLECTIVEIR_GET_ANALOG_VALUE_MSG0": "get %1 analog value (return 0 ~ 65535)",
    "UNIT_REFLECTIVEIR_GET_DIGITAL_VALUE_MSG0": "get %1 digital value (return 0 or 1)",
    "UNIT_REFLECTIVEIR_ENABLE_IRQ_MSG0": "%1 enable detect event",
    "UNIT_REFLECTIVEIR_DISABLE_IRQ_MSG0": "%1 disable detect event",
    "UNIT_REFLECTIVEIR_CALLBACK_MSG0": "When %1 %2",
    "UNIT_HALLEFFECT_INIT_MSG0": "%1 初期化",
    "UNIT_HALLEFFECT_ENABLE_IRQ_MSG0": "%1 イベント検出を有効化",
    "UNIT_HALLEFFECT_DISABLE_IRQ_MSG0": "%1 イベント検出を無効化",
    "UNIT_HALLEFFECT_GET_STATUS_MSG0": "%1 状態を取得(True or False)",
    "UNIT_HALLEFFECT_CALLBACK_MSG0": "%1 が %2 の時",
    "UNIT_HALLEFFECT_IRQ_ACTIVE_MSG0": "%1 IRQを有効化",
    "UNIT_HALLEFFECT_IRQ_NEGACTIVE_MSG0": "%1 IRQを無効化",
    "UNIT_BUZZER_INIT_MSG0": "Init %1",
    "UNIT_BUZZER_DEINIT_MSG0": "%1 deinit",
    "UNIT_BUZZER_TURN_OFF_MSG0": "%1 turn off",
    "UNIT_BUZZER_SET_FREQ_MSG0": "%1 set freq %2 Hz(100 ~ 10000)",
    "UNIT_BUZZER_SET_DUTY_MSG0": "%1 set duty %2 %",
    "UNIT_BUZZER_SET_ONCE_MSG0": "play once with",
    "UNIT_BUZZER_SET_ONCE_MSG1": "freq (100 ~ 10000 Hz)",
    "UNIT_BUZZER_SET_ONCE_MSG2": "duty (%)",
    "UNIT_BUZZER_SET_ONCE_MSG3": "duration (ms)",
    "UNIT_EXTENCODER_INIT_MSG0": "Init %1 I2C address %2 (0x08 ~ 0x77)",
    "UNIT_EXTENCODER_GET_ROTARY_STATUS_MSG0": "%1 had rotated (return True or False)",
    "UNIT_EXTENCODER_GET_ROTARY_VALUE_MSG0": "get %1 rotary value (return int)",
    "UNIT_EXTENCODER_GET_INCREMENTS_MSG0": "get %1 rotary increments (return int)",
    "UNIT_EXTENCODER_RESET_VALUE_MSG0": "Reset %1 rotary value",
    "UNIT_EXTENCODER_SET_VALUE_MSG0": "Set %1 rotary value %2",
    "UNIT_EXTENCODER_GET_PERIMETER_MSG0": "get %1 perimeter (return int)",
    "UNIT_EXTENCODER_GET_PULSE_MSG0": "get %1 pulse (return int)",
    "UNIT_EXTENCODER_GET_ZERO_MODE_MSG0": "get %1 zero mode (return int)",
    "UNIT_EXTENCODER_GET_METER_VALUE_MSG0": "get %1 meter value (return int)",
    "UNIT_EXTENCODER_GET_ZERO_PULSE_MSG0": "get %1 zero pulse value (return int)",
    "UNIT_EXTENCODER_SET_PERIMETER_MSG0": "Set %1 perimeter %2",
    "UNIT_EXTENCODER_SET_PULSE_MSG0": "Set %1 pulse %2",
    "UNIT_EXTENCODER_SET_ZERO_MODE_MSG0": "Set %1 zero mode %2",
    "UNIT_EXTENCODER_SET_ZERO_PULSE_MSG0": "Set %1 zero pulse %2",
    "UNIT_EXTENCODER_GET_FW_VERSION_MSG0": "get %1 firmware version (return string)",
    "UNIT_EXTENCODER_SET_ADDRESS_MSG0": "Set %1 I2C address %2 (0x08 ~ 0x77)",
    "UNIT_ACCEL_INIT_MSG0": "Init %1 I2C address %2",
    "UNIT_ACCEL_GET_ACCEL_MSG0": "%1 get accel (return tuple)",
    "UNIT_ACCEL_ENABLE_MOTION_DETECTION_MSG0": "%1 set motion detection threshold %2",
    "UNIT_ACCEL_DISABLE_MOTION_DETECTION_MSG0": "%1 disable motion detection",
    "UNIT_ACCEL_IS_TAP_MSG0": "%1 is tap (return True or False)",
    "UNIT_ACCEL_IS_MOTION_MSG0": "%1 is motion (return True or False)",
    "UNIT_ACCEL_IS_FREEFALL_MSG0": "%1 is freefall (return True or False)",
    "UNIT_ACCEL_ENABLE_FREEFALL_DETECTION_MSG0": "%1 enable freefall detection",
    "UNIT_ACCEL_SET_FREEFALL_DETECTION_MSG0": "%1 set freefall detection threshold %2 time %3 ms",
    "UNIT_ACCEL_DISABLE_FREEFALL_DETECTION_MSG0": "%1 disable freefall detection",
    "UNIT_ACCEL_DISABLE_TAP_DETECTION_MSG0": "%1 disable tap detection",
    "UNIT_ACCEL_GET_DATA_RATE_MSG0": "%1 get data rate",
    "UNIT_ACCEL_GET_RANGE_MSG0": "%1 get range",
    "UNIT_ACCEL_SET_DATA_RATE_MSG0": "%1 set data rate %2",
    "UNIT_ACCEL_SET_RANGE_MSG0": "%1 set range %2",
    "UNIT_ACCEL_ENABLE_TAP_DETECTION_MSG0": "%1 enable tap detection",
    "UNIT_ACCEL_SET_TAP_DETECTION_MSG0": "%1 set tap detection",
    "UNIT_ACCEL_SET_TAP_DETECTION_MSG1": "tap count",
    "UNIT_ACCEL_SET_TAP_DETECTION_MSG2": "threshold",
    "UNIT_ACCEL_SET_TAP_DETECTION_MSG3": "duration",
    "UNIT_ACCEL_SET_TAP_DETECTION_MSG4": "latency",
    "UNIT_ACCEL_SET_TAP_DETECTION_MSG5": "window",
    "UNIT_DDS_INIT_MSG0": "Init %1 I2C address %2",
    "UNIT_DDS_SET_FREQ_MSG0": "%1 set frequency %2 to %3 Hz",
    "UNIT_DDS_SET_PHASE_MSG0": "%1 set phase %2 to %3 degrees",
    "UNIT_DDS_SET_FREQ_PHASE_MSG0": "%1 set frequency %2 to %3 Hz and phase %4 to %5 degrees",
    "UNIT_DDS_SET_MODE_MSG0": "%1 set output mode to %2",
    "UNIT_DDS_SET_QUICK_OUTPUT_MSG0": "%1 quickly set output mode to %2 freq to %3 Hz and phase to %4 degrees",
    "UNIT_DDS_SET_OUTPUT_MSG0": "%1 output signal with freq %2 and phase %3",
    "UNIT_DDS_SET_SLEEP_MODE_MSG0": "%1 set sleep mode to %2",
    "UNIT_DDS_RESET_MSG0": "%1 reset",
    "UNIT_DDS_SELECT_FREQ_REG_MSG0": "%1 select frequency %2",
    "UNIT_DDS_SELECT_PHASE_REG_MSG0": "%1 select phase %2",
    "UNIT_DDS_SET_CTRL_MSG0": "%1 set control register %2 freq %3 phase %4 disable mclk %5 disable dac %6 reset %7",
    "UNIT_DIGICLOCK_INIT_MSG0": "%1 I2Cアドレス %2 で初期化",
    "UNIT_DIGICLOCK_CLEAR_MSG0": "%1 画面消去",
    "UNIT_DIGICLOCK_SET_BRIGHTNESS_MSG0": "%1 輝度を %2 (0 ~ 8)に設定",
    "UNIT_DIGICLOCK_SET_RAW_MSG0": "%1 %3 番目に生データ %2 を表示",
    "UNIT_DIGICLOCK_SET_CHAR_MSG0": "%1 %3 番目に文字 %2 を表示",
    "UNIT_DIGICLOCK_SET_STRING_MSG0": "%1 ディスプレイに文字列 %2 を表示",
    "UNIT_DIGICLOCK_GET_FW_VERSION_MSG0": "%1 ファームウエアバージョン(return int)",
    "UNIT_FLASHLIGHT_INIT_MSG0": "%1 初期化",
    "UNIT_FLASHLIGHT_SET_FLASH_MSG0": "%1 フラッシュを %2 輝度 %3 時間 %4 フラッシュ後に消灯するか? %5",
    "UNIT_GROVE2GROVE_INIT_MSG0": "%1 を初期化",
    "UNIT_GROVE2GROVE_SET_ON_MSG0": "%1 をオン",
    "UNIT_GROVE2GROVE_SET_OFF_MSG0": "%1 をオフ",
    "UNIT_GROVE2GROVE_SET_STATE_MSG0": "%1 の状態を %2 に設定",
    "UNIT_GROVE2GROVE_GET_CURRENT_MSG0": "%1 の電流値を取得(A, return float)",
    "UNIT_KEY_INIT_MSG0": "%1 初期化",
    "UNIT_KEY_GET_STATE_MSG0": "%1 キーの状態を取得",
    "UNIT_KEY_SET_COLOR_MSG0": "%1 RGB LEDの色を %2 に設定",
    "UNIT_KEY_SET_BRIGHTNESS_MSG0": "%1 の輝度 %2 %に設定",
    "UNIT_KEY_BUTTON_CALLBACK_MSG0": "%1 が %2 の時",
    "UNIT_KEY_BUTTON_TICK_MSG0": "%1 の状態をループ中で更新",
    "UNIT_TUBEPRESSURE_INIT_MSG0": "Init %1",
    "UNIT_TUBEPRESSURE_GET_CURRENT_MSG0": "get %1 pressure (kPa, return float)",
    "UNIT_TUBEPRESSURE_GET_ANALOG_VALUE_MSG0": "get %1 ADC %2 raw value (return int)",
    "UNIT_TUBEPRESSURE_GET_VOLTAGE_MSG0": "get %1 sensor output voltage (mV, return float)",
    "UNIT_NECO_INIT_MSG0": "%1 LEDの数: %2 ボタンのアクティブがLowか: %3 で初期化",
    "UNIT_NECO_SET_INDEX_COLOR_MSG0": "%1 %2 番目のRGB LEDを色 %3 に設定",
    "UNIT_NECO_SET_FILL_COLOR_MSG0": "%1 RGB LED全体を色 %2 に設定",
    "UNIT_NECO_SET_BRIGHTNESS_MSG0": "%1 輝度を %2 % (0 ~ 100)に設定",
    "UNIT_NECO_BUTTON_GET_STATUS_MSG0": "%1 ボタン %2 ",
    "UNIT_NECO_BUTTON_CALLBACK_MSG0": "%1 %2 の時",
    "UNIT_NECO_BUTTON_TICK_MSG0": "%1 ループで更新する",
    "UNIT_NECO_SET_COLOR_FROM_MSG0": "%1 の %2 から %3 番目のRGB LEDの色を %4 遅延 %5 msに設定",
    "UNIT_NECO_SET_COLOR_RUNNING_FROM_MSG0": "%1 %2 から %3 番目のRGB LEDの色を %4 に 遅延を %5 msに設定",
    "UNIT_NECO_SET_RANDOM_LED_FROM_MSG0": "%1 %2 から %3 番目のRGB LED の色をランダムに設定",
    "UNIT_AIN4_20MA_INIT_MSG0": "Init %1 I2C address %2 (0x08 ~ 0x77)",
    "UNIT_AIN4_20MA_GET_ADC_RAW16_VALUE_MSG0": "get %1 16bit ADC raw value (return int)",
    "UNIT_AIN4_20MA_GET_CURRENT_VALUE_MSG0": "get %1 4 to 20 mA current (return float)",
    "UNIT_AIN4_20MA_GET_DEVICE_SPEC_MSG0": "get %1 %2 spec detail (return int)",
    "UNIT_AIN4_20MA_GET_FIRMWARE_VERSION_MSG0": "get %1 firmware version (return int)",
    "UNIT_AIN4_20MA_GET_I2C_ADDRESS_MSG0": "get %1 I2C address (return int)",
    "UNIT_AIN4_20MA_SET_I2C_ADDRESS_MSG0": "Set %1 I2C address %2 (0x08 ~ 0x77)",
    "UNIT_AIN4_20MA_SET_CAL_CURRENT_MSG0": "Set %1 calibration current %2 mA (4 ~ 20)",
    "UNIT_TVOC_INIT_MSG0": "%1 初期化",
    "UNIT_TVOC_SET_BASELINE_CO2_TVOC_MSG0": "%1 二酸化炭素(CO2)換算 %2 TVOC %3 でベースラインを設定",
    "UNIT_TVOC_SET_RELATIVE_HUMIDITY_MSG0": "%1 相対湿度 %2 RH 温度 %3 °Cを設定",
    "UNIT_TVOC_GET_CO2EQ_MSG0": "get %1 二酸化炭素(CO2)換算を取得 (ppm, return int)",
    "UNIT_TVOC_GET_BASELINE_CO2EQ_MSG0": "%1 二酸化炭素(CO2)換算のベースラインを取得(return int)",
    "UNIT_TVOC_GET_TVOC_MSG0": "%1 TVOCを取得(ppb, return int)",
    "UNIT_TVOC_GET_BASELINE_TVOC_MSG0": "%1 TVOCベースラインを取得(return int)",
    "UNIT_TVOC_GET_RAW_H2_MSG0": "%1 H2の生データを取得(return int)",
    "UNIT_TVOC_GET_RAW_ETHANOL_MSG0": "%1 エタノールの生データを取得(return int)",
    "UNIT_CATCH_INIT_MSG0": "Init %1",
    "UNIT_CATCH_DEINIT_MSG0": "%1 deinit",
    "UNIT_CATCH_CLAMP_MSG0": "%1 clamp the gripper",
    "UNIT_CATCH_RELEASE_MSG0": "%1 release the gripper",
    "UNIT_CATCH_SET_DUTY_MSG0": "%1 set duty cycle to %2 (20 ~ 54)",
    "UNIT_CATCH_SET_CLAMP_PERCENT_MSG0": "%1 set clamping percentage to %2 %",
    "UNIT_JOYSTICK_INIT_MSG0": "%1 I2Cアドレス %2 で初期化",
    "UNIT_JOYSTICK_GET_X_RAW_MSG0": "%1 x軸の生データを取得(return int)",
    "UNIT_JOYSTICK_GET_Y_RAW_MSG0": "%1 y軸の生データを取得(return int)",
    "UNIT_JOYSTICK_GET_X_MSG0": "%1 x軸の値を取得(return int)",
    "UNIT_JOYSTICK_GET_Y_MSG0": "%1 y軸の値を取得(return int)",
    "UNIT_JOYSTICK_GET_BUTTON_STATUS_MSG0": "%1 ボタンの状態を取得(return True or False)",
    "UNIT_JOYSTICK_SET_SWAP_X_MSG0": "%1 x軸の方向を入れ替え %2",
    "UNIT_JOYSTICK_SET_SWAP_Y_MSG0": "%1 y軸の方向を入れ替え %2",
    "UNIT_JOYSTICK2_INIT_MSG0": "%1 I2Cアドレス %2 (0x08 ~ 0x77) で初期化",
    "UNIT_JOYSTICK2_SET_ADDRESS_MSG0": "%1 I2Cアドレスを %2 (0x08 ~ 0x77)に設定",
    "UNIT_JOYSTICK2_SET_AXIS_X_INVERT_MSG0": "%1 x軸を反転 %2",
    "UNIT_JOYSTICK2_SET_AXIS_Y_INVERT_MSG0": "%1 y軸を反転 %2",
    "UNIT_JOYSTICK2_SET_AXIS_SWAP_MSG0": "%1 x軸とy軸を交換 %2",
    "UNIT_JOYSTICK2_GET_BUTTON_STATUS_MSG0": "%1 ボタンの状態(return True or False)",
    "UNIT_JOYSTICK2_GET_ADC_VALUE_MSG0": "%1 ADCの値(return tuple)",
    "UNIT_JOYSTICK2_FILL_COLOR_MSG0": "%1 の色を %2 に",
    "UNIT_JOYSTICK2_GET_X_RAW_MSG0": "%1 x軸のADC値",
    "UNIT_JOYSTICK2_GET_Y_RAW_MSG0": "get %1 y軸のADC値",
    "UNIT_JOYSTICK2_GET_X_POSITION_MSG0": "%1 x軸の位置",
    "UNIT_JOYSTICK2_GET_Y_POSITION_MSG0": "%1 y軸の位置",
    "UNIT_JOYSTICK2_GET_FIRMWARE_VERSION_MSG0": "%1 ファームウエアバージョン(return int)",
    "UNIT_JOYSTICK2_GET_AXIS_POSITION_MSG0": "%1 の位置(return tuple)",
    "UNIT_JOYSTICK2_SET_DEADZONE_ADC_MSG0": "%1 ADC値のデッドゾーンをX %2 (0 ~ 32768),Y %3 (0 ~ 32768)に設定",
    "UNIT_JOYSTICK2_SET_DEADZONE_POSITION_MSG0": "%1 位置のデッドゾーンをX %2 (0 ~ 4096),Y %3 (0 ~ 4096)に設定",
    "UNIT_JOYSTICK2_SET_AXIS_X_MAPPING_MSG0": "%1 x軸のマッピングパラメータ %2 ADC値の負の最小値(0 ~ 65536) %3 ADC値の負の最大値(0 ~ 65536) %4 ADC値の正の最小値(0 ~ 65536) %5 ADC値の正の最大値(0 ~ 65536) %6",
    "UNIT_JOYSTICK2_SET_AXIS_Y_MAPPING_MSG0": "%1 y軸のマッピングパラメータ %2 ADC値の負の最小値(0 ~ 65536) %3 ADC値の負の最大値(0 ~ 65536) %4 ADC値の正の最小値(0 ~ 65536) %5 ADC値の正の最大値(0 ~ 65536) %6",
    "UNIT_JOYSTICK2_SET_LED_BRIGHTNESS_MSG0": "%1 LEDの輝度を %2 % (0 ~ 100)に設定",
    "UNIT_WATERING_INIT_MSG0": "Init %1",
    "UNIT_WATERING_GET_VOLTAGE_MSG0": "%1 get voltage (return float)",
    "UNIT_WATERING_GET_RAW_MSG0": "%1 get ADC raw value (return int)",
    "UNIT_WATERING_ON_MSG0": "%1 turn on the pump",
    "UNIT_WATERING_OFF_MSG0": "%1 turn off the pump",
    "UNIT_WATERING_SET_PUMP_MSG0": "%1 set the pump state %2",
    "UNIT_MQTT_INIT_MSG0": "Init %1 UART %2",
    "UNIT_MQTT_CHECK_MODEM_IS_READY_MSG0": "check %1 if modem is ready (return True or False)",
    "UNIT_MQTT_GET_FIRMWARE_VERSION_MSG0": "get %1 firmware version (return string)",
    "UNIT_MQTT_GET_BAUDRATE_MSG0": "get %1 device baudrate (return int)",
    "UNIT_MQTT_GET_NETWORK_STATUS_MSG0": "get %1 network connection status (return int)",
    "UNIT_MQTT_GET_NETWORK_PARAM_MSG0": "get %1 network %2 address (return string)",
    "UNIT_MQTT_GET_MAC_ADDRESS_MSG0": "get %1 MAC address (return string)",
    "UNIT_MQTT_GET_STATIC_IP_MSG0": "get %1 static %2 address (return string)",
    "UNIT_MQTT_GET_DHCP_STATUS_MSG0": "get %1 DHCP status (return 0 or 1)",
    "UNIT_MQTT_SET_DEBUG_MSG0": "%1 set AT command debug print %2",
    "UNIT_MQTT_SET_DHCP_STATE_MSG0": "%1 set DHCP state %2",
    "UNIT_MQTT_SET_STATIC_IP_MSG0": "Set %1 %2 static IP %3 subnet %4 gateway %5",
    "UNIT_MQTT_SET_BAUDRATE_MSG0": "%1 set device baudrate %2",
    "UNIT_MQTT_SET_SERVER_CONFIG_MSG0": "Set %1 MQTT %2 client id %3 server %4 port %5 username %6 password %7 keepalive(0 ~ 65535) %8",
    "UNIT_MQTT_SET_CONNECT_MSG0": "%1 MQTT connect",
    "UNIT_MQTT_SET_DISCONNECT_MSG0": "%1 MQTT disconnect",
    "UNIT_MQTT_CHECK_MSG_MSG0": "%1 MQTT apply for messaging",
    "UNIT_MQTT_GET_TOPIC_MSG0": "get topic (return bytes)",
    "UNIT_MQTT_GET_MSG_MSG0": "get msg (return bytes)",
    "UNIT_MQTT_SET_MQTT_PUBLISH_MSG0": "%1 MQTT publish topic %2 msg %3 QoS %4 (0 ~ 2)",
    "UNIT_MQTT_SUBSCRIBE_CALLBACK_MSG0": "%1 MQTT subscribe %2 with topic QoS %3 (0 ~ 2)",
    "UNIT_MQTTPOE_INIT_MSG0": "Init %1 UART %2",
    "UNIT_MQTTPOE_CHECK_MODEM_IS_READY_MSG0": "check %1 if modem is ready (return True or False)",
    "UNIT_MQTTPOE_GET_FIRMWARE_VERSION_MSG0": "get %1 firmware version (return string)",
    "UNIT_MQTTPOE_GET_BAUDRATE_MSG0": "get %1 device baudrate (return int)",
    "UNIT_MQTTPOE_GET_NETWORK_STATUS_MSG0": "get %1 network connection status (return int)",
    "UNIT_MQTTPOE_GET_NETWORK_PARAM_MSG0": "get %1 network %2 address (return string)",
    "UNIT_MQTTPOE_GET_MAC_ADDRESS_MSG0": "get %1 MAC address (return string)",
    "UNIT_MQTTPOE_GET_STATIC_IP_MSG0": "get %1 static %2 address (return string)",
    "UNIT_MQTTPOE_GET_DHCP_STATUS_MSG0": "get %1 DHCP status (return 0 or 1)",
    "UNIT_MQTTPOE_SET_DEBUG_MSG0": "%1 set AT command debug print %2",
    "UNIT_MQTTPOE_SET_DHCP_STATE_MSG0": "%1 set DHCP state %2",
    "UNIT_MQTTPOE_SET_STATIC_IP_MSG0": "Set %1 %2 static IP %3 subnet %4 gateway %5",
    "UNIT_MQTTPOE_SET_BAUDRATE_MSG0": "%1 set device baudrate %2",
    "UNIT_MQTTPOE_SET_SERVER_CONFIG_MSG0": "Set %1 MQTT %2 client id %3 server %4 port %5 username %6 password %7 keepalive(0 ~ 65535) %8",
    "UNIT_MQTTPOE_SET_CONNECT_MSG0": "%1 MQTT connect",
    "UNIT_MQTTPOE_SET_DISCONNECT_MSG0": "%1 MQTT disconnect",
    "UNIT_MQTTPOE_CHECK_MSG_MSG0": "%1 MQTT apply for messaging",
    "UNIT_MQTTPOE_GET_TOPIC_MSG0": "get topic (return bytes)",
    "UNIT_MQTTPOE_GET_MSG_MSG0": "get msg (return bytes)",
    "UNIT_MQTTPOE_SET_MQTT_PUBLISH_MSG0": "%1 MQTT publish topic %2 msg %3 QoS %4 (0 ~ 2)",
    "UNIT_MQTTPOE_SUBSCRIBE_CALLBACK_MSG0": "%1 MQTT subscribe %2 with topic QoS %3 (0 ~ 2)",
    "UNIT_VIBRATOR_INIT_MSG0": "Init %1",
    "UNIT_VIBRATOR_DEINIT_MSG0": "%1 deinit",
    "UNIT_VIBRATOR_TURN_OFF_MSG0": "%1 turn off vibrator",
    "UNIT_VIBRATOR_SET_FREQ_MSG0": "%1 set freq %2 Hz (1 ~ 40000000)",
    "UNIT_VIBRATOR_SET_DUTY_MSG0": "%1 set duty %2 %",
    "UNIT_VIBRATOR_SET_ONCE_MSG0": "%1 play once with %2 freq (1 ~ 40000000 Hz) %3 duty (%) %4 duration (ms) %5",
    "UNIT_HEART_INIT_MSG0": "%1 をI2Cアドレス %2 で初期化",
    "UNIT_HEART_STOP_MSG0": "%1 停止",
    "UNIT_HEART_START_MSG0": "%1 開始",
    "UNIT_HEART_DEINIT_MSG0": "%1 deinit",
    "UNIT_HEART_GET_HEART_RATE_MSG0": "%1 の心拍数(return int)を取得",
    "UNIT_HEART_GET_SPO2_MSG0": "%1 のSpO2値(return int)を取得",
    "UNIT_HEART_GET_IR_MSG0": "%1 のIR LED値(return int)を取得",
    "UNIT_HEART_GET_RED_MSG0": "%1 の赤色LED値(return int)を取得",
    "UNIT_HEART_SET_MODE_MSG0": "%1 のモードを %2 に設定",
    "UNIT_HEART_SET_LED_CURRENT_MSG0": "%1 のLED電流を %2 IR電流を %3 に設定",
    "UNIT_HEART_SET_PULSE_WIDTH_MSG0": "%1 のパルス幅を %2 に設定",
    "UNIT_HEART_SET_SAMPLING_RATE_MSG0": "%1 のサンプリングレートを %2 に設定",
    "UNIT_ACSSR_INIT_MSG0": "Init %1 with mode %2",
    "UNIT_ACSSR_INIT_MSG1": "I2C address (0x08 ~ 0x77)",
    "UNIT_ACSSR_INIT_MSG2": "Modbus RTU master obj",
    "UNIT_ACSSR_INIT_MSG3": "slave address (1 ~ 247)",
    "UNIT_ACSSR_SET_I2C_ADDRESS_MSG0": "Set %1 I2C address %2 (0x08 ~ 0x77)",
    "UNIT_ACSSR_SET_SLAVE_ADDRESS_MSG0": "Set %1 slave address %2 (1 ~ 247)",
    "UNIT_ACSSR_SET_ON_MSG0": "%1 on",
    "UNIT_ACSSR_SET_OFF_MSG0": "%1 off",
    "UNIT_ACSSR_GET_FW_VERSION_MSG0": "get %1 firmware version (return int)",
    "UNIT_ACSSR_GET_STATUS_MSG0": "get %1 relay status (return True or False)",
    "UNIT_ACSSR_FILL_COLOR_MSG0": "%1 fill RGB LED color %2",
    "UNIT_ACSSR_SET_RELAY_MSG0": "%1 set relay status %2",
    "UNIT_DCSSR_INIT_MSG0": "Init %1 with mode %2",
    "UNIT_DCSSR_INIT_MSG1": "I2C address (0x08 ~ 0x77)",
    "UNIT_DCSSR_INIT_MSG2": "Modbus RTU master obj",
    "UNIT_DCSSR_INIT_MSG3": "slave address (1 ~ 247)",
    "UNIT_DCSSR_SET_I2C_ADDRESS_MSG0": "Set %1 I2C address %2 (0x08 ~ 0x77)",
    "UNIT_DCSSR_SET_SLAVE_ADDRESS_MSG0": "Set %1 slave address %2 (1 ~ 247)",
    "UNIT_DCSSR_SET_ON_MSG0": "%1 on",
    "UNIT_DCSSR_SET_OFF_MSG0": "%1 off",
    "UNIT_DCSSR_GET_FW_VERSION_MSG0": "get %1 firmware version (return int)",
    "UNIT_DCSSR_GET_STATUS_MSG0": "get %1 relay status (return True or False)",
    "UNIT_DCSSR_FILL_COLOR_MSG0": "%1 fill RGB LED color %2",
    "UNIT_DCSSR_SET_RELAY_MSG0": "%1 set relay status %2",
    "UNIT_NBIOT_INIT_MSG0": "Init %1 UART %2",
    "UNIT_NBIOT_CHECK_MODEM_IS_READY_MSG0": "check %1 if modem is ready (return True or False)",
    "UNIT_NBIOT_GET_IMEI_NUMBER_MSG0": "get %1 identification(IMEI) number (return string)",
    "UNIT_NBIOT_GET_SIGNAL_STRENGTH_MSG0": "get %1 signal strength (return int)",
    "UNIT_NBIOT_GET_MODEL_IDENTIFICATION_MSG0": "get %1 model identification (return string)",
    "UNIT_NBIOT_GET_GPRS_NETWORK_STATUS_MSG0": "get %1 gprs network status (return int)",
    "UNIT_NBIOT_GET_SHOW_PDP_ADDRESS_MSG0": "get %1 show pdp address cid %2 (1~2) (return string)",
    "UNIT_NBIOT_GET_PDP_CONTEXT_STATUS_MSG0": "get %1 pdp context status (return int)",
    "UNIT_NBIOT_GET_PDP_CONTEXT_DYNAMIC_PARAMETERS_MSG0": "get %1 pdp context network %2 parameters (return string)",
    "UNIT_NBIOT_SET_MODEM_DEBUG_MSG0": "%1 set AT command debug print %2",
    "UNIT_NBIOT_SET_COMMAND_ECHO_MODE_MSG0": "%1 set echo command mode %2",
    "UNIT_NBIOT_SET_GPRS_NETWORK_STATE_MSG0": "%1 set gprs network state %2",
    "UNIT_NBIOT_SET_PDP_CONTEXT_APN_MSG0": "%1 set define PDP context apn %2",
    "UNIT_NBIOT_SET_PDP_CONTEXT_MSG0": "%1 set pdp context state %2",
    "UNIT_NBIOT_MQTT_SERVER_CONNECT_MSG0": "%1 MQTT server connect %2 server %3 port %4 client id %5 username %6 password %7 keepalive(0 ~ 65535) %8",
    "UNIT_NBIOT_MQTT_SERVER_DISCONNECT_MSG0": "%1 MQTT server disconnect",
    "UNIT_NBIOT_MQTT_POLLING_LOOP_MSG0": "%1 MQTT polling loop",
    "UNIT_NBIOT_MQTT_SERVER_IS_CONNECT_MSG0": "%1 check MQTT server is connect (return int)",
    "UNIT_NBIOT_MQTT_UNSUBSCRIBE_TOPIC_MSG0": "%1 MQTT unsubscribe topic %2",
    "UNIT_NBIOT_SET_MQTT_PUBLISH_MSG0": "%1 MQTT publish topic %2 msg %3 QoS %4 (0 ~ 2)",
    "UNIT_NBIOT_MQTT_SUBSCRIBE_CALLBACK_MSG0": "%1 MQTT subscribe %2 with topic QoS %3 (0 ~ 2)",
    "UNIT_NBIOT_HTTP_REQUEST_MSG0": "HTTP request",
    "UNIT_NBIOT_HTTP_REQUEST_MSG1": "method",
    "UNIT_NBIOT_HTTP_REQUEST_MSG2": "URL",
    "UNIT_NBIOT_HTTP_REQUEST_MSG3": "headers",
    "UNIT_NBIOT_HTTP_REQUEST_MSG4": "data",
    "UNIT_NBIOT_HTTP_DATA_CONTENT_MSG0": "get %1 data content (return string)",
    "UNIT_NBIOT_HTTP_RESPONSE_CODE_MSG0": "get %1 response status code (return int)",
    "UNIT_NBIOT_HTTP_SERVER_CONNECT_MSG0": "%1 HTTP server connect",
    "UNIT_NBIOT_HTTP_SERVER_DISCONNECT_MSG0": "%1 HTTP server disconnect",
    "UNIT_NBIOT_HTTP_SERVER_IS_CONNECT_MSG0": "%1 check HTTP server is connect (return True or False)",
    "UNIT_NBIOT_GET_TOPIC_MSG0": "get topic (return bytes)",
    "UNIT_NBIOT_GET_MSG_MSG0": "get msg (return bytes)",
    "UNIT_NBIOT2_INIT_MSG0": "Init %1 UART %2",
    "UNIT_NBIOT2_CHECK_MODEM_IS_READY_MSG0": "check %1 if modem is ready (return True or False)",
    "UNIT_NBIOT2_GET_IMEI_NUMBER_MSG0": "get %1 identification (IMEI) number (return string)",
    "UNIT_NBIOT2_GET_SIGNAL_STRENGTH_MSG0": "get %1 signal strength (return int)",
    "UNIT_NBIOT2_GET_MODEL_IDENTIFICATION_MSG0": "get %1 model identification (return string)",
    "UNIT_NBIOT2_GET_GPRS_NETWORK_STATUS_MSG0": "get %1 gprs network status (return int)",
    "UNIT_NBIOT2_GET_SHOW_PDP_ADDRESS_MSG0": "get %1 show pdp address cid %2 (0~1) (return string)",
    "UNIT_NBIOT2_GET_PDP_CONTEXT_DYNAMIC_PARAMETERS_MSG0": "get %1 pdp context network %2 parameters (return string)",
    "UNIT_NBIOT2_SET_MODEM_DEBUG_MSG0": "%1 set AT command debug print %2",
    "UNIT_NBIOT2_SET_COMMAND_ECHO_MODE_MSG0": "%1 set echo command mode %2",
    "UNIT_NBIOT2_SET_GPRS_NETWORK_STATE_MSG0": "%1 set gprs network state %2",
    "UNIT_NBIOT2_SET_PDP_CONTEXT_APN_MSG0": "%1 set define PDP context apn %2",
    "UNIT_NBIOT2_MQTT_SERVER_CONFIGURE_MSG0": "%1 MQTT server configure %2 server %3 port %4 client id %5 username %6 password %7 keepalive(0 ~ 65535) %8",
    "UNIT_NBIOT2_MQTT_SERVER_CONNECT_MSG0": "%1 MQTT server connect clean session %2",
    "UNIT_NBIOT2_MQTT_SERVER_DISCONNECT_MSG0": "%1 MQTT server disconnect",
    "UNIT_NBIOT2_MQTT_POLLING_LOOP_MSG0": "%1 MQTT polling loop",
    "UNIT_NBIOT2_MQTT_SERVER_IS_CONNECT_MSG0": "%1 check MQTT server is connect (return int)",
    "UNIT_NBIOT2_MQTT_UNSUBSCRIBE_TOPIC_MSG0": "%1 MQTT unsubscribe topic %2",
    "UNIT_NBIOT2_SET_MQTT_PUBLISH_MSG0": "%1 MQTT publish topic %2 msg %3 QoS %4 (0 ~ 2)",
    "UNIT_NBIOT2_MQTT_SUBSCRIBE_CALLBACK_MSG0": "%1 MQTT subscribe %2 with topic QoS %3 (0 ~ 2)",
    "UNIT_NBIOT2_GET_TOPIC_MSG0": "get topic (return bytes)",
    "UNIT_NBIOT2_GET_MSG_MSG0": "get msg (return bytes)",
    "UNIT_NBIOT2_HTTP_REQUEST_MSG0": "HTTP request",
    "UNIT_NBIOT2_HTTP_REQUEST_MSG1": "method",
    "UNIT_NBIOT2_HTTP_REQUEST_MSG2": "URL",
    "UNIT_NBIOT2_HTTP_REQUEST_MSG3": "headers",
    "UNIT_NBIOT2_HTTP_REQUEST_MSG4": "data",
    "UNIT_NBIOT2_HTTP_TERMINATE_MSG0": "%1 HTTP server terminated",
    "UNIT_NBIOT2_HTTP_DATA_CONTENT_MSG0": "get %1 data content (return string)",
    "UNIT_NBIOT2_HTTP_RESPONSE_CODE_MSG0": "get %1 response status code (return int)",
    "UNIT_QRCODE_INIT_MSG0": "Init %1",
    "UNIT_QRCODE_INIT_MSG1": "mode",
    "UNIT_QRCODE_INIT_MSG2": "I2C address",
    "UNIT_QRCODE_INIT_MSG3": "(0x08 ~ 0x77)",
    "UNIT_QRCODE_GET_DEVICE_INFO_MSG0": "get %1 device information %2 (return int)",
    "UNIT_QRCODE_GET_QRCODE_DATA_LENGTH_MSG0": "get %1 qrcode data length (return int)",
    "UNIT_QRCODE_GET_QRCODE_DATA_STATUS_MSG0": "get %1 qrcode data status (return int)",
    "UNIT_QRCODE_GET_QRCODE_DATA_MSG0": "get %1 qrcode data format %2 (return bytes or string)",
    "UNIT_QRCODE_GET_TRIGGER_BUTTON_STATUS_MSG0": "get %1 trigger button status (return True or False)",
    "UNIT_QRCODE_GET_TRIGGER_MODE_MSG0": "get %1 trigger mode status (return int)",
    "UNIT_QRCODE_SET_I2C_ADDRESS_MSG0": "%1 set I2C address %2 (0x08 ~ 0x77)",
    "UNIT_QRCODE_SET_TRIGGER_MODE_MSG0": "%1 set trigger mode %2",
    "UNIT_QRCODE_CLEAR_QRCODE_DATA_STATUS_MSG0": "%1 set clear qrcode data status",
    "UNIT_QRCODE_SET_MANUAL_SCAN_MSG0": "%1 set manual scanning control %2",
    "UNIT_QRCODE_CALLBACK_MSG0": "When %1 get data %2",
    "UNIT_QRCODE_TICK_MSG0": "%1 calling event poll in loop",
    "UNIT_IMU_INIT_MSG0": "%1 初期化",
    "UNIT_IMU_GET_ACCELEROMETER_MSG0": "%1 加速度値を取得(m/s^2, return tuple)",
    "UNIT_IMU_GET_GYROSCOPE_MSG0": "%1 ジャイロ値を取得(rad/s, return tuple)",
    "UNIT_IMU_GET_ATTITUDE_MSG0": "%1 姿勢角を取得([yaw, pitch, roll], return tuple)",
    "UNIT_IMU_SET_ACCEL_RANGE_MSG0": "%1 加速度のスケールを %2 gに設定",
    "UNIT_IMU_SET_GYRO_RANGE_MSG0": "%1 ジャイロのスケールを %2 dpsに設定",
    "UNIT_IMU_SET_ACCEL_UNIT_MSG0": "%1 加速度の出力単位を %2 に設定",
    "UNIT_IMU_SET_GYRO_UNIT_MSG0": "%1 ジャイロの出力単位を %2 に設定",
    "UNIT_IMU_SET_GYRO_CALIBRATE_MSG0": "%1 ジャイロの自動キャリブレーションをサンプル数 %2 遅延 %3 msに設定",
    "UNIT_IMU_SET_GYRO_OFFSET_MSG0": "%1 ジャイロのオフセットキャリブレーションを x %2 y %3 z %4 rad/sに設定",
    "UNIT_IMUPRO_INIT_MSG0": "%1 初期化",
    "UNIT_IMUPRO_GET_ACCELEROMETER_MSG0": "%1 加速度値を取得(m/s^2, return tuple)",
    "UNIT_IMUPRO_GET_GYROSCOPE_MSG0": "%1 ジャイロ値を取得(rad/s, return tuple)",
    "UNIT_IMUPRO_GET_MAGNETOMETER_MSG0": "%1 地磁気値を取得(uT, return tuple)",
    "UNIT_IMUPRO_GET_COMPASS_MSG0": "%1 コンパスが向いている方向を取得(0 ~ 360°, return float)",
    "UNIT_IMUPRO_GET_ATTITUDE_MSG0": "%1 姿勢角を取得([yaw, pitch, roll], return tuple)",
    "UNIT_IMUPRO_GET_TEMPERATURE_MSG0": "%1 温度を取得(°C, return float)",
    "UNIT_IMUPRO_GET_PRESSURE_MSG0": "%1 気圧を取得(hPa, return float)",
    "UNIT_IMUPRO_SET_ODR_MSG0": "%1 データ出力頻度(ODR)を設定 %2 加速度計ODR (Hz) %3 ジャイロ計ODR (Hz) %4 ",
    "UNIT_IMUPRO_SET_MAGNET_ODR_MSG0": "%1 地磁気計ODRを %2 Hzに設定",
    "UNIT_IMUPRO_SET_ACCEL_RANGE_MSG0": "%1 加速度のスケールを %2 gに設定",
    "UNIT_IMUPRO_SET_GYRO_RANGE_MSG0": "%1 ジャイロのスケールを %2 dpsに設定",
    "UNIT_IMUPRO_SET_GYRO_OFFSET_MSG0": "%1 ジャイロのオフセットキャリブレーションを x %2 y %3 z %4 rad/sに設定",
    "UNIT_ZIGBEE_INIT_MSG0": "Init %1 UART %2 verbose %3",
    "UNIT_ZIGBEE_SET_MODULE_PARAM_MSG0": "%1 set module parameters %2 device type %3 PAN ID %4 channel (11 ~ 26) %5 transfer mode %6 custom address %7",
    "UNIT_ZIGBEE_SET_MODULE_PARAM_MSG1": "ANT type",
    "UNIT_ZIGBEE_SET_MODULE_PARAM_MSG2": "encryption enable",
    "UNIT_ZIGBEE_SET_MODULE_PARAM_MSG3": "encryption key",
    "UNIT_ZIGBEE_SET_MODULE_PARAM_MSG4": "Subnode preset parameters",
    "UNIT_ZIGBEE_SET_NODE_PARAM_MSG0": "device type",
    "UNIT_ZIGBEE_SET_NODE_PARAM_MSG1": "ANT type",
    "UNIT_ZIGBEE_SET_NODE_PARAM_MSG2": "transfer mode",
    "UNIT_ZIGBEE_SET_NODE_PARAM_MSG3": "custom address",
    "UNIT_ZIGBEE_SET_DEVICE_TYPE_MSG0": "%1 set device type %2",
    "UNIT_ZIGBEE_SET_CHANNEL_MSG0": "%1 set channel %2",
    "UNIT_ZIGBEE_SET_TRANSFER_MODE_MSG0": "%1 set transfer mode %2",
    "UNIT_ZIGBEE_SET_CUSTOM_ADDRESS_MSG0": "%1 set custom address %2",
    "UNIT_ZIGBEE_SET_PAN_ID_MSG0": "%1 set PAN ID %2",
    "UNIT_ZIGBEE_SET_ANT_TYPE_MSG0": "%1 set ANT type %2",
    "UNIT_ZIGBEE_GET_SHORT_ADDRESS_MSG0": "get %1 short address (return int)",
    "UNIT_ZIGBEE_GET_CUSTOM_ADDRESS_MSG0": "get %1 custom address (return int)",
    "UNIT_ZIGBEE_ISCONNECTED_MSG0": "%1 is connected (return True or False)",
    "UNIT_ZIGBEE_START_RECEIVE_MSG0": "%1 start receive data",
    "UNIT_ZIGBEE_RECEIVE_DATA_EVENT_MSG0": "when %1 receive data (bytes) %2 data %3 dest address %4 src address %5",
    "UNIT_ZIGBEE_RECEIVE_DATA_STR_EVENT_MSG0": "when %1 receive data (string) %2 data %3 dest address %4 src address %5",
    "UNIT_ZIGBEE_STOP_RECEIVE_MSG0": "%1 stop receive data",
    "UNIT_ZIGBEE_SEND_DATA_MSG0": "%1 send (string or bytes) %2 custom address %3",
    "UNIT_ZIGBEE_BROADCAST_MSG0": "%1 broadcast (string or bytes) %2",
    "UNIT_GLASS_INIT_MSG0": "設定",
    "UNIT_GLASS_INIT_MSG1": "I2Cアドレス",
    "UNIT_GLASS2_INIT_MSG0": "設定",
    "UNIT_GLASS2_INIT_MSG1": "I2Cアドレス",
    "UNIT_OLED_INIT_MSG0": "設定",
    "UNIT_OLED_INIT_MSG1": "I2Cアドレス",
    "UNIT_MINIOLED_INIT_MSG0": "設定",
    "UNIT_MINIOLED_INIT_MSG1": "I2Cアドレス",
    "UNIT_LCD_INIT_MSG0": "設定",
    "UNIT_LCD_INIT_MSG1": "I2Cアドレス",
    "UNIT_RCA_INIT_MSG0": "config",
    "UNIT_RCA_INIT_MSG1": "size",
    "UNIT_RCA_INIT_MSG2": "output",
    "UNIT_RCA_INIT_MSG3": "signal type",
    "UNIT_RCA_INIT_MSG4": "use psram",
    "UNIT_RCA_INIT_MSG5": "pin dac (25 or 26)",
    "UNIT_RCA_INIT_MSG6": "output level",
    "UNIT_RCA_CONFIG_SIZE_MSG0": "width",
    "UNIT_RCA_CONFIG_SIZE_MSG1": "height",
    "UNIT_RCA_CONFIG_OUTPUT_MSG0": "width",
    "UNIT_RCA_CONFIG_OUTPUT_MSG1": "height",
    "UNIT_TMOS_INIT_MSG0": "Init %1 I2C address %2",
    "UNIT_TMOS_GET_DATA_READY_MSG0": "get %1 data update status (return True or False)",
    "UNIT_TMOS_GET_MOTION_STATE_MSG0": "get %1 motion detection state (return True or False)",
    "UNIT_TMOS_GET_PRESENCE_STATE_MSG0": "get %1 presence detection state (return True or False)",
    "UNIT_TMOS_GET_PRESENCE_VALUE_MSG0": "get %1 presence value (cm^-1, return int)",
    "UNIT_TMOS_GET_MOTION_VALUE_MSG0": "get %1 motion value (cm^-1, return int)",
    "UNIT_TMOS_GET_GAIN_MODE_MSG0": "get %1 gain mode (return int)",
    "UNIT_TMOS_GET_TMOS_SENSITIVITY_MSG0": "get %1 sensitivity (return float)",
    "UNIT_TMOS_GET_TAMB_SHOCK_STATE_MSG0": "get %1 ambient temperature shock detection state (return True or False)",
    "UNIT_TMOS_GET_TEMPERATURE_DATA_MSG0": "get %1 object temperature (return float)",
    "UNIT_TMOS_GET_TAMBIENT_RAW_VALUE_MSG0": "get %1 ambient temperature (return int)",
    "UNIT_TMOS_GET_PRESENCE_THRESHOLD_MSG0": "get %1 presence threshold (return int)",
    "UNIT_TMOS_GET_MOTION_THRESHOLD_MSG0": "get %1 motion threshold (return int)",
    "UNIT_TMOS_GET_TAMBIENT_SHOCK_THRESHOLD_MSG0": "get %1 ambient temperature shock threshold (return int)",
    "UNIT_TMOS_GET_PRESENCE_HYSTERESIS_MSG0": "get %1 presence detection hysteresis value (return int)",
    "UNIT_TMOS_GET_MOTION_HYSTERESIS_MSG0": "get %1 motion detection hysteresis value (return int)",
    "UNIT_TMOS_GET_TAMBIENT_SHOCK_HYSTERESIS_MSG0": "get %1 ambient temperature shock detection hysteresis value (return int)",
    "UNIT_TMOS_SET_GAIN_MODE_MSG0": "Set %1 gain mode to %2",
    "UNIT_TMOS_SET_TMOS_SENSITIVITY_MSG0": "Set %1 sensitivity to %2 (0 ~ 255)",
    "UNIT_TMOS_SET_PRESENCE_THRESHOLD_MSG0": "Set %1 presence threshold to %2 (0 ~ 32767)",
    "UNIT_TMOS_SET_MOTION_THRESHOLD_MSG0": "Set %1 motion threshold to %2 (0 ~ 32767)",
    "UNIT_TMOS_SET_TAMBIENT_SHOCK_THRESHOLD_MSG0": "Set %1 ambient temperature shock threshold to %2 (0 ~ 32767)",
    "UNIT_TMOS_SET_PRESENCE_HYSTERESIS_MSG0": "Set %1 presence detection hysteresis value to %2 (0 ~ 255)",
    "UNIT_TMOS_SET_MOTION_HYSTERESIS_MSG0": "Set %1 motion detection hysteresis value to %2 (0 ~ 255)",
    "UNIT_TMOS_SET_TAMBIENT_SHOCK_HYSTERESIS_MSG0": "Set %1 ambient temperature shock detection hysteresis value to %2 (0 ~ 255)",
    "UNIT_TMOS_CALLBACK_MSG0": "When %1 was %2 detect",
    "UNIT_TMOS_TICK_MSG0": "%1 update in loop",
    "UNIT_BPS_INIT_MSG0": "%1 初期化",
    "UNIT_BPS_GET_TEMPERATURE_MSG0": "%1 温度を取得(°C, return float)",
    "UNIT_BPS_GET_PRESSURE_MSG0": "%1 気圧を取得(hPa, return float)",
    "UNIT_BPS_GET_ALTITUDE_MSG0": "%1 高度を取得(meters, return float)",
    "UNIT_SCROLL_INIT_MSG0": "%1 をI2C address %2 で初期化",
    "UNIT_SCROLL_GET_ROTARY_STATUS_MSG0": "%1 は回っているか(return True or False)",
    "UNIT_SCROLL_GET_ROTARY_VALUE_MSG0": "%1 ロータリー値を取得(return int)",
    "UNIT_SCROLL_GET_BUTTON_STATUS_MSG0": "%1 ボタンの状態を取得(return True or False)",
    "UNIT_SCROLL_FILL_COLOR_MSG0": "%1 RGB LED の色を %2 に設定",
    "UNIT_SCROLL_GET_INCREMENTS_MSG0": "%1 ロータリーの増減値を取得(return int)",
    "UNIT_SCROLL_RESET_VALUE_MSG0": "%1 ロータリー値をリセット",
    "UNIT_SCROLL_SET_VALUE_MSG0": "%1 ロータリー値を %2 に設定",
    "UNIT_SCROLL_GET_FIRMWARE_VERSION_MSG0": "%1 ファームウエアバージョンを取得(return string)",
    "UNIT_SCROLL_GET_BOOTLOADER_VERSION_MSG0": "%1 ブートローダバージョンを取得(return string)",
    "UNIT_ID_INIT_MSG0": "Init %1",
    "UNIT_ID_GET_REVISION_NUMBER_MSG0": "get %1 revision number (return int)",
    "UNIT_ID_GET_SERIAL_NUMBER_MSG0": "get %1 serial number (return string)",
    "UNIT_ID_GET_RANDOM_NUMBER_INT_MSG0": "get %1 random int number min %2 max %3 (return int)",
    "UNIT_ID_GET_RANDOM_NUMBER_FLOAT_MSG0": "get %1 random float number (return 0.0 ~ 1.0)",
    "UNIT_ID_GET_RANDRANGE_MAX_MSG0": "get %1 random range max %2 (return int)",
    "UNIT_ID_GET_RANDOM_NUMBER_RANGE_MSG0": "get %1 random range min %2 max %3 step %4 (return int)",
    "UNIT_ID_GET_RANDOM_UNIFORM_MSG0": "get %1 random uniform min %2 max %3 (return float)",
    "UNIT_ID_GET_GENERATE_KEY_MSG0": "get %1 generate key slot %2 (0~4) key type %3 (return bytearray)",
    "UNIT_ID_GET_SHA256_HASH_MSG0": "get %1 SHA256 hash message %2 format %3 (return string)",
    "UNIT_ID_GET_ECDSA_SIGN_MSG0": "get %1 signature of ECDSA algorithm %2 slot (0~4) %3 message (string / list / bytearray) %4 (return bytearray)",
    "UNIT_ID_GET_VERIFY_ECDSA_SIGN_MSG0": "get %1 verify signature of ECDSA algorithm %2 message (string / list / bytearray) %3 signature (bytearray) %4 key (bytearray) %5 (return True or False)",
    "UNIT_ID_SET_CERTIFICATE_SIGNING_REQUEST_MSG0": "Set %1 certificate signing request(CSR) %2 slot (0~4) %3 key type %4 country %5 state %6 city %7 org %8 org unit %9 file %10 %11",
    "UNIT_DMX_INIT_MSG0": "Init %1 UART %2 with %3 mode",
    "UNIT_DMX_REINIT_MSG0": "Reinit %1 with %2 mode",
    "UNIT_DMX_DEINIT_MSG0": "%1 deinit",
    "UNIT_DMX_WRITE_DATA_MSG0": "%1 send %2 (0 ~ 255) to channel %3 (1 ~ 512)",
    "UNIT_DMX_READ_DATA_MSG0": "Read %1 data from channel %2 (1 ~ 512) (return int)",
    "UNIT_DMX_CLEAR_BUFFER_MSG0": "Reset %1 DMX buffer",
    "UNIT_DMX_RECEIVE_DATA_EVENT_MSG0": "When %1 channel %2 (1 ~ 512) receive data %3",
    "UNIT_DMX_START_RECEIVE_MSG0": "%1 start receive data",
    "UNIT_DMX_STOP_RECEIVE_MSG0": "%1 stop receive data",
    "UNIT_MIDI_INIT_MSG0": "Init %1 UART %2",
    "UNIT_MIDI_SET_NOTE_ON_MSG0": "%1 set note on channel %2 pitch %3 (0 ~ 127) velocity %4 (0 ~ 127)",
    "UNIT_MIDI_SET_NOTE_ON_PITCH_MSG0": "%1 set note on channel %2 pitch %3 velocity %4 (0 ~ 127)",
    "UNIT_MIDI_SET_NOTE_OFF_MSG0": "%1 set note off channel %2 pitch %3 (0 ~ 127)",
    "UNIT_MIDI_SET_CHANGE_INSTRUMENT_MSG0": "%1 set instrument bank %2 channel %3 program %4 (1 ~ 128)",
    "UNIT_MIDI_SET_INSTRUMENT_GENERAL_MIDI_MSG0": "%1 set general instrument channel %2 name %3",
    "UNIT_MIDI_SET_INSTRUMENT_VARIATION_MSG0": "%1 set MT-32 instrument channel %2 name %3",
    "UNIT_MIDI_SET_DRUMS_INSTRUMENT_MSG0": "%1 set drums instrument name %2 velocity %3 (0 ~ 127)",
    "UNIT_MIDI_SET_PITCH_BEND_MSG0": "%1 set pitch bend channel %2 value %3 (0 ~ 1023)",
    "UNIT_MIDI_SET_PITCH_BEND_RANGE_MSG0": "%1 set pitch bend range channel %2 value %3 (0 ~ 255)",
    "UNIT_MIDI_MIDI_RESET_MSG0": "%1 reset",
    "UNIT_MIDI_SET_CHANNEL_VOLUME_MSG0": "%1 set channel %2 volume %3 (0 ~ 127)",
    "UNIT_MIDI_SET_ALL_NOTES_OFF_MSG0": "%1 set all notes off channel %2",
    "UNIT_MIDI_SET_MASTER_VOLUME_MSG0": "%1 set master volume %2 (0 ~ 127)",
    "UNIT_MIDI_SET_ALL_DRUMS_MSG0": "%1 set all channels drums",
    "UNIT_MIDI_SET_REVERB_MSG0": "%1 set reverb %2 channel %3 program %4 level (0 ~ 127) %5 delay feedback (0 ~ 255) %6",
    "UNIT_MIDI_SET_CHORUS_MSG0": "%1 set chorus %2 channel %3 program %4 level (0 ~ 127) %5 feedback (0 ~ 255) %6 chorus delay (0 ~ 255) %7",
    "UNIT_MIDI_SET_PAN_MSG0": "%1 set pan channel %2 value %3 (0 ~ 127)",
    "UNIT_MIDI_SET_EQUALIZER_MSG0": "set equalizer",
    "UNIT_MIDI_SET_EQUALIZER_MSG1": "channel",
    "UNIT_MIDI_SET_EQUALIZER_MSG2": "band (0 ~ 127)",
    "UNIT_MIDI_SET_EQUALIZER_MSG3": "low band",
    "UNIT_MIDI_SET_EQUALIZER_MSG4": "medium low band",
    "UNIT_MIDI_SET_EQUALIZER_MSG5": "medium high band",
    "UNIT_MIDI_SET_EQUALIZER_MSG6": "high band",
    "UNIT_MIDI_SET_EQUALIZER_MSG7": "freq (0 ~ 127)",
    "UNIT_MIDI_SET_EQUALIZER_MSG8": "low freq",
    "UNIT_MIDI_SET_EQUALIZER_MSG9": "medium low freq",
    "UNIT_MIDI_SET_EQUALIZER_MSG10": "medium high freq",
    "UNIT_MIDI_SET_EQUALIZER_MSG11": "high freq",
    "UNIT_MIDI_SET_TUNING_MSG0": "%1 set tuning %2 channel %3 fine tuning (0 ~ 127) %4 coarse tuning (0 ~ 127) %5",
    "UNIT_MIDI_SET_VIBRATE_MSG0": "%1 set vibrate %2 channel %3 rate (0 ~ 127) %4 depth (0 ~ 127) %5 delay (0 ~ 127) %6",
    "UNIT_MIDI_SET_TVF_MSG0": "%1 set TVF %2 channel %3 cutoff freq (0 ~ 127) %4 resonance (0 ~ 127) %5",
    "UNIT_MIDI_SET_ENVELOPE_MSG0": "set envelope time",
    "UNIT_MIDI_SET_ENVELOPE_MSG1": "channel",
    "UNIT_MIDI_SET_ENVELOPE_MSG2": "attack (0 ~ 127)",
    "UNIT_MIDI_SET_ENVELOPE_MSG3": "decay (0 ~ 127)",
    "UNIT_MIDI_SET_ENVELOPE_MSG4": "release (0 ~ 127)",
    "UNIT_MIDI_SET_SCALE_TUNING_MSG0": "set scale tuning",
    "UNIT_MIDI_SET_SCALE_TUNING_MSG1": "channel",
    "UNIT_MIDI_SET_MOD_WHEEL_MSG0": "set modulation wheel",
    "UNIT_MIDI_SET_MOD_WHEEL_MSG1": "channel",
    "UNIT_MIDI_SET_MOD_WHEEL_MSG2": "pitch (0 ~ 127)",
    "UNIT_MIDI_SET_MOD_WHEEL_MSG3": "TVT cutoff (0 ~ 127)",
    "UNIT_MIDI_SET_MOD_WHEEL_MSG4": "amplitude (0 ~ 127)",
    "UNIT_MIDI_SET_MOD_WHEEL_MSG5": "rate (0 ~ 127)",
    "UNIT_MIDI_SET_MOD_WHEEL_MSG6": "pitch depth (0 ~ 127)",
    "UNIT_MIDI_SET_MOD_WHEEL_MSG7": "TVF depth (0 ~ 127)",
    "UNIT_MIDI_SET_MOD_WHEEL_MSG8": "TVA depth (0 ~ 127)",
    "UNIT_ROLLER485_INIT_MSG0": "Init %1 with mode %2",
    "UNIT_ROLLER485_INIT_MSG1": "I2C address (0x08 ~ 0x77)",
    "UNIT_ROLLER485_INIT_MSG3": "motor ID (0x00 ~ 0xFF)",
    "UNIT_ROLLER485_INIT_MSG4": "UART obj",
    "UNIT_ROLLER485_GET_MOTOR_STATUS_MSG0": "get %1 motor status (return int)",
    "UNIT_ROLLER485_GET_MOTOR_OUTPUT_STATUS_MSG0": "get %1 motor output status (return True or False)",
    "UNIT_ROLLER485_GET_MOTOR_JAM_PROTECT_STATE_MSG0": "get %1 motor jam protect state (return True or False)",
    "UNIT_ROLLER485_GET_MOTOR_MODE_MSG0": "get %1 motor current mode (return int)",
    "UNIT_ROLLER485_GET_MOTOR_ERROR_CODE_MSG0": "get %1 motor error code (return int)",
    "UNIT_ROLLER485_GET_MOTOR_ID_MSG0": "get %1 motor 485 id (return int)",
    "UNIT_ROLLER485_GET_485_BAUDRATE_MSG0": "get %1 motor 485 baudrate (return int)",
    "UNIT_ROLLER485_GET_RGB_MODE_MSG0": "get %1 RGB mode (return int)",
    "UNIT_ROLLER485_GET_RGB_COLOR_MSG0": "get %1 RGB color (return tuple)",
    "UNIT_ROLLER485_GET_RGB_BRIGHTNESS_MSG0": "get %1 RGB LED brightness (return 0 ~ 100)",
    "UNIT_ROLLER485_GET_VIN_VALUE_MSG0": "get %1 input voltage (mV, return int)",
    "UNIT_ROLLER485_GET_TEMPERATURE_VALUE_MSG0": "get %1 temperature (°C, return int)",
    "UNIT_ROLLER485_SET_MOTOR_OUTPUT_STATE_MSG0": "Set %1 motor output status to %2",
    "UNIT_ROLLER485_SET_MOTOR_MODE_MSG0": "Set %1 motor mode to %2",
    "UNIT_ROLLER485_SET_MOTOR_OVER_RANGE_PROTECT_MSG0": "Set %1 motor over range protection to %2",
    "UNIT_ROLLER485_SET_BUTTON_CHANGE_MODE_MSG0": "Set %1 motor mode change via button to %2",
    "UNIT_ROLLER485_SET_REMOVE_PROTECT_MSG0": "Temporary remove %1 motor jam protect state",
    "UNIT_ROLLER485_SET_MOTOR_STALL_PROTECT_MSG0": "Set %1 motor jam protect to %2",
    "UNIT_ROLLER485_SET_MOTOR_ID_MSG0": "Set %1 motor 485 id to %2",
    "UNIT_ROLLER485_SET_485_BAUDRATE_MSG0": "Set %1 motor 485 baudrate to %2",
    "UNIT_ROLLER485_SET_RGB_MODE_MSG0": "Set %1 RGB mode to %2",
    "UNIT_ROLLER485_SET_RGB_COLOR_MSG0": "Set %1 RGB color to %2",
    "UNIT_ROLLER485_SET_RGB_BRIGHTNESS_MSG0": "Set %1 RGB LED brightness to %2 (0 ~ 100)",
    "UNIT_ROLLER485_SET_DATA_SAVE_IN_FLASH_MSG0": "Set %1 current setting save in flash",
    "UNIT_ROLLER485_GET_MOTOR_SPEED_READBACK_MSG0": "get %1 motor current speed(rpm) readback value(return float)",
    "UNIT_ROLLER485_GET_MOTOR_SPEED_PID_MSG0": "get %1 motor speed pid(return tuple)",
    "UNIT_ROLLER485_SET_MOTOR_SPEED_MSG0": "Set %1 motor speed %2 rpm",
    "UNIT_ROLLER485_SET_SPEED_MAX_CURRENT_MSG0": "Set %1 max current to %2 (mA) in speed mode",
    "UNIT_ROLLER485_SET_MOTOR_SPEED_PID_MSG0": "Set %1 motor speed P %2 I %3 D %4",
    "UNIT_ROLLER485_GET_MOTOR_POSITION_READBACK_MSG0": "get %1 motor current position readback value (return float)",
    "UNIT_ROLLER485_GET_MOTOR_POSITION_PID_MSG0": "get %1 motor position pid (return tuple)",
    "UNIT_ROLLER485_SET_MOTOR_POSITION_MSG0": "Set %1 motor position %2 count",
    "UNIT_ROLLER485_SET_POSITION_MAX_CURRENT_MSG0": "Set %1 max current to %2 in position mode",
    "UNIT_ROLLER485_SET_MOTOR_POSITION_PID_MSG0": "Set %1 motor position P %2 I %3 D %4",
    "UNIT_ROLLER485_GET_MOTOR_CURRENT_READBACK_MSG0": "get %1 motor current readback value (return float)",
    "UNIT_ROLLER485_SET_MOTOR_MAX_CURRENT_MSG0": "Set %1 motor max current to %2 mA",
    "UNIT_ROLLER485_GET_ENCODER_VALUE_MSG0": "get %1 motor encoder count value (return float)",
    "UNIT_ROLLER485_SET_ENCODER_VALUE_MSG0": "Set %1 motor encoder count to %2",
    "UNIT_ROLLER485_GET_MOTOR_SPEED_SETTING_MSG0": "get %1 motor speed(rpm) (return int)",
    "UNIT_ROLLER485_GET_MOTOR_SPEED_MAX_CURRENT_MSG0": "get %1 max current in speed mode (mA, return int)",
    "UNIT_ROLLER485_GET_MOTOR_POSITION_SETTING_MSG0": "get %1 motor position (return int)",
    "UNIT_ROLLER485_GET_MOTOR_POSITION_MAX_CURRENT_MSG0": "get %1 max current in position mode (mA, return int)",
    "UNIT_ROLLER485_GET_MOTOR_MAX_CURRENT_MSG0": "get %1 motor max current setting value (mA, return float)",
    "UNIT_ROLLER485_GET_FIRMWARE_VERSION_MSG0": "get %1 firmware version (return int)",
    "UNIT_ROLLER485_GET_I2C_ADDRESS_MSG0": "get %1 I2C Address (return int)",
    "UNIT_ROLLER485_SET_I2C_ADDRESS_MSG0": "Set %1 I2C address %2 (0x08 ~ 0x77)",
    "UNIT_ROLLER485_GET_MOTOR_OVER_RANGE_PROTECT_STATE_MSG0": "get %1 motor over range protect setting (return True or False)",
    "UNIT_ROLLER485_GET_BUTTON_CHANGE_MODE_MSG0": "get %1 button switching mode status (return True or False)",
    "UNIT_ROLLERCAN_INIT_MSG0": "Init %1 with mode %2",
    "UNIT_ROLLERCAN_INIT_MSG1": "I2C address (0x08 ~ 0x77)",
    "UNIT_ROLLERCAN_INIT_MSG3": "motor ID (0x00 ~ 0xFF)",
    "UNIT_ROLLERCAN_INIT_MSG4": "CAN obj",
    "UNIT_ROLLERCAN_GET_MOTOR_STATUS_MSG0": "get %1 motor status (return int)",
    "UNIT_ROLLERCAN_GET_MOTOR_OUTPUT_STATUS_MSG0": "get %1 motor output status (return True or False)",
    "UNIT_ROLLERCAN_GET_MOTOR_JAM_PROTECT_STATE_MSG0": "get %1 motor jam protect state (return True or False)",
    "UNIT_ROLLERCAN_GET_MOTOR_MODE_MSG0": "get %1 motor current mode (return int)",
    "UNIT_ROLLERCAN_GET_MOTOR_ERROR_CODE_MSG0": "get %1 motor error code (return int)",
    "UNIT_ROLLERCAN_GET_MOTOR_ID_MSG0": "get %1 motor CAN id (return int)",
    "UNIT_ROLLERCAN_GET_CAN_BAUDRATE_MSG0": "get %1 motor CAN baudrate (return int)",
    "UNIT_ROLLERCAN_GET_RGB_MODE_MSG0": "get %1 RGB mode (return int)",
    "UNIT_ROLLERCAN_GET_RGB_COLOR_MSG0": "get %1 RGB color (return tuple)",
    "UNIT_ROLLERCAN_GET_RGB_BRIGHTNESS_MSG0": "get %1 RGB LED brightness (return 0 ~ 100)",
    "UNIT_ROLLERCAN_GET_VIN_VALUE_MSG0": "get %1 input voltage (mV, return int)",
    "UNIT_ROLLERCAN_GET_TEMPERATURE_VALUE_MSG0": "get %1 temperature (°C, return int)",
    "UNIT_ROLLERCAN_SET_MOTOR_OUTPUT_STATE_MSG0": "Set %1 motor output status to %2",
    "UNIT_ROLLERCAN_SET_MOTOR_MODE_MSG0": "Set %1 motor mode to %2",
    "UNIT_ROLLERCAN_SET_MOTOR_OVER_RANGE_PROTECT_MSG0": "Set %1 motor over range protection to %2",
    "UNIT_ROLLERCAN_SET_BUTTON_CHANGE_MODE_MSG0": "Set %1 motor mode change via button to %2",
    "UNIT_ROLLERCAN_SET_REMOVE_PROTECT_MSG0": "Temporary remove %1 motor jam protect state",
    "UNIT_ROLLERCAN_SET_MOTOR_STALL_PROTECT_MSG0": "Set %1 motor jam protect to %2",
    "UNIT_ROLLERCAN_SET_MOTOR_ID_MSG0": "Set %1 motor CAN id to %2",
    "UNIT_ROLLERCAN_SET_CAN_BAUDRATE_MSG0": "Set %1 motor CAN baudrate to %2",
    "UNIT_ROLLERCAN_SET_RGB_MODE_MSG0": "Set %1 RGB mode to %2",
    "UNIT_ROLLERCAN_SET_RGB_COLOR_MSG0": "Set %1 RGB color to %2",
    "UNIT_ROLLERCAN_SET_RGB_BRIGHTNESS_MSG0": "Set %1 RGB LED brightness to %2 (0 ~ 100)",
    "UNIT_ROLLERCAN_SET_DATA_SAVE_IN_FLASH_MSG0": "Set %1 current setting save in flash",
    "UNIT_ROLLERCAN_GET_MOTOR_SPEED_READBACK_MSG0": "get %1 motor current speed(rpm) readback value(return float)",
    "UNIT_ROLLERCAN_GET_MOTOR_SPEED_PID_MSG0": "get %1 motor speed pid(return tuple)",
    "UNIT_ROLLERCAN_SET_MOTOR_SPEED_MSG0": "Set %1 motor speed %2 rpm",
    "UNIT_ROLLERCAN_SET_SPEED_MAX_CURRENT_MSG0": "Set %1 max current to %2 (mA) in speed mode",
    "UNIT_ROLLERCAN_SET_MOTOR_SPEED_PID_MSG0": "Set %1 motor speed P %2 I %3 D %4",
    "UNIT_ROLLERCAN_GET_MOTOR_POSITION_READBACK_MSG0": "get %1 motor current position readback value (return float)",
    "UNIT_ROLLERCAN_GET_MOTOR_POSITION_PID_MSG0": "get %1 motor position pid (return tuple)",
    "UNIT_ROLLERCAN_SET_MOTOR_POSITION_MSG0": "Set %1 motor position %2 count",
    "UNIT_ROLLERCAN_SET_POSITION_MAX_CURRENT_MSG0": "Set %1 max current to %2 in position mode",
    "UNIT_ROLLERCAN_SET_MOTOR_POSITION_PID_MSG0": "Set %1 motor position P %2 I %3 D %4",
    "UNIT_ROLLERCAN_GET_MOTOR_CURRENT_READBACK_MSG0": "get %1 motor current readback value (return float)",
    "UNIT_ROLLERCAN_SET_MOTOR_MAX_CURRENT_MSG0": "Set %1 motor max current to %2 mA",
    "UNIT_ROLLERCAN_GET_ENCODER_VALUE_MSG0": "get %1 motor encoder count value (return float)",
    "UNIT_ROLLERCAN_SET_ENCODER_VALUE_MSG0": "Set %1 motor encoder count to %2",
    "UNIT_ROLLERCAN_GET_MOTOR_SPEED_SETTING_MSG0": "get %1 motor speed(rpm) (return int)",
    "UNIT_ROLLERCAN_GET_MOTOR_SPEED_MAX_CURRENT_MSG0": "get %1 max current in speed mode (mA, return int)",
    "UNIT_ROLLERCAN_GET_MOTOR_POSITION_SETTING_MSG0": "get %1 motor position (return int)",
    "UNIT_ROLLERCAN_GET_MOTOR_POSITION_MAX_CURRENT_MSG0": "get %1 max current in position mode (mA, return int)",
    "UNIT_ROLLERCAN_GET_MOTOR_MAX_CURRENT_MSG0": "get %1 motor max current setting value (mA, return float)",
    "UNIT_ROLLERCAN_GET_FIRMWARE_VERSION_MSG0": "get %1 firmware version (return int)",
    "UNIT_ROLLERCAN_GET_I2C_ADDRESS_MSG0": "get %1 I2C Address (return int)",
    "UNIT_ROLLERCAN_SET_I2C_ADDRESS_MSG0": "Set %1 I2C address %2 (0x08 ~ 0x77)",
    "UNIT_ROLLERCAN_GET_MOTOR_OVER_RANGE_PROTECT_STATE_MSG0": "get %1 motor over range protect setting (return True or False)",
    "UNIT_ROLLERCAN_GET_BUTTON_CHANGE_MODE_MSG0": "get %1 button switching mode status (return True or False)",
    "UNIT_UHFRFID_INIT_MSG0": "Init %1 UART %2",
    "UNIT_UHFRFID_SLEEP_MSG0": "%1 module sleep",
    "UNIT_UHFRFID_WAKE_MSG0": "%1 module wake",
    "UNIT_UHFRFID_GET_CHANNEL_RSSI_MSG0": "get %1 rssi from channel %2 (0 ~ 19) (return int)",
    "UNIT_UHFRFID_GET_BLOCKING_SIGNAL_STRENGTH_MSG0": "get %1 blocking signal strength from channel %2 (0 ~ 19) (return int)",
    "UNIT_UHFRFID_GET_FIRMWARE_VERSION_MSG0": "get %1 firmware version (return string)",
    "UNIT_UHFRFID_GET_HARDWARE_VERSION_MSG0": "get %1 hardware version (return string)",
    "UNIT_UHFRFID_GET_MANUFACTURER_ID_MSG0": "get %1 manufacturer id (return string)",
    "UNIT_UHFRFID_GET_WORKING_REGION_MSG0": "get %1 working region (return int)",
    "UNIT_UHFRFID_GET_WORKING_CHANNEL_MSG0": "get %1 working channel (return 0 ~ 19)",
    "UNIT_UHFRFID_INVENTORY_MSG0": "get %1 inventory (hexadecimal, return string)",
    "UNIT_UHFRFID_CLEAR_WORKING_CHANNEL_MSG0": "%1 clear working channel",
    "UNIT_UHFRFID_SET_WORKING_REGION_MSG0": "Set %1 working region %2",
    "UNIT_UHFRFID_SET_WORKING_CHANNEL_MSG0": "Set %1 working channel %2 (0 ~ 19)",
    "UNIT_UHFRFID_INSERT_WORKING_CHANNEL_MSG0": "Insert %1 working channel %2 (0 ~ 19)",
    "UNIT_UHFRFID_SET_AUTOMATIC_HOPPING_MSG0": "Set %1 automatic hopping %2",
    "UNIT_UHFRFID_GET_DEMODULATOR_MIXER_MSG0": "get %1 demodulator mixer (return int)",
    "UNIT_UHFRFID_GET_DEMODULATOR_AMPLIFIER_MSG0": "get %1 demodulator amplifier (return int)",
    "UNIT_UHFRFID_GET_DEMODULATOR_THRESHOLD_MSG0": "get %1 demodulator threshold (return int)",
    "UNIT_UHFRFID_SET_DEMODULATOR_MIXER_MSG0": "Set %1 demodulator mixer gain %2",
    "UNIT_UHFRFID_SET_DEMODULATOR_AMPLIFIER_MSG0": "Set %1 demodulator amplifier gain %2",
    "UNIT_UHFRFID_SET_DEMODULATOR_THRESHOLD_MSG0": "Set %1 demodulator threshold %2 (0x01B0 ~ 0xFFFF)",
    "UNIT_UHFRFID_GET_TX_POWER_MSG0": "get %1 TX power (db, return int)",
    "UNIT_UHFRFID_SET_TX_POWER_MSG0": "Set %1 TX power %2 dBm (-7 ~ 26)",
    "UNIT_UHFRFID_SET_CONTINUOUS_WAVE_MSG0": "Set %1 continuous wave %2",
    "UNIT_UHFRFID_SET_ACCESS_PASSWORD_MSG0": "Set %1 access password %2 old password (hexadecimal) %3 new password (hexadecimal) %4",
    "UNIT_UHFRFID_SET_KILL_PASSWORD_MSG0": "Set %1 kill password to %2 (hexadecimal)",
    "UNIT_UHFRFID_KILL_MSG0": "Set %1 kill tag with access password %2 (hexadecimal)",
    "UNIT_UHFRFID_GET_IMPINJ_MONZA_QT_SR_MSG0": "get %1 Impinj Monza QT_SR with %2 persistence %3 access password (hexadecimal) %4 (return True or False)",
    "UNIT_UHFRFID_GET_IMPINJ_MONZA_QT_MEM_MSG0": "get %1 Impinj Monza QT_MEM with %2 persistence %3 access password (hexadecimal) %4 (return True or False)",
    "UNIT_UHFRFID_SET_IMPINJ_MONZA_QT_SR_MSG0": "Set %1 Impinj Monza QT_SR with %2 %3 %4 persistence %5 access password (hexadecimal) %6",
    "UNIT_UHFRFID_SET_IMPINJ_MONZA_QT_MEM_MSG0": "Set %1 Impinj Monza QT_MEM with %2 %3 %4 persistence %5 access password (hexadecimal) %6",
    "UNIT_UHFRFID_SET_QUERY_PARAM_MSG0": "Set %1 query command parameter with %2 DR %3 M %4 TRext %5 Sel %6 Session %7 Target %8 Q (0~8) %9",
    "UNIT_UHFRFID_LOCK_MEM_BANK_MSG0": "Set %1 kill password %2 access password %3 EPC %4 TID %5 USER %6 with access password (hexadecimal) %7",
    "UNIT_UHFRFID_SET_SELECT_MODE_MSG0": "Set %1 select mode to %2",
    "UNIT_UHFRFID_SELECT_MSG0": "%1 select Tag Target %2 Action %3 MemBank %4 Pointer (memory bit address) %5 Truncate %6 Mask %7",
    "UNIT_UHFRFID_SELECT_HEX_MSG0": "%1 select Tag Target %2 Action %3 MemBank %4 Pointer (memory bit address) %5 Truncate %6 Mask (hexadecimal) %7",
    "UNIT_UHFRFID_READ_MEM_BANK_MSG0": "%1 read MemBank %2 Pointer (memory bit address) %3 length %4 access password (hexadecimal) %5 (hexadecimal, return string)",
    "UNIT_UHFRFID_WRITE_MEM_BANK_MSG0": "%1 write MemBank %2 Pointer (memory bit address) %3 data (bytes) %4 access password (hexadecimal) %5",
    "UNIT_UHFRFID_WRITE_MEM_BANK_HEX_MSG0": "%1 write MemBank %2 Pointer (memory bit address) %3 data (hexadecimal) %4 access password (hexadecimal) %5",
    "UNIT_UHFRFID_GET_NXP_EAS_ALARM_MSG0": "get %1 NXP EAS-Alarm code (hexadecimal, return string)",
    "UNIT_UHFRFID_GET_NXP_CONFIG_WORD_MSG0": "get %1 NXP Config-Word with access password (hexadecimal) %2 (return int)",
    "UNIT_UHFRFID_SET_AUTOMATIC_SLEEP_TIME_MSG0": "Set %1 automatic sleep time %2 (1~30) minutes",
    "UNIT_UHFRFID_DISABLE_AUTOMATIC_SLEEP_MSG0": "%1 disable automatic sleep",
    "UNIT_UHFRFID_SET_NXP_CONFIG_WORD_MSG0": "Set %1 NXP Config-Word to %2 with access password (hexadecimal) %3",
    "UNIT_UHFRFID_NXP_READ_PROTECT_MSG0": "Set %1 NXP read protect with access password (hexadecimal) %2",
    "UNIT_UHFRFID_RESET_NXP_READ_PROTECT_MSG0": "Reset %1 NXP read protect with access password (hexadecimal) %2",
    "UNIT_UHFRFID_NXP_CHANGE_EAS_MSG0": "Set %1 NXP change EAS with access password (hexadecimal) %2",
    "UNIT_UHFRFID_RESET_NXP_CHANGE_EAS_MSG0": "Reset %1 NXP change EAS with access password (hexadecimal) %2",
    "UNIT_TIMERPWR_INIT_MSG0": "Init %1 I2C address %2",
    "UNIT_TIMERPWR_GET_FIRMWARE_VERSION_MSG0": "get %1 firmware version (return int)",
    "UNIT_TIMERPWR_GET_BATTERY_VOLTAGE_MSG0": "get %1 battery voltage in millivolt (return int)",
    "UNIT_TIMERPWR_GET_BATTERY_CURRENT_MSG0": "get %1 battery current in milliamperes (return int)",
    "UNIT_TIMERPWR_GET_USB_VOLTAGE_MSG0": "get %1 usb voltage in millivolt (return int)",
    "UNIT_TIMERPWR_GET_USB_CURRENT_MSG0": "get %1 usb current in milliamperes (return int)",
    "UNIT_TIMERPWR_GET_GROVE_VOLTAGE_MSG0": "get %1 grove voltage in millivolt (return int)",
    "UNIT_TIMERPWR_GET_GROVE_CURRENT_MSG0": "get %1 grove current in milliamperes (return int)",
    "UNIT_TIMERPWR_IS_CHARGING_MSG0": "%1 is battery charging (return True or False)",
    "UNIT_TIMERPWR_GET_BUTTON_STATUS_MSG0": "get %1 button %2 status (return True or False)",
    "UNIT_TIMERPWR_SAVE_DATA_TO_FLASH_MSG0": "Save %1 data to flash",
    "UNIT_TIMERPWR_GET_GROVE_OUTPUT_STATUS_MSG0": "get %1 grove output status (return True or False)",
    "UNIT_TIMERPWR_SET_GROVE_OUTPUT_STATUS_MSG0": "Set %1 grove output %2",
    "UNIT_TIMERPWR_GET_OLED_BACKLIGHT_STATUS_MSG0": "get %1 grove oled backlight status (return True or False)",
    "UNIT_TIMERPWR_SET_OLED_BACKLIGHT_STATUS_MSG0": "Set %1 oled backlight %2",
    "UNIT_TIMERPWR_SET_WAKEUP_TRIGGER_MSG0": "Set %1 wake-up trigger %2",
    "UNIT_TIMERPWR_SET_SLEEP_TRIGGER_MSG0": "Set %1 sleep trigger %2",
    "UNIT_TIMERPWR_SLEEP_ONCE_MSG0": "Set %1 %2 sleep once after %3 wake up in %4",
    "UNIT_TIMERPWR_SLEEP_CYCLE_MSG0": "Set %1 %2 sleep cycle after %3 wake up in %4",
    "UNIT_TIMERPWR_TIME_INPUT_MSG0": "hours (0 ~ 255)",
    "UNIT_TIMERPWR_TIME_INPUT_MSG1": "minutes (0 ~ 59)",
    "UNIT_TIMERPWR_TIME_INPUT_MSG2": "seconds (0 ~ 59)",
    "UNIT_TIMERPWR_USB_CALLBACK_MSG0": "When %1 was USB %2",
    "UNIT_TIMERPWR_CHARGING_CALLBACK_MSG0": "When %1 %2",
    "UNIT_TIMERPWR_BUTTON_CALLBACK_MSG0": "When %1 button %2 was %3",
    "UNIT_TIMERPWR_TICK_MSG0": "%1 check event in loop",
    "UNIT_PUZZLE_INIT_MSG0": "Init %1 nodes quantity is %2 (1 ~ 100)",
    "UNIT_PUZZLE_SET_COLOR_MSG0": "Set %1 RGB with %2 node (1 ~ 100) %3 index (1 ~ 64) %4 color %5",
    "UNIT_PUZZLE_FILL_COLOR_MSG0": "Fill %1 with RGB color %2",
    "UNIT_PUZZLE_SET_BRIGHTNESS_MSG0": "Set %1 brightness to %2 (0 ~ 100)",
    "UNIT_PUZZLE_SET_COLOR_FROM_MSG0": "Fill %1 with %2 node (1 ~ 100) %3 index (1 ~ 64) %4 RGB color %5 delay (ms) %6",
    "UNIT_PUZZLE_SET_COLOR_RUNNING_FROM_MSG0": "Set %1 running RGB with %2 node (1 ~ 100) %3 index (1 ~ 64) %4 color %5 delay (ms) %6",
    "UNIT_PUZZLE_SET_COLOR_SATURATION_FROM_MSG0": "Set %1 saturation RGB with %2 node (1 ~ 100) %3 index (1 ~ 64) %4 color %5 delay (ms) %6",
    "UNIT_PUZZLE_SET_RANDOM_COLOR_MSG0": "Set %1 random RGB color with %2 node (1 ~ 100) %3 index (1 ~ 64) %4",
    "UNIT_PUZZLE_SET_MATRIX_MSG0": "Set %1 pattern with %2 node (1 ~ 100) %3",
    "UNIT_PUZZLE_SET_MATRIX_MSG1": "RGB color",
    "UNIT_PUZZLE_INDEX_FROM_TO_MSG0": "from",
    "UNIT_PUZZLE_INDEX_FROM_TO_MSG1": "to",
    "UNIT_BYTEBUTTON_INIT_MSG0": "%1 I2Cアドレス %2 (0x08 ~ 0x77)で初期化",
    "UNIT_BYTEBUTTON_GET_BYTE_BUTTON_STATUS_MSG0": "%1 全てのボタンの状態を取得(return int)",
    "UNIT_BYTEBUTTON_GET_BUTTON_STATE_MSG0": "%1 %2 キーの状態を取得(return True or False)",
    "UNIT_BYTEBUTTON_GET_LED_SHOW_MODE_MSG0": "%1 LEDの表示モードを取得",
    "UNIT_BYTEBUTTON_SET_LED_SHOW_MODE_MSG0": "%1 LEDの表示モードを %2 に設定",
    "UNIT_BYTEBUTTON_SET_LED_BRIGHTNESS_MSG0": "%1 %2 番目のLEDの輝度を %3 (0 ~ 255)に設定",
    "UNIT_BYTEBUTTON_GET_LED_BRIGHTNESS_MSG0": "%1 %2 番目のLEDの輝度を取得(return 0 ~ 255)",
    "UNIT_BYTEBUTTON_GET_FIRMWARE_VERSION_MSG0": "%1 ファームウエアバージョンを取得",
    "UNIT_BYTEBUTTON_GET_I2C_ADDRESS_MSG0": "%1 I2Cアドレスを取得",
    "UNIT_BYTEBUTTON_SET_I2C_ADDRESS_MSG0": "%1 I2Cアドレスを %2 (0x08 ~ 0x77)に設定",
    "UNIT_BYTEBUTTON_SAVE_TO_FLASH_MSG0": "%1 ユーザー設定をフラッシュに保存",
    "UNIT_BYTEBUTTON_GET_INDICATOR_COLOR_MSG0": "%1 インジケーターLEDの色を取得(return RGB888)",
    "UNIT_BYTEBUTTON_SET_INDICATOR_COLOR_MSG0": "%1 インジケーターLEDの色を %2 に設定",
    "UNIT_BYTEBUTTON_GET_INDICATOR_BRIGHTNESS_MSG0": "%1 インジケーターLEDの輝度を取得(return 0 ~ 255)",
    "UNIT_BYTEBUTTON_SET_INDICATOR_BRIGHTNESS_MSG0": "%1 インジケーターLEDの輝度を %2 (0 ~ 255)に設定",
    "UNIT_BYTEBUTTON_GET_USER_MODE_LED_COLOR_MSG0": "%1 %2 番目のLEDの色をユーザーモードで取得",
    "UNIT_BYTEBUTTON_GET_SYS_MODE_LED_COLOR_MSG0": "%1 %2 番目のLEDの色をそれが %3 の時にシステムモードで取得",
    "UNIT_BYTEBUTTON_SET_USER_MODE_LED_COLOR_MSG0": "%1 %2 番目のLEDの色を %3 にユーザーモードで設定",
    "UNIT_BYTEBUTTON_SET_SYS_MODE_LED_COLOR_MSG0": "%1 %2 番目のLEDの色を %3 にそれが %4 の時にシステムモードで設定",
    "UNIT_BYTESWITCH_INIT_MSG0": "%1 I2Cアドレス %2 (0x08 ~ 0x77)で初期化",
    "UNIT_BYTESWITCH_GET_BYTE_SWITCH_STATUS_MSG0": "%1 全てのボタンの状態を取得(return int)",
    "UNIT_BYTESWITCH_GET_SWITCH_STATE_MSG0": "%1 %2 キーの状態を取得(return True or False)",
    "UNIT_BYTESWITCH_GET_LED_SHOW_MODE_MSG0": "%1 LEDの表示モードを取得",
    "UNIT_BYTESWITCH_SET_LED_SHOW_MODE_MSG0": "%1 LEDの表示モードを %2 に設定",
    "UNIT_BYTESWITCH_SET_LED_BRIGHTNESS_MSG0": "%1 %2 番目のLEDの輝度を %3 (0 ~ 255)に設定",
    "UNIT_BYTESWITCH_GET_LED_BRIGHTNESS_MSG0": "%1 %2 番目のLEDの輝度を取得(return 0 ~ 255)",
    "UNIT_BYTESWITCH_GET_FIRMWARE_VERSION_MSG0": "%1 ファームウエアバージョンを取得",
    "UNIT_BYTESWITCH_GET_I2C_ADDRESS_MSG0": "%1 I2Cアドレスを取得",
    "UNIT_BYTESWITCH_SET_I2C_ADDRESS_MSG0": "%1 I2Cアドレスを %2 (0x08 ~ 0x77)に設定",
    "UNIT_BYTESWITCH_SAVE_TO_FLASH_MSG0": "%1 ユーザー設定をフラッシュに保存",
    "UNIT_BYTESWITCH_GET_INDICATOR_COLOR_MSG0": "%1 インジケーターLEDの色を取得(return RGB888)",
    "UNIT_BYTESWITCH_SET_INDICATOR_COLOR_MSG0": "%1 インジケーターLEDの色を %2 に設定",
    "UNIT_BYTESWITCH_GET_INDICATOR_BRIGHTNESS_MSG0": "%1 インジケーターLEDの輝度を取得(return 0 ~ 255)",
    "UNIT_BYTESWITCH_SET_INDICATOR_BRIGHTNESS_MSG0": "%1 インジケーターLEDの輝度を %2 (0 ~ 255)に設定",
    "UNIT_BYTESWITCH_GET_USER_MODE_LED_COLOR_MSG0": "%1 %2 番目のLEDの色をユーザーモードで取得",
    "UNIT_BYTESWITCH_GET_SYS_MODE_LED_COLOR_MSG0": "%1 %2 番目のLEDの色をそれが %3 の時にシステムモードで取得",
    "UNIT_BYTESWITCH_SET_USER_MODE_LED_COLOR_MSG0": "%1 %2 番目のLEDの色を %3 にユーザーモードで設定",
    "UNIT_BYTESWITCH_SET_SYS_MODE_LED_COLOR_MSG0": "%1 %2 番目のLEDの色を %3 にそれが %4 の時にシステムモードで設定",
    "UNIT_ASR_INIT_MSG0": "Init %1 UART %2",
    "UNIT_ASR_GET_CURRENT_RAW_MESSAGE_MSG0": "get %1 current raw message (return string)",
    "UNIT_ASR_GET_CURRENT_COMMAND_WORD_MSG0": "get %1 current command word (return string)",
    "UNIT_ASR_GET_CURRENT_COMMAND_NUM_MSG0": "get %1 current command num (return string)",
    "UNIT_ASR_GET_COMMAND_HANDLER_MSG0": "get %1 current command handler state (return True or False)",
    "UNIT_ASR_GET_RECEIVED_STATUS_MSG0": "get %1 status of the receive message (return True or False)",
    "UNIT_ASR_GET_COMMAND_LIST_MSG0": "get %1 current command list",
    "UNIT_ASR_SEND_MESSAGE_MSG0": "Send message to %1 with command number (hex) %2",
    "UNIT_ASR_REMOVE_COMMAND_WORD_MSG0": "Remove %1 command word %2",
    "UNIT_ASR_SEARCH_COMMAND_NUM_MSG0": "search %1 command number of the command word %2 (return int)",
    "UNIT_ASR_SEARCH_COMMAND_WORD_MSG0": "search %1 command word of the command number (hex) %2 (return string)",
    "UNIT_ASR_ADD_COMMAND_WORD_MSG0": "Add %1 command num (hex) %2 and the command word %3",
    "UNIT_ASR_EVENT_MSG0": "When %1 recognizes command word %2",
    "UNIT_PDM_INIT_MSG0": "Init %1 with I2S port %2 sample rate %3",
    "UNIT_PDM_SET_CONFIG_INT_MSG0": "%1 config %2 to %3",
    "UNIT_PDM_SET_CONFIG_BOOLEAN_MSG0": "%1 config %2 to %3",
    "UNIT_PDM_GET_CONFIG_INT_MSG0": "%1 get config %2 (return int)",
    "UNIT_PDM_GET_CONFIG_BOOLEAN_MSG0": "%1 get config %2 (return True or False)",
    "UNIT_PDM_BEGIN_MSG0": "%1 begin",
    "UNIT_PDM_END_MSG0": "%1 end",
    "UNIT_PDM_IS_RUNNING_MSG0": "%1 is running (return True or False)",
    "UNIT_PDM_IS_ENABLED_MSG0": "%1 is enabled (return True or False)",
    "UNIT_PDM_IS_RECORDING_MSG0": "%1 is recording (return int)",
    "UNIT_PDM_SET_SAMPLE_RATE_MSG0": "%1 set sampling rate %2",
    "UNIT_PDM_SET_RECORD_MSG0": "%1 record into buf %2 rate %3 stereo %4",
    "UNIT_PDM_RECORD_WAV_FILE_MSG0": "%1 record WAV file %2 %3 sample rate %4 time (second) %5 stereo %6",
    "UNIT_PDM_CONFIG_OPTION_MSG0": "pin_data_in",
    "UNIT_PDM_CONFIG_OPTION_MSG1": "pin_bck",
    "UNIT_PDM_CONFIG_OPTION_MSG2": "pin_mck",
    "UNIT_PDM_CONFIG_OPTION_MSG3": "pin_ws",
    "UNIT_PDM_CONFIG_OPTION_MSG4": "sample_rate",
    "UNIT_PDM_CONFIG_OPTION_MSG5": "over_sampling",
    "UNIT_PDM_CONFIG_OPTION_MSG6": "magnification",
    "UNIT_PDM_CONFIG_OPTION_MSG7": "noise_filter_level",
    "UNIT_PDM_CONFIG_OPTION_MSG8": "dma_buf_len",
    "UNIT_PDM_CONFIG_OPTION_MSG9": "dma_buf_count",
    "UNIT_PDM_CONFIG_OPTION_MSG10": "task_priority",
    "UNIT_PDM_CONFIG_OPTION_MSG11": "task_pinned_core",
    "UNIT_PDM_CONFIG_OPTION_MSG12": "i2s_port",
    "UNIT_PDM_CONFIG_OPTION_MSG13": "stereo",
    "UNIT_PDM_CONFIG_OPTION_MSG14": "use_adc",
    "UNIT_PDM_IS_RECORDING_MSG1": "not recording",
    "UNIT_PDM_IS_RECORDING_MSG2": "recording (There's room in the queue)",
    "UNIT_PDM_IS_RECORDING_MSG3": "recording (There's no room in the queue)",
    "UNIT_RF433R_INIT_MSG0": "Init %1",
    "UNIT_RF433R_START_RECV_MSG0": "%1 start receive data",
    "UNIT_RF433R_STOP_RECV_MSG0": "%1 stop receive data",
    "UNIT_RF433R_READ_DATA_MSG0": "%1 read data (return bytes)",
    "UNIT_RF433R_RECEIVE_DATA_EVENT_MSG0": "When %1 receive data %2",
    "UNIT_RF433T_INIT_MSG0": "Init %1",
    "UNIT_RF433T_SEND_DATA_MSG0": "%1 send data %2",
    "UNIT_GATEWAYH2_INIT_MSG0": "Init %1 and create switch endpoint",
    "UNIT_GATEWAYH2_INIT_MSG1": "UART",
    "UNIT_GATEWAYH2_EP_ON_MSG0": "Switch endpoint of %1 turns on the light for the device at address %2",
    "UNIT_GATEWAYH2_EP_ALL_ON_MSG0": "Switch endpoint of %1 turns on all the lights",
    "UNIT_GATEWAYH2_EP_OFF_MSG0": "Switch endpoint of %1 turns off the light for the device at address %2",
    "UNIT_GATEWAYH2_EP_ALL_OFF_MSG0": "Switch endpoint of %1 turns off all the lights",
    "UNIT_GATEWAYH2_EP_TOGGLE_MSG0": "Switch endpoint of %1 toggles the light for the device at address %2",
    "UNIT_GATEWAYH2_EP_ALL_TOGGLE_MSG0": "Switch endpoint of %1 toggles all the lights",
    "UNIT_GATEWAYH2_EP_EVENT_MSG0": "When switch endpoint of %1 is bound to the device at address %2",
    "UNIT_MINITOF90_INIT_MSG0": "Init %1 I2C address %2 (0x08 ~ 0x77)",
    "UNIT_MINITOF90_GET_RANGE_MSG0": "get %1 target distance (mm, return int)",
    "UNIT_MINITOF90_GET_RANGE_MSG1": "If Continuous Measurement Mode is not turned on, calling this function will immediately take a ranging measurement and return the result.",
    "UNIT_MINITOF90_GET_DATA_READY_MSG0": "get %1 data ready status (return True or False)",
    "UNIT_MINITOF90_IS_CONTINUOUS_MODE_MSG0": "get %1 continuous measurement mode status (return True or False)",
    "UNIT_MINITOF90_GET_MEASUREMENT_TIMING_BUDGET_MSG0": "get %1 measurement timing budget (us, return int)",
    "UNIT_MINITOF90_SET_MEASUREMENT_TIMING_BUDGET_MSG0": "Set %1 measurement timing budget to %2 us",
    "UNIT_MINITOF90_START_CONTINUOUS_MSG0": "%1 start continuous measurement",
    "UNIT_MINITOF90_STOP_CONTINUOUS_MSG0": "%1 stop continuous measurement",
    "UNIT_MINITOF90_SET_ADDRESS_MSG0": "Set %1 I2C address %2 (0x08 ~ 0x77)",
    "HAT_DAC2_INIT_MSG0": "Init %1 I2C address %2 (0x58 ~ 0x65)",
    "HAT_DAC2_SET_VOLTAGE_RANGE_MSG0": "Set %1 output voltage range %2",
    "HAT_DAC2_SET_VOLTAGE_MSG0": "Set %1 channel %2 output voltage %3 (V)",
    "HAT_DAC2_SET_VOLTAGE_BOTH_MSG0": "Set %1 channel0 output voltage %2 (V) channel1 output voltage %3 (V)",
    "HAT_DAC_INIT_MSG0": "Init %1",
    "HAT_DAC_GET_VALUE_MSG0": "get %1 DAC value (return int)",
    "HAT_DAC_GET_VOLTAGE_MSG0": "get %1 voltage (return float)",
    "HAT_DAC_GET_RAW_VALUE_MSG0": "get %1 raw value (return int)",
    "HAT_DAC_GET_NORMALIZED_VALUE_MSG0": "get %1 normalized value (return 0.0 ~ 1.0)",
    "HAT_DAC_SET_VALUE_MSG0": "%1 DAC value %2 (0 ~ 65535)",
    "HAT_DAC_SET_VOLTAGE_MSG0": "%1 voltage %2 (0 ~ 3.3)",
    "HAT_DAC_SET_RAW_VALUE_MSG0": "%1 raw value %2 (0 ~ 4095)",
    "HAT_DAC_SET_NORMALIZED_VALUE_MSG0": "%1 normalized value %2 (0.0 ~ 1.0)",
    "HAT_DAC_SAVE_TO_EEPROM_MSG0": "%1 save to eeprom",
    "HAT_ADC_INIT_MSG0": "Init %1",
    "HAT_ADC_GET_VALUE_MSG0": "get %1 value (return int)",
    "HAT_ADC_GET_VOLTAGE_MSG0": "get %1 voltage (return float)",
    "HAT_ADC_GET_RAW_VALUE_MSG0": "get %1 raw value (return int)",
    "HAT_ADC_GET_OPERATING_MODE_MSG0": "get %1 operating mode (return 0 or 1)",
    "HAT_ADC_GET_DATA_RATE_MSG0": "get %1 data rate (return int)",
    "HAT_ADC_GET_GAIN_MSG0": "get %1 gain (return int)",
    "HAT_ADC_SET_OPERATING_MODE_MSG0": "%1 operating mode %2",
    "HAT_ADC_SET_DATA_RATE_MSG0": "%1 data rate %2",
    "HAT_ADC_SET_GAIN_MSG0": "%1 gain %2",
    "HAT_DLIGHT_INIT_MSG0": "%1 初期化",
    "HAT_DLIGHT_GET_LUX_MSG0": "%1 LUX値(return float)",
    "HAT_DLIGHT_CONFIGURE_MSG0": "%1 モード %2 解像度 %3 に設定",
    "HAT_NCIR_INIT_MSG0": "Init %1",
    "HAT_NCIR_GET_AMBIENT_TEMPERATURE_MSG0": "get %1 ambient temperature (°C, return float)",
    "HAT_NCIR_GET_OBJECT_TEMPERATURE_MSG0": "get %1 object temperature (°C, return float)",
    "HAT_TOF_INIT_MSG0": "%1 初期化",
    "HAT_TOF_GET_DATA_STATUS_MSG0": "%1 データ取得可能状態(return True or False)",
    "HAT_TOF_GET_DISTANCE_MSG0": "%1 距離(cm, return float)",
    "HAT_TOF_GET_RANGE_MSG0": "%1 範囲(mm, return int)",
    "HAT_TOF_GET_CONTINUOUS_MODE_MSG0": "%1 連続モードか(return True or False)",
    "HAT_TOF_GET_MEASUREMENT_TIMING_BUDGET_MSG0": "%1 measurement timing budget(return int)",
    "HAT_TOF_SET_MEASUREMENT_TIMING_BUDGET_MSG0": "%1 measurement timing budgetを %2 に設定",
    "HAT_TOF_SET_ADDRESS_MSG0": "%1 アドレスを %2 に設定",
    "HAT_TOF_GET_SIGNAL_RATE_LIMIT_MSG0": "%1 signal rate limitを取得 (return float)",
    "HAT_TOF_SET_SIGNAL_RATE_LIMIT_MSG0": "%1 signal rate limit %2 MCPS (0.0 ~ 511.99)",
    "HAT_TOF_START_CONTINUOUS_MSG0": "%1 連続モードを開始",
    "HAT_TOF_STOP_CONTINUOUS_MSG0": "%1 連続モードを停止",
    "HAT_RS485_INIT_MSG0": "Init",
    "HAT_RS485_CONFIGURE_MSG0": "Configure",
    "HAT_RS485_CONFIGURE_MSG1": "UART",
    "HAT_RS485_CONFIGURE_MSG2": "baudrate",
    "HAT_RS485_CONFIGURE_MSG3": "data bits",
    "HAT_RS485_CONFIGURE_MSG4": "stop bits",
    "HAT_RS485_CONFIGURE_MSG5": "parity",
    "HAT_RS485_CONFIGURE_MSG6": "TX pin",
    "HAT_RS485_CONFIGURE_MSG7": "RX pin",
    "HAT_RS485_CONFIGURE_MSG8": "ctrl pin",
    "HAT_RS485_READ_ALL_BYTES_MSG0": "read all bytes (return bytes)",
    "HAT_RS485_READ_BYTES_MSG0": "read",
    "HAT_RS485_READ_BYTES_MSG1": "bytes (return bytes)",
    "HAT_RS485_READ_LINE_MSG0": "read line (return bytes)",
    "HAT_RS485_REMAIN_CACHE_MSG0": "number of bytes available",
    "HAT_RS485_WRITE_MSG0": "write",
    "HAT_RS485_WRITE_LINE_MSG0": "write a line",
    "HAT_RS485_WRITE_LIST_BYTES_MSG0": "write list of bytes",
    "HAT_RS485_READ_COILS_MSG0": "read coils",
    "HAT_RS485_READ_COILS_MSG1": "slave address (0 ~ 247)",
    "HAT_RS485_READ_COILS_MSG2": "starting address (0 ~ 9999)",
    "HAT_RS485_READ_COILS_MSG3": "coil quantity",
    "HAT_RS485_READ_COILS_MSG4": "timeout",
    "HAT_RS485_READ_COILS_MSG5": "(return list)",
    "HAT_RS485_READ_DISCRETE_INPUTS_MSG0": "read discrete inputs",
    "HAT_RS485_READ_DISCRETE_INPUTS_MSG1": "slave address (0 ~ 247)",
    "HAT_RS485_READ_DISCRETE_INPUTS_MSG2": "starting address (0 ~ 9999)",
    "HAT_RS485_READ_DISCRETE_INPUTS_MSG3": "input quantity",
    "HAT_RS485_READ_DISCRETE_INPUTS_MSG4": "timeout",
    "HAT_RS485_READ_DISCRETE_INPUTS_MSG5": "(return list)",
    "HAT_RS485_READ_HOLDING_REGISTERS_MSG0": "read holding registers",
    "HAT_RS485_READ_HOLDING_REGISTERS_MSG1": "slave address (0 ~ 247)",
    "HAT_RS485_READ_HOLDING_REGISTERS_MSG2": "starting address (0 ~ 9999)",
    "HAT_RS485_READ_HOLDING_REGISTERS_MSG3": "register quantity",
    "HAT_RS485_READ_HOLDING_REGISTERS_MSG4": "signed",
    "HAT_RS485_READ_HOLDING_REGISTERS_MSG5": "timeout",
    "HAT_RS485_READ_HOLDING_REGISTERS_MSG6": "(return list)",
    "HAT_RS485_READ_INPUT_REGISTERS_MSG0": "read input registers",
    "HAT_RS485_READ_INPUT_REGISTERS_MSG1": "slave address (0 ~ 247)",
    "HAT_RS485_READ_INPUT_REGISTERS_MSG2": "starting address (0 ~ 9999)",
    "HAT_RS485_READ_INPUT_REGISTERS_MSG3": "register quantity",
    "HAT_RS485_READ_INPUT_REGISTERS_MSG4": "signed",
    "HAT_RS485_READ_INPUT_REGISTERS_MSG5": "timeout",
    "HAT_RS485_READ_INPUT_REGISTERS_MSG6": "(return list)",
    "HAT_RS485_WRITE_SINGLE_COIL_MSG0": "write single coil",
    "HAT_RS485_WRITE_SINGLE_COIL_MSG1": "slave address (0 ~ 247)",
    "HAT_RS485_WRITE_SINGLE_COIL_MSG2": "output address (0 ~ 9999)",
    "HAT_RS485_WRITE_SINGLE_COIL_MSG3": "output",
    "HAT_RS485_WRITE_SINGLE_COIL_MSG4": "timeout",
    "HAT_RS485_WRITE_SINGLE_REGISTER_MSG0": "write single register",
    "HAT_RS485_WRITE_SINGLE_REGISTER_MSG1": "slave address (0 ~ 247)",
    "HAT_RS485_WRITE_SINGLE_REGISTER_MSG2": "register address (0 ~ 9999)",
    "HAT_RS485_WRITE_SINGLE_REGISTER_MSG3": "register value",
    "HAT_RS485_WRITE_SINGLE_REGISTER_MSG4": "signed",
    "HAT_RS485_WRITE_SINGLE_REGISTER_MSG5": "timeout",
    "HAT_RS485_WRITE_MULTIPLE_COILS_MSG0": "write multiple coils",
    "HAT_RS485_WRITE_MULTIPLE_COILS_MSG1": "slave address (0 ~ 247)",
    "HAT_RS485_WRITE_MULTIPLE_COILS_MSG2": "starting address (0 ~ 9999)",
    "HAT_RS485_WRITE_MULTIPLE_COILS_MSG3": "output value",
    "HAT_RS485_WRITE_MULTIPLE_COILS_MSG4": "timeout",
    "HAT_RS485_WRITE_MULTIPLE_REGISTER_MSG0": "write multiple register",
    "HAT_RS485_WRITE_MULTIPLE_REGISTER_MSG1": "slave address (0 ~ 247)",
    "HAT_RS485_WRITE_MULTIPLE_REGISTER_MSG2": "starting address (0 ~ 9999)",
    "HAT_RS485_WRITE_MULTIPLE_REGISTER_MSG3": "register value",
    "HAT_RS485_WRITE_MULTIPLE_REGISTER_MSG4": "signed",
    "HAT_RS485_WRITE_MULTIPLE_REGISTER_MSG5": "timeout",
    "HAT_RS485_READ_INTO_BUF_MSG0": "%1 read into buf %2",
    "HAT_RS485_SEND_BREAK_MSG0": "%1 send break single",
    "HAT_RS485_FLUSH_MSG0": "%1 flush",
    "HAT_RS485_TXDONE_MSG0": "%1 is transfer done (return True or False)",
    "HAT_VIBRATOR_INIT_MSG0": "%1 初期化",
    "HAT_VIBRATOR_DEINIT_MSG0": "%1 deinit",
    "HAT_VIBRATOR_TURN_OFF_MSG0": "%1 振動を停止",
    "HAT_VIBRATOR_SET_FREQ_MSG0": "%1 周波数(10 ~ 55)を %2 に設定",
    "HAT_VIBRATOR_SET_DUTY_MSG0": "%1 デューティ比を %2 %に設定",
    "HAT_VIBRATOR_SET_ONCE_MSG0": "一度だけ実行",
    "HAT_VIBRATOR_SET_ONCE_MSG1": "周波数(10 ~ 55 Hz)",
    "HAT_VIBRATOR_SET_ONCE_MSG2": "デューティ比 (%)",
    "HAT_VIBRATOR_SET_ONCE_MSG3": "期間 (ms)",
    "HAT_YUN_INIT_MSG0": "%1 初期化",
    "HAT_YUN_GET_BMP280_TEMPERATURE_MSG0": "%1 BMP280の温度を取得(°C, return float)",
    "HAT_YUN_GET_SHT20_TEMPERATURE_MSG0": "%1 SHT20の温度を取得(°C, return float)",
    "HAT_YUN_GET_PRESSURE_MSG0": "%1 気圧を取得(hPa, return float)",
    "HAT_YUN_GET_HUMIDITY_MSG0": "%1 湿度を取得(%, return float)",
    "HAT_YUN_GET_LIGHT_BRIGHTNESS_MSG0": "%1 光センサー(ADC)の値を取得(return int)",
    "HAT_YUN_FILL_COLOR_MSG0": "%1 RGB LEDを全て色 %2 に設定",
    "HAT_YUN_SET_COLOR_MSG0": "%1 %2 番目のRGB LEDを色 %3 で設定",
    "HAT_SERVOS8V11_INIT_MSG0": "Init %1 I2C address %2",
    "HAT_SERVOS8V11_GET_POWER_STATE_MSG0": "get %1 power state",
    "HAT_SERVOS8V11_POWER_CTRL_MSG0": "%1 set power state %2",
    "HAT_SERVOS8V11_ON_MSG0": "%1 power on",
    "HAT_SERVOS8V11_OFF_MSG0": "%1 power off",
    "HAT_SERVOS8V11_WRITE_ANGLE_MSG0": "%1 set channel %2 servo angle %3 (0 ~ 180)",
    "HAT_SERVOS8V11_WRITE_PULSE_MSG0": "%1 set channel %2 servo pulse %3 (500 ~ 2500)",
    "HAT_SERVOS8V11_READ_ANGLE_MSG0": "read %1 channel %2 servo angle (return 0 ~ 180)",
    "HAT_SERVOS8V11_READ_PULSE_MSG0": "read %1 channel %2 servo pulse (return 500 ~ 2500)",
    "HAT_MINIENCODERC_INIT_MSG0": "%1 I2Cアドレス(0x08 ~ 0x77) %2 で初期化",
    "HAT_MINIENCODERC_GET_ROTARY_STATUS_MSG0": "%1 ロータリーの状態(return True or False)",
    "HAT_MINIENCODERC_GET_ROTARY_VALUE_MSG0": "%1 ロータリーの値(return int)",
    "HAT_MINIENCODERC_GET_INCREMENTS_MSG0": "%1 ロータリーの増減値(return int)",
    "HAT_MINIENCODERC_GET_BUTTON_STATUS_MSG0": "%1 ボタンスイッチの状態(return int)",
    "HAT_MINIENCODERC_RESET_VALUE_MSG0": "%1 値をリセット",
    "HAT_MINIENCODERC_FILL_COLOR_MSG0": "%1 RGB LEDを色 %2 で設定",
    "HAT_MINIENCODERC_SET_ADDRESS_MSG0": "%1 I2Cアドレス(0x08 ~ 0x77)を %2 に設定",
    "HAT_MINIENCODERC_SET_ROTARY_VALUE_MSG0": "%1 ロータリーの値を設定",
    "HAT_MINIENCODERC_READ_FW_VERSION_MSG0": "%1 ファームウエアのバージョン(return string)",
    "HAT_ENV_INIT_MSG0": "Init %1",
    "HAT_ENV_GET_TEMPERATURE_MSG0": "get %1 temperature (°C, return float)",
    "HAT_ENV_GET_PRESSURE_MSG0": "get %1 pressure (hPa, return float)",
    "HAT_ENV_GET_HUMIDITY_MSG0": "get %1 humidity (%, return float)",
    "HAT_PIR_INIT_MSG0": "%1 を初期化",
    "HAT_PIR_ENABLE_IRQ_MSG0": "%1 IRQを有効化",
    "HAT_PIR_DISABLE_IRQ_MSG0": "%1 IRQを無効化",
    "HAT_PIR_CALLBACK_MSG0": "PIR %1 が %2 の時",
    "HAT_PIR_GET_STATUS_MSG0": "%1 の状態を取得 (return True or False)",
    "HAT_NEOFLASH_INIT_MSG0": "Init %1",
    "HAT_NEOFLASH_SET_PIXEL_MSG0": "%1 set the pixel %2 X %3 Y %4 color %5",
    "HAT_NEOFLASH_SET_PIXELS_MSG0": "%1 set the pixels %2 each element is [x, y, color] %3",
    "HAT_JOYSTICK_INIT_MSG0": "%1 I2Cアドレス %2 で初期化",
    "HAT_JOYSTICK_GET_X_RAW_MSG0": "%1 x軸の生データを取得(return int)",
    "HAT_JOYSTICK_GET_Y_RAW_MSG0": "%1 y軸の生データを取得(return int)",
    "HAT_JOYSTICK_GET_X_MSG0": "%1 x軸の値を取得(return int)",
    "HAT_JOYSTICK_GET_Y_MSG0": "%1 y軸の値を取得(return int)",
    "HAT_JOYSTICK_GET_BUTTON_STATUS_MSG0": "%1 ボタンの状態を取得(return True or False)",
    "HAT_JOYSTICK_SET_SWAP_X_MSG0": "%1 x軸の方向を入れ替え %2",
    "HAT_JOYSTICK_SET_SWAP_Y_MSG0": "%1 y軸の方向を入れ替え %2",
    "HAT_JOYC_INIT_MSG0": "%1 I2Cアドレス %2 で初期化",
    "HAT_JOYC_GET_X_RAW_MSG0": "%1 チャンネル %2 のx軸の生データを取得(return int)",
    "HAT_JOYC_GET_Y_RAW_MSG0": "%1 チャンネル %2 のy軸の生データを>取得 (return int)",
    "HAT_JOYC_GET_X_MSG0": "%1 チャンネル %2 のx軸の値を取得(return int)",
    "HAT_JOYC_GET_Y_MSG0": "%1 チャンネル %2 のy軸の値を取得(return int)",
    "HAT_JOYC_GET_BUTTON_STATUS_MSG0": "%1 チャンネル %2 のボタンの状態を取得(return True or False)",
    "HAT_JOYC_SET_SWAP_X_MSG0": "%1 x軸の方向を入れ替え %2",
    "HAT_JOYC_SET_SWAP_Y_MSG0": "%1 y軸の方向を入れ替え %2",
    "HAT_JOYC_FILL_COLOR_MSG0": "%1 LEDの色を %2 に",
    "HAT_MINIJOYC_INIT_MSG0": "%1 I2Cアドレス %2 (0x08 ~ 0x77)で初期化",
    "HAT_MINIJOYC_GET_X_RAW_MSG0": "%1 x軸の生データを取得(return int)",
    "HAT_MINIJOYC_GET_Y_RAW_MSG0": "%1 y軸の生データを取得(return int)",
    "HAT_MINIJOYC_GET_X_MSG0": "%1 x軸の値を取得(return int)",
    "HAT_MINIJOYC_GET_Y_MSG0": "%1 y軸の値を取得(return int)",
    "HAT_MINIJOYC_GET_BUTTON_STATUS_MSG0": "%1 ボタンの状態を取得(return True or False)",
    "HAT_MINIJOYC_SET_SWAP_X_MSG0": "%1 x軸の方向を入れ替え %2",
    "HAT_MINIJOYC_SET_SWAP_Y_MSG0": "%1 y軸の方向を入れ替え %2",
    "HAT_MINIJOYC_GET_FIRMWARE_VERSION_MSG0": "%1 ファームウエアバージョンを取得",
    "HAT_MINIJOYC_SET_I2C_ADDRESS_MSG0": "%1 I2Cアドレスを %2 (0x08 ~ 0x77)に設定",
    "HAT_THERMAL_INIT_MSG0": "Init %1 I2C address %2",
    "HAT_THERMAL_GET_MAX_TEMPERATURE_MSG0": "get %1 maximum temperature in pixel array (return float)",
    "HAT_THERMAL_GET_MIN_TEMPERATURE_MSG0": "get %1 minimum temperature in pixel array (return float)",
    "HAT_THERMAL_GET_MIDPOINT_TEMPERATURE_MSG0": "get %1 midpoint temperature in pixel array (return float)",
    "HAT_THERMAL_GET_PIXEL_TEMPERATURE_MSG0": "get %1 temperature in pixel array x %2 y %3 position (return float)",
    "HAT_THERMAL_GET_TEMPERATURE_BUFFER_MSG0": "get %1 pixel array buffer (return list)",
    "HAT_THERMAL_GET_REFRESH_RATE_MSG0": "get %1 refresh rate in Hz (return int)",
    "HAT_THERMAL_SET_REFRESH_RATE_MSG0": "%1 set refresh rate %2 in Hz",
    "HAT_THERMAL_UPDATE_TEMPERATURE_BUFFER_MSG0": "%1 update temperature pixel buffer (in loop)",
    "HAT_SERVO_INIT_MSG0": "%1 初期化",
    "HAT_SERVO_SET_DUTY_MSG0": "%1 デューティサイクルを %2 (26 ~ 127)に設定",
    "HAT_SERVO_SET_PERCENT_MSG0": "%1 回転比率を %2 (0 ~ 100)に設定",
    "HAT_SERVO_SET_ANGLE_MSG0": "%1 回転角度を %2 (0 ~ 145)に設定",
    "HAT_SERVO_DEINIT_MSG0": "%1 deinit",
    "HAT_FINGER_INIT_MSG0": "Init %1 UART ID %2",
    "HAT_FINGER_SLEEP_MSG0": "%1 sleep",
    "HAT_FINGER_DELETE_USER_MSG0": "%1 delete user %2 (0 ~ 149)",
    "HAT_FINGER_DELETE_ALL_USER_MSG0": "%1 delete all user",
    "HAT_FINGER_GET_ADD_MODE_MSG0": "get %1 add mode (return 0 or 1)",
    "HAT_FINGER_SET_ADD_MODE_MSG0": "Set %1 add mode %2",
    "HAT_FINGER_GET_USER_COUNT_MSG0": "get %1 user count",
    "HAT_FINGER_GET_USER_CAPACITY_MSG0": "get %1 user capacity",
    "HAT_FINGER_GET_MATCH_LEVEL_MSG0": "get %1 match level (return 0~9)",
    "HAT_FINGER_SET_MATCH_LEVEL_MSG0": "Set %1 match level %2 (0 ~ 9)",
    "HAT_FINGER_COMPARE_ID_MSG0": "%1 compare user %2 (0 ~ 149) (return True or False)",
    "HAT_FINGER_COMPARE_FINGER_MSG0": "%1 compare finger (return -1 or 0~149)",
    "HAT_FINGER_GET_USER_LIST_MSG0": "get %1 user list",
    "HAT_FINGER_GET_USER_INFO_MSG0": "get %1 user %2 (0 ~ 149) info (return None or tuple)",
    "HAT_FINGER_GET_USER_PERMISSION_MSG0": "get %1 user %2 (0 ~ 149) permission (return -1 or 1,2,3)",
    "HAT_FINGER_GET_USER_CHARACTERISTIC_MSG0": "get %1 user %2 (0 ~ 149) characteristic",
    "HAT_FINGER_ADD_USER_RETURN_MSG0": "%1 add user %2 (0 ~ 149) permission %3 (return -1 or 0~149)",
    "HAT_FINGER_ADD_USER_MSG0": "%1 add user %2 (0 ~ 149) permission %3",
    "HAT_FINGER_ADD_USER_INFO_MSG0": "%1 add user %2 (0 ~ 149) permission %3 characteristic %4",
    "HAT_CARDKB_INIT_MSG0": "Init %1 I2C address %2",
    "HAT_CARDKB_GET_KEY_MSG0": "get %1 key value (return int)",
    "HAT_CARDKB_GET_STRING_MSG0": "get %1 key string (return string)",
    "HAT_CARDKB_IS_PRESSED_MSG0": "has %1 pressed (return True or False)",
    "HAT_CARDKB_KEYCODE_MSG0": "KeyCode %1",
    "HAT_CARDKB_CALLBACK_MSG0": "When keyboard %1 was pressed",
    "HAT_CARDKB_TICK_MSG0": "%1 update in loop",
    "HAT_HEART_INIT_MSG0": "%1 をI2Cアドレス %2 で初期化",
    "HAT_HEART_STOP_MSG0": "%1 停止",
    "HAT_HEART_START_MSG0": "%1 開始",
    "HAT_HEART_DEINIT_MSG0": "%1 deinit",
    "HAT_HEART_GET_HEART_RATE_MSG0": "%1 の心拍数(return int)を取得",
    "HAT_HEART_GET_SPO2_MSG0": "%1 のSpO2値(return int)を取得",
    "HAT_HEART_GET_IR_MSG0": "%1 のIR LED値(return int)を取得",
    "HAT_HEART_GET_RED_MSG0": "%1 の赤色LED値(return int)を取得",
    "HAT_HEART_SET_MODE_MSG0": "%1 のモードを %2 に設定",
    "HAT_HEART_SET_LED_CURRENT_MSG0": "%1 のLED電流を %2 IR電流を %3 に設定",
    "HAT_HEART_SET_PULSE_WIDTH_MSG0": "%1 のパルス幅を %2 に設定",
    "HAT_HEART_SET_SAMPLING_RATE_MSG0": "%1 のサンプリングレートを %2 に設定",
    "HAT_SPK_INIT_MSG0": "%1 初期化",
    "HAT_SPK_STOP_MSG0": "%1 演奏を停止",
    "HAT_SPK_BEGIN_MSG0": "%1 開始",
    "HAT_SPK_END_MSG0": "%1 終了",
    "HAT_SPK_IS_RUNNING_MSG0": "%1 実行されている",
    "HAT_SPK_IS_ENABLED_MSG0": "%1 有効である",
    "HAT_SPK_IS_PLAYING_MSG0": "%1 演奏されている",
    "HAT_SPK_GET_VOLUME_MSG0": "%1 音量を取得(return 0~255)",
    "HAT_SPK_GET_VOLUME_PERCENTAGE_MSG0": "%1 音量をパーセントで取得(return float)",
    "HAT_SPK_BEGIN_RETURN_MSG0": "%1 開始(return True or False)",
    "HAT_SPK_GET_PLAYING_CHANNELS_MSG0": "%1 演奏しているチャンネルを取得(return int)",
    "HAT_SPK_TONE_MSG0": "%1 周波数 %2 で %3 トーンを演奏",
    "HAT_SPK_PLAY_WAV_MSG0": "%1 WAV形式(bytearray / bytes) %2 を演奏",
    "HAT_SPK_PLAY_RAW_MSG0": "%1 PCM形式(bytearray / bytes) %2 をサンプリングレート %3 で演奏",
    "HAT_SPK_SET_VOLUME_MSG0": "%1 音量を %2 (0 ~ 255)に設定",
    "HAT_SPK_SET_VOLUME_PERCENTAGE_MSG0": "%1 音量を %2 % に設定",
    "HAT_SPK_SET_ALL_CHANNEL_VOLUME_MSG0": "%1 全てのチャンネルのボリューム(0 ~ 255)を %2 に設定",
    "HAT_SPK_SET_CHANNEL_VOLUME_MSG0": "%1 チャンネル %2 の音量を %3 (0 ~ 255)に設定",
    "HAT_SPK_GET_CHANNEL_VOLUME_MSG0": "%1 チャンネル %2 の音量を取得(return int)",
    "HAT_SPK_PLAY_RAW_RETURN_MSG0": "%1 PCM形式(bytearray / bytes) %2 サンプリングレート %3 を演奏(return True or False)",
    "HAT_SPK_PLAYWAV_FILE_MSG0": "%1 WAVファイル %2 %3 を演奏",
    "HAT_SPK2_INIT_MSG0": "Init %1",
    "HAT_SPK2_STOP_MSG0": "%1 play stop",
    "HAT_SPK2_BEGIN_MSG0": "%1 begin",
    "HAT_SPK2_END_MSG0": "%1 end",
    "HAT_SPK2_IS_RUNNING_MSG0": "%1 is running (return True or False)",
    "HAT_SPK2_IS_ENABLED_MSG0": "%1 is enabled (return True or False)",
    "HAT_SPK2_IS_PLAYING_MSG0": "%1 is playing (return True or False)",
    "HAT_SPK2_GET_VOLUME_MSG0": "%1 get volume (return 0~255)",
    "HAT_SPK2_GET_VOLUME_PERCENTAGE_MSG0": "%1 get volume percentage (return float)",
    "HAT_SPK2_BEGIN_RETURN_MSG0": "%1 begin (return True or False)",
    "HAT_SPK2_GET_PLAYING_CHANNELS_MSG0": "%1 get playing channels (return int)",
    "HAT_SPK2_TONE_MSG0": "%1 play tone freq %2 millisecond %3",
    "HAT_SPK2_PLAY_WAV_MSG0": "%1 play WAV (bytearray / bytes) %2",
    "HAT_SPK2_PLAY_RAW_MSG0": "%1 play PCM (bytearray / bytes) %2 sample rate (Hz) %3",
    "HAT_SPK2_SET_VOLUME_MSG0": "%1 set volume %2 (0 ~ 255)",
    "HAT_SPK2_SET_VOLUME_PERCENTAGE_MSG0": "%1 set volume %2 %",
    "HAT_SPK2_SET_ALL_CHANNEL_VOLUME_MSG0": "%1 set all channel volume %2 (0 ~ 255)",
    "HAT_SPK2_SET_CHANNEL_VOLUME_MSG0": "%1 set channel %2 volume %3 (0 ~ 255)",
    "HAT_SPK2_GET_CHANNEL_VOLUME_MSG0": "%1 get channel %2 volume (return int)",
    "HAT_SPK2_PLAY_RAW_RETURN_MSG0": "%1 play PCM (bytearray / bytes) %2 sample rate (Hz) %3 (return True or False)",
    "HAT_SPK2_PLAYWAV_FILE_MSG0": "%1 play WAV file %2 %3",
    "OPENMV_SENSOR_RESET_MSG0": "Reset camera sensor",
    "OPENMV_SENSOR_INIT_MSG0": "Init camera sensor",
    "OPENMV_SENSOR_SET_PIXFORMAT_MSG0": "Set the camera pixel format to %1",
    "OPENMV_SENSOR_SET_FRAMESIZE_MSG0": "Set the camera frame size to %1",
    "OPENMV_SENSOR_SET_CONTRAST_MSG0": "Set the camera image contrast to %1 (-3 ~ 3)",
    "OPENMV_SENSOR_SET_BRIGHTNESS_MSG0": "Set the camera image brightness to %1 (-3 ~ 3)",
    "OPENMV_SENSOR_SET_SATURATION_MSG0": "Set the camera image saturation to %1 (-3 ~ 3)",
    "OPENMV_SENSOR_SET_GAINCEILING_MSG0": "Set the camera image gainceiling to %1",
    "OPENMV_SENSOR_SET_QUALITY_MSG0": "Set the camera image JPEG compression quality to %1 (0 ~ 100)",
    "OPENMV_SENSOR_SET_COLORBAR_MSG0": "Turns color bar mode %1",
    "OPENMV_SENSOR_SET_AUTO_EXPOSURE_MSG0": "Turns auto exposure control %1 with fixed exposure time %2 (us)",
    "OPENMV_SENSOR_SET_AUTO_WHITEBAL_MSG0": "Turns auto white balance %1 with fixed gain in decibels for the R %2 G %3 B %4",
    "OPENMV_SENSOR_SET_HMIRROR_MSG0": "Turns horizontal mirror mode %1",
    "OPENMV_SENSOR_SET_VFLIP_MSG0": "Turns vertical flip mode %1",
    "OPENMV_SENSOR_SNAPSHOT_MSG0": "takes a picture using the camera",
    "OPENMV_IMAGE_HAARCASCADE_MSG0": "Create HaarCascade detector with path %1 and stages %2",
    "OPENMV_IMAGE_MATCH_DESCRIPTOR_MSG0": "match LBP descriptors %1 descritor0 %2 descriptor1 %3 threshold %4 (return int)",
    "OPENMV_IMAGE_DRAW_CROSS_MSG0": "%1 draw cross with %2 x %3 y %4 color %5 size %6 thickness %7",
    "OPENMV_IMAGE_DRAW_KEYPOINTS_MSG0": "%1 draw keypoints with %2 keypoints %3 color %4 size %5 thickness %6 fill %7",
    "OPENMV_IMAGE_FIND_FEATURES_MSG0": "%1 find features with %2 Haar Cascade object %3 threshold %4 scale %5 (return tuple)",
    "OPENMV_IMAGE_FIND_KEYPOINTS_MSG0": "%1 find keypoints with %2 region-of-interest %3 threshold %4 normalized %5 scale factor %6 max keypoints %7 corner detector %8",
    "OPENMV_IMAGE_DRAW_STRING_MSG0": "%1 文字列を描画 %2 x %3 y %4 テキスト %5 色 %6 スケール %7",
    "OPENMV_IMAGE_DRAW_RECTANGLE_MSG0": "%1 長方形を描画 %2 x %3 y %4 幅 %5 高さ %6 色 %7 線の太さ %8 塗りつぶし %9",
    "OPENMV_IMAGE_DRAW_LINE_MSG0": "%1 線を描画 %2 x0 %3 y0 %4 x1 %5 y1 %6 色 %7 線の太さ %8",
    "OPENMV_IMAGE_DRAW_CIRCLE_MSG0": "%1 円を描画 %2 x %3 y %4 半径 %5 色 %6 線の太さ %7 塗りつぶし %8",
    "OPENMV_IMAGE_GET_WIDTH_MSG0": "%1 画像の幅(pixel)",
    "OPENMV_IMAGE_GET_HEIGHT_MSG0": "%1 画像の高さ(pixel)",
    "OPENMV_IMAGE_GET_FORMAT_MSG0": "%1 画像フォーマット",
    "OPENMV_IMAGE_GET_SIZE_MSG0": "%1 画像の大きさ",
    "OPENMV_IMAGE_GET_BYTEARRAY_MSG0": "%1 画像のbytearray",
    "OPENMV_IMAGE_FORMAT_OPTION_MSG0": "画像フォーマット %1",
    "OPENMV_LCD_DISPLAY_WRITE_MSG0": "Display write %1 with x scale %2 and y scale %3",
    "OPENMV_CAMERA_INIT_MSG0": "カメラを初期化 %1 画像フォーマット %2 フレームサイズ %3",
    "OPENMV_CAMERA_INIT2_MSG0": "Init camera (for AtomS3R-M12) with %1 pixel format %2 frame size %3",
    "OPENMV_CAMERA_SNAPSHOT_MSG0": "カメラ画像のスナップショット",
    "OPENMV_CAMERA_SET_HMIRROR_MSG0": "カメラの水平方向のミラー状態を設定 %1",
    "OPENMV_CAMERA_SET_VFLIP_MSG0": "カメラの垂直方向の反転状態を設定 %1",
    "OPENMV_CAMERA_GET_HMIRROR_MSG0": "カメラの水平方向のミラー状態を取得 (return True or False)",
    "OPENMV_CAMERA_GET_VFLIP_MSG0": "カメラの垂直方向の反転状態を取得 (return True or False)",
    "OPENMV_ESPDL_CREATE_OBJECT_DETECTORT_MSG0": "create ESP-DL detector object with %1 model",
    "OPENMV_ESPDL_DETECTOR_GET_RESULT_MSG0": "ESP-DL detector %1 inference %2 (return list)",
    "OPENMV_ESPDL_DETECTOR_RESULT_GET_BBOX_MSG0": "get bounding box result %1 (return tuple, [x, y, width, height])",
    "OPENMV_ESPDL_DETECTOR_RESULT_GET_X_MSG0": "get x of the bounding box result %1 (return int)",
    "OPENMV_ESPDL_DETECTOR_RESULT_GET_Y_MSG0": "get y of the bounding box result %1 (return int)",
    "OPENMV_ESPDL_DETECTOR_RESULT_GET_W_MSG0": "get width of the bounding box result %1 (return int)",
    "OPENMV_ESPDL_DETECTOR_RESULT_GET_H_MSG0": "get height of the bounding box result %1 (return int)",
    "OPENMV_ESPDL_DETECTOR_RESULT_GET_CATEGORY_MSG0": "get category result %1 (return int)",
    "OPENMV_ESPDL_DETECTOR_RESULT_GET_KEYPOINT_MSG0": "get keypoint result %1 (return tuple)",
    "OPENMV_ESPDL_DETECTOR_RESULT_GET_SCORE_MSG0": "get score result %1 (return 0.0 ~ 1.0)",
    "OPENMV_ESPDL_DETECTOR_RESULT_GET_METHOD_MSG0": "get %2 result %1",
    "OPENMV_ESPDL_DETECTOR_RESULT_GET_METHOD_MSG1": "(return tuple, [x, y, width, height])",
    "OPENMV_ESPDL_DETECTOR_RESULT_GET_METHOD_MSG2": "(return int)",
    "OPENMV_ESPDL_DETECTOR_RESULT_GET_METHOD_MSG3": "(return tuple)",
    "OPENMV_ESPDL_DETECTOR_RESULT_GET_METHOD_MSG4": "(return 0.0 ~ 1.0)",
    "OPENMV_ESPDL_CREATE_FACE_RECOGNIZER_MSG0": "create ESP-DL human face recognizer object",
    "OPENMV_ESPDL_RECOGNIZER_DELETE_ID_MSG0": "recognizer %1 delete id %2",
    "OPENMV_ESPDL_RECOGNIZER_DELETE_LAST_ID_MSG0": "recognizer %1 delete last id",
    "OPENMV_ESPDL_RECOGNIZER_ENROLL_ID_MSG0": "recognizer %1 enroll id with %2 image %3 keypoint %4",
    "OPENMV_ESPDL_RECOGNIZER_CLEAR_ID_MSG0": "recognizer %1 clear id",
    "OPENMV_ESPDL_RECOGNIZER_ENROLLED_ID_NUM_MSG0": "get recognizer %1 enrolled id num",
    "OPENMV_ESPDL_RECOGNIZER_GET_RESULT_MSG0": "get recognizer %1 result with %2 image %3 keypoint %4",
    "OPENMV_ESPDL_RECOGNIZER_RESULT_GET_SIMILARITY_MSG0": "recognizer result %1 get similarity (return 0.0 ~ 1.0)",
    "OPENMV_ESPDL_RECOGNIZER_RESULT_GET_ID_MSG0": "recognizer result %1 get id (return int)",
    "OPENMV_CODE_SCANNER_FIND_QRCODES_MSG0": "QRコードを画像 %1 から探す",
    "OPENMV_CODE_SCANNER_PAYLOAD_MSG0": "%1 ペイロードを取得(return string)",
    "OPENMV_CODE_SCANNER_TYPE_NAME_MSG0": "%1 コード種類名を取得 (return string)",
    "OPENMV_JPG_ENCODE_MSG0": "%1 をJPGに品質 %2 (1~100)でエンコード",
    "OPENMV_JPG_DECODE_MSG0": "%1 をRGB565にデコード",
    "ADVANCED_USB_KEYBOARD_INIT_MSG0": "%1 キーボードを初期化",
    "ADVANCED_USB_KEYBOARD_IS_OPEN_MSG0": "%1 オープンされているか?",
    "ADVANCED_USB_KEYBOARD_SEND_REPORT_MSG0": "%1 報告を送る(Send Report)",
    "ADVANCED_USB_KEYBOARD_INPUT_MSG0": "%1 %2 を入力",
    "ADVANCED_USB_KEYBOARD_SET_MODIFIERS_MSG0": "%1 修飾キーを設定 %2 右GUI %3 右Alt %4 右Shift %5 右Ctrl %6 左GUI %7 左Alt %8 左Shift %9 左Ctrl %10",
    "ADVANCED_USB_KEYBOARD_SET_KEYS_MSG0": "%1 キーを設定 %2 key1 %3 key2 %4 key3 %5 key4 %6 key5 %7 key6 %8",
    "ADVANCED_USB_KEYBOARD_KEYCODE_MSG0": "キーコード %1",
    "ADVANCED_USB_MOUSE_INIT_MSG0": "%1 マウスを初期化",
    "ADVANCED_USB_MOUSE_IS_OPEN_MSG0": "%1 オープンされているか?",
    "ADVANCED_USB_MOUSE_SEND_REPORT_MSG0": "%1 報告を送る(Send Report)",
    "ADVANCED_USB_MOUSE_SET_AXES_MSG0": "%1 カーソルをx %2 (-127~127)  y %3 (-127~127)に設定",
    "ADVANCED_USB_MOUSE_SET_WHEEL_MSG0": "%1 ホイールを %2 (-127~127)に設定",
    "ADVANCED_USB_MOUSE_SET_BUTTON_STATE_MSG0": "%1 ボタンの状態を設定 %2 左ボタン %3 右ボタン %4 中央ボタン %5 進むボタン %6 戻るボタン %7",
    "ADVANCED_USB_MOUSE_MOVE_MSG0": "%1 カーソルを x %2 (-127~127) y %3 (-127~127)に移動",
    "ADVANCED_USB_MOUSE_CLICK_LEFT_MSG0": "%1 左ボタンをクリックして %2",
    "ADVANCED_USB_MOUSE_CLICK_RIGHT_MSG0": "%1 右ボタンをクリックして %2",
    "ADVANCED_USB_MOUSE_CLICK_MIDDLE_MSG0": "%1 中央ボタンをクリックして %2",
    "ADVANCED_USB_MOUSE_CLICK_FORWARD_MSG0": "%1 進むボタンをクリックして %2",
    "ADVANCED_USB_MOUSE_CLICK_BACKWARD_MSG0": "%1 戻るボタンをクリックして %2",
    "ADVANCED_USB_MOUSE_SCROLL_MSG0": "%1 %2 (-127~127)スクロール"
}